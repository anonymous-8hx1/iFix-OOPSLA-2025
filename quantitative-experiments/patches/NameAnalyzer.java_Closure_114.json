{
    "src": "} else {",
    "patches": [
        {
            "patch": "} else { recordDepScope( nameNode , ns ) ;",
            "score": 100.05604463465073,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns ) ;",
            "score": 100.03729607077206,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } else {",
            "score": 99.98485610064338,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "} else if( parent.getNext( ) != n ) {",
            "score": 99.87648010253906,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else recordDepScope( recordNode , ns ) ;",
            "score": 99.82050323486328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } else {",
            "score": 99.61566162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } else ;",
            "score": 99.58686659071181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {",
            "score": 99.57340240478516,
            "correctness": "wrong",
            "tokenized_patch": "} else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else }",
            "score": 99.48617553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { }",
            "score": 99.47491455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } else {",
            "score": 99.96732823988971,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( parent.getParent( ) != n ) {",
            "score": 99.8496322631836,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } else {",
            "score": 99.58837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } else {",
            "score": 99.56854926215277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else {",
            "score": 99.46935017903645,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } }",
            "score": 99.34059651692708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( nameNode , ns ) ;",
            "score": 99.83363342285156,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } } else {",
            "score": 99.57805718315973,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } } }",
            "score": 99.48148600260417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else {",
            "score": 99.47294786241319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else",
            "score": 99.4075215657552,
            "correctness": "uncompilable",
            "tokenized_patch": "} else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { }",
            "score": 99.33766682942708,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , ns ) ;",
            "score": 99.83228352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , ns ) ;",
            "score": 99.81891632080078,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != n ) {",
            "score": 99.7764892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } else",
            "score": 99.76683807373047,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } } else {",
            "score": 99.56679465553977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if } else",
            "score": 99.47806125217014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; } } else {",
            "score": 99.4542236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { }",
            "score": 99.40315464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != null ) {",
            "score": 99.75738525390625,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "49"
        },
        {
            "patch": "} else { recordDepScope( recordNode , n ) ;",
            "score": 99.75306611902573,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; } } else {",
            "score": 99.5614990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else if }",
            "score": 99.45246039496527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.40863591974431,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'c') ; }",
            "score": 99.40863591974431,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a') ; }",
            "score": 99.40863591974431,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'b') ; }",
            "score": 99.40863591974431,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( \"'s value.  \") ; }",
            "score": 99.40863591974431,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } else",
            "score": 99.38077545166016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( recordNode , ns ) ;",
            "score": 99.79351043701172,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ) ;",
            "score": 99.7501708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( recordNode , ns ) ;",
            "score": 99.74918365478516,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != null ) {",
            "score": 99.73213195800781,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( nameNode ) ; } else {",
            "score": 99.72307942708333,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } } else",
            "score": 99.44219292534723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } } else {",
            "score": 99.40148315429687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } }",
            "score": 99.30126190185547,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else {",
            "score": 99.26072184244792,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( recordNode , ns ) ;",
            "score": 99.77825520833333,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , n ) ;",
            "score": 99.74866440716912,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( recordNode , ns ) ;",
            "score": 99.748291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) ) {",
            "score": 99.71616036551339,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; } else {",
            "score": 99.701904296875,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} } else { return ; } } else {",
            "score": 99.55429909446023,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return false ;",
            "score": 99.44042290581598,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != null ) {",
            "score": 99.39790649414063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else }",
            "score": 99.25567626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } }",
            "score": 99.23110961914062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) != n )",
            "score": 99.77231014476104,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n.getParent( ) ; } else {",
            "score": 99.70777130126953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , n ) ; } else {",
            "score": 99.69995835248162,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else ;",
            "score": 99.42803192138672,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } else {",
            "score": 99.39141167534723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else",
            "score": 99.24273681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else { }",
            "score": 99.22450256347656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( nameNode , ns ) ; }",
            "score": 99.76469152113971,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } else",
            "score": 99.71653747558594,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForIn( ) ) {",
            "score": 99.70013427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { break ; } } else {",
            "score": 99.51838822798295,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else { }",
            "score": 99.42336018880208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null ) {",
            "score": 99.39024047851562,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } if else { }",
            "score": 99.21458217075893,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ) ;",
            "score": 99.71942545572917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != n ) {",
            "score": 99.69599914550781,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.isForIn( parent ) ) {",
            "score": 99.68464929917279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else if }",
            "score": 99.42207845052083,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; } }",
            "score": 99.38060167100694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if else {",
            "score": 99.19627380371094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else",
            "score": 99.16828264508929,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ;",
            "score": 99.7628925030048,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( nameNode , ns ) ;",
            "score": 99.71324055989584,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; *",
            "score": 99.68262532552083,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { break ; } } else {",
            "score": 99.4889803799716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } }",
            "score": 99.4030990600586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof Node ) {",
            "score": 99.373876953125,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent instanceof Node ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { } {",
            "score": 99.17601521809895,
            "correctness": "wrong",
            "tokenized_patch": "} else { } {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} } if else { } else",
            "score": 99.16067504882812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , ns ) ; }",
            "score": 99.70949419806985,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ; } } else {",
            "score": 99.68236586626838,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != n ) {",
            "score": 99.67953055245536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; } } else {",
            "score": 99.48511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else ; }",
            "score": 99.40231662326389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; } else {",
            "score": 99.36656605113636,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else {",
            "score": 99.17226736886161,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } {",
            "score": 99.14932250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , node ) ;",
            "score": 99.75731703814338,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForIn( parent ) ) {",
            "score": 99.67320341222427,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ;",
            "score": 99.66009521484375,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} { { return ; } } } else {",
            "score": 99.47362171519886,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } if }",
            "score": 99.40079752604167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'AstChangeProxy::getRhs '} }",
            "score": 99.3573330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'c'} }",
            "score": 99.3573330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'a'} }",
            "score": 99.3573330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'b'} }",
            "score": 99.3573330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( \"'s value.  \"} }",
            "score": 99.3573330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } }",
            "score": 99.14258829752605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , node ) ;",
            "score": 99.74641687729779,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != ns ) {",
            "score": 99.66426086425781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , parent ) ; } else {",
            "score": 99.65736299402573,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isForIn( parent ) ) {",
            "score": 99.61810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; } } else {",
            "score": 99.47161310369319,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } else }",
            "score": 99.38349745008681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { return ; } }",
            "score": 99.35125122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else {",
            "score": 99.14237467447917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , ns ) ; }",
            "score": 99.69292853860294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , ns ) ; }",
            "score": 99.65829467773438,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; *",
            "score": 99.65690104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ;",
            "score": 99.61125837053571,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} { else { return ; } } else {",
            "score": 99.470947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { if }",
            "score": 99.37405056423611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } } else {",
            "score": 99.35091824001736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if else ;",
            "score": 99.14158630371094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else {",
            "score": 99.13469587053571,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , parent ) ;",
            "score": 99.68770105698529,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; }",
            "score": 99.65559895833333,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != null ) {",
            "score": 99.65377807617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; } } else {",
            "score": 99.46082221137152,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( else ;",
            "score": 99.37375217013889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; } }",
            "score": 99.34891357421876,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else {",
            "score": 99.14064534505208,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , ns ) ;",
            "score": 99.7357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , false ) ;",
            "score": 99.68235868566177,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; }",
            "score": 99.65367024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.getParent( ) != n ) {",
            "score": 99.65214538574219,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { break ; } } } else {",
            "score": 99.43512517755681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } else {",
            "score": 99.37188720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != null )",
            "score": 99.33476426866319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else {",
            "score": 99.1220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( recordNode , ns ) ; }",
            "score": 99.73276654411765,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getParent( ) != n ) {",
            "score": 99.65016174316406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; } } else {",
            "score": 99.64841595818015,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": recordDepScope( recordNode , ns ) ;",
            "score": 99.58798828125,
            "correctness": "uncompilable",
            "tokenized_patch": ": record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { } } } else {",
            "score": 99.42823375355114,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if } }",
            "score": 99.36728922526042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / / /",
            "score": 99.1233901977539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } /",
            "score": 99.12142944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , ns ) ;",
            "score": 99.68043619791666,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "} else if( n.getNext( ) != n ) {",
            "score": 99.64939880371094,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { break ; } } } else {",
            "score": 99.41851196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { if }",
            "score": 99.36636013454861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof Node )",
            "score": 99.31764051649306,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else { }",
            "score": 99.1230697631836,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else { }",
            "score": 99.12098693847656,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , parent ) ;",
            "score": 99.67841653262867,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) == n ) {",
            "score": 99.64582824707031,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) == n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "recordDepScope( recordNode , n ) ; } else {",
            "score": 99.64068244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( n ) ) {",
            "score": 99.56865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return } } } else {",
            "score": 99.4180908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else return {",
            "score": 99.36338297526042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new } } else {",
            "score": 99.31726684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } }",
            "score": 99.11824035644531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else { }",
            "score": 99.11170196533203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , t ) ;",
            "score": 99.72313017003677,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent ) ; } } else {",
            "score": 99.6402228860294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) == n ) {",
            "score": 99.63972473144531,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) == n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { return else ; } } else {",
            "score": 99.4120760830966,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } else { if }",
            "score": 99.35860188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } } else {",
            "score": 99.31658380681819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { }",
            "score": 99.10648600260417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else {",
            "score": 99.09405517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , ns ) ;",
            "score": 99.67361653645834,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ recordDepScope( recordNode , ns ) ;",
            "score": 99.56653645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "{ record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return false ; } } }",
            "score": 99.4071377840909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if } } }",
            "score": 99.35361056857639,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'AstChangeProxy::getRhs ') ;",
            "score": 99.3139315518466,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'c') ;",
            "score": 99.3139315518466,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'a') ;",
            "score": 99.3139315518466,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'b') ;",
            "score": 99.3139315518466,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( \"'s value.  \") ;",
            "score": 99.3139315518466,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else }",
            "score": 99.10639953613281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns ,",
            "score": 99.6717758178711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isForIn( parent ) ) {",
            "score": 99.63115377987133,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( recordNode , ns ) ; }",
            "score": 99.62654113769531,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( parent ) ) {",
            "score": 99.56448567708334,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if else ;",
            "score": 99.35151502821181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { } } else {",
            "score": 99.311083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else {",
            "score": 99.099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } else {",
            "score": 99.07698822021484,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , ns ) ; }",
            "score": 99.71280670166016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ) ; }",
            "score": 99.66685485839844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.isForIn( parent ) :",
            "score": 99.55333658854167,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For CaMeL In ( parent ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } }",
            "score": 99.40020751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if }",
            "score": 99.34515380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { return ; }",
            "score": 99.30973677201705,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { { }",
            "score": 99.09652709960938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { }",
            "score": 99.06787981305804,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , null ) ;",
            "score": 99.71098058363971,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "209"
        },
        {
            "patch": "} else if( parent.getNext( ) !=0) {",
            "score": 99.62274932861328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( recordNode , ns ) ) {",
            "score": 99.62190515854779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": recordDepScope( nameNode , ns ) ;",
            "score": 99.55208333333333,
            "correctness": "uncompilable",
            "tokenized_patch": ": record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return true ; } } else {",
            "score": 99.39919211647727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else break ;",
            "score": 99.33657497829861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ;",
            "score": 99.0650634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns ,",
            "score": 99.66556549072266,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( nameNode , ns ) ) {",
            "score": 99.62133071001838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != ns ) {",
            "score": 99.61876678466797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , ) ;",
            "score": 99.54462076822917,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } } }",
            "score": 99.39208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } / **/",
            "score": 99.33536105685764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ) ; } }",
            "score": 99.3038662997159,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else {",
            "score": 99.05827985491071,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , ns ) ; }",
            "score": 99.69895935058594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , ns ) ; }",
            "score": 99.65967559814453,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != false ) {",
            "score": 99.61666870117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , nameNode ) ; } else {",
            "score": 99.61515538832721,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( parent ) ) {",
            "score": 99.54078776041666,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } else { {",
            "score": 99.38869406960227,
            "correctness": "wrong",
            "tokenized_patch": "} else { return ; } } else { {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "73"
        },
        {
            "patch": "} else = null ; } else {",
            "score": 99.33137342664931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null )",
            "score": 99.30171712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } }",
            "score": 99.0596435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } } {",
            "score": 99.05598449707031,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != node ) {",
            "score": 99.61397552490234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( NodeUtil.isFor( parent ) ) {",
            "score": 99.61135684742646,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( Node CaMeL Util . is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { break ; } } else {",
            "score": 99.38299005681819,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } ***/",
            "score": 99.33136664496527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope != null ) {",
            "score": 99.30064086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { } }",
            "score": 99.05522155761719,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != parent ) {",
            "score": 99.6128158569336,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != parent ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( recordNode , parent ) ; } else {",
            "score": 99.60751522288604,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , parent ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( null ) ) {",
            "score": 99.53047688802083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( null ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return null ; } } else {",
            "score": 99.38130326704545,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else ; } }",
            "score": 99.33009168836806,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } } else",
            "score": 99.05066680908203,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else if else {",
            "score": 99.04704284667969,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , null ) ;",
            "score": 99.65640079273896,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "209"
        },
        {
            "patch": "recordDepScope( nameNode , t ) ; } else {",
            "score": 99.60742905560662,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ recordDepScope( nameNode , ns ) ;",
            "score": 99.52823079427084,
            "correctness": "uncompilable",
            "tokenized_patch": "{ record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } } } else {",
            "score": 99.3790771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else {",
            "score": 99.32583618164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target != null ) {",
            "score": 99.2935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } }",
            "score": 99.04912458147321,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { recordDepScope( nameNode , ns ) ;",
            "score": 99.69499969482422,
            "correctness": "uncompilable",
            "tokenized_patch": "try { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , t ) ;",
            "score": 99.65244427849265,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getNext( ) != n ) {",
            "score": 99.61263834635416,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = parent.getFirstChild( ) ; } else {",
            "score": 99.6026611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = parent . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent.getNext( ) != n ) {",
            "score": 99.51329752604167,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { { break ; } } }",
            "score": 99.37896728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / ***/",
            "score": 99.32497151692708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( node != null ) {",
            "score": 99.29316850142045,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else",
            "score": 99.04278564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , false ) ;",
            "score": 99.65203498391544,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , recordNode ) ; } else {",
            "score": 99.60197897518383,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , record CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , ) ;",
            "score": 99.50418294270834,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { else {",
            "score": 99.37318250868056,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } catch }",
            "score": 99.31907823350694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { return ; }",
            "score": 99.29231400923295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } }",
            "score": 99.04725864955357,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else }",
            "score": 99.04093933105469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; }",
            "score": 99.69260079520089,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ) ; }",
            "score": 99.65128326416016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != parent ) {",
            "score": 99.60514831542969,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != parent ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if( recordDepScope( parent , ns ) ) {",
            "score": 99.60174919577206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( parent , ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != ) {",
            "score": 99.501806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( } } else {",
            "score": 99.3720370205966,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } , else ;",
            "score": 99.31906467013889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } else { }",
            "score": 99.29082697088069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if else {",
            "score": 99.04385375976562,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else {",
            "score": 99.03236389160156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent.getParent( ) ; } else {",
            "score": 99.60454559326172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ) ; } else {",
            "score": 99.60060221354166,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { break ; } } } else {",
            "score": 99.37043900923295,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } } else {",
            "score": 99.31722683376736,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'AstChangeProxy::getRhs '+ } }",
            "score": 99.28325861150569,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ + } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'c'+ } }",
            "score": 99.28325861150569,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ + } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a'+ } }",
            "score": 99.28325861150569,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ + } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'b'+ } }",
            "score": 99.28325861150569,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ + } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( \"'s value.  \"+ } }",
            "score": 99.28325861150569,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ + } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { } }",
            "score": 99.04153442382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } }",
            "score": 99.60041809082031,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != null ) {",
            "score": 99.59592895507812,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ns != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { return false ; } } } else {",
            "score": 99.3641357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } / */",
            "score": 99.31585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { }",
            "score": 99.03376116071429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } if else {",
            "score": 99.02494049072266,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { recordDepScope( recordNode , ns ) ;",
            "score": 99.67762756347656,
            "correctness": "uncompilable",
            "tokenized_patch": "try { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , true ) ;",
            "score": 99.64298741957721,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != index ) {",
            "score": 99.59332275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != index ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*recordDepScope( recordNode , ns ) ;",
            "score": 99.4951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "* record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return false ; } }",
            "score": 99.3627596768466,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if } else",
            "score": 99.31324598524306,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; } } else {",
            "score": 99.27997436523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { }",
            "score": 99.0325927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else",
            "score": 99.02347412109376,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getNext( ) != n ) {",
            "score": 99.64032341452206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != current ) {",
            "score": 99.59223175048828,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != current ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; } } else {",
            "score": 99.59210205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isFor( parent ) ) {",
            "score": 99.49356783353366,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return true ; } } else {",
            "score": 99.359423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } , false {",
            "score": 99.31260172526042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { return ; }",
            "score": 99.27684326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} }",
            "score": 99.02577718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "} }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else {",
            "score": 99.02159118652344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != n )",
            "score": 99.67518717447916,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else if( parent.getNext( ) != this ) {",
            "score": 99.59058380126953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( } } else {",
            "score": 99.3565185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if } }",
            "score": 99.31054009331598,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { } } else {",
            "score": 99.27546830610795,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } }",
            "score": 99.0257568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } } else",
            "score": 99.00445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , ns ) ;",
            "score": 99.63014322916666,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getParent( ) != n ) {",
            "score": 99.59017508370536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ) ; } } else {",
            "score": 99.58847045898438,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent.getParent( ) != n ) {",
            "score": 99.48684895833334,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} } else { {",
            "score": 99.35619099934895,
            "correctness": "wrong",
            "tokenized_patch": "} } else { {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "73"
        },
        {
            "patch": "} else if } } else ; else",
            "score": 99.31007893880208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } if else {",
            "score": 99.0196304321289,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t ) ;",
            "score": 99.67184682992789,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t ) ; } } else {",
            "score": 99.58766802619485,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isEmpty( ) ) {",
            "score": 99.58733258928571,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . is CaMeL Empty ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if( recordDepScope( ns ) ) {",
            "score": 99.4864013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent != null ) {",
            "score": 99.35572509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else return else",
            "score": 99.30567084418402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else return else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } } } else {",
            "score": 99.26753540039063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } }",
            "score": 99.01701049804687,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', ns ) ;",
            "score": 99.66786295572916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', ns ) ;",
            "score": 99.66786295572916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', ns ) ;",
            "score": 99.66786295572916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', ns ) ;",
            "score": 99.66786295572916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", ns ) ;",
            "score": 99.66786295572916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getParent( ) != n ) {",
            "score": 99.62425321691177,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) !=0) {",
            "score": 99.58582305908203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , n ) ; } else {",
            "score": 99.58553873697916,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ns ) ) {",
            "score": 99.4859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; } } }",
            "score": 99.35062255859376,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else { else",
            "score": 99.30495876736111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if else {",
            "score": 99.01603480747768,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } } else",
            "score": 98.96366119384766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } }",
            "score": 99.58352661132812,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != true ) {",
            "score": 99.58332824707031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if else {",
            "score": 99.29962158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { }",
            "score": 99.01446533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else { }",
            "score": 98.96253967285156,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( newNode , ns ) ;",
            "score": 99.61626838235294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( new CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != node ) {",
            "score": 99.58329010009766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; finally {",
            "score": 99.5831069946289,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } } else {",
            "score": 99.349658203125,
            "correctness": "wrong",
            "tokenized_patch": "{ { return ; } } } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if } } else */",
            "score": 99.29755316840277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { return ; } }",
            "score": 99.2632568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } / /",
            "score": 99.00787353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { }",
            "score": 98.96061488560268,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent ) ;",
            "score": 99.6614520733173,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , ns ) ; }",
            "score": 99.60909271240234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; else {",
            "score": 99.58301544189453,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( nameNode , ns ) ;",
            "score": 99.58161163330078,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = n.getParent( ) ;",
            "score": 99.48235677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; } }",
            "score": 99.34675428602431,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( } } }",
            "score": 99.29564073350694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ; } } else {",
            "score": 99.26174587673611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } { }",
            "score": 99.00331115722656,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { { else",
            "score": 98.95874786376953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , true ) ;",
            "score": 99.66049373851104,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) ) {",
            "score": 99.58016967773438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , t ) ; } else {",
            "score": 99.57804601332721,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , t ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if( } } else {",
            "score": 99.34465997869319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }",
            "score": 99.29475911458333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'AstChangeProxy::getRhs ') ;",
            "score": 99.26154119318181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'c') ;",
            "score": 99.26154119318181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'a') ;",
            "score": 99.26154119318181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'b') ;",
            "score": 99.26154119318181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( \"'s value.  \") ;",
            "score": 99.26154119318181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if else }",
            "score": 99.0002212524414,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else ;",
            "score": 98.95658874511719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , ns ) ;",
            "score": 99.6593994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , nameNode ) ; } else {",
            "score": 99.57715561810662,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != false ) {",
            "score": 99.57566833496094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { } } else {",
            "score": 99.34423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if else {",
            "score": 99.29070366753473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return -1; } }",
            "score": 99.2614501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return - 1 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else",
            "score": 98.95614624023438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , recordNode ) ;",
            "score": 99.65849752987133,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node recordDepScope( recordNode , ns ) ;",
            "score": 99.47876790364583,
            "correctness": "uncompilable",
            "tokenized_patch": "Node record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { break ; } } } else {",
            "score": 99.34070434570313,
            "correctness": "uncompilable",
            "tokenized_patch": "break { break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if else ; }",
            "score": 99.28970675998264,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( } else {",
            "score": 99.26021999782986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } else {",
            "score": 98.99201202392578,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , recordNode ) ;",
            "score": 99.65846880744485,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; /",
            "score": 99.47616373697916,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( } } else {",
            "score": 99.34050835503473,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } else {",
            "score": 99.28904215494792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { break ; } }",
            "score": 99.25830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } } }",
            "score": 98.9912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , ns ) ;",
            "score": 99.65811360677084,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( ns ) ; } else {",
            "score": 99.57586200420673,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { break ; } }",
            "score": 99.34016248914931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } else ;",
            "score": 99.28402370876736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent } else {",
            "score": 99.25689019097223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if else {",
            "score": 98.98639787946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else /",
            "score": 98.9520263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = recordDepScope( nameNode , ns ) ;",
            "score": 99.65805053710938,
            "correctness": "uncompilable",
            "tokenized_patch": "n = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , pos ) ;",
            "score": 99.59780704273896,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , pos ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; **",
            "score": 99.57563018798828,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; * *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } else {",
            "score": 99.28333875868056,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { return ; } }",
            "score": 99.25542658025569,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } {",
            "score": 98.98331996372768,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = } else",
            "score": 98.94830322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( nameNode ) ) {",
            "score": 99.56592514935662,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != this ) {",
            "score": 99.56071472167969,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n.getParent( ) ;",
            "score": 99.46682504507211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return ; } }",
            "score": 99.33714599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else if } } else ;",
            "score": 99.27927652994792,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { }",
            "score": 98.98035685221355,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else { else",
            "score": 98.94738006591797,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , recordNode ) ;",
            "score": 99.65638643152573,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , type ) ;",
            "score": 99.5906982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; finally {",
            "score": 99.56587982177734,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope != null ) {",
            "score": 99.55869838169643,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = parent ; } else {",
            "score": 99.3340087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { if } } }",
            "score": 99.276123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } } else {",
            "score": 99.2508056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / if }",
            "score": 98.97708892822266,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { {",
            "score": 98.94492013113839,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , n , ns ) ;",
            "score": 99.5868781594669,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , n , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n ) ; } else {",
            "score": 99.5658710186298,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.isFor( ) ) {",
            "score": 99.55867513020833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != ) {",
            "score": 99.4592041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return false ; }",
            "score": 99.32863362630208,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else = null ;",
            "score": 99.27569580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { break ; }",
            "score": 99.2506591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } / /",
            "score": 98.97700500488281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else { }",
            "score": 98.94414520263672,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , nameNode ) ;",
            "score": 99.65395220588235,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; /",
            "score": 99.56221516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != index ) {",
            "score": 99.55828094482422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != index ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode != null ) {",
            "score": 99.4588623046875,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( name CaMeL Node != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { else { } } else {",
            "score": 99.32780151367187,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } catch }",
            "score": 99.27353244357639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return -1; } } else {",
            "score": 99.24932861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return - 1 ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } else {",
            "score": 98.97675432477679,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else throws",
            "score": 98.93880208333333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , type ) ;",
            "score": 99.64991670496323,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , ns ) ; }",
            "score": 99.57903289794922,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode.isFor( ) ) {",
            "score": 99.55596923828125,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( name CaMeL Node . is CaMeL For ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} { { return ; } } }",
            "score": 99.32680935329861,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } finally { }",
            "score": 99.2650146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } finally { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { break ; } }",
            "score": 99.24801635742188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else { else",
            "score": 98.93099212646484,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != n )",
            "score": 99.64930013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent.getFirstChild( ) != n ) {",
            "score": 99.57806037454044,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "recordDepScope( t , ns ) ; } else {",
            "score": 99.56199544270834,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != pos ) {",
            "score": 99.5554428100586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return false ; } }",
            "score": 99.32130126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , else ;",
            "score": 99.264404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { break ; }",
            "score": 99.2471923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } } }",
            "score": 98.9755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else {",
            "score": 98.92995779854911,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , ns ) ; }",
            "score": 99.64765930175781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , ns , ns ) ;",
            "score": 99.57635857077206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( node , ns ) ; } else {",
            "score": 99.56184895833333,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( node , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != current ) {",
            "score": 99.5553207397461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != current ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*recordDepScope( nameNode , ns ) ;",
            "score": 99.4531982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "* record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent != null )",
            "score": 99.31722005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } }",
            "score": 99.26267787388393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'AstChangeProxy::getRhs '} }",
            "score": 99.24476207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'c'} }",
            "score": 99.24476207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'a'} }",
            "score": 99.24476207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'b'} }",
            "score": 99.24476207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( \"'s value.  \"} }",
            "score": 99.24476207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if else { }",
            "score": 98.97340393066406,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.isForIn( parent ) )",
            "score": 99.57543227251838,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! Node CaMeL Util . is CaMeL For CaMeL In ( parent ) )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; else {",
            "score": 99.56168365478516,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != count ) {",
            "score": 99.554443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != count ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isForIn( n ) ) {",
            "score": 99.45209147135417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For CaMeL In ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } } else { {",
            "score": 99.31599731445313,
            "correctness": "wrong",
            "tokenized_patch": "} { return ; } } else { {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "73"
        },
        {
            "patch": "} else if } else { return {",
            "score": 99.26080322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { if( } else {",
            "score": 99.24333052201705,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if else { }",
            "score": 98.9719009399414,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else if else {",
            "score": 98.92495727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', ns ) ; }",
            "score": 99.64569854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', ns ) ; }",
            "score": 99.64569854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', ns ) ; }",
            "score": 99.64569854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', ns ) ; }",
            "score": 99.64569854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", ns ) ; }",
            "score": 99.64569854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally { recordDepScope( recordNode , ns ) ;",
            "score": 99.57396024816177,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , recordNode ) ; } else {",
            "score": 99.56153061810662,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , record CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != 'AstChangeProxy::getRhs ') {",
            "score": 99.54927825927734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != 'c') {",
            "score": 99.54927825927734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != 'a') {",
            "score": 99.54927825927734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != 'b') {",
            "score": 99.54927825927734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != \"'s value.  \") {",
            "score": 99.54927825927734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": if( parent.getNext( ) != n ) {",
            "score": 99.45035807291667,
            "correctness": "uncompilable",
            "tokenized_patch": ": if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else if } } else {",
            "score": 99.26079644097223,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.} } else {",
            "score": 99.24083362926136,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { } }",
            "score": 98.97135162353516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) == n )",
            "score": 99.64499798943015,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isForIn( ) ) {",
            "score": 99.54849243164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n.getParent( ) ; }",
            "score": 99.45029994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return false ; } }",
            "score": 99.30598754882813,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } else ;",
            "score": 99.26076931423611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target != null )",
            "score": 99.23796929253473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / else {",
            "score": 98.96559143066406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else { } else",
            "score": 98.92245483398438,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , recordNode ) ;",
            "score": 99.64333208869485,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; **",
            "score": 99.55917358398438,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; * *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.isFor( parent , n ) :",
            "score": 99.44217936197917,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For ( parent , n ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; } else {",
            "score": 99.30547417534723,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; if } }",
            "score": 99.26035563151042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( target != null )",
            "score": 99.23494096235795,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( target != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } else { }",
            "score": 98.96556091308594,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else else",
            "score": 98.92176055908203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ;",
            "score": 99.64197716346153,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = n.getParent( ) ; }",
            "score": 99.57149011948529,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } else }",
            "score": 99.5589240579044,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != ns ) {",
            "score": 99.54638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isForIn( parent ) ) {",
            "score": 99.4400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = } } else {",
            "score": 99.30347357855902,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; if } } else {",
            "score": 99.25920952690973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / / }",
            "score": 98.95233917236328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } { }",
            "score": 98.9124984741211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = recordDepScope( recordNode , ns ) ;",
            "score": 99.64189147949219,
            "correctness": "uncompilable",
            "tokenized_patch": "n = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , pos ) ;",
            "score": 99.57143985523896,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , pos ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != true ) {",
            "score": 99.54483032226562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n.getParent( ) ; } else",
            "score": 99.43966471354166,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { break ; } } else {",
            "score": 99.30259399414062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { if } }",
            "score": 99.25870090060764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException } }",
            "score": 99.23328746448864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / /",
            "score": 98.95025634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'AstChangeProxy::getRhs ') ; } } else {",
            "score": 99.55607335707721,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'c') ; } } else {",
            "score": 99.55607335707721,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'a') ; } } else {",
            "score": 99.55607335707721,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'b') ; } } else {",
            "score": 99.55607335707721,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( \"'s value.  \") ; } } else {",
            "score": 99.55607335707721,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != t ) {",
            "score": 99.54270935058594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != t ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( recordNode ) ; }",
            "score": 99.43926595052083,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( } else {",
            "score": 99.29859619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else = }",
            "score": 99.25618489583333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'AstChangeProxy::getRhs ') ;",
            "score": 99.2301913174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'c') ;",
            "score": 99.2301913174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'a') ;",
            "score": 99.2301913174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'b') ;",
            "score": 99.2301913174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( \"'s value.  \") ;",
            "score": 99.2301913174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } if else { }",
            "score": 98.90592193603516,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , recordNode ) ;",
            "score": 99.5701545266544,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , ns ) ; } else {",
            "score": 99.55425666360294,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return null ; } } else {",
            "score": 99.2856201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } } }",
            "score": 99.25444200303819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else { }",
            "score": 98.93942260742188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} */ recordDepScope( recordNode , ns ) ;",
            "score": 99.56752642463235,
            "correctness": "uncompilable",
            "tokenized_patch": "} * / record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != type ) {",
            "score": 99.537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != type ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} Node nameNode = n.getParent( ) ;",
            "score": 99.43256022135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} Node name CaMeL Node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { break ; } } }",
            "score": 99.28274536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch else ;",
            "score": 99.25430636935764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { }",
            "score": 99.22958713107639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } { }",
            "score": 98.93595886230469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else ;",
            "score": 98.90415954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} */ recordDepScope( nameNode , ns ) ;",
            "score": 99.63981359145221,
            "correctness": "uncompilable",
            "tokenized_patch": "} * / record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { final Node parent = n.getParent( ) ;",
            "score": 99.56713104248047,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { final Node parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } } }",
            "score": 99.55206657858456,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) == n ) {",
            "score": 99.53467559814453,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if else ;",
            "score": 99.25400119357639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( } else {",
            "score": 99.22809448242188,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if else }",
            "score": 98.93197631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { } {",
            "score": 98.9033432006836,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null , ns ) ;",
            "score": 99.56649576822916,
            "correctness": "wrong",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { recordDepScope( true ) ; } } else {",
            "score": 99.55144186580883,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( true ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; :",
            "score": 99.4291748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent != null ) {",
            "score": 99.2791259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else break {",
            "score": 99.25394015842014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } } else { }",
            "score": 99.22802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else { }",
            "score": 98.92988804408482,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else else",
            "score": 98.90328979492188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , nameNode ) ;",
            "score": 99.63666848575367,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } else else",
            "score": 99.55129107306985,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != null ) {",
            "score": 99.53258405412946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( parent , ns ) ;",
            "score": 99.42610386439732,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return ; } } } else {",
            "score": 99.2786865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { else {",
            "score": 99.25390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( $STRING$",
            "score": 99.22637384588069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( $STRING$",
            "score": 99.22637384588069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( $STRING$",
            "score": 99.22637384588069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( $STRING$",
            "score": 99.22637384588069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( $STRING$",
            "score": 99.22637384588069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if else ;",
            "score": 98.92769622802734,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { } }",
            "score": 98.9018325805664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ) ; } }",
            "score": 99.56394330193015,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } } }",
            "score": 99.54902200137867,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; else",
            "score": 99.42281901041666,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } } else {",
            "score": 99.27635362413194,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if } }",
            "score": 99.25360107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else if( } else {",
            "score": 99.22501997514205,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; if else {",
            "score": 98.91938781738281,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { if else",
            "score": 98.90084075927734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = n.getParent( ) ; } else {",
            "score": 99.54888044084821,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getParent( ) != n ) {",
            "score": 99.52689615885417,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( nameNode ) ) {",
            "score": 99.42099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { return ; } } }",
            "score": 99.27534790039063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return else ; }",
            "score": 99.24971516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; }",
            "score": 99.22455512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { } }",
            "score": 98.91885375976562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else /",
            "score": 98.90010070800781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , nameNode ) ;",
            "score": 99.62716854319854,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else : recordDepScope( recordNode , ns ) ;",
            "score": 99.56216251148896,
            "correctness": "uncompilable",
            "tokenized_patch": "} else : record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } else else",
            "score": 99.5463508157169,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( t.getParent( ) != n ) {",
            "score": 99.52546691894531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( t . get CaMeL Parent ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( parent ) ) {",
            "score": 99.4182598407452,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . equals ( parent ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { } } else { else {",
            "score": 99.27210693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return else ; } }",
            "score": 99.24887424045139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( node != null )",
            "score": 99.2226229580966,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } if else { }",
            "score": 98.9171142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else }",
            "score": 98.89701843261719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( false ) ; } } else {",
            "score": 99.54372989430146,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( false ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } } } else {",
            "score": 99.27052612304688,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if } else }",
            "score": 99.24727376302083,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else break ; } } else {",
            "score": 99.22083875868056,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } */",
            "score": 98.91537039620536,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else /",
            "score": 98.89656829833984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally { recordDepScope( nameNode , ns ) ;",
            "score": 99.62370031020221,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } else }",
            "score": 99.54359346277573,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != start ) {",
            "score": 99.5251693725586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != start ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != n )",
            "score": 99.41610952524039,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} } else { { break ; } }",
            "score": 99.270458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if } } else",
            "score": 99.24704996744792,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return true ; } }",
            "score": 99.22041151258681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { else {",
            "score": 98.91368865966797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } this",
            "score": 98.89517974853516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , nameNode ) ;",
            "score": 99.623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , this ) ;",
            "score": 99.5611931295956,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.getNext( ) != null ) {",
            "score": 99.52397918701172,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n . get CaMeL Next ( ) != null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else parent = n.getParent( ) ; } }",
            "score": 99.41494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { break ; } } else {",
            "score": 99.26966010199652,
            "correctness": "uncompilable",
            "tokenized_patch": "break { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } } else {",
            "score": 99.24686686197917,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break -1; } } else {",
            "score": 99.21994357638889,
            "correctness": "uncompilable",
            "tokenized_patch": "break - 1 ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else ;",
            "score": 98.9108378092448,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else",
            "score": 98.89411272321429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( startNode , ns ) ;",
            "score": 99.62228573069854,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( start CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , ns ) ; } else {",
            "score": 99.54273274739583,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , ns ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( nameNode.getNext( ) != n ) {",
            "score": 99.52351379394531,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name CaMeL Node . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node recordDepScope( nameNode , ns ) ;",
            "score": 99.41258951822917,
            "correctness": "uncompilable",
            "tokenized_patch": "Node record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { else { {",
            "score": 99.26777479383681,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else return }",
            "score": 99.246826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else return }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( type != null ) {",
            "score": 99.2194091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( type != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( else { }",
            "score": 98.90863037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else println else {",
            "score": 98.89312744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else println else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node ) ;",
            "score": 99.62118765024039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) == n ) {",
            "score": 99.56024169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns.getParent( ) ; } else {",
            "score": 99.52227783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent.getParent( ) ;",
            "score": 99.41107647235577,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { {",
            "score": 99.26734008789063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch } else {",
            "score": 99.24565294053819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else { else {",
            "score": 99.2193270596591,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { catch else {",
            "score": 98.90389578683036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else { }",
            "score": 98.89174107142857,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , ns , ns ) ;",
            "score": 99.6189323874081,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t , nameNode ) ; } else {",
            "score": 99.53839470358456,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t , name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( nameNode ) ; }",
            "score": 99.41102701822916,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { return ; } }",
            "score": 99.26656087239583,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } }",
            "score": 99.24468994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { }",
            "score": 99.21909586588542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } if else",
            "score": 98.8997573852539,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , source ) ;",
            "score": 99.55903894761029,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , source ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , nameNode ) ; } else {",
            "score": 99.53737505744485,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.isFor( parent , ns ) :",
            "score": 99.40992024739583,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For ( parent , ns ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return ; } }",
            "score": 99.26411946614583,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else throw null ;",
            "score": 99.24406602647569,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else throw null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { return false ; }",
            "score": 99.21694113991477,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } if }",
            "score": 98.8920669555664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } }",
            "score": 98.88970947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } recordDepScope( nameNode , ns ) ;",
            "score": 99.61723776424633,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , ns , ns ) ;",
            "score": 99.55901022518383,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getParent( ) != null ) {",
            "score": 99.51932525634766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Parent ( ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( recordNode ) ) {",
            "score": 99.40809733072916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } } else {",
            "score": 99.26229519314236,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } if }",
            "score": 99.24018690321181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( node != null ) {",
            "score": 99.21683756510417,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { }",
            "score": 98.88895416259766,
            "correctness": "uncompilable",
            "tokenized_patch": "} { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } *",
            "score": 98.888916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != size ) {",
            "score": 99.5184097290039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != size ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode ) ; }",
            "score": 99.40438639322916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { else {",
            "score": 99.26151529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , ) ;",
            "score": 99.23611789279514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } else",
            "score": 98.88846261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , recordNode ) ;",
            "score": 99.61333869485294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) !=0) {",
            "score": 99.51815032958984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != n ;",
            "score": 99.40348307291667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else { else {",
            "score": 99.25968627929687,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; } else if }",
            "score": 99.23442925347223,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ; } } else {",
            "score": 99.216259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } */ }",
            "score": 98.88703155517578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { } } else",
            "score": 98.8869857788086,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', recordNode ) ;",
            "score": 99.61262063419117,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', recordNode ) ;",
            "score": 99.61262063419117,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', recordNode ) ;",
            "score": 99.61262063419117,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', recordNode ) ;",
            "score": 99.61262063419117,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", recordNode ) ;",
            "score": 99.61262063419117,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , scope ) ;",
            "score": 99.55524758731617,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , scope ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = nameNode.getParent( ) ; } else {",
            "score": 99.53426361083984,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = name CaMeL Node . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( type ) ) {",
            "score": 99.39932454427084,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( type ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { else { {",
            "score": 99.259326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else ; }",
            "score": 99.23336452907986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = true ; } }",
            "score": 99.21533813476563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } else",
            "score": 98.88563755580357,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return false ;",
            "score": 98.88548278808594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.getParent( ) != null ) {",
            "score": 99.51608276367188,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n . get CaMeL Parent ( ) != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "NameInformation ns = createNameInformation( t ) ;",
            "score": 99.3990478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "Name CaMeL Information ns = create CaMeL Name CaMeL Information ( t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { n = } } else {",
            "score": 99.25750054253473,
            "correctness": "uncompilable",
            "tokenized_patch": "} { n = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { if } } else {",
            "score": 99.23036702473958,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { { return ; } }",
            "score": 99.21415571732955,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / *}",
            "score": 98.88516235351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else",
            "score": 98.88377162388393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , node ) ; } else {",
            "score": 99.53094123391544,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != pos ) {",
            "score": 99.51557922363281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode.getNext( ) != n )",
            "score": 99.3985107421875,
            "correctness": "wrong",
            "tokenized_patch": "if ( record CaMeL Node . get CaMeL Next ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} { { { return ; } } }",
            "score": 99.25716552734374,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return false ; } else {",
            "score": 99.22880723741319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { return ; } }",
            "score": 99.21317749023437,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } if else {",
            "score": 98.88412039620536,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else",
            "score": 98.88265991210938,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , nameNode ) ; } else {",
            "score": 99.53091251148896,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.isForIn( ) ) {",
            "score": 99.51542154947917,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( n ) ) {",
            "score": 99.3972919170673,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . equals ( n ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { else { } } }",
            "score": 99.25000678168402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } / / */",
            "score": 99.22557237413194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } / / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.{ } } else {",
            "score": 99.21240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } else",
            "score": 98.8817138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } if else",
            "score": 98.88118743896484,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else recordDepScope( recordNode , ns ) ;",
            "score": 99.55392635569854,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node ) ; } } else {",
            "score": 99.53013700597427,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return false ; }",
            "score": 99.24850463867188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } } else {",
            "score": 99.22431776258681,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else if( }",
            "score": 99.21061567826705,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else {",
            "score": 98.88014729817708,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForIn( n ) ) {",
            "score": 99.52997185202206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL In ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != count ) {",
            "score": 99.51390075683594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != count ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = ns.getParent( ) ;",
            "score": 99.39589029947916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = ns . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { } } else {",
            "score": 99.2479736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } else ;",
            "score": 99.2237548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( node != null ) {",
            "score": 99.20978338068181,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "}",
            "score": 98.8775634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "}",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else Node recordDepScope( nameNode , ns ) ;",
            "score": 99.5997314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else Node record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} this.recordDepScope( recordNode , ns ) ;",
            "score": 99.552490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} this . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , null ) ; } else {",
            "score": 99.52980669806985,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , null ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "15"
        },
        {
            "patch": "} else if( parent.getParent( ) != t ) {",
            "score": 99.51380157470703,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != t ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.equals( parent , ns ) :",
            "score": 99.39507587139423,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . equals ( parent , ns ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return } } } else {",
            "score": 99.24628363715277,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else / ***/",
            "score": 99.22332763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else / * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { } else {",
            "score": 99.20774147727273,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } null",
            "score": 98.87779998779297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } null",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'AstChangeProxy::getRhs ') ; } } else {",
            "score": 99.52927943638393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'c') ; } } else {",
            "score": 99.52927943638393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'a') ; } } else {",
            "score": 99.52927943638393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'b') ; } } else {",
            "score": 99.52927943638393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( \"'s value.  \") ; } } else {",
            "score": 99.52927943638393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; else",
            "score": 99.39482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { break ; } } }",
            "score": 99.2435302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } , true {",
            "score": 99.22293429904514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , true {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else if( } else",
            "score": 99.20754172585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { else",
            "score": 98.87601143973214,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ;",
            "score": 98.87405395507812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t ) ; }",
            "score": 99.5975341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null , ns ) ; }",
            "score": 99.5517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( parent , n ) ) {",
            "score": 99.52790383731617,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( parent , n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != end ) {",
            "score": 99.51258087158203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != end ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent.getParent( ) ; }",
            "score": 99.39388602120536,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return ; } else {",
            "score": 99.2384521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if } }",
            "score": 99.22210693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { } } else {",
            "score": 99.20593872070313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { } { }",
            "score": 98.8756332397461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { while else {",
            "score": 98.86810302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { while else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ! NodeUtil.isForIn( parent ) ;",
            "score": 99.5501349954044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ! Node CaMeL Util . is CaMeL For CaMeL In ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } *",
            "score": 99.52783966064453,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != false ) {",
            "score": 99.51005554199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) ) { {",
            "score": 99.39381510416666,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } return false ; } else {",
            "score": 99.23707275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else return {",
            "score": 99.22205946180556,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { break ; } }",
            "score": 99.20540161132813,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else }",
            "score": 98.87427775065105,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getFirstChild( ) != n ) {",
            "score": 99.59690946691177,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , value ) ; } else {",
            "score": 99.52568502987133,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , value ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != node ) {",
            "score": 99.50926208496094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( t ) ) {",
            "score": 99.3934814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( t ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { break ; } }",
            "score": 99.23706732855902,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } catch }",
            "score": 99.22182888454861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( } else {",
            "score": 99.20489501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = { }",
            "score": 98.87417602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { }",
            "score": 98.862548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent ) ; }",
            "score": 99.59572928292411,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isFor( ) ) {",
            "score": 99.549560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent ) ; } else {",
            "score": 99.5255596454327,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( nameNode , n ) ;",
            "score": 99.39281412760417,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; else break ; } } else {",
            "score": 99.234326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; else break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else } else {",
            "score": 99.22060139973958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { return ; } } }",
            "score": 99.20208185369319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.getNext( ) != n ) {",
            "score": 99.59435272216797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( true ) ;",
            "score": 99.54934457632211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , n ) ; } else {",
            "score": 99.52495978860294,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isForIn( n ) ) {",
            "score": 99.3912841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For CaMeL In ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else {",
            "score": 99.23421805245536,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } if } else {",
            "score": 99.21756320529514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } }",
            "score": 99.20128631591797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else",
            "score": 98.86967468261719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else {",
            "score": 98.86080932617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode.getNext( ) != n )",
            "score": 99.59325453814338,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( recordNode ) ) {",
            "score": 99.54927332261029,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = n.getParent( ) ; } else {",
            "score": 99.524169921875,
            "correctness": "wrong",
            "tokenized_patch": "parent = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; :",
            "score": 99.38990071614583,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { { return ; } } } }",
            "score": 99.231201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { { return ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / ****/",
            "score": 99.21674262152777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } }",
            "score": 99.20106201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else {",
            "score": 98.85965401785714,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( valueNode , ns ) ;",
            "score": 99.54818905101104,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( value CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.isFor( ) ) {",
            "score": 99.48738919771634,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! recordDepScope( recordNode , ns ) ;",
            "score": 99.38935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "! record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } catch }",
            "score": 99.21633572048611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } } else { } } else {",
            "score": 99.2002286044034,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { } } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else { }",
            "score": 98.86304728190105,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } if else }",
            "score": 98.85918426513672,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } recordDepScope( recordNode , ns ) ;",
            "score": 99.59009507123162,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , false ) ; } else {",
            "score": 99.52191521139706,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , false ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { parent = parent ; } else {",
            "score": 99.22645874023438,
            "correctness": "uncompilable",
            "tokenized_patch": "} { parent = parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } } else",
            "score": 99.21539306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'AstChangeProxy::getRhs '} }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'c'} }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'a'} }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'b'} }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( \"'s value.  \"} }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } if else {",
            "score": 98.86189488002232,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else }",
            "score": 98.85917154947917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( nameNode.getNext( ) != n )",
            "score": 99.38896484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( name CaMeL Node . get CaMeL Next ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { else { return ; } }",
            "score": 99.22620239257813,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else {",
            "score": 99.21492222377232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'c') ; }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a') ; }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'b') ; }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( \"'s value.  \") ; }",
            "score": 99.198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else if else {",
            "score": 98.86164093017578,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return else {",
            "score": 98.85897827148438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , current ) ;",
            "score": 99.58562155330883,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , current ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = n.getParent( ) ;",
            "score": 99.54627990722656,
            "correctness": "wrong",
            "tokenized_patch": "} else { name CaMeL Node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( recordNode , null ) ; } else {",
            "score": 99.51645795036765,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , null ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "15"
        },
        {
            "patch": "return recordDepScope( recordNode , ns ) ;",
            "score": 99.38890787760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; if } } else ;",
            "score": 99.21416558159723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'AstChangeProxy::getRhs '} }",
            "score": 99.19794256036931,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'c'} }",
            "score": 99.19794256036931,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'a'} }",
            "score": 99.19794256036931,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'b'} }",
            "score": 99.19794256036931,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( \"'s value.  \"} }",
            "score": 99.19794256036931,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else }",
            "score": 98.85886928013393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ) ; } }",
            "score": 99.54623592601104,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , index ) ; } else {",
            "score": 99.51645076976104,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , index ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( recordNode , n ) ;",
            "score": 99.3857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return ; } } else {",
            "score": 99.22362603081598,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else throw }",
            "score": 99.21367730034723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else throw }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = false ; } }",
            "score": 99.1978759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else if else {",
            "score": 98.85852813720703,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else { }",
            "score": 98.85829671223958,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , nameNode ) ;",
            "score": 99.58198816636029,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( objectNode , ns ) ;",
            "score": 99.54505830652573,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( object CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "&& recordDepScope( recordNode , ns ) ;",
            "score": 99.38543294270833,
            "correctness": "uncompilable",
            "tokenized_patch": "&& record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { break ; } } } else {",
            "score": 99.22096557617188,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if }",
            "score": 99.20930480957031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.append( 'AstChangeProxy::getRhs ') ; } else {",
            "score": 99.19654430042614,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . append ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.append( 'c') ; } else {",
            "score": 99.19654430042614,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . append ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.append( 'a') ; } else {",
            "score": 99.19654430042614,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . append ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.append( 'b') ; } else {",
            "score": 99.19654430042614,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . append ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.append( \"'s value.  \") ; } else {",
            "score": 99.19654430042614,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . append ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } }",
            "score": 98.85704549153645,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { } }",
            "score": 98.85702950613839,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = recordDepScope( nameNode , ns ) ;",
            "score": 99.58056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.isFor( parent ) ) {",
            "score": 99.54490661621094,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } *",
            "score": 99.51399993896484,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n.getFirstChild( ) ;",
            "score": 99.3846435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent != null else {",
            "score": 99.2177978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent != null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else ; }",
            "score": 99.20661756727431,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { String name = { name } ;",
            "score": 99.19453568892045,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { String name = { name } ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } else",
            "score": 98.85680280412946,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } if else",
            "score": 98.8532943725586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNode( ) != n ) {",
            "score": 99.57945251464844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Node ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} this.recordDepScope( nameNode , ns ) ;",
            "score": 99.54416791130515,
            "correctness": "uncompilable",
            "tokenized_patch": "} this . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } else :",
            "score": 99.51323385799633,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } else :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isEmpty( ) ) {",
            "score": 99.46470424107143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL Empty ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "? recordDepScope( recordNode , ns ) ?",
            "score": 99.38246256510416,
            "correctness": "uncompilable",
            "tokenized_patch": "? record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; } } else { {",
            "score": 99.21681518554688,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else if }",
            "score": 99.20452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { break ; } else {",
            "score": 99.1944912997159,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { } /",
            "score": 98.85679626464844,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } } else {",
            "score": 98.85269927978516,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = recordDepScope( recordNode , ns ) ;",
            "score": 99.57871380974265,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , node ) ; } else {",
            "score": 99.51254451976104,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( this , ns ) ;",
            "score": 99.38037981305804,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( this , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { } }",
            "score": 99.21647135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else return ; } } else {",
            "score": 99.19397650824652,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if else {",
            "score": 98.84986368815105,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = createNameInformation( t , nameNode ) ;",
            "score": 99.57863482306985,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = create CaMeL Name CaMeL Information ( t , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.recordDepScope( nameNode ) ; } else {",
            "score": 99.51238654641544,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor(0) ) {",
            "score": 99.460693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return } } } else {",
            "score": 99.21207275390626,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( false {",
            "score": 99.20352511935764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else Logger",
            "score": 98.8558120727539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else Node recordDepScope( recordNode , ns ) ;",
            "score": 99.57787367876838,
            "correctness": "uncompilable",
            "tokenized_patch": "} else Node record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , ns , ns ) ;",
            "score": 99.54378015854779,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'AstChangeProxy::getRhs ') ; } } else {",
            "score": 99.4599365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'c') ; } } else {",
            "score": 99.4599365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'a') ; } } else {",
            "score": 99.4599365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'b') ; } } else {",
            "score": 99.4599365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( \"'s value.  \") ; } } else {",
            "score": 99.4599365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent.getParent( ) ; } else",
            "score": 99.37965494791666,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } else {",
            "score": 99.21201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch else {",
            "score": 99.20296902126736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'AstChangeProxy::getRhs ') ; } else {",
            "score": 99.19301535866477,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'c') ; } else {",
            "score": 99.19301535866477,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'a') ; } else {",
            "score": 99.19301535866477,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'b') ; } else {",
            "score": 99.19301535866477,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( \"'s value.  \") ; } else {",
            "score": 99.19301535866477,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } } {",
            "score": 98.85578155517578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this ) ;",
            "score": 99.57657564603366,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns ).",
            "score": 99.54246610753677,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( null , nameNode ) ; } else {",
            "score": 99.51220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( null , name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isNull( ) ) {",
            "score": 99.45912388392857,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . is CaMeL Null ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "if( ns.isForIn( parent ) ) {",
            "score": 99.379541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { else { } }",
            "score": 99.21185913085938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else ; } else",
            "score": 99.20208062065973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else { } }",
            "score": 98.85337829589844,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! NodeUtil.isFor( parent ) )",
            "score": 99.57615033318015,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! Node CaMeL Util . is CaMeL For ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ,0) ;",
            "score": 99.54201372931985,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) !=",
            "score": 99.45762282151442,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { break ; } }",
            "score": 99.20753784179688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return false {",
            "score": 99.20017496744792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else return ; } } } else {",
            "score": 99.19159490411931,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } else",
            "score": 98.85334123883929,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return { }",
            "score": 98.84024047851562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , out ) ;",
            "score": 99.57610724954044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , out ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( false ) ;",
            "score": 99.54186072716347,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent.getNext( ) != null ) {",
            "score": 99.37833658854167,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent . get CaMeL Next ( ) != null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "49"
        },
        {
            "patch": "} { else {",
            "score": 99.20728149414063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; } } }",
            "score": 99.19980197482639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else println else }",
            "score": 98.85151672363281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else println else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } if else {",
            "score": 98.84005737304688,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ,1) ;",
            "score": 99.57583438648896,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } finally {",
            "score": 99.50916963465073,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof NodeTraversal ) {",
            "score": 99.45492553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof Node CaMeL Traversal ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( 'AstChangeProxy::getRhs ') ) {",
            "score": 99.377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( $STRING$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( 'c') ) {",
            "score": 99.377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( $STRING$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( 'a') ) {",
            "score": 99.377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( $STRING$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( 'b') ) {",
            "score": 99.377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( $STRING$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( \"'s value.  \") ) {",
            "score": 99.377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( $STRING$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { return false ; }",
            "score": 99.20673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return { } } }",
            "score": 99.19666883680556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else { return ; } }",
            "score": 99.19071655273437,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } } }",
            "score": 98.83881487165179,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForIn( ) )",
            "score": 99.5755126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL In ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = n.getFirstChild( ) ; } else {",
            "score": 99.50916290283203,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = n . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.hasNext( ) ) {",
            "score": 99.45227922712054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . has CaMeL Next ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.equals( recordNode , ns ) :",
            "score": 99.37711588541667,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . equals ( record CaMeL Node , ns ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { break ; } }",
            "score": 99.20601196289063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } } else ;",
            "score": 99.19569227430556,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope != null )",
            "score": 99.18985324435764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else {",
            "score": 98.84958321707589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else ;",
            "score": 98.8387451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( scope ) ;",
            "score": 99.57433143028847,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( scope ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( nameNode.getNext( ) != n ) {",
            "score": 99.53472541360294,
            "correctness": "wrong",
            "tokenized_patch": "} if ( name CaMeL Node . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "recordDepScope( recordNode , index ) ; } else {",
            "score": 99.5091552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , index ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getNext( ) != null ) {",
            "score": 99.45105794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL Next ( ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode.getParent( ) ;",
            "score": 99.37685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } return false ; } else {",
            "score": 99.20578342013889,
            "correctness": "uncompilable",
            "tokenized_patch": "} } return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { / **/",
            "score": 99.19449869791667,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = null ; }",
            "score": 99.18977494673295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else",
            "score": 98.8480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; }",
            "score": 98.83763776506696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { recordDepScope( nameNode , ns ) ;",
            "score": 99.57386779785156,
            "correctness": "wrong",
            "tokenized_patch": "} { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { recordDepScope( nameNode , source ) ;",
            "score": 99.53461052389706,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , source ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( valueNode , ns ) ; } else {",
            "score": 99.5081428079044,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( value CaMeL Node , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { } } else {",
            "score": 99.20531005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } } else ;",
            "score": 99.19441053602431,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } } else {",
            "score": 99.18938530815973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else else",
            "score": 98.84761047363281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if else { }",
            "score": 98.83762032645089,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , current ) ;",
            "score": 99.5732062844669,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , current ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , n ) ;",
            "score": 99.534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , true ) ; } else {",
            "score": 99.50705135569854,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , true ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( recordDepScope != null ) {",
            "score": 99.449658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( record CaMeL Dep CaMeL Scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( parent.getNext( ) != n ) {",
            "score": 99.37542317708333,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { return false ; } }",
            "score": 99.2046630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; if } else",
            "score": 99.19394938151042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { } } }",
            "score": 98.84693908691406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } if else ;",
            "score": 98.83700561523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent.recordDepScope( nameNode , ns ) ;",
            "score": 99.57270364200367,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } recordDepScope( recordNode , ns ) ;",
            "score": 99.53337860107422,
            "correctness": "uncompilable",
            "tokenized_patch": "} } record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , false ) ; } else {",
            "score": 99.50659897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , false ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void recordDepScope( recordNode , ns ) ;",
            "score": 99.37521158854166,
            "correctness": "uncompilable",
            "tokenized_patch": "void record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { } } }",
            "score": 99.20435791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } else { else {",
            "score": 99.19304741753473,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else {",
            "score": 98.84666951497395,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } }",
            "score": 98.83363850911458,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , namespace ) ;",
            "score": 99.57191377527573,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , namespace ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , null ) ;",
            "score": 99.506103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = nameNode ; } } else {",
            "score": 99.44712611607143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = name CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , n ) ;",
            "score": 99.37403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { break ; } }",
            "score": 99.20340304904514,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else break ;",
            "score": 99.19285753038194,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { count ++ ; } } else {",
            "score": 99.1874667080966,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { count ++ ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else",
            "score": 98.84630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { else {",
            "score": 98.83038330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ns = recordDepScope( recordNode , ns ) ;",
            "score": 99.57143267463235,
            "correctness": "uncompilable",
            "tokenized_patch": "} ns = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , end ) ;",
            "score": 99.53327493106617,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , end ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = parent.getParent( ) ; } else {",
            "score": 99.50473458426339,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = parent . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof NameInformation ) {",
            "score": 99.37381998697917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof Name CaMeL Information ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { else { else {",
            "score": 99.2028076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } } else ;",
            "score": 99.19184705946181,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( ) ; } }",
            "score": 99.18715598366477,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } =",
            "score": 98.84610748291016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else }",
            "score": 98.8281478881836,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( scope , recordNode ) ;",
            "score": 99.57030531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( scope , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , n ) ;",
            "score": 99.53323364257812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent != null ) {",
            "score": 99.4425936612216,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } } }",
            "score": 99.20155164930556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if } else",
            "score": 99.19143337673611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( node != null )",
            "score": 99.18697509765624,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } return",
            "score": 98.84556579589844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ;",
            "score": 98.82801513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ; }",
            "score": 99.56917027064732,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns.getParent( ) ; }",
            "score": 99.53270048253677,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , ns ) ; } else {",
            "score": 99.50440266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , ns ,",
            "score": 99.44173177083333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( recordNode , n ) ;",
            "score": 99.37265625,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; } } }",
            "score": 99.19779459635417,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } }",
            "score": 99.19057210286458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'AstChangeProxy::getRhs '+ }",
            "score": 99.18694513494319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'c'+ }",
            "score": 99.18694513494319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'a'+ }",
            "score": 99.18694513494319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( 'b'+ }",
            "score": 99.18694513494319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.error( \"'s value.  \"+ }",
            "score": 99.18694513494319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; { }",
            "score": 98.84272766113281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent = recordDepScope( nameNode , ns ) ;",
            "score": 99.56901281020221,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , this ) ;",
            "score": 99.53099867876838,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , recordNode ) ; } else {",
            "score": 99.5041144875919,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , record CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns true ) ;",
            "score": 99.3724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { {",
            "score": 99.19742838541667,
            "correctness": "wrong",
            "tokenized_patch": "} else { } } else { {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "73"
        },
        {
            "patch": "} else { log.warning( 'AstChangeProxy::getRhs '} }",
            "score": 99.18683416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'c'} }",
            "score": 99.18683416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'a'} }",
            "score": 99.18683416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( 'b'} }",
            "score": 99.18683416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.warning( \"'s value.  \"} }",
            "score": 99.18683416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . warning ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { if else {",
            "score": 98.84208679199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { } {",
            "score": 98.82559967041016,
            "correctness": "wrong",
            "tokenized_patch": "} else { } { } {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "else recordDepScope( recordNode , ns , ns ) ;",
            "score": 99.56855325137867,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( startNode , ns ) ; } else {",
            "score": 99.503662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( start CaMeL Node , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) ) {",
            "score": 99.4384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.getNext( ) != n ) {",
            "score": 99.37180001395089,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return false ; } } else {",
            "score": 99.19679768880208,
            "correctness": "uncompilable",
            "tokenized_patch": "} return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch } } else { if }",
            "score": 99.18943277994792,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch } } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } else",
            "score": 99.18673366970486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else {",
            "score": 98.84208170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return false {",
            "score": 98.82389068603516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = ns.getFirstChild( ) ; } else {",
            "score": 99.50281524658203,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = ns . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getParent( ) != null ) {",
            "score": 99.43801443917411,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Parent ( ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = parent.getParent( ) ;",
            "score": 99.37159830729166,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { if } } }",
            "score": 99.18905978732639,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( node != null ) {",
            "score": 99.18526000976563,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else if else { }",
            "score": 98.83914184570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if } }",
            "score": 98.82376098632812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , target ) ;",
            "score": 99.5682732077206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , target ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else : recordDepScope( nameNode , ns ) ;",
            "score": 99.52691291360294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else : record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null ) ; } } else {",
            "score": 99.50262810202206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isIn( ) ) {",
            "score": 99.43636648995536,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . is CaMeL In ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "*else recordDepScope( parent , ns ) ;",
            "score": 99.37155587332589,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if( } }",
            "score": 99.19609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else ; } } else ;",
            "score": 99.18801540798611,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else ; } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else Exception",
            "score": 98.8375244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else Exception",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } */",
            "score": 98.82209014892578,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ,0) ;",
            "score": 99.56580307904412,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getValue( ) != n ) {",
            "score": 99.52469635009766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Value ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , ns ) ;",
            "score": 99.50260162353516,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.isEmpty( ) ) {",
            "score": 99.435595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . is CaMeL Empty ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "|| recordDepScope( recordNode , ns ) ;",
            "score": 99.370849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "|| record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = } ; } else {",
            "score": 99.1953857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = } ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } } else ;",
            "score": 99.18752712673611,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { break ; }",
            "score": 99.18479225852273,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } }",
            "score": 98.83615112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if else",
            "score": 98.82177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { recordDepScope( nameNode , ns ) ;",
            "score": 99.56524658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , next ) ;",
            "score": 99.52461511948529,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , next ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , value ) ; } else {",
            "score": 99.50127814797794,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , value ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode ) ; }",
            "score": 99.36930338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return ; }",
            "score": 99.19320339626736,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } } else if }",
            "score": 99.18658447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != null ) { {",
            "score": 99.1846590909091,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } } else",
            "score": 98.83615112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } else { }",
            "score": 98.81947326660156,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , t , ns ) ;",
            "score": 99.52431353400735,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( type ) ; } } else {",
            "score": 99.50101964613971,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( type ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode ; } else {",
            "score": 99.43255615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , ns ,",
            "score": 99.36883951822917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent != null else {",
            "score": 99.19177856445313,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent != null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch } else }",
            "score": 99.18610297309027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } Logger",
            "score": 98.83541870117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( nameNode , ns , ns ) ;",
            "score": 99.56359145220588,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nullNode , ns ) ;",
            "score": 99.52411247702206,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , parent ) ;",
            "score": 99.50093841552734,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns ; } } else {",
            "score": 99.43198939732143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else Node parent = n.getParent( ) ;",
            "score": 99.36757114955357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else Node parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { else {",
            "score": 99.1906005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else if }",
            "score": 99.18587917751736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else {",
            "score": 99.18450164794922,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } else",
            "score": 98.83346557617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( } }",
            "score": 98.81907435825893,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent = recordDepScope( recordNode , ns ) ;",
            "score": 99.56328268612133,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , parent ) ; } else {",
            "score": 99.5003662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , parent ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "we recordDepScope( recordNode , ns ) ;",
            "score": 99.36700846354167,
            "correctness": "uncompilable",
            "tokenized_patch": "we record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return true ; } } }",
            "score": 99.18997192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return true ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else } }",
            "score": 99.18484157986111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } } } }",
            "score": 98.81866455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', nameNode ) ;",
            "score": 99.56163832720588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', nameNode ) ;",
            "score": 99.56163832720588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', nameNode ) ;",
            "score": 99.56163832720588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', nameNode ) ;",
            "score": 99.56163832720588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", nameNode ) ;",
            "score": 99.56163832720588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , ns ) ; } }",
            "score": 99.5229133157169,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = recordNode ; } } else {",
            "score": 99.5003433227539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = record CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) !=",
            "score": 99.43155924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) == n ) {",
            "score": 99.36609758649554,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { { {",
            "score": 99.18875461154514,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else { }",
            "score": 99.18419731987848,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else if else",
            "score": 98.83243560791016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; }",
            "score": 98.81847127278645,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else recordDepScope( nameNode , ns ) ;",
            "score": 99.56045532226562,
            "correctness": "uncompilable",
            "tokenized_patch": "else else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( recordNode , ns ) )",
            "score": 99.51994323730469,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isFor( n ) ) {",
            "score": 99.43070475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isFor( parent ) ) {",
            "score": 99.36590983072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else { {",
            "score": 99.18641493055556,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / / ***/",
            "score": 99.18417019314236,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / / * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new } } else",
            "score": 99.18339708116319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else *{ }",
            "score": 98.83171081542969,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } {",
            "score": 98.81806291852679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } finally {",
            "score": 99.49950453814338,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , new",
            "score": 99.43046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , new",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break recordDepScope( recordNode , ns ) ;",
            "score": 99.3621826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "break record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent != null )",
            "score": 99.18596733940973,
            "correctness": "wrong",
            "tokenized_patch": "} { if ( parent != null )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} { else ; } } else {",
            "score": 99.18388536241319,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return recordDepScope( nameNode , ns ) ;",
            "score": 99.55958658854166,
            "correctness": "uncompilable",
            "tokenized_patch": "return record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns , }",
            "score": 99.51894962086396,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , ns ) ; } else {",
            "score": 99.49945475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = n ; } } else {",
            "score": 99.42570277622768,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { else { else {",
            "score": 99.18484497070312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else { }",
            "score": 99.18316650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { if( }",
            "score": 99.17957652698864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } System",
            "score": 98.83119201660156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ if else {",
            "score": 98.8143081665039,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ns = recordDepScope( nameNode , ns ) ;",
            "score": 99.55952722886029,
            "correctness": "uncompilable",
            "tokenized_patch": "} ns = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { recordDepScope( recordNode , ns ) ;",
            "score": 99.51839447021484,
            "correctness": "wrong",
            "tokenized_patch": "} { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; / *",
            "score": 99.49853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; / *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return true ; } }",
            "score": 99.18363647460937,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else / */",
            "score": 99.18124728732639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return ; } } } else {",
            "score": 99.17877875434027,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else }",
            "score": 98.83116658528645,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return true ;",
            "score": 98.81417083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getFirstChild( ) != n )",
            "score": 99.558349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( returnNode , ns ) ; } else {",
            "score": 99.49724264705883,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( return CaMeL Node , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ****/",
            "score": 99.18111843532986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { if( } }",
            "score": 99.1785555752841,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } else {",
            "score": 98.81287493024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( recordNode ) ;",
            "score": 99.51786041259766,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( parent , ns ) ; } else {",
            "score": 99.49668255974265,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( parent , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent.getParent( ) ; } }",
            "score": 99.360546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return } }",
            "score": 99.18277994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else",
            "score": 99.1805419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { catch else { }",
            "score": 98.81179809570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { catch else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ,1) ;",
            "score": 99.55718635110294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return recordDepScope( recordNode , ns ) ;",
            "score": 99.51782944623162,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , ns ) ;",
            "score": 99.49609375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( ) ) {",
            "score": 99.35858154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . equals ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if( }",
            "score": 99.18200005425348,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } catch else ;",
            "score": 99.17876519097223,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } catch else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node instanceof Node ) {",
            "score": 99.17628173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else /",
            "score": 98.82896931966145,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { } {",
            "score": 98.81036376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , index ) ;",
            "score": 99.51701803768383,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t , recordNode ) ; } else {",
            "score": 99.4952392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t , record CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} Node parent = n.getParent( ) ;",
            "score": 99.3583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} Node parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { break ; } } } else {",
            "score": 99.18040161132812,
            "correctness": "uncompilable",
            "tokenized_patch": "else { break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } return false ;",
            "score": 99.177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } } }",
            "score": 98.8285903930664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ }",
            "score": 98.80940755208333,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ') ;",
            "score": 99.55575796274039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c') ;",
            "score": 99.55575796274039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a') ;",
            "score": 99.55575796274039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b') ;",
            "score": 99.55575796274039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \") ;",
            "score": 99.55575796274039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , index ) ;",
            "score": 99.5167595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , l ) ; } else {",
            "score": 99.49523207720588,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , l ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getNext( ) != n )",
            "score": 99.35736083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { throw { } } } else {",
            "score": 99.18020629882812,
            "correctness": "uncompilable",
            "tokenized_patch": "} { throw { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if }",
            "score": 99.17770385742188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof } else {",
            "score": 99.17568969726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } public",
            "score": 98.82818603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } public",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } while else {",
            "score": 98.8082275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } while else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; } else :",
            "score": 99.49414780560662,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; } else :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ break ; } } } else {",
            "score": 99.17964680989583,
            "correctness": "uncompilable",
            "tokenized_patch": "{ break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally = null ;",
            "score": 99.17732747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent != null ) {",
            "score": 99.17567027698864,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { } else",
            "score": 98.82456970214844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else } }",
            "score": 98.80599975585938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( recordNode , ns ) ; }",
            "score": 99.51464080810547,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns == null ) {",
            "score": 99.4196533203125,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ns == null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else throw new RuntimeException( 'AstChangeProxy::getRhs '}",
            "score": 99.1755038174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'c'}",
            "score": 99.1755038174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'a'}",
            "score": 99.1755038174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'b'}",
            "score": 99.1755038174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( \"'s value.  \"}",
            "score": 99.1755038174716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } } }",
            "score": 99.17540825737848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else if }",
            "score": 98.80555725097656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ; } } else {",
            "score": 99.41921164772727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( else ) ; } } else {",
            "score": 99.17849731445312,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( else ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if }( else ;",
            "score": 99.17529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null ) { {",
            "score": 99.17406116832386,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { } else",
            "score": 98.8210678100586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *} / /",
            "score": 98.80548858642578,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *String recordDepScope( recordNode , ns ) ;",
            "score": 99.55264102711396,
            "correctness": "uncompilable",
            "tokenized_patch": "} * String record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( endNode , ns ) ;",
            "score": 99.51416733685662,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( end CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = recordDepScope( parent , ns ) ; } else {",
            "score": 99.49321432674633,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = record CaMeL Dep CaMeL Scope ( parent , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "? recordDepScope( nameNode , ns ) ?",
            "score": 99.35541178385417,
            "correctness": "uncompilable",
            "tokenized_patch": "? record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = } } else {",
            "score": 99.17621459960938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if }( else ;",
            "score": 99.17485894097223,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } else",
            "score": 98.80494035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getNext( ) != n )",
            "score": 99.5516586303711,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { recordDepScope( this , parent , ns ) ;",
            "score": 99.51399500229779,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , n ) ; } } else {",
            "score": 99.49113464355469,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , n ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != ) {",
            "score": 99.41787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns instanceof NodeTraversal ) {",
            "score": 99.35528564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns instanceof Node CaMeL Traversal ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } else { if }",
            "score": 99.17458767361111,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else {",
            "score": 99.17223249162946,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node ) ; }",
            "score": 99.55164446149554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , next ) ;",
            "score": 99.51380830652573,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , next ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode ) ; } else {",
            "score": 99.49048569623162,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode ; } } else {",
            "score": 99.4173114483173,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { if } else",
            "score": 99.17386203342014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent == null ) {",
            "score": 99.17249755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw t ; } } else {",
            "score": 99.17170854048295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw t ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } if else ;",
            "score": 98.81122589111328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { */",
            "score": 98.80487060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode.getNext( ) != n )",
            "score": 99.5514275045956,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , scope ) ;",
            "score": 99.51357134650735,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , scope ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ; } else {",
            "score": 99.41681518554688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*Node parent = parent.getParent( ) ;",
            "score": 99.35421048677884,
            "correctness": "uncompilable",
            "tokenized_patch": "* Node parent = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch } } }",
            "score": 99.17365180121527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return true ; } }",
            "score": 99.17153591579861,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } } } else {",
            "score": 99.17138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return ; } } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else if else",
            "score": 98.81081717354911,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **if else {",
            "score": 98.80420684814453,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( code ) ;",
            "score": 99.55051832932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( code ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , ns ) ; } }",
            "score": 99.51291073069854,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; / *",
            "score": 99.48983764648438,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; / *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent.getFirstChild( ) ;",
            "score": 99.35234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( target != null ) {",
            "score": 99.17127574573864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( target != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { { else {",
            "score": 99.17105441623264,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else if else ;",
            "score": 98.80998229980469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n.getFirstChild( ) ; }",
            "score": 99.51183363970588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n . get CaMeL First CaMeL Child ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = recordDepScope( nameNode ) ; } else {",
            "score": 99.4877570657169,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isFor( ns ) ) {",
            "score": 99.41424153645833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*Node parent = n.getParent( ) ;",
            "score": 99.35057654747597,
            "correctness": "uncompilable",
            "tokenized_patch": "* Node parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } , null {",
            "score": 99.17200385199652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } } }",
            "score": 99.17093234592014,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return ; } } }",
            "score": 99.16975541548295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else",
            "score": 98.80946568080357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false ;",
            "score": 98.80314127604167,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , n , ns ) ;",
            "score": 99.51179773667279,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , n , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) ) {",
            "score": 99.41388811383929,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else if }",
            "score": 99.17197672526042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { { } } }",
            "score": 99.17054443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return } } else {",
            "score": 99.16973876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = { else",
            "score": 98.8087158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } }",
            "score": 98.80125209263393,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , nameNode ) ;",
            "score": 99.5486701516544,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns , ;",
            "score": 99.5116828469669,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = nameNode ; } } else {",
            "score": 99.48661804199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = name CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! parent.isFor( ) ) {",
            "score": 99.41363118489583,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ! parent . is CaMeL For ( ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( parent.getParent( ) != n )",
            "score": 99.34998372395833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if }",
            "score": 99.17167663574219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { return false ; } else {",
            "score": 99.16993408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( nameNode != null ) {",
            "score": 99.16916725852273,
            "correctness": "wrong",
            "tokenized_patch": "} if ( name CaMeL Node != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { / / if }",
            "score": 98.80062103271484,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / / if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.isForIn( ) ) {",
            "score": 99.5478156594669,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ) ; } } else {",
            "score": 99.48646545410156,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( ns ) ) {",
            "score": 99.41329251802884,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . equals ( ns ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; } else",
            "score": 99.34749058314732,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { } } else {",
            "score": 99.16964111328124,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } catch }",
            "score": 99.16963026258681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( parent != null )",
            "score": 99.16827947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } }",
            "score": 98.80499267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else }",
            "score": 98.80056326729911,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns , }",
            "score": 99.51144588694854,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , true ) ; } else {",
            "score": 99.48551671645221,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , true ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( ns ) ; } } else {",
            "score": 99.41240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( ns ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ) ; } } else",
            "score": 99.34690755208334,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else } if }",
            "score": 99.16901991102431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else { {",
            "score": 99.16856553819444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "completed = true ; break ; } }",
            "score": 99.16644287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "completed = true ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else else",
            "score": 98.8035176595052,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if else { } }",
            "score": 98.79855346679688,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.isFor( parent ) ) {",
            "score": 99.5093017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this ) ; } } else {",
            "score": 99.4845832375919,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { } }",
            "score": 99.16835530598958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == null )",
            "score": 99.16602918836806,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { { }",
            "score": 98.80300903320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( name , ns ) ;",
            "score": 99.54535319010417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode.getNext( ) != n ) {",
            "score": 99.50878143310547,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Node . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , n ) ; } else {",
            "score": 99.48444010416667,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( recordNode ) ) {",
            "score": 99.411767578125,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . equals ( record CaMeL Node ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if( parent.getNext( ) != n ;",
            "score": 99.33678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / **/ }",
            "score": 99.16785346137152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent == null )",
            "score": 99.16583930121527,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else { return ; } } } else {",
            "score": 99.16534978693181,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } { else",
            "score": 98.80233764648438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / / / /",
            "score": 98.79652404785156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , out ) ;",
            "score": 99.54454130284927,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , out ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( ns.getNext( ) != n ) {",
            "score": 99.41150716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( ns . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( t , ns ) ;",
            "score": 99.33571951729911,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else return else",
            "score": 99.16720241970486,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else return else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return false ; } } }",
            "score": 99.16413031684027,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { } else",
            "score": 98.80050223214286,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ } } }",
            "score": 98.79566955566406,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case 'AstChangeProxy::getRhs ': recordDepScope( nameNode , ns ) ;",
            "score": 99.54409610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "case $STRING$ : record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case 'c': recordDepScope( nameNode , ns ) ;",
            "score": 99.54409610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "case $STRING$ : record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case 'a': recordDepScope( nameNode , ns ) ;",
            "score": 99.54409610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "case $STRING$ : record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case 'b': recordDepScope( nameNode , ns ) ;",
            "score": 99.54409610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "case $STRING$ : record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case \"'s value.  \": recordDepScope( nameNode , ns ) ;",
            "score": 99.54409610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "case $STRING$ : record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ; } else {",
            "score": 99.48416137695312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( null , ns ) ;",
            "score": 99.33141217912946,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( null , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else {( else ; }",
            "score": 99.16716172960069,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { ( else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { } } } else {",
            "score": 99.16455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return } } }",
            "score": 99.16360812717014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else } } else",
            "score": 98.7978744506836,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *} /",
            "score": 98.79446847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , 'AstChangeProxy::getRhs ') ;",
            "score": 99.54375861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , 'c') ;",
            "score": 99.54375861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , 'a') ;",
            "score": 99.54375861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , 'b') ;",
            "score": 99.54375861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , \"'s value.  \") ;",
            "score": 99.54375861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } recordDepScope( nameNode , ns ) ;",
            "score": 99.50267791748047,
            "correctness": "uncompilable",
            "tokenized_patch": "} } record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode ) ; } } else {",
            "score": 99.48414522058823,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , ns ) ;",
            "score": 99.32911028180804,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else } }",
            "score": 99.16712103949652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { return ; } }",
            "score": 99.1635498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else if else {",
            "score": 98.79655238560268,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { if }",
            "score": 98.79376220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( t , ns ) ) {",
            "score": 99.54357192095588,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( t , ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( nameNode , ns ) ; }",
            "score": 99.50098419189453,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ) ; } else {",
            "score": 99.48229217529297,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getParent( ) == n ) {",
            "score": 99.40677315848214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Parent ( ) == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( recordNode , ns ,",
            "score": 99.32835286458334,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } else { if } }",
            "score": 99.16693793402777,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( 'AstChangeProxy::getRhs ') ;",
            "score": 99.16391823508523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( 'c') ;",
            "score": 99.16391823508523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( 'a') ;",
            "score": 99.16391823508523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( 'b') ;",
            "score": 99.16391823508523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( \"'s value.  \") ;",
            "score": 99.16391823508523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { n = } ; }",
            "score": 99.16262478298611,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { n = } ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( else {",
            "score": 98.79362269810268,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( parent.getFirstChild( ) != n )",
            "score": 99.54355037913604,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( parent . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( nameNode , ns ) )",
            "score": 99.4999008178711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } else { if }",
            "score": 99.16594780815973,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; } } else",
            "score": 99.1637850674716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { { else {",
            "score": 99.16197374131944,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } t",
            "score": 98.79600524902344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } t",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } *if }",
            "score": 98.7935562133789,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *String recordDepScope( nameNode , ns ) ;",
            "score": 99.54322007123162,
            "correctness": "uncompilable",
            "tokenized_patch": "} * String record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } else ;",
            "score": 99.164306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } parent = } else {",
            "score": 99.16340467664931,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } parent = } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return false ; } } else {",
            "score": 99.16185167100694,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } { }",
            "score": 98.79521179199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } */",
            "score": 98.79261779785156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns.getParent( ) ;",
            "score": 99.49897003173828,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , n ) ; } else {",
            "score": 99.47544759114584,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode.getNext( ) !=",
            "score": 99.40392252604167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isFor( n ) ) {",
            "score": 99.32503568209134,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } } }",
            "score": 99.16416422526042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { index ++ ; } } else {",
            "score": 99.161767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { index ++ ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( node != null ) {",
            "score": 99.16086647727273,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } {",
            "score": 98.79429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else { } }",
            "score": 98.79229736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( name node , ns ) ;",
            "score": 99.54210662841797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( null , ns ) ; } else {",
            "score": 99.47439778645834,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( null , ns ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if( recordNode != null ) {",
            "score": 99.324951171875,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( record CaMeL Node != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { if } } */",
            "score": 99.16314697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; } } else",
            "score": 99.16043090820312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent } else {",
            "score": 99.15899658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { case else { }",
            "score": 98.79214477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { case else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , ns , ns ) ;",
            "score": 99.54172650505515,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( type , ns ) ;",
            "score": 99.49627278645833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( type , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , null ) ;",
            "score": 99.47403717041016,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( node , ns ) ;",
            "score": 99.32380022321429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( true {",
            "score": 99.16266547309027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( true {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { throw new } } else {",
            "score": 99.16042258522727,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { throw new } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else if else",
            "score": 98.79304504394531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if null ;",
            "score": 98.78874969482422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , key ) ;",
            "score": 99.54075712316177,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , key ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return recordDepScope( recordNode , ns ) ;",
            "score": 99.49575805664062,
            "correctness": "uncompilable",
            "tokenized_patch": "} return record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( t ) ) {",
            "score": 99.3974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( t ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( parent , ns ) ; }",
            "score": 99.32073102678571,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( parent , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return true ;",
            "score": 99.16250271267361,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else break ; } } } else {",
            "score": 99.15882457386364,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return } } else {",
            "score": 99.15609741210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } try",
            "score": 98.79202270507812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; if else { }",
            "score": 98.78868103027344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , target ) ;",
            "score": 99.54051298253677,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , target ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ) ;",
            "score": 99.49220275878906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isForIn( ns ) ) {",
            "score": 99.39462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For CaMeL In ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( false ) ; }",
            "score": 99.31973702566964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( false ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } finally {",
            "score": 99.16194661458333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { index = } } else {",
            "score": 99.15576782226563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { index = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else { else",
            "score": 98.79106903076172,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } *",
            "score": 98.78805541992188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent.recordDepScope( recordNode , ns ) ;",
            "score": 99.54001752068015,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , n ) ;",
            "score": 99.49212239583333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ******/",
            "score": 99.16189236111111,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { while( } } else {",
            "score": 99.15475802951389,
            "correctness": "uncompilable",
            "tokenized_patch": "} { while ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { } else",
            "score": 98.79055786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } else }",
            "score": 98.78748321533203,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } recordDepScope( nameNode , ns ) ;",
            "score": 99.53977338005515,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = parent.getFirstChild( ) ; } else {",
            "score": 99.464599609375,
            "correctness": "wrong",
            "tokenized_patch": "parent = parent . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if( recordDepScope != n ) {",
            "score": 99.39418247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isFor( ns ) ) {",
            "score": 99.31753305288461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } else if }",
            "score": 99.16144476996527,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { {",
            "score": 99.15665011935764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { } } }",
            "score": 99.15353732638889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { } {",
            "score": 98.78792898995536,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */",
            "score": 98.7861572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { recordDepScope( nameNode , ns ) ; }",
            "score": 99.53894761029412,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , parent ) ;",
            "score": 99.46424865722656,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( n ) ) {",
            "score": 99.39375813802083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch }",
            "score": 99.16131591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else break ; } } }",
            "score": 99.15660511363636,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return recordDepScope( nameNode , ns ) ;",
            "score": 99.48555755615234,
            "correctness": "uncompilable",
            "tokenized_patch": "} return record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n ; } } else {",
            "score": 99.39286295572917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isFor( ) ) {",
            "score": 99.31470743815105,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch } }",
            "score": 99.16080729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.} else {",
            "score": 99.15436345880681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent != null )",
            "score": 99.15235595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } else",
            "score": 98.7852783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { }",
            "score": 98.78507486979167,
            "correctness": "wrong",
            "tokenized_patch": "} else { { }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} && recordDepScope( recordNode , ns ) ;",
            "score": 99.48516845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} && record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( nameNode , ns ,",
            "score": 99.39112955729166,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else *****/",
            "score": 99.16074625651042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else * * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; } else {",
            "score": 99.15228949652777,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { } {",
            "score": 98.78291320800781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != null ) {",
            "score": 99.46366119384766,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.hasChild( ) ) {",
            "score": 99.39008440290179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . has CaMeL Child ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns.add( recordNode , ns ) ;",
            "score": 99.313232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns . add ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / *else */",
            "score": 99.15854220920139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * else * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } else { } } else {",
            "score": 99.15120072798295,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else if else {",
            "score": 98.7823486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } else {",
            "score": 98.78211321149554,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = ns.getParent( ) ; } else {",
            "score": 99.46015276227679,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = ns . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isTrue( ) ) {",
            "score": 99.38931710379464,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . is CaMeL True ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if }( } else {",
            "score": 99.15542263454861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { } } else {",
            "score": 99.15218505859374,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } } } else {",
            "score": 99.15070258246527,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *else {",
            "score": 98.7820332845052,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } throw",
            "score": 98.78087615966797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } throw",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.recordDepScope( nameNode , ns ) ;",
            "score": 99.53630065917969,
            "correctness": "wrong",
            "tokenized_patch": "this . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "recordDepScope( nameNode , ns , n ) ;",
            "score": 99.45973205566406,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else return {",
            "score": 99.15480550130208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { while else { }",
            "score": 98.78136444091797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { while else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else if else throws",
            "score": 98.78073120117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = recordDepScope( nameNode , ns ) ;",
            "score": 99.53622436523438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n.getFirstChild( ) ;",
            "score": 99.48283386230469,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = n . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if } } , false else",
            "score": 99.15365939670139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , false else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { } } }",
            "score": 99.15172661675348,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.1496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'c') ; } }",
            "score": 99.1496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'a') ; } }",
            "score": 99.1496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'b') ; } }",
            "score": 99.1496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( \"'s value.  \") ; } }",
            "score": 99.1496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; } else {",
            "score": 98.78129577636719,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = null {",
            "score": 98.7776870727539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isAll( ) ) {",
            "score": 99.38561139787946,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL All ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( this , ns ) ;",
            "score": 99.31098284040179,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( this , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false else ; }",
            "score": 99.15343560112848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { return else {",
            "score": 99.15077718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( { return ; } } else {",
            "score": 99.14911443536931,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ } }",
            "score": 98.780029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else println else /",
            "score": 98.77725982666016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else println else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } else",
            "score": 99.15271759033203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { n = } ; } }",
            "score": 99.15025024414062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { n = } ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else if( }",
            "score": 99.14859619140626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } / {",
            "score": 98.77979278564453,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'AstChangeProxy::getRhs ') ; } else {",
            "score": 99.45676832932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'c') ; } else {",
            "score": 99.45676832932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'a') ; } else {",
            "score": 99.45676832932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'b') ; } else {",
            "score": 99.45676832932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( \"'s value.  \") ; } else {",
            "score": 99.45676832932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } if }",
            "score": 99.15167914496527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = null ; } else {",
            "score": 99.1494873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { } } } }",
            "score": 99.14844859730114,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / else {",
            "score": 98.77918497721355,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if else",
            "score": 98.77605329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else { recordDepScope( nameNode , ns ) ;",
            "score": 99.53453153722427,
            "correctness": "uncompilable",
            "tokenized_patch": "else else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = ns.getFirstChild( ) ; } else {",
            "score": 99.45654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = ns . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != ns ) {",
            "score": 99.37993512834821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( parent , ns ) ;",
            "score": 99.3041522686298,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else / / **/",
            "score": 99.15135362413194,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else / / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if( }",
            "score": 99.14938015407986,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else } }",
            "score": 98.7786865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } recordDepScope( nameNode , ns ) ;",
            "score": 99.53448127297794,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) != n ) {",
            "score": 99.4786148071289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ".recordDepScope( recordNode , ns ) ;",
            "score": 99.30299479166666,
            "correctness": "uncompilable",
            "tokenized_patch": ". record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / ***/ }",
            "score": 99.15058051215277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / * * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { break ; }",
            "score": 99.14910210503473,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { if( } }",
            "score": 99.147607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } / / /",
            "score": 98.77812194824219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else logger",
            "score": 98.77317301432292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! isForIn( parent ) ) {",
            "score": 99.53424835205078,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , n ) ; }",
            "score": 99.47810363769531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; case",
            "score": 99.45645345052084,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; case",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , !",
            "score": 99.37803548177084,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} Node parent = parent.getParent( ) ;",
            "score": 99.30117563100961,
            "correctness": "uncompilable",
            "tokenized_patch": "} Node parent = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { return false ;",
            "score": 99.14893256293402,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { break ; } else {",
            "score": 99.1478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { level = } } else {",
            "score": 99.145654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { level = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **if else { }",
            "score": 98.7774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else { }",
            "score": 98.77194649832589,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , ns , parent ) ;",
            "score": 99.53366986443015,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( type , ns ) ; }",
            "score": 99.47691345214844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( type , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n.getParent( ) ; }",
            "score": 99.37696126302083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode != n ) {",
            "score": 99.30111694335938,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( name CaMeL Node != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { if } } } catch }",
            "score": 99.14872233072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } return ;",
            "score": 99.143798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else println else",
            "score": 98.77161516462054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else println else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) )",
            "score": 99.53301532451923,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != ns ) {",
            "score": 99.47618865966797,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = n.getFirstChild( ) ; } else {",
            "score": 99.45423126220703,
            "correctness": "wrong",
            "tokenized_patch": "parent = n . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( parent.getNext( ) !=0) {",
            "score": 99.37547084263393,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == n ) {",
            "score": 99.3006103515625,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent == n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if } } else { {",
            "score": 99.14818657769098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { parent = } } else {",
            "score": 99.14706759982639,
            "correctness": "uncompilable",
            "tokenized_patch": "} { parent = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { assert scope != null ; } }",
            "score": 99.14284446022727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { assert scope != null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } { }",
            "score": 98.77716827392578,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } if else { }",
            "score": 98.7711181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( NodeUtil.isFor( parent ) )",
            "score": 99.53282165527344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( Node CaMeL Util . is CaMeL For ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) !=",
            "score": 99.3741455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.getFirstChild( ) != n )",
            "score": 99.29967447916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if } }",
            "score": 99.14783477783203,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "changed = true ; break ; } }",
            "score": 99.14229329427083,
            "correctness": "uncompilable",
            "tokenized_patch": "changed = true ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / if else",
            "score": 98.77714538574219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else } {",
            "score": 98.77078683035714,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { recordDepScope( node , ns ) ;",
            "score": 99.53273638556985,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { record CaMeL Dep CaMeL Scope ( node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t ) ; } else {",
            "score": 99.45252403846153,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns instanceof NameInformation ) {",
            "score": 99.29933675130208,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ns instanceof Name CaMeL Information ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if { } else ; }",
            "score": 99.14696587456598,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return null ; } }",
            "score": 99.146923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else if else }",
            "score": 98.77687072753906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } }",
            "score": 98.77022879464286,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( name , ns ) ; }",
            "score": 99.53253936767578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , parent ) ;",
            "score": 99.47437286376953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordDepScope != null ) {",
            "score": 99.29833045372597,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( record CaMeL Dep CaMeL Scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { if } } else ;",
            "score": 99.14637586805556,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( } }",
            "score": 99.14493136935764,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( type != null ) {",
            "score": 99.14178466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( type != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / / / }",
            "score": 98.77613067626953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / / / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } { }",
            "score": 98.76925659179688,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , key ) ;",
            "score": 99.53179572610294,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , key ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.contains( ns ) ) {",
            "score": 99.3702392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . contains ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isForIn( parent ) ) {",
            "score": 99.29741962139423,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } / *{",
            "score": 99.14611138237848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } / * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break false ; } } } else {",
            "score": 99.14161512586806,
            "correctness": "uncompilable",
            "tokenized_patch": "break false ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ;",
            "score": 98.77301025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else = else {",
            "score": 98.76921844482422,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else = else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode + 'AstChangeProxy::getRhs ') ;",
            "score": 99.53118537454044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode + 'c') ;",
            "score": 99.53118537454044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode + 'a') ;",
            "score": 99.53118537454044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode + 'b') ;",
            "score": 99.53118537454044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode + \"'s value.  \") ;",
            "score": 99.53118537454044,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ; } else {",
            "score": 99.36904907226562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } finally { if }",
            "score": 99.14489067925348,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } finally { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return false ; } } } }",
            "score": 99.14306030273437,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return false ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'AstChangeProxy::getRhs '} } else",
            "score": 99.1414462002841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'c'} } else",
            "score": 99.1414462002841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a'} } else",
            "score": 99.1414462002841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'b'} } else",
            "score": 99.1414462002841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( \"'s value.  \"} } else",
            "score": 99.1414462002841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } / / / /",
            "score": 98.77294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } / / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else { } { }",
            "score": 98.76918029785156,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ref ) ;",
            "score": 99.5298210592831,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ref ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( t , ns ) ;",
            "score": 99.47205352783203,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ; } } else {",
            "score": 99.36891867897727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } / */",
            "score": 99.14417860243056,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( type != null )",
            "score": 99.14045854048295,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( type != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } *if else {",
            "score": 98.77203369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } logger",
            "score": 98.76872253417969,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( scope , nameNode ) ;",
            "score": 99.52978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( scope , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , n ) ;",
            "score": 99.47159830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , parent ) ; } else {",
            "score": 99.43946940104166,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , parent ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != node ) {",
            "score": 99.36844308035714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isFor( n ) ) {",
            "score": 99.292724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } } if }",
            "score": 99.14345974392361,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else return ; } }",
            "score": 99.14072875976562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } } else { }",
            "score": 99.13986206054688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { }",
            "score": 98.77102225167411,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = else Logger",
            "score": 98.76822662353516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = else Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "type = recordDepScope( recordNode , ns ) ;",
            "score": 99.52925872802734,
            "correctness": "uncompilable",
            "tokenized_patch": "type = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( true ) ; }",
            "score": 99.47038051060268,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( true ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = n.getParent( ) ; } } else {",
            "score": 99.43834635416667,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = n . get CaMeL Parent ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( t.isFor( ) ) {",
            "score": 99.36572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( t . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != n ) {",
            "score": 99.29134521484374,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if } } else }",
            "score": 99.1428451538086,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } while( parent != null )",
            "score": 99.14067247178819,
            "correctness": "uncompilable",
            "tokenized_patch": "} } while ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / */",
            "score": 98.7706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } if else",
            "score": 98.76704624720982,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { recordDepScope( recordNode , ns ) ;",
            "score": 99.52925109863281,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} assert recordDepScope( recordNode , ns ) ;",
            "score": 99.46979522705078,
            "correctness": "uncompilable",
            "tokenized_patch": "} assert record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , n ) ;",
            "score": 99.4377670288086,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != false ) {",
            "score": 99.36566162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } / *?",
            "score": 99.14268663194444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } / * ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { throw new { } }",
            "score": 99.14048461914062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { throw new { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { break ; } }",
            "score": 99.1382568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } /",
            "score": 98.77062116350446,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else }",
            "score": 98.76617431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , false ) ;",
            "score": 99.46959686279297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( parent , ns ) )",
            "score": 99.29023960658482,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( parent , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else break {",
            "score": 99.14201524522569,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent == null else {",
            "score": 99.14046020507813,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent == null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'AstChangeProxy::getRhs ') ;",
            "score": 99.13702947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'c') ;",
            "score": 99.13702947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'a') ;",
            "score": 99.13702947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'b') ;",
            "score": 99.13702947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( \"'s value.  \") ;",
            "score": 99.13702947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { }",
            "score": 98.76980590820312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else",
            "score": 98.765576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', t ) ;",
            "score": 99.52759602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', t ) ;",
            "score": 99.52759602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', t ) ;",
            "score": 99.52759602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', t ) ;",
            "score": 99.52759602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", t ) ;",
            "score": 99.52759602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode.isFor( ) ) {",
            "score": 99.46772003173828,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( record CaMeL Node . is CaMeL For ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "recordDepScope( ns ) ; } } else {",
            "score": 99.43678501674107,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( type ) ;",
            "score": 99.28737229567308,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else = else",
            "score": 99.14091661241319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else = else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( } } else { {",
            "score": 99.1396728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'AstChangeProxy::getRhs ') ;",
            "score": 99.1366854580966,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'c') ;",
            "score": 99.1366854580966,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'a') ;",
            "score": 99.1366854580966,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( 'b') ;",
            "score": 99.1366854580966,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw new RuntimeException( \"'s value.  \") ;",
            "score": 99.1366854580966,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } while else {",
            "score": 98.76948547363281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } while else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null ) ;",
            "score": 99.52708082932692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getLine( ) != n ) {",
            "score": 99.46719360351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Line ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n ) ; } } else {",
            "score": 99.43614850725446,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , new",
            "score": 99.36177571614583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , new",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) == n )",
            "score": 99.28721516927084,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) == n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if } else ;",
            "score": 99.14088657924107,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { { } }",
            "score": 99.13934936523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { { return ; } } } else {",
            "score": 99.1365633877841,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } / / /",
            "score": 98.76947021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else *",
            "score": 98.75623575846355,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} && recordDepScope( nameNode , ns ) ;",
            "score": 99.46696472167969,
            "correctness": "uncompilable",
            "tokenized_patch": "} && record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordNode ; } } else {",
            "score": 99.35854867788461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode ) ;",
            "score": 99.28630719866071,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } / **{",
            "score": 99.14056396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } / * * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { if( }",
            "score": 99.136083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( target , ns ) ;",
            "score": 99.52594401041667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( target , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else ; {",
            "score": 99.14054361979167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { index = } } else {",
            "score": 99.13644070095486,
            "correctness": "uncompilable",
            "tokenized_patch": "} { index = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = recordDepScope( recordNode , ns ) ;",
            "score": 99.52499389648438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( isForIn( parent ) ) {",
            "score": 99.46537780761719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = n.getParent( ) ; } else {",
            "score": 99.43424224853516,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else { recordDepScope( nameNode , ns ,",
            "score": 99.35694986979166,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( parent , ns ) ;",
            "score": 99.2840576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { } } else",
            "score": 99.14036051432292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { continue ; } else {",
            "score": 99.13585316051136,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { continue ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return true ; } }",
            "score": 99.13560180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else } }",
            "score": 98.74848284040179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "type = recordDepScope( nameNode , ns ) ;",
            "score": 99.52374267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "type = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , ns ) ; } else",
            "score": 99.28326416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , ns ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } } }",
            "score": 99.1397705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( target == null )",
            "score": 99.13545365767045,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( target == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { break ; } }",
            "score": 99.13422241210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / / {",
            "score": 98.7674789428711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { final Node n = n.getParent( ) ;",
            "score": 99.46392822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { final Node n = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*void recordDepScope( recordNode , ns ,",
            "score": 99.282763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "* void record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } else ; }",
            "score": 99.13966200086806,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; } else {",
            "score": 99.13377075195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / else }",
            "score": 98.76712799072266,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "y = recordDepScope( nameNode , ns ) ;",
            "score": 99.5225601196289,
            "correctness": "uncompilable",
            "tokenized_patch": "y = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = n.getParent( ) ; }",
            "score": 99.4624267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isStart( ) ) {",
            "score": 99.35507638113839,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL Start ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( parent ) ) {",
            "score": 99.28253643329327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , else {",
            "score": 99.13953314887152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw } } else {",
            "score": 99.13503689236111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } } {",
            "score": 99.13330688476563,
            "correctness": "wrong",
            "tokenized_patch": "} else { { return ; } } {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} } else } }",
            "score": 98.76610310872395,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } }",
            "score": 98.74318150111607,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = n.getFirstChild( ) ;",
            "score": 99.45997619628906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = n . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; for(",
            "score": 99.4249267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; for (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , !",
            "score": 99.35501302083334,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != null )",
            "score": 99.28230794270833,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { } } if } else",
            "score": 99.13753255208333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( parent != null ) {",
            "score": 99.1330233487216,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { continue ; } } else {",
            "score": 99.13165283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { continue ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { }",
            "score": 98.76564025878906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } { }",
            "score": 98.74134318033855,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , t ) ;",
            "score": 99.5208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( info , ns ) ; } else {",
            "score": 99.42176106770833,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( info , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isLocal( ) ) {",
            "score": 99.35454450334821,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL Local ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns.getParent( ) ; }",
            "score": 99.27975899832589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if null ;",
            "score": 99.13618299696181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else { }",
            "score": 99.13263549804688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **if else }",
            "score": 98.7633285522461,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Logger",
            "score": 98.74024454752605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ) ;",
            "score": 99.52074432373047,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( nameNode ) ;",
            "score": 99.45795440673828,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t , n ) ; } else {",
            "score": 99.42144368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns.getParent( ) ;",
            "score": 99.27694936899039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { / */ }",
            "score": 99.13611518012152,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { / * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } else {",
            "score": 99.13235812717014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else break ; } } } else {",
            "score": 99.12932671440973,
            "correctness": "uncompilable",
            "tokenized_patch": "else break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; if else }",
            "score": 98.76316833496094,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , parent ) ;",
            "score": 99.4574966430664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; case",
            "score": 99.419873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; case",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != index ) {",
            "score": 99.35223388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != index ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.isForIn( ns ) :",
            "score": 99.2765380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For CaMeL In ( ns ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } } else",
            "score": 99.13496229383681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else { } } else {",
            "score": 99.1318603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } else { else {",
            "score": 99.12923855251736,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( parent.getFirstChild( ) != n ) {",
            "score": 99.51914978027344,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( parent . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { addNode( recordNode , ns ) ;",
            "score": 99.45709635416667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { add CaMeL Node ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = n.getParent( ) ; } } else {",
            "score": 99.4197998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = n . get CaMeL Parent ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.hasNext( ) ) {",
            "score": 99.35181535993304,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . has CaMeL Next ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( null ) ) {",
            "score": 99.27508075420673,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . equals ( null ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if else { else ; }",
            "score": 99.133544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { return false )",
            "score": 99.13063742897727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { return false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / *{",
            "score": 98.76142883300781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( info , ns ) ;",
            "score": 99.51880696614583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( info , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != parent ) {",
            "score": 99.4570541381836,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != parent ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } /",
            "score": 99.41971588134766,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != this ) {",
            "score": 99.35049874441964,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , n ) ;",
            "score": 99.27505057198661,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch } }",
            "score": 99.13265991210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != this ) {",
            "score": 99.13008422851563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( } else { else {",
            "score": 99.12891845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } false {",
            "score": 98.76116180419922,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } {",
            "score": 98.72715541294643,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pos = recordDepScope( nameNode , ns ) ;",
            "score": 99.51852416992188,
            "correctness": "uncompilable",
            "tokenized_patch": "pos = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( current , ns ) ;",
            "score": 99.45672200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( current , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordNode ; } else {",
            "score": 99.34796142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode != n ) {",
            "score": 99.27486165364583,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( record CaMeL Node != n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "59"
        },
        {
            "patch": "} else if } } else if else",
            "score": 99.13165961371527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code = } } else {",
            "score": 99.13004760742187,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null else {",
            "score": 99.12877197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { *else { }",
            "score": 98.76101684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = recordDepScope( nameNode , ns ) ;",
            "score": 99.51715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "node = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} assert recordDepScope( nameNode , ns ) ;",
            "score": 99.45489501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} assert record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = ns.getParent( ) ; } else {",
            "score": 99.41798618861607,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = ns . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , n ) ;",
            "score": 99.27401297433036,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( target != null ) {",
            "score": 99.12987171519886,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( target != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if } else {",
            "score": 99.12942843967014,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } / else",
            "score": 98.76025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } / else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else",
            "score": 98.72207641601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , node ) ;",
            "score": 99.45219421386719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent ; } } else {",
            "score": 99.34742228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if { } } }",
            "score": 99.1292724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return true ; }",
            "score": 99.12748209635417,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else ) {",
            "score": 98.75996398925781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else recordDepScope( recordNode , ns ) ;",
            "score": 99.5136489868164,
            "correctness": "uncompilable",
            "tokenized_patch": "else else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( false , ns ) ;",
            "score": 99.45103352864584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( false , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = parent.getParent( ) ; } else {",
            "score": 99.41552734375,
            "correctness": "wrong",
            "tokenized_patch": "parent = parent . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( parent.getNext( ) != parent ) {",
            "score": 99.34689767020089,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != parent ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { if } }",
            "score": 99.12887234157986,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { if( }",
            "score": 99.12863991477273,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else {",
            "score": 99.12744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else if else {",
            "score": 98.75992584228516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( true , ns ) ;",
            "score": 99.44979654947916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( true , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( type != null ) {",
            "score": 99.128173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( type != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } else {",
            "score": 99.12719048394098,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } if } }",
            "score": 99.12708875868056,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } else {",
            "score": 98.75975799560547,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else }",
            "score": 98.7168680826823,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ) ; } else {",
            "score": 99.4150161743164,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , ns ,",
            "score": 99.271533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { { else {",
            "score": 99.12716335720486,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } if else ;",
            "score": 99.12673611111111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "success = true ; break ; } }",
            "score": 99.12552218967014,
            "correctness": "uncompilable",
            "tokenized_patch": "success = true ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / else { }",
            "score": 98.75815255301339,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else }",
            "score": 98.71632603236607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( nameNode , node ) ;",
            "score": 99.51209259033203,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} || recordDepScope( recordNode , ns ) ;",
            "score": 99.44912719726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} || record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != current ) {",
            "score": 99.34391566685268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != current ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != null )",
            "score": 99.27072378305289,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { { break ; } else {",
            "score": 99.12701416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } , else {",
            "score": 99.12653944227431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new InternalError( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.1238680752841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Internal CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new InternalError( 'c') ; }",
            "score": 99.1238680752841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Internal CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new InternalError( 'a') ; }",
            "score": 99.1238680752841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Internal CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new InternalError( 'b') ; }",
            "score": 99.1238680752841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Internal CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new InternalError( \"'s value.  \") ; }",
            "score": 99.1238680752841,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Internal CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } /",
            "score": 98.75786481584821,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = }",
            "score": 98.71446010044643,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = nameNode.getParent( ) ; } else {",
            "score": 99.41413879394531,
            "correctness": "wrong",
            "tokenized_patch": "parent = name CaMeL Node . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( parent.getParent( ) != n )",
            "score": 99.26929649939903,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Parent ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else if { } } } }",
            "score": 99.12506103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.contains( } }",
            "score": 99.12383478338069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . contains ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { { break ; } } }",
            "score": 99.12260131835937,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false {",
            "score": 98.75760904947917,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { else",
            "score": 98.70889282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( code , ns ) ;",
            "score": 99.5115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( code , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.isFor( ) ) {",
            "score": 99.34033203125,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n . is CaMeL For ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "case NodeUtil.isFor( parent ) :",
            "score": 99.26907113882211,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For ( parent ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } } else",
            "score": 99.12337239583333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; } } else {",
            "score": 99.12274169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent instanceof } else {",
            "score": 99.12191772460938,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent instanceof } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } }",
            "score": 98.70762939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = recordDepScope( recordNode , ns ) ;",
            "score": 99.5113296508789,
            "correctness": "uncompilable",
            "tokenized_patch": "node = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getFirstChild( ) ; } else {",
            "score": 99.44662475585938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL First CaMeL Child ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , false ) ;",
            "score": 99.41175079345703,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( nameNode.getNext( ) != null )",
            "score": 99.26836751302083,
            "correctness": "wrong",
            "tokenized_patch": "if ( name CaMeL Node . get CaMeL Next ( ) != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { if } **/",
            "score": 99.12264675564236,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( { } } else {",
            "score": 99.1222256747159,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return false ; } } else {",
            "score": 99.12163628472223,
            "correctness": "uncompilable",
            "tokenized_patch": "else return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { while else ;",
            "score": 98.75609588623047,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { while else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( scope , ns ) ;",
            "score": 99.5111083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( scope , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isNull( ) ) {",
            "score": 99.34025355747768,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL Null ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else break ; } } } else {",
            "score": 99.122021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } } else { {",
            "score": 99.12161254882812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { / *} }",
            "score": 99.12127685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { / * } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } / {",
            "score": 98.75563049316406,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else }",
            "score": 98.70575823102679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pos = recordDepScope( recordNode , ns ) ;",
            "score": 99.50987243652344,
            "correctness": "uncompilable",
            "tokenized_patch": "pos = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , t ) ;",
            "score": 99.44605255126953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( false ) ; } else {",
            "score": 99.267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( false ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = parent ; } }",
            "score": 99.12137858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if } else",
            "score": 99.12098524305556,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return true {",
            "score": 98.75377655029297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return true {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else }",
            "score": 98.70404052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "y = recordDepScope( recordNode , ns ) ;",
            "score": 99.50947570800781,
            "correctness": "uncompilable",
            "tokenized_patch": "y = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( parent , ns ) ) {",
            "score": 99.40810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( parent , ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = nameNode ; } else {",
            "score": 99.33803885323661,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = name CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) instanceof",
            "score": 99.26695963541667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) instanceof",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return { } } } }",
            "score": 99.12110731336806,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent instanceof Node ) {",
            "score": 99.1207608309659,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( else } }",
            "score": 99.12006971571181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } **/",
            "score": 98.75376892089844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else =",
            "score": 98.70333862304688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( ns.isFor( ) ) {",
            "score": 99.44446614583333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( ns . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( node , n ) ; } else {",
            "score": 99.40694986979166,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( node , n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( recordNode ) ;",
            "score": 99.26683698381696,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } break ;",
            "score": 99.11928304036458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { } } } }",
            "score": 99.1192138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if }",
            "score": 98.75344848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { else",
            "score": 98.69834681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { recordDepScope( ns ) ;",
            "score": 99.50262858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , node ) ;",
            "score": 99.44224548339844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ; } } }",
            "score": 99.40675354003906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent.isFor( ) ) {",
            "score": 99.33395620492789,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent . is CaMeL For ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "case NodeUtil.isForIn( t ) :",
            "score": 99.265869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For CaMeL In ( t ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; } } else",
            "score": 99.11924913194444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } break ; } } else {",
            "score": 99.11901245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else ;",
            "score": 98.753271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', n ) ;",
            "score": 99.500927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', n ) ;",
            "score": 99.500927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', n ) ;",
            "score": 99.500927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', n ) ;",
            "score": 99.500927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", n ) ;",
            "score": 99.500927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , null ) ;",
            "score": 99.44050598144531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": if( parent.getNext( ) != n )",
            "score": 99.26480538504464,
            "correctness": "uncompilable",
            "tokenized_patch": ": if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch else ; }",
            "score": 99.11806911892361,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if( } } }",
            "score": 99.11717529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false { }",
            "score": 98.75130789620536,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else System",
            "score": 98.69332885742188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n { recordDepScope( nameNode , ns ) ;",
            "score": 99.50076293945312,
            "correctness": "uncompilable",
            "tokenized_patch": "n { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , n ) ;",
            "score": 99.438671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +1) ;",
            "score": 99.40601348876953,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != null )",
            "score": 99.262939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( else {",
            "score": 99.1171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { { } else {",
            "score": 99.11597290039063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else ; }",
            "score": 98.74942452566964,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } else",
            "score": 98.68631998697917,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , t ) ;",
            "score": 99.50065104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( type , ns ) ; } else {",
            "score": 99.405615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( type , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent.getParent( ) ; }",
            "score": 99.33258463541667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = parent . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( recordNode ) ; } }",
            "score": 99.262353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { while( parent != null ) {",
            "score": 99.11688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { while ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof Node ) { {",
            "score": 99.1158447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof Node ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } super.}",
            "score": 98.748291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } super . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } if else {",
            "score": 98.68611363002232,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n.getParent( ) ;",
            "score": 99.43634905133929,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( index , ns ) ; } else {",
            "score": 99.40426432291666,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( index , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent( recordNode , ns ) ;",
            "score": 99.26145426432292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } } else",
            "score": 99.11652289496527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { return ; } }",
            "score": 99.11648559570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { if( } }",
            "score": 99.1150634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } /",
            "score": 98.74742635091145,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( t , ns ) )",
            "score": 99.49885559082031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( t , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode , false ) ;",
            "score": 99.43632507324219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; *?",
            "score": 99.40387725830078,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; * ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) ) { }",
            "score": 99.25999348958334,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { } } }",
            "score": 99.11640082465277,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } while }",
            "score": 99.11565483940973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } while }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( } else {",
            "score": 99.11504448784723,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } } } }",
            "score": 98.74691009521484,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else } else",
            "score": 98.68172781808036,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( recordNode , node ) ;",
            "score": 99.49883270263672,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; for(",
            "score": 99.40364074707031,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; for (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.isEmpty( ) ) {",
            "score": 99.33008751502403,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . is CaMeL Empty ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return } } } else {",
            "score": 99.11568874782986,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } } if }",
            "score": 99.11530219184027,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; } {",
            "score": 99.1142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { { }",
            "score": 98.74610900878906,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } } } else {",
            "score": 99.4024149576823,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ".recordDepScope( nameNode , ns ) ;",
            "score": 99.25839029947916,
            "correctness": "uncompilable",
            "tokenized_patch": ". record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( n != null ) {",
            "score": 99.11551513671876,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( n != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if else ;",
            "score": 99.1151123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { break ; } } else {",
            "score": 99.11423068576389,
            "correctness": "uncompilable",
            "tokenized_patch": "else { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if null ;",
            "score": 98.7458724975586,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; } } else",
            "score": 99.49698638916016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( target , ns ) ; } else {",
            "score": 99.40196126302084,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( target , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent instanceof NameInformation ) {",
            "score": 99.32904522235577,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent instanceof Name CaMeL Information ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( this , ns ) ;",
            "score": 99.25657301682692,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( this , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } } else { else {",
            "score": 99.11513264973958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; if else {",
            "score": 99.11483425564236,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( target != null ) {",
            "score": 99.11387125651042,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( target != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } / /",
            "score": 98.74516296386719,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else }",
            "score": 98.67572893415179,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n else recordDepScope( nameNode , ns ) ;",
            "score": 99.49691772460938,
            "correctness": "uncompilable",
            "tokenized_patch": "n else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent ) ; } } else {",
            "score": 99.39869035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , n ) ; }",
            "score": 99.25628255208333,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } while( parent != null ) {",
            "score": 99.11498413085937,
            "correctness": "uncompilable",
            "tokenized_patch": "} } while ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == null ) {",
            "score": 99.11382446289062,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent == null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} } { } else { }",
            "score": 98.74501037597656,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } } else",
            "score": 98.67450823102679,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this ) ; }",
            "score": 99.49648611886161,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) !=",
            "score": 99.32622821514423,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( nameNode ) ;",
            "score": 99.25593784877232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { continue ; } } }",
            "score": 99.11463623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { continue ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch } else",
            "score": 99.11408827039931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } } } else",
            "score": 99.11342551491477,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else",
            "score": 98.67196044921874,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , n ) ;",
            "score": 99.49580891927083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; *?",
            "score": 99.39746856689453,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; * ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } finally ;",
            "score": 99.11381022135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } finally ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } return ; }",
            "score": 99.11367458767361,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / / else",
            "score": 98.7415542602539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / / else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; {",
            "score": 98.66639927455357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , node ) ;",
            "score": 99.49540201822917,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = nameNode.getParent( ) ;",
            "score": 99.43033599853516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = name CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , parent ) ; } else {",
            "score": 99.39730631510416,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , parent ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ,(",
            "score": 99.32547200520834,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "? recordDepScope( recordNode , ns ) :",
            "score": 99.25476888020833,
            "correctness": "uncompilable",
            "tokenized_patch": "? record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else ; } }",
            "score": 99.11376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent instanceof Node ) {",
            "score": 99.113134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } parent = } } else {",
            "score": 99.11233520507812,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } parent = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; if else {",
            "score": 98.74103655133929,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { }",
            "score": 98.66569519042969,
            "correctness": "uncompilable",
            "tokenized_patch": "else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( start , ns ) ;",
            "score": 99.4951416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( start , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( true ) ; } else {",
            "score": 99.39719801682692,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( true ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if } } }",
            "score": 99.11305067274306,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if } else {",
            "score": 99.11282958984376,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; }",
            "score": 98.73973737444196,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else {",
            "score": 98.66275634765626,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , true ) ;",
            "score": 99.42861938476562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , this ) ;",
            "score": 99.396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent ; } } else {",
            "score": 99.32152210582386,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( valueNode != null ) {",
            "score": 99.25271606445312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( value CaMeL Node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return true ; } else {",
            "score": 99.11253526475694,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return true ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } finally {",
            "score": 99.10997856987848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } else",
            "score": 98.66222127278645,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.recordDepScope( recordNode , ns ) ;",
            "score": 99.49372863769531,
            "correctness": "wrong",
            "tokenized_patch": "this . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { return.getFirstChild( ) ; }",
            "score": 99.42769368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return . get CaMeL First CaMeL Child ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( nameNode.getParent( ) != n )",
            "score": 99.25078125,
            "correctness": "wrong",
            "tokenized_patch": "if ( name CaMeL Node . get CaMeL Parent ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "{ } else { } } else {",
            "score": 99.11172146267361,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return else ; } } else {",
            "score": 99.10960557725694,
            "correctness": "uncompilable",
            "tokenized_patch": "else return else ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { while else {",
            "score": 98.73873465401786,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { while else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } { }",
            "score": 98.65841674804688,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , t ) ;",
            "score": 99.4276351928711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; catch(",
            "score": 99.39588165283203,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; catch (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent ; } else {",
            "score": 99.3199951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node nameNode = n.getParent( ) ;",
            "score": 99.25023542131696,
            "correctness": "uncompilable",
            "tokenized_patch": "Node name CaMeL Node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return null ; } }",
            "score": 99.11008029513889,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else if( }",
            "score": 99.10928005642361,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else ; } } }",
            "score": 99.10660129123264,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / else if else",
            "score": 98.73817443847656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( scope ) ; }",
            "score": 99.49317278180804,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( scope ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.getFirstChild( ) != n ) {",
            "score": 99.42753601074219,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = parent.getParent( ) ; } } else {",
            "score": 99.39521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = parent . get CaMeL Parent ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != n ) { }",
            "score": 99.24881184895834,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != n ) { }",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} { else { { break ; } }",
            "score": 99.10892944335937,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } if } } else {",
            "score": 99.10582817925348,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break ; }",
            "score": 98.73759460449219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , false ) ;",
            "score": 99.39372253417969,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != n ||",
            "score": 99.319775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n ||",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( type ) ; } else {",
            "score": 99.24738018329327,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( type ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.contains( } else",
            "score": 99.10844282670455,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . contains ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ node = } ; } else {",
            "score": 99.10789659288194,
            "correctness": "uncompilable",
            "tokenized_patch": "{ node = } ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } / *else",
            "score": 99.10526529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } / * else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / else if }",
            "score": 98.73735046386719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( nameNode , n ) ;",
            "score": 99.48882293701172,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} || recordDepScope( nameNode , ns ) ;",
            "score": 99.424072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} || record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent instanceof NodeTraversal ) {",
            "score": 99.31966458834134,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent instanceof Node CaMeL Traversal ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! NodeUtil.isForIn( parent ) ;",
            "score": 99.24694010416667,
            "correctness": "uncompilable",
            "tokenized_patch": "! Node CaMeL Util . is CaMeL For CaMeL In ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } else { {",
            "score": 99.10842895507812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else */",
            "score": 99.10472954644098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if false ;",
            "score": 98.73673248291016,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else ;",
            "score": 98.65550013950893,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , true ) ;",
            "score": 99.39225769042969,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "? recordDepScope( nameNode , ns ) :",
            "score": 99.24607747395834,
            "correctness": "uncompilable",
            "tokenized_patch": "? record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( { return ; } } else {",
            "score": 99.10812377929688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return null ; } } }",
            "score": 99.10677490234374,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return null ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { return {",
            "score": 99.10421413845486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { else }",
            "score": 98.73661804199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else } else",
            "score": 98.6536865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , node ) ;",
            "score": 99.48873697916666,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = parent.getFirstChild( ) ;",
            "score": 99.423583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = parent . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'AstChangeProxy::getRhs ') ; } } else {",
            "score": 99.39195033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'c') ; } } else {",
            "score": 99.39195033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'a') ; } } else {",
            "score": 99.39195033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'b') ; } } else {",
            "score": 99.39195033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( \"'s value.  \") ; } } else {",
            "score": 99.39195033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ) ;",
            "score": 99.24583943684895,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( type != null )",
            "score": 99.10795762803819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( type != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( } else { else {",
            "score": 99.10666910807292,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( } } else",
            "score": 99.10397677951389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } }",
            "score": 98.73647635323661,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else if else {",
            "score": 98.65187290736607,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.48865618024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c') ; }",
            "score": 99.48865618024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a') ; }",
            "score": 99.48865618024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b') ; }",
            "score": 99.48865618024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \") ; }",
            "score": 99.48865618024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = parent.getParent( ) ; }",
            "score": 99.42269694010416,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = parent . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = ns ; } } else {",
            "score": 99.316650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else if( parent.getNext( ) != n )",
            "score": 99.24537760416666,
            "correctness": "uncompilable",
            "tokenized_patch": "* else if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent != null ) {",
            "score": 99.10750325520833,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} { while( parent != null )",
            "score": 99.10658094618056,
            "correctness": "timeout",
            "tokenized_patch": "} { while ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **/",
            "score": 98.73563639322917,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else if else",
            "score": 98.65027727399554,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns +1) ;",
            "score": 99.39110565185547,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { Node parent = n.getParent( ) ;",
            "score": 99.3155029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { Node parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , n ,",
            "score": 99.24443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , n ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; } } }",
            "score": 99.10746626420455,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { return ; }",
            "score": 99.10586208767361,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } } catch }",
            "score": 99.10250515407986,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } } else {",
            "score": 98.73463439941406,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else { else",
            "score": 98.64834158761161,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = parent.getParent( ) ;",
            "score": 99.42212677001953,
            "correctness": "wrong",
            "tokenized_patch": "} else { name CaMeL Node = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else nameNode = recordNode ; } else {",
            "score": 99.31548200334821,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = record CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , recordNode ) ; }",
            "score": 99.24391276041666,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target == null )",
            "score": 99.10719807942708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return else ; } }",
            "score": 99.10513916015626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } finally {",
            "score": 99.10152180989583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *} / }",
            "score": 98.73308563232422,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * } / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , parent ) ;",
            "score": 99.48724772135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = null ; } } else {",
            "score": 99.314208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { node = } } else {",
            "score": 99.106591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { node = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { type = } } else {",
            "score": 99.105126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { type = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else {",
            "score": 99.10099029541016,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *else { }",
            "score": 98.73257010323661,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else { } }",
            "score": 98.64289202008929,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( node ) ; } else {",
            "score": 99.38861553485577,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( node ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = n ; } } else {",
            "score": 99.31301645132211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( { return ; } }",
            "score": 99.10599093967014,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { } } } }",
            "score": 99.10505981445313,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , null {",
            "score": 99.10070122612848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != n.getParent( ) ) {",
            "score": 99.4823226928711,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent != n . get CaMeL Parent ( ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "break ; } else if( parent != null ) {",
            "score": 99.31150309244792,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.isForIn( n ) :",
            "score": 99.2391357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For CaMeL In ( n ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node == null )",
            "score": 99.10497368706598,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false { } }",
            "score": 99.10028754340277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } if else",
            "score": 98.73241315569196,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( nameNode ) ;",
            "score": 99.23570033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else return ; } } }",
            "score": 99.10456678602431,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { else ; } }",
            "score": 99.09986707899306,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } break {",
            "score": 98.73234558105469,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; else",
            "score": 98.62904575892857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , parent ) ;",
            "score": 99.4814208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) == ns ) {",
            "score": 99.41851806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) == ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( source , ns ) ; } else {",
            "score": 99.38628743489583,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( source , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = n ; } else {",
            "score": 99.30736287434895,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = n ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , n ) ; }",
            "score": 99.23529459635417,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return false ; } } else {",
            "score": 99.1041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { n = parent ; } }",
            "score": 99.1031005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { n = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else if {",
            "score": 99.09949408637152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else if {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; if }",
            "score": 98.73213958740234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else ;",
            "score": 98.62725830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( recordNode ) ;",
            "score": 99.41761016845703,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( current , ns ) ; } else {",
            "score": 99.38585611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( current , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.} else {",
            "score": 99.1039306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( n != null ) {",
            "score": 99.10244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( n != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; else ; }",
            "score": 99.09922281901042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } { }",
            "score": 98.62709554036458,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( recordNode , ns ,",
            "score": 99.3034423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , ns ,",
            "score": 99.23119303385417,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node instanceof Node )",
            "score": 99.10340033637152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node instanceof Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { return ; } }",
            "score": 99.10185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( } }",
            "score": 99.09873962402344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } / / /",
            "score": 98.72999790736607,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else",
            "score": 98.62699381510417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , t ) ;",
            "score": 99.48041178385417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null , n ) ;",
            "score": 99.41700032552083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = parent ; } } else {",
            "score": 99.38440813337054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = n.getParent( ) ;",
            "score": 99.22986778846153,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return -1; } } } else {",
            "score": 99.102685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return - 1 ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; } } }",
            "score": 99.10177001953124,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { if }",
            "score": 99.09821234809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if else",
            "score": 98.72993469238281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } {",
            "score": 98.62642124720982,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , parent ) ;",
            "score": 99.4794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else if( ns != null ) {",
            "score": 99.30047607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else if ( ns != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , false ) ;",
            "score": 99.22830636160714,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { code != null ) {",
            "score": 99.10218394886364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { code != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { { return ; } }",
            "score": 99.10020616319444,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } ***{",
            "score": 99.09818522135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } * * * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( ns , ns ) )",
            "score": 99.47895812988281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( ns , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode.getParent( ) !=",
            "score": 99.3002197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node . get CaMeL Parent ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.getNext( ) != n )",
            "score": 99.22714468149039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( node != null )",
            "score": 99.10218394886364,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { parent = parent ; } }",
            "score": 99.1001708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { parent = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } else }",
            "score": 99.09620496961806,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { if else { }",
            "score": 98.72801971435547,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else { } {",
            "score": 98.62400599888393,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , n ) ;",
            "score": 99.47837727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ) ; }",
            "score": 99.41280423677884,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != null )",
            "score": 99.22674967447917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( } } else",
            "score": 99.101806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return ; } } else",
            "score": 99.10005493164063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } } } }",
            "score": 99.09620496961806,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / else ;",
            "score": 98.72795104980469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else throws",
            "score": 98.62391880580357,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( ns ) ;",
            "score": 99.47754778180804,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , node ) ;",
            "score": 99.38118743896484,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , t ) ;",
            "score": 99.2244873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { else { { {",
            "score": 99.09931030273438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { } } } else",
            "score": 99.09568277994792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } if else {",
            "score": 98.72705841064453,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else",
            "score": 98.6186767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null ) ; }",
            "score": 99.47722516741071,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = n.getParent( ) ;",
            "score": 99.41210065569196,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isForIn( ) ) {",
            "score": 99.29658726283482,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getParent( ) != n )",
            "score": 99.22316196986607,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL Parent ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = } } else",
            "score": 99.10150701349431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , false {",
            "score": 99.09539794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else {",
            "score": 98.72596435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else }",
            "score": 98.61696166992188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = ns ; } } else {",
            "score": 99.29610501802884,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , parent ) ;",
            "score": 99.22263881138393,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent instanceof Node ) {",
            "score": 99.09972034801136,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { { else {",
            "score": 99.09843139648437,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / */ } }",
            "score": 99.09524875217014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } / /",
            "score": 98.72554016113281,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else }",
            "score": 98.61417643229167,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! recordDepScope( ns ) ) {",
            "score": 99.47687530517578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! record CaMeL Dep CaMeL Scope ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( nameNode )",
            "score": 99.22130533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else { } } }",
            "score": 99.09655151367187,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else ; }",
            "score": 99.09492323133681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; }",
            "score": 98.72449747721355,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else.",
            "score": 98.61316935221355,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; catch(",
            "score": 99.3779525756836,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; catch (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target instanceof Node ) {",
            "score": 99.09783935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { else {",
            "score": 99.09630584716797,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } { else ; }",
            "score": 99.09455023871527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } *",
            "score": 98.72434779575893,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { {",
            "score": 98.61139787946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = recordDepScope( nameNode , ns ) ;",
            "score": 99.47540283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordDepScope( ns ) ;",
            "score": 99.28877476283482,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , t ) ;",
            "score": 99.21746826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope != null ) { {",
            "score": 99.0966463955966,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( node != null ) {",
            "score": 99.09539184570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else {",
            "score": 98.61049397786458,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = ns ; } else {",
            "score": 99.28565470377605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.isForIn( parent ) ;",
            "score": 99.2171875,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . is CaMeL For CaMeL In ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { catch( } } else {",
            "score": 99.09642333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { catch ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if { } } else",
            "score": 99.09336344401042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { continue ; } }",
            "score": 99.0927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { continue ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } } }",
            "score": 98.72366768973214,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } }",
            "score": 98.60272827148438,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { newNode = n.getParent( ) ;",
            "score": 99.40715789794922,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { new CaMeL Node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( parent , ns ) ;",
            "score": 99.37464141845703,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = null ; } } else {",
            "score": 99.28450520833333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = parent.getParent( ) ;",
            "score": 99.2163837139423,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } else { }",
            "score": 99.09637451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { { else {",
            "score": 99.09276123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else }",
            "score": 99.09072875976562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *else { }",
            "score": 98.72245279947917,
            "correctness": "uncompilable",
            "tokenized_patch": "} * else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else }",
            "score": 98.60222516741071,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = recordDepScope( nameNode , ns ) ;",
            "score": 99.47478485107422,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != n",
            "score": 99.21549769810268,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != n",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( } } else ;",
            "score": 99.09054904513889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { if else {",
            "score": 98.72038269042969,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else +",
            "score": 98.601806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ref , ns ) ;",
            "score": 99.474560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ref , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , n ,",
            "score": 99.21280110677084,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , n ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } { return ; } }",
            "score": 99.09627278645833,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { n = parent ; } else {",
            "score": 99.09097900390626,
            "correctness": "uncompilable",
            "tokenized_patch": "} { n = parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else ; if }",
            "score": 99.09044731987848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else ; if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else ; } }",
            "score": 98.72007751464844,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { else",
            "score": 98.59958321707589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { addNode( nameNode , ns ) ;",
            "score": 99.405322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { add CaMeL Node ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ; } }",
            "score": 99.37100423177084,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode == n ) {",
            "score": 99.21248372395833,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( name CaMeL Node == n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "fail( ) ; } } else {",
            "score": 99.09616427951389,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } } else { else {",
            "score": 99.09073893229167,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else } else",
            "score": 99.09018283420139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else",
            "score": 98.72000122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else throws",
            "score": 98.59527587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( code ) ; }",
            "score": 99.47244698660714,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( code ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , true ) ;",
            "score": 99.37025451660156,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode.getNext( ) !=",
            "score": 99.28045247395833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ) ;",
            "score": 99.21207682291667,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( else ) ; }",
            "score": 99.09552556818181,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( else ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent instanceof Node ) {",
            "score": 99.08953247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } for }",
            "score": 99.08928765190973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } for }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { }",
            "score": 98.72000122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent.getFirstChild( ) ;",
            "score": 99.40381622314453,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = parent . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; } } }",
            "score": 99.3700942993164,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; } }",
            "score": 99.279931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "success = false ; break ; } }",
            "score": 99.09517415364583,
            "correctness": "uncompilable",
            "tokenized_patch": "success = false ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } else { {",
            "score": 99.08871120876736,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else if } } else {",
            "score": 99.08867730034723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else = else",
            "score": 98.59004429408482,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else = else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getParent( ) != n )",
            "score": 99.40251159667969,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent . get CaMeL Parent ( ) != n )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else parent = recordNode.getParent( ) ;",
            "score": 99.279443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , recordNode ) ;",
            "score": 99.20978655133929,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != null && }",
            "score": 99.09503784179688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != null && }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return ; } } else",
            "score": 99.088623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { } } else {",
            "score": 99.08855523003473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } }",
            "score": 98.71895599365234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } } else",
            "score": 98.58290318080357,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.getNext( ) != n )",
            "score": 99.47097981770834,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.recordDepScope( n ) ; } else {",
            "score": 99.3673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . record CaMeL Dep CaMeL Scope ( n ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != n &&",
            "score": 99.2095458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n &&",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } { if } }",
            "score": 99.08698866102431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else }",
            "score": 98.58133370535714,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = recordDepScope( recordNode , ns ) ;",
            "score": 99.47078704833984,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , }",
            "score": 99.3995849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n.getParent( ) ; } }",
            "score": 99.36430358886719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.hasNext( ) ) {",
            "score": 99.27586012620192,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . has CaMeL Next ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , nameNode ) ; }",
            "score": 99.20830891927083,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.parent == null )",
            "score": 99.09465997869319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . parent == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { else { {",
            "score": 99.08846706814236,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , true {",
            "score": 99.08538140190973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , true {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } else { }",
            "score": 98.71876525878906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else if else",
            "score": 98.58103724888393,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "; recordDepScope( nameNode , ns ) ;",
            "score": 99.47047526041666,
            "correctness": "wrong",
            "tokenized_patch": "; record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } ]",
            "score": 99.3602523803711,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , type ) ;",
            "score": 99.20796421595982,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( target != null )",
            "score": 99.09402465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( target != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { ns = } } else {",
            "score": 99.08827718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "} { ns = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return ;",
            "score": 99.084716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / / / /",
            "score": 98.71862030029297,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } } else",
            "score": 98.57775006975446,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( nameNode , t ) ;",
            "score": 99.47045135498047,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , }",
            "score": 99.3987548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , recordNode , ns ) ;",
            "score": 99.35951232910156,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != n",
            "score": 99.20726667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else return ; } } } else {",
            "score": 99.09384155273438,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { parent = parent ; } } }",
            "score": 99.08633422851562,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { parent = parent ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } } if }",
            "score": 99.08453369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else ) }",
            "score": 98.71854400634766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else ) }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else } }",
            "score": 98.57571847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) == n )",
            "score": 99.47032877604167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! recordDepScope( nameNode , ns ) ;",
            "score": 99.35786946614583,
            "correctness": "uncompilable",
            "tokenized_patch": "! record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , parent ) ;",
            "score": 99.20638602120536,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return null ; }",
            "score": 99.08612060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return else }",
            "score": 99.08401828342014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return else { }",
            "score": 98.71852111816406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else error else",
            "score": 98.57441057477679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else error else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , node ) ;",
            "score": 99.46985677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( ns.isFor( ) ) {",
            "score": 99.39000525841347,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( ns . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , 'AstChangeProxy::getRhs ') ;",
            "score": 99.35757446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , 'c') ;",
            "score": 99.35757446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , 'a') ;",
            "score": 99.35757446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , 'b') ;",
            "score": 99.35757446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , \"'s value.  \") ;",
            "score": 99.35757446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != n ||",
            "score": 99.27186686197916,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != n ||",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , null ) ;",
            "score": 99.20477294921875,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , null ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "75"
        },
        {
            "patch": "} else if( next != null ) {",
            "score": 99.0927001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( next != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( n != null )",
            "score": 99.08554416232639,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( n != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; if } } if }",
            "score": 99.08325873480902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; if } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / { }",
            "score": 98.71814727783203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } }",
            "score": 98.57200113932292,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( recordNode , node ) ;",
            "score": 99.469580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns ; } } else {",
            "score": 99.27045232599431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , true ) ;",
            "score": 99.20475551060268,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else { return ;",
            "score": 99.0926846590909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { return } } }",
            "score": 99.08406372070313,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { return } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } else { if }",
            "score": 99.08244493272569,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else",
            "score": 98.57046508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getLastChild( ) != n ) {",
            "score": 99.46859741210938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Last CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns +",
            "score": 99.35645294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*if( parent.getNext( ) != n )",
            "score": 99.20327322823661,
            "correctness": "uncompilable",
            "tokenized_patch": "* if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.warning( 'AstChangeProxy::getRhs ') ;",
            "score": 99.09267356178977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.warning( 'c') ;",
            "score": 99.09267356178977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.warning( 'a') ;",
            "score": 99.09267356178977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.warning( 'b') ;",
            "score": 99.09267356178977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.warning( \"'s value.  \") ;",
            "score": 99.09267356178977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . warning ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return { } } else",
            "score": 99.08201768663194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else { {",
            "score": 98.71783447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else try",
            "score": 98.56920369466145,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , n ) ;",
            "score": 99.4674072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent ) ; } } }",
            "score": 99.35501098632812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( ns ) ; }",
            "score": 99.20164137620192,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "repaint( ) ; } } else {",
            "score": 99.0919189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "repaint ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return null ; } }",
            "score": 99.08173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { if {",
            "score": 99.08042399088542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { if {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break { }",
            "score": 98.71690368652344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else *{",
            "score": 98.56419154575893,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { node = n.getFirstChild( ) ;",
            "score": 99.387939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { node = n . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +0) ;",
            "score": 99.35432434082031,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = t.getParent( ) ;",
            "score": 99.19962252103366,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = t . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.}",
            "score": 99.0915756225586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return { } } }",
            "score": 99.08024766710069,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch } } else",
            "score": 99.07850477430556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / if else { }",
            "score": 98.71646118164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = {",
            "score": 98.56400844029018,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( ns != null ) {",
            "score": 99.26433771306819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( ns != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; }",
            "score": 99.19947228064903,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break -1; } } } else {",
            "score": 99.09095458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "break - 1 ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = } } else { {",
            "score": 99.07964477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else , null {",
            "score": 99.07622612847223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else , null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ if else }",
            "score": 98.71617126464844,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Exception",
            "score": 98.55220540364583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Exception",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , t ) ;",
            "score": 99.46588541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = recordNode.getParent( ) ;",
            "score": 99.38368225097656,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = record CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { recordDepScope( parent , n ) ; }",
            "score": 99.35284423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getNext( ) !=",
            "score": 99.26276506696429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( ns != null ) {",
            "score": 99.19898139105902,
            "correctness": "wrong",
            "tokenized_patch": "} if ( ns != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( node == null ) {",
            "score": 99.09093627929687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new { } } }",
            "score": 99.07777099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { if } } }",
            "score": 99.07621256510417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } } }",
            "score": 98.71616036551339,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else",
            "score": 98.55046081542969,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( t.getNext( ) != n ) {",
            "score": 99.46531677246094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( t . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , this ) ;",
            "score": 99.35214233398438,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( node != null )",
            "score": 99.09093017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if { return ; } }",
            "score": 99.07759602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if }( else ;",
            "score": 99.07486979166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false { } }",
            "score": 98.71607208251953,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } else",
            "score": 98.5499776204427,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { node = n.getParent( ) ; }",
            "score": 99.4650146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { node = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isFor( parent ) ) {",
            "score": 99.35204139122597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( recordDepScope ) {",
            "score": 99.2613994891827,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( record CaMeL Dep CaMeL Scope ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( ns != null ) {",
            "score": 99.19108442826705,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( ns != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } else { } } else {",
            "score": 99.0906982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { } else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { parent = } ; } }",
            "score": 99.07729085286458,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { parent = } ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { else ; } }",
            "score": 99.07441541883681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / / /",
            "score": 98.71572440011161,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else if else {",
            "score": 98.54970005580357,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , t ) ;",
            "score": 99.46461588541666,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode , ns ) {",
            "score": 99.3801981608073,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node , ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , node ) ;",
            "score": 99.35033416748047,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , parent ) ;",
            "score": 99.259423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ) ; } else",
            "score": 99.18574741908482,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( type != null ) {",
            "score": 99.09027654474431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( type != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { { return false ; } }",
            "score": 99.07719116210937,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else if } } }",
            "score": 99.07373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } } else {",
            "score": 98.71565246582031,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if else }",
            "score": 98.54903738839286,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordNode( recordNode , ns ) ;",
            "score": 99.37955729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Node ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( ) ; } } else {",
            "score": 99.34856708233173,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return true ; }",
            "score": 99.07662963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else } else",
            "score": 99.07208930121527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break ;",
            "score": 98.71480887276786,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } { } }",
            "score": 98.54894147600446,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node.getFirstChild( ) != n ) {",
            "score": 99.46265411376953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } } else {",
            "score": 99.18451605902777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( scope != null ) {",
            "score": 99.07562866210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } else if } else {",
            "score": 99.07149929470486,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } else if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ } else {",
            "score": 98.7146224975586,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { } }",
            "score": 98.54749407087054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( out , ns ) ;",
            "score": 99.4614013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( out , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( true , n ) ;",
            "score": 99.37840169270834,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( true , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node instanceof } else {",
            "score": 99.08743286132812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node instanceof } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { break { } } }",
            "score": 99.07445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else else }",
            "score": 98.71424865722656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } if else {",
            "score": 98.54673549107143,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'AstChangeProxy::getRhs ', parent ) ;",
            "score": 99.46123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'c', parent ) ;",
            "score": 99.46123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'a', parent ) ;",
            "score": 99.46123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( 'b', parent ) ;",
            "score": 99.46123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( \"'s value.  \", parent ) ;",
            "score": 99.46123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( $STRING$ , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , } }",
            "score": 99.378173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; parent.",
            "score": 99.3471450805664,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; parent .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ,(",
            "score": 99.2550048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordNode != null ) {",
            "score": 99.18105246803977,
            "correctness": "wrong",
            "tokenized_patch": "} if ( record CaMeL Node != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( } } else if( {",
            "score": 99.08739124644886,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent ; } }",
            "score": 99.07377319335937,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else break {",
            "score": 99.07013617621527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { }",
            "score": 98.71200561523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } { } {",
            "score": 98.54532296316964,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , parent ) ;",
            "score": 99.46118977864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = recordNode.getParent( ) ;",
            "score": 99.37696838378906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = record CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = ns.getParent( ) ; }",
            "score": 99.25302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = ns . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = parent.getParent( ) ;",
            "score": 99.1810302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "completed = false ; break ; } }",
            "score": 99.08719889322917,
            "correctness": "uncompilable",
            "tokenized_patch": "completed = false ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( else {",
            "score": 99.0697021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( else ) {",
            "score": 99.06912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( else ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / else { } }",
            "score": 98.71183776855469,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else if else",
            "score": 98.54517473493304,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , node ) ;",
            "score": 99.46103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n != null ) {",
            "score": 99.25197143554688,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( parent , nameNode ) ;",
            "score": 99.17953927176339,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ; } else",
            "score": 99.08614501953124,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else { if } } }",
            "score": 99.06968858506944,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else break ; } }",
            "score": 99.0683349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else",
            "score": 98.54210553850446,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; } else { }",
            "score": 99.34132385253906,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isEmpty( ) ) {",
            "score": 99.25168863932292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL Empty ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , index ) ;",
            "score": 99.1790771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( { return ; } }",
            "score": 99.08575994318181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { { else {",
            "score": 99.06748453776042,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( true else ; }",
            "score": 99.06620279947917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( true else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { if else }",
            "score": 98.71099853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } /",
            "score": 98.54186139787946,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNode( ) != n )",
            "score": 99.46044108072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Node ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; */",
            "score": 99.34076690673828,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null ) { }",
            "score": 99.1785888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } }",
            "score": 99.085693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else ; } }",
            "score": 99.06572129991319,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { } }",
            "score": 98.71094512939453,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } }",
            "score": 98.54168090820312,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent ) ; } }",
            "score": 99.37206217447917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , index ) ;",
            "score": 99.34053802490234,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns ; } else {",
            "score": 99.2477294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns ) ;",
            "score": 99.17689005533855,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "{ } else { break ; } } }",
            "score": 99.06669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } , true else",
            "score": 99.06537543402777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , true else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } { }",
            "score": 98.54005940755208,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( , ns ) ;",
            "score": 99.46028355189732,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( l , ns ) ;",
            "score": 99.371630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( l , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , type ) ;",
            "score": 99.3404312133789,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isForIn( parent ) )",
            "score": 99.17670549665179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For CaMeL In ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } } else",
            "score": 99.08532104492187,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { break ; }",
            "score": 99.06656222873264,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / *} } }",
            "score": 99.06479899088542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / else",
            "score": 98.71016148158482,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns",
            "score": 99.45948893229166,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( parent ) )",
            "score": 99.17551967075893,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "revalidate( ) ; } } else {",
            "score": 99.08414035373264,
            "correctness": "uncompilable",
            "tokenized_patch": "revalidate ( ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent.} else {",
            "score": 99.06497802734376,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / **} }",
            "score": 99.06405978732639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * * } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } if else ;",
            "score": 98.71011352539062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { Node parent = parent.getParent( ) ;",
            "score": 99.246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { Node parent = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , false ) ;",
            "score": 99.1746826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { break ; }",
            "score": 99.08361138237848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { node = parent ; } }",
            "score": 99.06404418945313,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { node = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else ;",
            "score": 99.06334686279297,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; if else",
            "score": 98.7095947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else int",
            "score": 98.53467814127605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , 'AstChangeProxy::getRhs ') ;",
            "score": 99.33929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , 'c') ;",
            "score": 99.33929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , 'a') ;",
            "score": 99.33929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , 'b') ;",
            "score": 99.33929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , \"'s value.  \") ;",
            "score": 99.33929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t ) ; } }",
            "score": 99.24518229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , recordNode ) ;",
            "score": 99.17467389787946,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { return ; }",
            "score": 99.08334011501736,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { continue ; } } }",
            "score": 99.06357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { continue ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false else { }",
            "score": 99.06320529513889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } else { }",
            "score": 98.70874786376953,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { } {",
            "score": 98.53203473772321,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) instanceof Node ) {",
            "score": 99.45726013183594,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = n.getFirstChild( ) ;",
            "score": 99.36795247395834,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = n . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node nameNode = parent.getParent( ) ;",
            "score": 99.17455182756696,
            "correctness": "uncompilable",
            "tokenized_patch": "Node name CaMeL Node = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( parent == null )",
            "score": 99.08271928267045,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( parent == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false { break {",
            "score": 99.06279839409723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false { break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { node = } ; } }",
            "score": 99.0626220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { node = } ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally {( else { }",
            "score": 98.70866394042969,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { ( else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else { } else",
            "score": 98.53188650948661,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = parent.getParent( ) ;",
            "score": 99.36664690290179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( null ) ; } else {",
            "score": 99.33809720552884,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( null ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else recordDepScope( nameNode , ns ,",
            "score": 99.24356282552084,
            "correctness": "uncompilable",
            "tokenized_patch": "else else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } else { } }",
            "score": 99.08254172585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch }",
            "score": 99.06192016601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent == null )",
            "score": 99.0591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( parent , ns ) )",
            "score": 99.45659637451172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( parent , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( parent.getNext( ) != n )",
            "score": 99.17329624720982,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( target != null ) {",
            "score": 99.08193969726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( target != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { } } else",
            "score": 99.06171332465277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { { else { {",
            "score": 99.05907592773437,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { case else {",
            "score": 98.70813860212054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { case else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else",
            "score": 98.52975463867188,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( t , ns ) ;",
            "score": 99.45629010881696,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns +0) ;",
            "score": 99.33747100830078,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns + 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = n.getParent( ) ;",
            "score": 99.1721700032552,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { if else",
            "score": 99.06155734592014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { while( else { } }",
            "score": 99.05822075737848,
            "correctness": "uncompilable",
            "tokenized_patch": "} { while ( else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false ; }",
            "score": 98.70713588169643,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { if else",
            "score": 98.52780587332589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , t ) ;",
            "score": 99.45570475260416,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return : null ; } } else {",
            "score": 99.33744303385417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return : null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) && !",
            "score": 99.2408447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) && !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else break ; } } }",
            "score": 99.08077663845486,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } else ; if }",
            "score": 99.06098090277777,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else ; if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { throw new } }",
            "score": 99.05759684244792,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { throw new } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / else { }",
            "score": 98.70670318603516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else this",
            "score": 98.5254618326823,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , node ) ;",
            "score": 99.45362141927083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else parent = n.getParent( ) ;",
            "score": 99.2393798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != null ) { } else",
            "score": 99.1685078938802,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != null ) { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { if } } else",
            "score": 99.06097412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return null ; }",
            "score": 99.05626220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *} else {",
            "score": 98.70668029785156,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else throws }",
            "score": 98.52528599330357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else throws }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( true ) ; } }",
            "score": 99.3611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( true ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns -1) ;",
            "score": 99.33546447753906,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == nameNode ) {",
            "score": 99.23699951171875,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent == name CaMeL Node ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "parent.recordDepScope( recordNode ) ;",
            "score": 99.16622488839286,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope == null ) {",
            "score": 99.07965087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else { } }",
            "score": 99.06081814236111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else throws {",
            "score": 98.5247802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else throws {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( node , ns ) ;",
            "score": 99.45296805245536,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent.getParent( ) ;",
            "score": 99.36109270368304,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( recordNode , ns , index ) ;",
            "score": 99.33500671386719,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , node ) ;",
            "score": 99.16473388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if } {",
            "score": 99.0596923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( node != null else {",
            "score": 99.05543212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( node != null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } *{ }",
            "score": 98.70594787597656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else ; else",
            "score": 98.52450997488839,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.isForIn( ) )",
            "score": 99.45264434814453,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . is CaMeL For CaMeL In ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , t ) ;",
            "score": 99.33312225341797,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == recordNode ) {",
            "score": 99.23494466145833,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent == record CaMeL Node ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "else recordDepScope( recordNode ) ; }",
            "score": 99.16067068917411,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { {",
            "score": 99.05420939127605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } else {",
            "score": 98.70572662353516,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } if else throws",
            "score": 98.52446637834821,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getIn( ) != n ) {",
            "score": 99.4525146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL In ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ! false ) ;",
            "score": 99.35869489397321,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ! false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( breakNode , ns ) ;",
            "score": 99.15627615792411,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( break CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != this ) {",
            "score": 99.07867431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( false else",
            "score": 99.05872260199652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( false else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; } } {",
            "score": 99.05410766601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { / /",
            "score": 98.70539855957031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } } }",
            "score": 98.52305385044643,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; */",
            "score": 99.3315658569336,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , type ) ;",
            "score": 99.15530831473214,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } else { return ; } }",
            "score": 99.07819213867188,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else }",
            "score": 99.05824497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return false ;",
            "score": 98.70394897460938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns.",
            "score": 99.45117950439453,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) &&",
            "score": 99.15512319711539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) &&",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope != null && }",
            "score": 99.07786254882812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope != null && }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } */",
            "score": 99.05810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { {",
            "score": 99.052490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **if else {",
            "score": 98.70319475446429,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else else",
            "score": 98.52051798502605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(( parent.getParent( )",
            "score": 99.15471942608173,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ( parent . get CaMeL Parent ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode != null )",
            "score": 99.0775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { return ;",
            "score": 99.0577392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return { return ; } }",
            "score": 99.05131022135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } if }",
            "score": 98.70260620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } { } }",
            "score": 98.51804024832589,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( false ) ; } }",
            "score": 99.3552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( false ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( parent , ns ) ; } }",
            "score": 99.2285400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( parent , ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode ) ; }",
            "score": 99.15373883928571,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( node != null )",
            "score": 99.07747802734374,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if else {",
            "score": 99.05703396267361,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { break ; } } else",
            "score": 99.05128173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { if else",
            "score": 98.70050811767578,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else {",
            "score": 98.51773071289062,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNode( ) == n ) {",
            "score": 99.44982147216797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Node ( ) == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = recordDepScope( recordNode , ns ) ;",
            "score": 99.32939147949219,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isFor( ) ) {",
            "score": 99.22836303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.recordDepScope( nameNode ) ;",
            "score": 99.15322440011161,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return -1; } } else",
            "score": 99.0766934481534,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return - 1 ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { { return ; } } }",
            "score": 99.05095079210069,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } else else",
            "score": 99.05072021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else if else",
            "score": 98.51763916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( value != null ) {",
            "score": 99.22704467773437,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( value != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*void recordDepScope( recordNode ) ;",
            "score": 99.1510009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "* void record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Throwable( ) ; }",
            "score": 99.07380814985795,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Throwable ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } if } else",
            "score": 99.05063205295139,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } else { else {",
            "score": 99.05046929253473,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if false {",
            "score": 98.69979095458984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } { }",
            "score": 98.51511928013393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "current = n.getParent( ) ; } else {",
            "score": 99.32895333426339,
            "correctness": "uncompilable",
            "tokenized_patch": "current = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , true ) ;",
            "score": 99.15085274832589,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { hasChild = true ; }",
            "score": 99.0732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { has CaMeL Child = true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } if } else",
            "score": 99.05007595486111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return null ; } }",
            "score": 99.04996066623264,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else } }",
            "score": 98.69963836669922,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { }",
            "score": 98.514111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , parent ) ;",
            "score": 99.4492919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t ) ; } } else {",
            "score": 99.3280029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , ns ,",
            "score": 99.22592599051339,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = nameNode.getParent( ) ;",
            "score": 99.14845493861607,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = name CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( }",
            "score": 99.0711337002841,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } **/",
            "score": 99.04940032958984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { else { {",
            "score": 99.04893798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; } }",
            "score": 98.69949340820312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } else {",
            "score": 98.51357596261161,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else if( parent.getNext( ) !=",
            "score": 99.2246826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else if ( parent . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.info( 'AstChangeProxy::getRhs ') ;",
            "score": 99.0710116299716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.info( 'c') ;",
            "score": 99.0710116299716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.info( 'a') ;",
            "score": 99.0710116299716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.info( 'b') ;",
            "score": 99.0710116299716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.info( \"'s value.  \") ;",
            "score": 99.0710116299716,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . info ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return false ; } } else",
            "score": 99.04876708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return false ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { else { {",
            "score": 99.04804144965277,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else } else",
            "score": 98.51311383928571,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , parent ) ;",
            "score": 99.44781901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent.getParent( ) ; } }",
            "score": 99.3260726928711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = parent . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = null ; } else {",
            "score": 99.22454833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns.recordDepScope( recordNode ) ;",
            "score": 99.14710344587054,
            "correctness": "uncompilable",
            "tokenized_patch": "ns . record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else != null ) {",
            "score": 99.07091674804687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } finally ;",
            "score": 99.04817199707031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } finally ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = { n } ; }",
            "score": 99.04713134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = { n } ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else ; }",
            "score": 98.69845581054688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } {",
            "score": 98.51077706473214,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.getNext( ) != n )",
            "score": 99.4474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( n . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( current ) ;",
            "score": 99.34840745192308,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( current ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'AstChangeProxy::getRhs ') ; } else {",
            "score": 99.32460374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'c') ; } else {",
            "score": 99.32460374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'a') ; } else {",
            "score": 99.32460374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'b') ; } else {",
            "score": 99.32460374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( \"'s value.  \") ; } else {",
            "score": 99.32460374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( t , ns ) ; }",
            "score": 99.22419084821429,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( t , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ,1) ;",
            "score": 99.14658900669643,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } } else",
            "score": 99.07064480251736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else ; }",
            "score": 99.04783799913194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else } else {",
            "score": 99.04691569010417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else else {",
            "score": 98.50912039620536,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( target ) ;",
            "score": 99.4468994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( target ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ; } } else {",
            "score": 99.32428533380681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , null ) ;",
            "score": 99.14577811104911,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , null ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "75"
        },
        {
            "patch": "} { if( { return ; } }",
            "score": 99.07017822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = { t } ; }",
            "score": 99.04686279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = { t } ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; } finally {",
            "score": 99.04660373263889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; } }",
            "score": 98.69826834542411,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else throw",
            "score": 98.5081278483073,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else throw",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( n , ns ) ;",
            "score": 99.34544154575893,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( n , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns + null ) ;",
            "score": 99.32422637939453,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = t ; } } else {",
            "score": 99.22275612571023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = t ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != null ) { {",
            "score": 99.14424272017045,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent instanceof Node )",
            "score": 99.07013549804688,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent instanceof Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { throw { } } }",
            "score": 99.0467529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { throw { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / *else } }",
            "score": 99.04656304253473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } out.}",
            "score": 98.69801330566406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } out . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } { } }",
            "score": 98.50662667410714,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , node ) ;",
            "score": 99.445361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.isForIn( parent ) )",
            "score": 99.343994140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Node CaMeL Util . is CaMeL For CaMeL In ( parent ) )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns +",
            "score": 99.32302856445312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != n && !",
            "score": 99.22190638950893,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != n && !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getParent( ) != null )",
            "score": 99.1417236328125,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Parent ( ) != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} if( scope != null ) {",
            "score": 99.06940375434027,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent != null ) { {",
            "score": 99.04647216796874,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( parent != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } else if } else",
            "score": 99.04614935980902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } else if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } int else {",
            "score": 98.696533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } int else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else ;",
            "score": 98.50342668805804,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , t ) ;",
            "score": 99.4453369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( recordNode , ns ) {",
            "score": 99.34328988882211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( record CaMeL Node , ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns -1) ;",
            "score": 99.32233428955078,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) == n )",
            "score": 99.13818359375,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) == n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} { if( target != null ) {",
            "score": 99.068798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( target != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else if else",
            "score": 99.04581027560764,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; } }",
            "score": 99.04466247558594,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { *{",
            "score": 98.6960957845052,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } }",
            "score": 98.5013427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent.getFirstChild( ) != n )",
            "score": 99.44495391845703,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( parent . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.isFor( parent ) )",
            "score": 99.342431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . is CaMeL For ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! NodeUtil.isForCaMeL",
            "score": 99.22126116071429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! Node CaMeL Util . is CaMeL For CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( scope != null ) {",
            "score": 99.06876997514205,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else ; else {",
            "score": 99.04488796657986,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( } else { {",
            "score": 99.04309760199652,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if true { }",
            "score": 98.69589669363839,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if true { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } { } else",
            "score": 98.50120326450893,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , null ) ;",
            "score": 99.44339192708334,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( pos ) ;",
            "score": 99.33870755709134,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( pos ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns true ) ;",
            "score": 99.32039388020833,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.equals( parent ) ) {",
            "score": 99.22091674804688,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . equals ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.parent != null )",
            "score": 99.06868119673295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { else { } } }",
            "score": 99.04288736979167,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break {",
            "score": 98.69561767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != node ) {",
            "score": 99.44287872314453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != n ) {",
            "score": 99.1343017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'AstChangeProxy::getRhs '} else {",
            "score": 99.06773792613636,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'c'} else {",
            "score": 99.06773792613636,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a'} else {",
            "score": 99.06773792613636,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'b'} else {",
            "score": 99.06773792613636,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( \"'s value.  \"} else {",
            "score": 99.06773792613636,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } finally { else",
            "score": 99.04249403211806,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } finally { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else { { {",
            "score": 99.04151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else ;",
            "score": 98.69497680664062,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } { } else",
            "score": 98.50089808872768,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( recordNode ) )",
            "score": 99.44207000732422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = true ; } } else {",
            "score": 99.21840598366477,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } } else { }",
            "score": 99.06649441189236,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } } } else",
            "score": 99.04122314453124,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { } }",
            "score": 98.49997965494792,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( recordNode ) ; }",
            "score": 99.44034830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( nameNode ) ;",
            "score": 99.31851959228516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = nameNode ; }",
            "score": 99.21814903846153,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = name CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ,",
            "score": 99.13294396033653,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { String name = } ;",
            "score": 99.06625705295139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { String name = } ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } if } }",
            "score": 99.04154459635417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { throw new { } } }",
            "score": 99.0406494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { throw new { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } {",
            "score": 98.69480678013393,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; } else {",
            "score": 99.4401626586914,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; +",
            "score": 99.31754557291667,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != null ) { }",
            "score": 99.13221324573864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != null ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target != null ) { {",
            "score": 99.06540749289773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } } } else",
            "score": 99.04127332899306,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { { } }",
            "score": 99.04056125217014,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } catch else {",
            "score": 98.69397735595703,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else } else",
            "score": 98.49480329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( ns ) )",
            "score": 99.44008091517857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns ; }",
            "score": 99.32566139914773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! true ) {",
            "score": 99.21480305989583,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ! true ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { if } } if else",
            "score": 99.04124620225694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { break ; } }",
            "score": 99.03991088867187,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } /",
            "score": 98.69366455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } { } }",
            "score": 98.49464634486607,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isForIn( ) ) {",
            "score": 99.32563127790179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ) ; } else { }",
            "score": 99.3172607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns.getParent( ) ; } }",
            "score": 99.2137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( recordNode ) ;",
            "score": 99.12954477163461,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else { } } } else {",
            "score": 99.06495971679688,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch else ;",
            "score": 99.04074096679688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return ; }",
            "score": 99.03988647460938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else } }",
            "score": 98.69329071044922,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( }",
            "score": 98.49366251627605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , ns , ns ,",
            "score": 99.32552337646484,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , ns , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this ) ; } else {",
            "score": 99.3160869891827,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = node ; } } else {",
            "score": 99.21307927911931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( type != n ) {",
            "score": 99.12949829101562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( type != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { return ; } } else",
            "score": 99.06376509232955,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } } finally",
            "score": 99.04025607638889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } } finally",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } { break ; } } }",
            "score": 99.03938598632813,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'AstChangeProxy::getRhs '{",
            "score": 98.69216918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'c'{",
            "score": 98.69216918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'a'{",
            "score": 98.69216918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'b'{",
            "score": 98.69216918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( \"'s value.  \"{",
            "score": 98.69216918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Iterator",
            "score": 98.49212646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Iterator",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( parent , ns ) ;",
            "score": 99.43885149274554,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( parent , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , type ) ;",
            "score": 99.3158950805664,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode.getParent( ) !=",
            "score": 99.2125732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node . get CaMeL Parent ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode ; } else",
            "score": 99.12880637428977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'AstChangeProxy::getRhs '+ }",
            "score": 99.06301047585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'c'+ }",
            "score": 99.06301047585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'a'+ }",
            "score": 99.06301047585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'b'+ }",
            "score": 99.06301047585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( \"'s value.  \"+ }",
            "score": 99.06301047585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { else {",
            "score": 99.04011366102431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return else { {",
            "score": 99.03887939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else ;",
            "score": 98.692138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else } }",
            "score": 98.48933919270833,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = recordNode ; }",
            "score": 99.32275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = record CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = recordDepScope( nameNode , ns ) ;",
            "score": 99.31475830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode ) ;",
            "score": 99.11887770432692,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return -1; } }",
            "score": 99.06247965494792,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return - 1 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { return ;",
            "score": 99.03983561197917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( node != null )",
            "score": 99.03872341579861,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } while else ;",
            "score": 98.69171905517578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } while else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else }",
            "score": 98.48906860351562,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != n ||",
            "score": 99.211328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != n ||",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( recordNode ) ;",
            "score": 99.11619215745192,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} throw new RuntimeException( 'AstChangeProxy::getRhs ') ;",
            "score": 99.06162331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} throw new RuntimeException( 'c') ;",
            "score": 99.06162331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} throw new RuntimeException( 'a') ;",
            "score": 99.06162331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} throw new RuntimeException( 'b') ;",
            "score": 99.06162331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} throw new RuntimeException( \"'s value.  \") ;",
            "score": 99.06162331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if( } }",
            "score": 99.0386962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { return else",
            "score": 99.03637017144098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { return else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } else {",
            "score": 98.69166782924107,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } = else",
            "score": 98.48866489955357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } = else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( block , ns ) ;",
            "score": 99.43784993489584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( block , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ! true ) ;",
            "score": 99.3192138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ! true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , n ,",
            "score": 99.31437683105469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( t , ns ) ;",
            "score": 99.21043043870192,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( { return ; } else {",
            "score": 99.05916137695313,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if( } else {",
            "score": 99.03829345703124,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false ) { }",
            "score": 99.03443739149306,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else ;",
            "score": 98.69085693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ++ }",
            "score": 98.48781040736607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ++ }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) instanceof Node ) {",
            "score": 99.43672943115234,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) instanceof Node ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "49"
        },
        {
            "patch": "} else { if( parent == n ) {",
            "score": 99.20955033735795,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'AstChangeProxy::getRhs '+ nameNode ) ; }",
            "score": 99.05799449573864,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ + name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'c'+ nameNode ) ; }",
            "score": 99.05799449573864,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ + name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'a'+ nameNode ) ; }",
            "score": 99.05799449573864,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ + name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'b'+ nameNode ) ; }",
            "score": 99.05799449573864,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ + name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( \"'s value.  \"+ nameNode ) ; }",
            "score": 99.05799449573864,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ + name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; } }",
            "score": 99.03777313232422,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ***/ }",
            "score": 99.03432888454861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } } }",
            "score": 98.69080352783203,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } } else",
            "score": 98.48529924665179,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ,0) ;",
            "score": 99.31307220458984,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == ns ) {",
            "score": 99.20886840820313,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log } } else {",
            "score": 99.05753580729167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( else ) {",
            "score": 99.03443060980902,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( else ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } finally {",
            "score": 99.03406524658203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } value { }",
            "score": 98.69060516357422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } value { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else if else }",
            "score": 98.48481096540179,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( parent.getNext( ) != n ) {",
            "score": 99.43231201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , ns , ns ,",
            "score": 99.31407165527344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , ns , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , ns ) ; }",
            "score": 99.10951585036058,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { else { else {",
            "score": 99.0338134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch } } else { else {",
            "score": 99.03342013888889,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } else { }",
            "score": 98.48451450892857,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.isForIn( ) ) {",
            "score": 99.43186950683594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent != n ) {",
            "score": 99.31358753551136,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = false ; } } else {",
            "score": 99.20524458451705,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.getParent( ) != n )",
            "score": 99.10674579326923,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . get CaMeL Parent ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( { return ; } } }",
            "score": 99.05589599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if else ; } } }",
            "score": 99.03337266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if else ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( node != null )",
            "score": 99.03269449869792,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return else {",
            "score": 98.690185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else return {",
            "score": 98.48250034877232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , recordNode , ns ) ;",
            "score": 99.31233215332031,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( parent , ns ) ; }",
            "score": 99.204443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( parent , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( t != null ) {",
            "score": 99.0999755859375,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( t != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { if( type != null ) {",
            "score": 99.05552368164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( type != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( false ) {",
            "score": 99.03313530815973,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; } } else",
            "score": 99.03252495659723,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if false ;",
            "score": 98.6890640258789,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else } else",
            "score": 98.48165457589286,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( node , ns ) ;",
            "score": 99.4286358173077,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ,0) ;",
            "score": 99.3121109008789,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) ;",
            "score": 99.20428059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( nameNode ) ;",
            "score": 99.0968017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else if( } else",
            "score": 99.05551147460938,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { return false ; }",
            "score": 99.03235473632813,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } new else {",
            "score": 99.03211127387152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } new else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ } if else",
            "score": 98.68856811523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } else",
            "score": 98.48122151692708,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode.isFor( ) )",
            "score": 99.428369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; ns =",
            "score": 99.31184387207031,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; ns =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != n !=",
            "score": 99.20409342447917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != n !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else if( } else",
            "score": 99.05429909446023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { { { {",
            "score": 99.0322509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false ) ; }",
            "score": 99.03194173177083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( } else {",
            "score": 98.68817901611328,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else { else",
            "score": 98.47789655412946,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getNext( ) != n )",
            "score": 99.42737630208333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , n ) ; }",
            "score": 99.31136322021484,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { node = n.getParent( ) ;",
            "score": 99.31044224330357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = parent ; } else {",
            "score": 99.20306396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , ns ) ;",
            "score": 99.09485880533855,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { return ) break ; }",
            "score": 99.05414373224431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { return ) break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { ***/",
            "score": 99.03179253472223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { { { {",
            "score": 99.03093804253473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } } /",
            "score": 98.68729400634766,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { else {",
            "score": 98.47549002511161,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; *",
            "score": 99.31063138521634,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns.getFirstChild( ) ;",
            "score": 99.20279947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else NameInformation ns = new NameInformation(",
            "score": 99.09483924278847,
            "correctness": "uncompilable",
            "tokenized_patch": "} else Name CaMeL Information ns = new Name CaMeL Information (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw t ; } }",
            "score": 99.05295138888889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw t ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( } } } else",
            "score": 99.02901882595486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { return ; }",
            "score": 99.028515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { } {",
            "score": 98.68719482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( nameNode ) )",
            "score": 99.42701721191406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; } ++",
            "score": 99.31027221679688,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; } ++",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getFirstChild( ) !=",
            "score": 99.2023681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL First CaMeL Child ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns instanceof Node ) {",
            "score": 99.08836059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { throw new else {",
            "score": 99.02840169270833,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { throw new else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if }( true else {",
            "score": 99.02829318576389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( true else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if true {",
            "score": 98.68717447916667,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if true {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } { } else",
            "score": 98.47310093470982,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent.getFirstChild( ) == n )",
            "score": 99.42635345458984,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent . get CaMeL First CaMeL Child ( ) == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , ns , ns ,",
            "score": 99.30681610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , ns , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(( parent.getNext( ) !=",
            "score": 99.2015380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ( parent . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( node , ns ) ; }",
            "score": 99.088134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( } else",
            "score": 99.05231267755681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . equals ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( else ; } }",
            "score": 99.02825927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { else { break ; } }",
            "score": 99.02677612304687,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ;",
            "score": 98.68641008649554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if else }",
            "score": 98.47222900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns",
            "score": 99.42606608072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return -1; } } else {",
            "score": 99.30801391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return - 1 ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent ; } } else {",
            "score": 99.19849310980902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null && }",
            "score": 99.05151977539063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null && }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return {",
            "score": 99.02792358398438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { break ; }",
            "score": 99.0259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; { }",
            "score": 98.68437848772321,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else }",
            "score": 98.47203572591145,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , t ) ;",
            "score": 99.30790710449219,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , n ,",
            "score": 99.30563354492188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , n ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { out.println( 'AstChangeProxy::getRhs ') ;",
            "score": 99.05075905539773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { out . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { out.println( 'c') ;",
            "score": 99.05075905539773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { out . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { out.println( 'a') ;",
            "score": 99.05075905539773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { out . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { out.println( 'b') ;",
            "score": 99.05075905539773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { out . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { out.println( \"'s value.  \") ;",
            "score": 99.05075905539773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { out . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return { } }",
            "score": 99.02608235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return false ; }",
            "score": 99.02596028645833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else /",
            "score": 98.47176106770833,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ recordDepScope( nameNode , ns ) ;",
            "score": 99.30773162841797,
            "correctness": "uncompilable",
            "tokenized_patch": "* / record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordDepScope( recordNode , ns ,",
            "score": 99.30461883544922,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == parent ) {",
            "score": 99.19691162109375,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( parent == parent ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "recordDepScope( nameNode , ns ,",
            "score": 99.08592810997597,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = true ; break ; }",
            "score": 99.04921653053977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = true ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; } } {",
            "score": 99.02540418836806,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if }( else ; }",
            "score": 99.02206081814236,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if( }",
            "score": 98.68317413330078,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { } { }",
            "score": 98.47067696707589,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ recordDepScope( recordNode , ns ) ;",
            "score": 99.30748748779297,
            "correctness": "uncompilable",
            "tokenized_patch": "* / record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = node ; } else {",
            "score": 99.19545288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getChildCaMeL",
            "score": 99.08518288352273,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Child CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if { return ; } } }",
            "score": 99.0249755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } / */",
            "score": 99.02165985107422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *",
            "score": 98.68254089355469,
            "correctness": "uncompilable",
            "tokenized_patch": "} } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else / }",
            "score": 98.46991838727679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getFirstChild( ) != n ) {",
            "score": 99.42278289794922,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! false ) {",
            "score": 99.19510904947917,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ! false ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { ) ; } } else",
            "score": 99.08157009548611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( { } else {",
            "score": 99.04884033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { if( } }",
            "score": 99.02452392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { catch }",
            "score": 99.02130805121527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if null ; }",
            "score": 98.68114471435547,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { else",
            "score": 98.46980503627232,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns false ) ;",
            "score": 99.3068603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = null ; } } else {",
            "score": 99.19167258522727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForCaMeL",
            "score": 99.0793124112216,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } else {",
            "score": 99.04880777994792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } { break ; } }",
            "score": 99.02377658420139,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else return else",
            "score": 99.02117241753473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else return else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else }",
            "score": 98.46695709228516,
            "correctness": "uncompilable",
            "tokenized_patch": "if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isForIn( ) )",
            "score": 99.42198893229167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For CaMeL In ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( index ) ; } else {",
            "score": 99.30665940504808,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( index ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns )",
            "score": 99.29806518554688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = t ; } else {",
            "score": 99.19150797526042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = t ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope != null ) {",
            "score": 99.0779520670573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.} } else {",
            "score": 99.02313232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( else else {",
            "score": 99.01997884114583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( else else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } / {",
            "score": 98.68049621582031,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } if else }",
            "score": 98.46448625837054,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) && ) {",
            "score": 99.41988118489583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) && ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; break ;",
            "score": 99.30644226074219,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = true ; } else {",
            "score": 99.19056396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = true ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { return ; } } else",
            "score": 99.04801802201705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { else { else {",
            "score": 99.022900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } else { if } }",
            "score": 99.01923963758681,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } } else {",
            "score": 98.67900085449219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else = }",
            "score": 98.46401541573661,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( node , ns ) )",
            "score": 99.41934967041016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( node , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.1904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'c') ; }",
            "score": 99.1904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'a') ; }",
            "score": 99.1904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'b') ; }",
            "score": 99.1904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( \"'s value.  \") ; }",
            "score": 99.1904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = ns.getParent( ) ;",
            "score": 99.07205200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = ns . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent != null )",
            "score": 99.0476806640625,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent != null )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { parent = parent ; } }",
            "score": 99.02276611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { parent = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else { } } } }",
            "score": 99.01898871527777,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } else {",
            "score": 98.677001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else if else",
            "score": 98.46393694196429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.isFor( ) ) {",
            "score": 99.41822160993304,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; ns =",
            "score": 99.30504608154297,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; ns =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.equals( n ) ) {",
            "score": 99.29540076622597,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ns . equals ( n ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else parent = t ; } else {",
            "score": 99.18865966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = t ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n != n ) {",
            "score": 99.06849365234375,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( n != n ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { else { else { } }",
            "score": 99.02273559570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else = null ; } else",
            "score": 99.01898193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else = null ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if ) { }",
            "score": 98.67659214564732,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if else ;",
            "score": 98.46267264229911,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( ns ) ; }",
            "score": 99.41808143028847,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , current ) ;",
            "score": 99.30496978759766,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , current ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordDepScope( nameNode , ns ,",
            "score": 99.29412078857422,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( ns ) ;",
            "score": 99.0647481282552,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( node != null ) { {",
            "score": 99.0468417080966,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( node != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent == null )",
            "score": 99.02220323350694,
            "correctness": "wrong",
            "tokenized_patch": "} { if ( parent == null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} } else if else { if }",
            "score": 99.01896158854167,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else { } {",
            "score": 98.67640686035156,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else ;",
            "score": 98.46250406901042,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.equals( ) ) {",
            "score": 99.29378255208333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . equals ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode ; } }",
            "score": 99.06068004261364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } }",
            "score": 99.02149309430804,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } catch }",
            "score": 99.01786041259766,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / } } }",
            "score": 98.67632293701172,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else /",
            "score": 98.46241978236607,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( parent.getFirstChild( ) != n )",
            "score": 99.41338704427083,
            "correctness": "timeout",
            "tokenized_patch": "while ( parent . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t ) ; } } }",
            "score": 99.30430603027344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else if( } else",
            "score": 99.04613148082386,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { } } }",
            "score": 99.02012939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if }",
            "score": 99.01781209309895,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return {",
            "score": 98.67425537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else } } }",
            "score": 98.46230643136161,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != ns )",
            "score": 99.291748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = null ; } } else {",
            "score": 99.18681030273437,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns == n ) {",
            "score": 99.058740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break false ; } } else { }",
            "score": 99.04545762803819,
            "correctness": "uncompilable",
            "tokenized_patch": "break false ; } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return else {",
            "score": 99.01958550347223,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if } finally",
            "score": 99.01726616753473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if } finally",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else if else }",
            "score": 98.46187046595982,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , next ) ;",
            "score": 99.30298614501953,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , next ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getFirstChild( ) ;",
            "score": 99.29135366586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( null != n ) {",
            "score": 99.05582275390626,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( null != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } else { else { if( }",
            "score": 99.01904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return { else ; } }",
            "score": 99.01607259114583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else else",
            "score": 98.46013532366071,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , nameNode , ns ) ;",
            "score": 99.3028564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( nameNode , ns ,",
            "score": 99.18547712053571,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( node , ns ) ;",
            "score": 99.0552266438802,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else if( }",
            "score": 99.04417114257812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent == null else {",
            "score": 99.01851196289063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent == null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { } } } else",
            "score": 99.01502821180556,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; { }",
            "score": 98.67317417689732,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else } } else",
            "score": 98.45763288225446,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNode( ) != n ) {",
            "score": 99.41147286551339,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Node ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this , recordNode , ns ) ;",
            "score": 99.30271911621094,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this , record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ) ; } }",
            "score": 99.29123360770089,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = node.getParent( ) ;",
            "score": 99.18340594951923,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent , parent ) {",
            "score": 99.0539306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent , parent ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = true ; } } else",
            "score": 99.04398970170455,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = true ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent instanceof else {",
            "score": 99.01849365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent instanceof else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else",
            "score": 99.01317487444196,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *{ } } }",
            "score": 98.6727523803711,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } } }",
            "score": 98.45693533761161,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( n , ns ) )",
            "score": 99.41085052490234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( n , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns + null ) ;",
            "score": 99.3015365600586,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns + null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent , n ) {",
            "score": 99.04891357421874,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent , n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( else {",
            "score": 99.04363335503473,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { if( }",
            "score": 99.01839870876736,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / ***{",
            "score": 99.01300726996527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * * * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false else {",
            "score": 98.67208426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } else {",
            "score": 98.45680454799107,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return ; } } } else {",
            "score": 99.30100661057692,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = node.getParent( ) ;",
            "score": 99.28751046316964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = node . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getParent( ) !=",
            "score": 99.18308803013393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL Parent ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else { } } } else {",
            "score": 99.04312472873264,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { { return ; } } }",
            "score": 99.01744927300348,
            "correctness": "uncompilable",
            "tokenized_patch": "else { { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } false ;",
            "score": 98.67159271240234,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } = }",
            "score": 98.4564208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { if( {",
            "score": 99.04209206321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( false ) ;",
            "score": 99.04017130533855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { node = } ; }",
            "score": 99.01702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { node = } ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { if else {",
            "score": 99.01266818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *{ }",
            "score": 98.6715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } if else",
            "score": 98.45538330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , ns.",
            "score": 99.41033935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , ) ; }",
            "score": 99.29875946044922,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = ns.getParent( ) ;",
            "score": 99.2855224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = ns . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != n || !",
            "score": 99.18049839564732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != n || !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else {",
            "score": 99.04180908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { return else ; } }",
            "score": 99.01614990234376,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { **/ } }",
            "score": 99.01255289713542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } if else ;",
            "score": 98.45464215959821,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isFor( ) )",
            "score": 99.41018442007211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.equals( ns ) ) {",
            "score": 99.28431114783653,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( ns . equals ( ns ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else if( parent != null ) {",
            "score": 99.17896185980902,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } else { } } }",
            "score": 99.0411376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { } else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( ns != null ) {",
            "score": 99.0385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( ns != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { null ;",
            "score": 99.01172553168402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } break {",
            "score": 98.66997528076172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( t ) ;",
            "score": 99.40911865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , null ,",
            "score": 99.29750162760416,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , null ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t , ns ,",
            "score": 99.17715890066964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t , ns ) ;",
            "score": 99.03488159179688,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { else { {",
            "score": 99.01535373263889,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } ; } else",
            "score": 99.01062689887152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false else { }",
            "score": 98.66902160644531,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else }",
            "score": 98.45431518554688,
            "correctness": "uncompilable",
            "tokenized_patch": "else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( t ) ; } } else",
            "score": 99.40812683105469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( t ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.29628499348958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'c') ; } }",
            "score": 99.29628499348958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'a') ; } }",
            "score": 99.29628499348958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'b') ; } }",
            "score": 99.29628499348958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( \"'s value.  \") ; } }",
            "score": 99.29628499348958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = this ; } } else {",
            "score": 99.17622514204545,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = this ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( null != parent ) {",
            "score": 99.03399047851562,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( null != parent ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { { else { return ; } }",
            "score": 99.01414794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else ) return ;",
            "score": 99.01057942708333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else ) return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; { }",
            "score": 98.66878509521484,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else continue {",
            "score": 98.45236642020089,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else continue {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent ) ; } } else",
            "score": 99.40695190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { current = n.getParent( ) ;",
            "score": 99.27823311941964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { current = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = null ; } else {",
            "score": 99.17420654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { if( {",
            "score": 99.03885498046876,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return { return ; } } }",
            "score": 99.01305541992187,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } { else {",
            "score": 99.01045735677083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } *",
            "score": 98.66877964564732,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { } } else",
            "score": 98.45206124441964,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForIn( parent ) )",
            "score": 99.40675354003906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL In ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new null ; } } else {",
            "score": 99.29595947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( l ) ;",
            "score": 99.27649864783653,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( l ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return -1; }",
            "score": 99.03540717230902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return - 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns ) ;",
            "score": 99.02774658203126,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if( } }",
            "score": 99.01270141601563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( true else",
            "score": 99.00960964626736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( true else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } if else ;",
            "score": 98.66868373325893,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } if else",
            "score": 98.44891357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( t.getFirstChild( ) != n ) {",
            "score": 99.40643310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( t . get CaMeL First CaMeL Child ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( t , ns ) ;",
            "score": 99.27559720552884,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = false ; } else {",
            "score": 99.1733642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { count ++ ; } }",
            "score": 99.03497992621527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { count ++ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( null , ns ) ;",
            "score": 99.0270284016927,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( null , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} } if( n == null ) {",
            "score": 99.012548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( n == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return { } } } else",
            "score": 99.00889078776042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else if else throws",
            "score": 98.44784109933036,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( recordDepScope( recordNode , ns ) )",
            "score": 99.40621948242188,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( new NodeTraversal( )",
            "score": 99.27457427978516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( new Node CaMeL Traversal ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.getNext( ) !=",
            "score": 99.17041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( n . get CaMeL Next ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { if( {",
            "score": 99.03488991477273,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , n ) ;",
            "score": 99.02676391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else if } }",
            "score": 99.00873480902777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } { }",
            "score": 98.44685872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getNode( ) != n )",
            "score": 99.40596008300781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL Node ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns )",
            "score": 99.27389526367188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode ,",
            "score": 99.17003522600446,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = false ; }",
            "score": 99.03436279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns ) ; } else",
            "score": 99.02276611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { return }",
            "score": 99.00872124565973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { return }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } else",
            "score": 98.44667358398438,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.recordDepScope( nameNode , ns ) ;",
            "score": 99.27273559570312,
            "correctness": "uncompilable",
            "tokenized_patch": "super . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { isIn = true ; }",
            "score": 99.03415749289773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { is CaMeL In = true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else { return ; } } }",
            "score": 99.00886840820313,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return } else",
            "score": 99.00847710503473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } if else",
            "score": 98.66707611083984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { {",
            "score": 98.44385637555804,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( info ) ;",
            "score": 99.40335787259616,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( info ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode.add( ns ) ; } else {",
            "score": 99.29446176382211,
            "correctness": "uncompilable",
            "tokenized_patch": "name CaMeL Node . add ( ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return.getParent( ) ; }",
            "score": 99.27237642728366,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = nameNode ; }",
            "score": 99.16810191761364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = name CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( { break ; } }",
            "score": 99.03330485026042,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( )",
            "score": 99.01493326822917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( parent instanceof }",
            "score": 99.00858764648437,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( parent instanceof }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else ; } } else",
            "score": 99.00796169704861,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } / else { }",
            "score": 98.66702270507812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } / else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } { }",
            "score": 98.4431864420573,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , nameNode , ns ) ;",
            "score": 99.29439544677734,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.recordDepScope( recordNode , ns ) ;",
            "score": 99.27210235595703,
            "correctness": "uncompilable",
            "tokenized_patch": "super . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( parent != null )",
            "score": 99.03330300071023,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( true ) ;",
            "score": 99.01096598307292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if }",
            "score": 99.00788116455078,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return } } }",
            "score": 99.00786743164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { if }",
            "score": 98.66595458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else { else",
            "score": 98.44275774274554,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( ) ; } else {",
            "score": 99.29359944661458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( recordNode , ns ) {",
            "score": 99.27110877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( record CaMeL Node , ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = this ; } else {",
            "score": 99.16731567382813,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = this ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( type , ns ) ;",
            "score": 99.00844319661458,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( type , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = { node } ; }",
            "score": 99.00786743164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = { node } ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else {",
            "score": 99.005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; if else ;",
            "score": 98.66520690917969,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else logger }",
            "score": 98.43933977399554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else logger }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( parent.getNext( ) != n ) {",
            "score": 99.39912632533482,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( parent . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( recordDepScope ) {",
            "score": 99.27106182391827,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( record CaMeL Dep CaMeL Scope ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.16281362680289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'c') ; } }",
            "score": 99.16281362680289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'a') ; } }",
            "score": 99.16281362680289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'b') ; } }",
            "score": 99.16281362680289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( \"'s value.  \") ; } }",
            "score": 99.16281362680289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { { } } } else {",
            "score": 99.03228759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( n ) ;",
            "score": 99.0075174967448,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if ) { } }",
            "score": 98.66448211669922,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else }",
            "score": 98.43853759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( out ) ;",
            "score": 99.39734825721153,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( out ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns + true ) ;",
            "score": 99.2933349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns + true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { throw new } } else",
            "score": 99.03226928710937,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { throw new } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( type ) ;",
            "score": 99.00669352213542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return } } }",
            "score": 99.00612182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if }( else ;",
            "score": 99.00426483154297,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { } }",
            "score": 98.66439819335938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else { }",
            "score": 98.4340311686198,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , next ) ;",
            "score": 99.29302978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , next ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getFirstChild( ) !=",
            "score": 99.26971435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL First CaMeL Child ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.equals( n ) ) {",
            "score": 99.16037819602273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . equals ( n ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else { return ; } } }",
            "score": 99.03163655598958,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return ; } {",
            "score": 99.00539822048611,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return ; } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else { else",
            "score": 99.00396728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else",
            "score": 98.66424560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else println else",
            "score": 98.43382917131696,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else println else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else { }",
            "score": 99.03139241536458,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ; } else",
            "score": 99.00542534722223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; } } } else",
            "score": 99.00494384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if { else",
            "score": 99.00391981336806,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else } } }",
            "score": 98.66405487060547,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else + }",
            "score": 98.43325369698661,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns + true ) ;",
            "score": 99.29156494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( recordNode != n ) {",
            "score": 99.26662973257211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( record CaMeL Node != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } else { return ; }",
            "score": 99.03075493706598,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return true ; } } }",
            "score": 99.0047607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return true ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else NameInformation ns = null ;",
            "score": 99.00452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else Name CaMeL Information ns = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = else ; } } else",
            "score": 99.00301106770833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = else ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } }",
            "score": 98.66390991210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } } }",
            "score": 98.43212018694196,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else { return ; } }",
            "score": 99.03033447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if( else ) {",
            "score": 99.0029052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( else ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else ; else {",
            "score": 99.00254991319444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( target , ns ) ;",
            "score": 99.00050862630208,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( target , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if - else {",
            "score": 98.66378348214286,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if - else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else /",
            "score": 98.4310811360677,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( NodeUtil.isIn( parent ) )",
            "score": 99.39459228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( Node CaMeL Util . is CaMeL In ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } else { break ; } } }",
            "score": 99.00241088867188,
            "correctness": "uncompilable",
            "tokenized_patch": "break } else { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { , ns ) ; }",
            "score": 98.99903021918402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } *else {",
            "score": 98.66344451904297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if else",
            "score": 98.43072509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( ns ) ) {",
            "score": 99.39439039963942,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; break ;",
            "score": 99.289306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.equals( ns ) ) {",
            "score": 99.14764959161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . equals ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target instanceof Node )",
            "score": 99.02974446614583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target instanceof Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { } } } else",
            "score": 99.00216064453124,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null { else ; }",
            "score": 98.99883355034723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node ns = parent.getParent( ) ;",
            "score": 98.99709065755208,
            "correctness": "uncompilable",
            "tokenized_patch": "Node ns = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { */ if else",
            "score": 98.66305541992188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * / if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'AstChangeProxy::getRhs ') ; } else {",
            "score": 99.28895920973558,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'c') ; } else {",
            "score": 99.28895920973558,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'a') ; } else {",
            "score": 99.28895920973558,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'b') ; } else {",
            "score": 99.28895920973558,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( \"'s value.  \") ; } else {",
            "score": 99.28895920973558,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , n , ns ,",
            "score": 99.26139068603516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , n , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else if( } } else {",
            "score": 99.02966986762152,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { {",
            "score": 99.000732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break { } } }",
            "score": 98.99875217013889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( parent ) ;",
            "score": 98.99493408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { else { }",
            "score": 98.66295623779297,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , ) ; }",
            "score": 99.28876495361328,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( recordNode , ns ).",
            "score": 99.25936126708984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != null ) { }",
            "score": 99.02899724786931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != null ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } try {",
            "score": 98.99832492404514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( type ) ;",
            "score": 98.99282836914062,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { { }",
            "score": 98.66267395019531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else *}",
            "score": 98.4266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ref ) ;",
            "score": 99.39291616586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ref ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope ) {",
            "score": 99.14633178710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = true ; }",
            "score": 99.02831353081598,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { return else {",
            "score": 99.00052897135417,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else if } else",
            "score": 98.99786376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( ns ) ;",
            "score": 98.99104817708333,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { *else {",
            "score": 98.66234479631696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else { } else",
            "score": 98.42550659179688,
            "correctness": "uncompilable",
            "tokenized_patch": "if else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( recordDepScope( nameNode , ns ) )",
            "score": 99.3927001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent == null ) {",
            "score": 99.14429820667614,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { break ; } } else",
            "score": 99.02817604758523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw null ; } } else",
            "score": 98.99629720052083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw null ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope( this ) ;",
            "score": 98.9871114095052,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope ( this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { else { }",
            "score": 98.66181945800781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else } }",
            "score": 98.42377580915179,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! parent.isForIn( ) )",
            "score": 99.39236450195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! parent . is CaMeL For CaMeL In ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.arraycopy( parent ,0,",
            "score": 99.14192708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . arraycopy ( parent , 0 ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if( node != null )",
            "score": 99.02806507457386,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { {",
            "score": 98.9998067220052,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return { else",
            "score": 98.99549018012152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ; } } else {",
            "score": 98.97182888454861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } {",
            "score": 98.66167449951172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else else",
            "score": 98.42337036132812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( target ) ; }",
            "score": 99.39232526506696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( target ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( parent ) ;",
            "score": 99.28688267299107,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = ns.getParent( ) ;",
            "score": 99.25497872488839,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = ns . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { log.error( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.02647816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "else { log . error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { log.error( 'c') ; }",
            "score": 99.02647816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "else { log . error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { log.error( 'a') ; }",
            "score": 99.02647816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "else { log . error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { log.error( 'b') ; }",
            "score": 99.02647816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "else { log . error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { log.error( \"'s value.  \") ; }",
            "score": 99.02647816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "else { log . error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { break ; } } else",
            "score": 98.99943237304687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( else else }",
            "score": 98.99510362413194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } } } else",
            "score": 98.96498616536458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if } }",
            "score": 98.66162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } /",
            "score": 98.42313639322917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ; } } } else {",
            "score": 99.28680419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != parent )",
            "score": 99.25379231770833,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != parent )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { NameInformation ns = null ;",
            "score": 99.1368408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { Name CaMeL Information ns = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'AstChangeProxy::getRhs ') ;",
            "score": 99.02601207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'c') ;",
            "score": 99.02601207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'a') ;",
            "score": 99.02601207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'b') ;",
            "score": 99.02601207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( \"'s value.  \") ;",
            "score": 99.02601207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { { {",
            "score": 98.9993896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch else ; else",
            "score": 98.99473063151042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } *if else }",
            "score": 98.66136932373047,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { {",
            "score": 98.423095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! isForIn( parent ) )",
            "score": 99.39139811197917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! is CaMeL For CaMeL In ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , parent ) ; }",
            "score": 99.28573404947916,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent = null ; } } else {",
            "score": 99.13658447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != this )",
            "score": 99.02415635850694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != this )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { { else { {",
            "score": 98.99771728515626,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } if } }",
            "score": 98.99436950683594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParentCaMeL",
            "score": 98.96034934303977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } / }",
            "score": 98.66045379638672,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if else if else }",
            "score": 98.42279924665179,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( name ) ;",
            "score": 99.25079815204327,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { success = false ; } } else",
            "score": 99.0234707919034,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { success = false ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { continue ; } }",
            "score": 98.99570041232639,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { continue ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } else ; else",
            "score": 98.99435763888889,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope != null )",
            "score": 98.96014959161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( else { }",
            "score": 98.66007995605469,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else break {",
            "score": 98.42264229910714,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( start ) ;",
            "score": 99.38994891826923,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( start ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.getFirstChild( )",
            "score": 99.24974772135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . get CaMeL First CaMeL Child ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; break ; } } else {",
            "score": 99.02332899305556,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { break ; } }",
            "score": 98.995654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else ;",
            "score": 98.99433898925781,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false ; } }",
            "score": 98.65998077392578,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } { }",
            "score": 98.41976492745536,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , recordNode ) ;",
            "score": 99.28526306152344,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isEmpty( ) ) {",
            "score": 99.1314188639323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL Empty ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { false ; } }",
            "score": 98.99405246310764,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } return false ; }",
            "score": 98.99369303385417,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } catch else ;",
            "score": 98.6599349975586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } catch else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else *",
            "score": 98.41939290364583,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , parent ,",
            "score": 99.28487955729166,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , parent ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent = n.getParent( ) ; }",
            "score": 99.12793907752403,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else { } } } }",
            "score": 99.02110460069444,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else { } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return false ; } } }",
            "score": 98.99235026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { } else",
            "score": 98.99187554253473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / else",
            "score": 98.6597900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else -- }",
            "score": 98.41823904854911,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else -- }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) )",
            "score": 99.38667805989583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( null , recordNode , ns ) ;",
            "score": 99.2847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( null , record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = current.getParent( ) ;",
            "score": 99.1274883563702,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = current . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { } } else {",
            "score": 99.0208740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent.} else {",
            "score": 98.99166259765624,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ; } }",
            "score": 98.94707573784723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; } else {",
            "score": 98.65970611572266,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } if else",
            "score": 98.41684977213542,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( this , ns ) ;",
            "score": 99.38601248604911,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( this , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return.getNext( ) ; }",
            "score": 99.24539888822116,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; } } } else",
            "score": 99.02086292613636,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { if } }",
            "score": 98.98916286892361,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( type != ) {",
            "score": 98.94408501519098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( type != ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else else",
            "score": 98.41680908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n ) ; } } else",
            "score": 99.38591766357422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break else break ; } } else {",
            "score": 99.02074517144098,
            "correctness": "uncompilable",
            "tokenized_patch": "break else break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( false ) ;",
            "score": 98.94389038085937,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { try {",
            "score": 98.6591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { { }",
            "score": 98.41624232700893,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getLastChild( ) != n )",
            "score": 99.38310546875,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL Last CaMeL Child ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else if( parent !=0) {",
            "score": 99.11586303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else if( }",
            "score": 99.02025756835937,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else = }",
            "score": 98.98756239149306,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { *}",
            "score": 98.6591288248698,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if else Logger",
            "score": 98.41573660714286,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if else Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns instanceof String ) {",
            "score": 99.11349487304688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns instanceof String ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } {",
            "score": 99.01974148220486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { if( } }",
            "score": 98.98938598632813,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else break ; }",
            "score": 98.98724365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } */",
            "score": 98.65855916341145,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else if else {",
            "score": 98.40918840680804,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode.isFor( ) )",
            "score": 99.38247884114584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , n ) ; } }",
            "score": 99.28081512451172,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , n ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = n ; }",
            "score": 99.11076216264205,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode == null )",
            "score": 99.0191317471591,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { { } }",
            "score": 98.98918321397569,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { else if } }",
            "score": 98.98666720920139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { else if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != null )",
            "score": 98.93528238932292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } else ;",
            "score": 98.65843200683594,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else throw else",
            "score": 98.40867396763393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else throw else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns false ) ;",
            "score": 99.28079427083334,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ throw new RuntimeException( 'AstChangeProxy::getRhs ') ;",
            "score": 99.01787775213069,
            "correctness": "uncompilable",
            "tokenized_patch": "{ throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ throw new RuntimeException( 'c') ;",
            "score": 99.01787775213069,
            "correctness": "uncompilable",
            "tokenized_patch": "{ throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ throw new RuntimeException( 'a') ;",
            "score": 99.01787775213069,
            "correctness": "uncompilable",
            "tokenized_patch": "{ throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ throw new RuntimeException( 'b') ;",
            "score": 99.01787775213069,
            "correctness": "uncompilable",
            "tokenized_patch": "{ throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ throw new RuntimeException( \"'s value.  \") ;",
            "score": 99.01787775213069,
            "correctness": "uncompilable",
            "tokenized_patch": "{ throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = } ) ; }",
            "score": 98.98808458116319,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = } ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else ; if } }",
            "score": 98.98625352647569,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != ) {",
            "score": 98.93414984809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else } if else {",
            "score": 98.65824890136719,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else logger",
            "score": 98.4082539876302,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode ,",
            "score": 99.38166155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , key ) ;",
            "score": 99.28046417236328,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , key ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { break ; } } } else",
            "score": 99.01743386008523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( n != null )",
            "score": 98.98615858289931,
            "correctness": "wrong",
            "tokenized_patch": "} { if ( n != null )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( ns == ) {",
            "score": 98.93180338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns == ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; {",
            "score": 98.6580810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( n , ns ) ;",
            "score": 99.38124302455357,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( n , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( info ) ; } else {",
            "score": 99.28036733774039,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( info ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent ; } } else {",
            "score": 99.10859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { } }",
            "score": 99.01719156901042,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return else ; } else",
            "score": 98.98573811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( { {",
            "score": 98.98380533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( ns == null ) {",
            "score": 98.9306640625,
            "correctness": "wrong",
            "tokenized_patch": "} if ( ns == null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} } if true { } }",
            "score": 98.65782165527344,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if true { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Throwable",
            "score": 98.40767415364583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Throwable",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( 'AstChangeProxy::getRhs ', ns ) ;",
            "score": 99.38071986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( 'c', ns ) ;",
            "score": 99.38071986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( 'a', ns ) ;",
            "score": 99.38071986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( 'b', ns ) ;",
            "score": 99.38071986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( \"'s value.  \", ns ) ;",
            "score": 99.38071986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , value ) ;",
            "score": 99.28013610839844,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( list != null ) {",
            "score": 99.107666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( list != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( } } else {",
            "score": 99.01661512586806,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else ; } }",
            "score": 98.98360866970486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return } } } else",
            "score": 98.98304443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( type ) ;",
            "score": 98.92987060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( type ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / {",
            "score": 98.65733119419643,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else { {",
            "score": 98.40748814174107,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node.getFirstChild( ) != n )",
            "score": 99.38035481770834,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( ns ) ;",
            "score": 99.27878243582589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( nameNode , ns ,",
            "score": 99.23203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.getParent( ) !=",
            "score": 99.10669884314903,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( n . get CaMeL Parent ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'AstChangeProxy::getRhs ') ; } } else",
            "score": 99.0162020596591,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'c') ; } } else",
            "score": 99.0162020596591,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'a') ; } } else",
            "score": 99.0162020596591,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( 'b') ; } } else",
            "score": 99.0162020596591,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.info( \"'s value.  \") ; } } else",
            "score": 99.0162020596591,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . info ( $STRING$ ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else ; } else",
            "score": 98.98278130425348,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if( {",
            "score": 98.98196750217014,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else return ; } } else {",
            "score": 98.92959255642361,
            "correctness": "uncompilable",
            "tokenized_patch": "* else return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else ; if else {",
            "score": 98.65707397460938,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else ; if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else + {",
            "score": 98.40650285993304,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else + {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {(( NodeTraversal ) n ).",
            "score": 99.23177396334134,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( ( Node CaMeL Traversal ) n ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNext( ) != n ||",
            "score": 99.10194749098558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Next ( ) != n ||",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if( else",
            "score": 98.98240152994792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if ( else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { assert false ; }",
            "score": 98.97983127170139,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { assert false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode ,",
            "score": 98.925048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { else { }",
            "score": 98.65701729910714,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { { }",
            "score": 98.40536934988839,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.recordDepScope( nameNode , ns ) ;",
            "score": 99.3789291381836,
            "correctness": "uncompilable",
            "tokenized_patch": "state . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; next =",
            "score": 99.27720642089844,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; next =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { hasChild = false ; }",
            "score": 99.01460404829545,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { has CaMeL Child = false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; if else ;",
            "score": 98.98166910807292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { return ; } } else",
            "score": 98.9783447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == ) {",
            "score": 98.91676839192708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { } } }",
            "score": 98.65699005126953,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } { } {",
            "score": 98.40491594587054,
            "correctness": "wrong",
            "tokenized_patch": "} { } { } {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( node.getNext( ) != n ) {",
            "score": 99.37823486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( recordNode , ns ,",
            "score": 99.23031412760416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if = parent.getParent( ) ;",
            "score": 99.10094275841347,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if = parent . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( type != null {",
            "score": 98.98071967230902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( type != null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( }",
            "score": 98.97521209716797,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( nameNode != null ) {",
            "score": 98.91676635742188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name CaMeL Node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if else throws",
            "score": 98.40425327845982,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null ) { recordDepScope(",
            "score": 99.37786865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null ) { record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , ns [",
            "score": 99.2764663696289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns [",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getParent( ) !=",
            "score": 99.0989520733173,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Parent ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "success = false ; } } else {",
            "score": 99.01410590277777,
            "correctness": "uncompilable",
            "tokenized_patch": "success = false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { } } {",
            "score": 98.97883436414931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( } } else",
            "score": 98.97479248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; }",
            "score": 98.91439819335938,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else { }",
            "score": 98.65672302246094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else } }",
            "score": 98.40377371651786,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) instanceof Node )",
            "score": 99.37769368489583,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) instanceof Node )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "recordDepScope( l ) ; } else {",
            "score": 99.27609487680289,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( l ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( name != null ) {",
            "score": 99.09869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch( else",
            "score": 98.97793240017361,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch ( else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { { break ; } } }",
            "score": 98.97348361545139,
            "correctness": "uncompilable",
            "tokenized_patch": "break { { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode.getCaMeL",
            "score": 98.9142178622159,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node . get CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if true ;",
            "score": 98.6563212076823,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { /",
            "score": 98.40175955636161,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , key ) ;",
            "score": 99.27603912353516,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , key ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getFirstChild( ) ; }",
            "score": 99.22533307756696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL First CaMeL Child ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( mode != null ) {",
            "score": 99.0977783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( mode != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { parent = } }",
            "score": 98.973193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { parent = } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = nameNode ;",
            "score": 98.91307484019886,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = name CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if else { } {",
            "score": 98.65491485595703,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } } }",
            "score": 98.39705403645833,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( ns , ns ) ;",
            "score": 99.37586321149554,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = type ; } else {",
            "score": 99.09600219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = type ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target == null ) {",
            "score": 99.01304321289062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else = } } }",
            "score": 98.97728135850694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else = } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { log.info( 'AstChangeProxy::getRhs 'else {",
            "score": 98.97310180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { log . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { log.info( 'c'else {",
            "score": 98.97310180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { log . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { log.info( 'a'else {",
            "score": 98.97310180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { log . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { log.info( 'b'else {",
            "score": 98.97310180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { log . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { log.info( \"'s value.  \"else {",
            "score": 98.97310180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { log . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope( ns ) ;",
            "score": 98.91285289417614,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else return",
            "score": 98.39413452148438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { recordDepScope( nameNode ,",
            "score": 99.37468719482422,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( column != null ) {",
            "score": 99.0957275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( column != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'AstChangeProxy::getRhs '+ }",
            "score": 99.01282848011364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'c'+ }",
            "score": 99.01282848011364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'a'+ }",
            "score": 99.01282848011364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( 'b'+ }",
            "score": 99.01282848011364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { logger.error( \"'s value.  \"+ }",
            "score": 99.01282848011364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { logger . error ( $STRING$ + }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(3== null {",
            "score": 98.9765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( $NUMBER$ == null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(4== null {",
            "score": 98.9765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( $NUMBER$ == null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(24== null {",
            "score": 98.9765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( $NUMBER$ == null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(2== null {",
            "score": 98.9765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( $NUMBER$ == null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(83== null {",
            "score": 98.9765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( $NUMBER$ == null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else ) { {",
            "score": 98.97292751736111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent ; } else",
            "score": 98.91134982638889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else if else }",
            "score": 98.3939921061198,
            "correctness": "uncompilable",
            "tokenized_patch": "else else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(( parent.getNext( )",
            "score": 99.0952899639423,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ( parent . get CaMeL Next ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( target != null )",
            "score": 99.0119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( target != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } break ; }",
            "score": 98.97654215494792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } else { break ; } }",
            "score": 98.97248670789931,
            "correctness": "uncompilable",
            "tokenized_patch": "break } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNodeCaMeL",
            "score": 98.91017844460227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Node CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / } / /",
            "score": 98.65192413330078,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) == n )",
            "score": 99.3732177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns + false ) ;",
            "score": 99.2747573852539,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns + false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "changed = true ; } } else {",
            "score": 99.01185438368056,
            "correctness": "uncompilable",
            "tokenized_patch": "changed = true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( false {",
            "score": 98.97545708550348,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } else {",
            "score": 98.97163391113281,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( ns ) ;",
            "score": 98.9097900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } */ /",
            "score": 98.64999389648438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if else }",
            "score": 98.3819091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t.recordDepScope( nameNode , ns ) ;",
            "score": 99.37191772460938,
            "correctness": "uncompilable",
            "tokenized_patch": "t . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; +",
            "score": 99.27415364583334,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.out.println( 'AstChangeProxy::getRhs ') ;",
            "score": 99.09522423377403,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . out . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.out.println( 'c') ;",
            "score": 99.09522423377403,
            "correctness": "wrong",
            "tokenized_patch": "} else { System . out . println ( $STRING$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { System.out.println( 'a') ;",
            "score": 99.09522423377403,
            "correctness": "wrong",
            "tokenized_patch": "} else { System . out . println ( $STRING$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { System.out.println( 'b') ;",
            "score": 99.09522423377403,
            "correctness": "wrong",
            "tokenized_patch": "} else { System . out . println ( $STRING$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { System.out.println( \"'s value.  \") ;",
            "score": 99.09522423377403,
            "correctness": "wrong",
            "tokenized_patch": "} else { System . out . println ( $STRING$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "success = true ; } } else {",
            "score": 99.01169162326389,
            "correctness": "uncompilable",
            "tokenized_patch": "success = true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } else ;",
            "score": 98.97516741071429,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { if( } }",
            "score": 98.97144232855902,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( true ) ;",
            "score": 98.90929565429687,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { if else {",
            "score": 98.64937046595982,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { else",
            "score": 98.37999471028645,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.recordDepScope( nameNode , ns ) ;",
            "score": 99.3697280883789,
            "correctness": "uncompilable",
            "tokenized_patch": "n . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns ) ; } }",
            "score": 99.27389090401786,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { if( } } else",
            "score": 99.0111083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { if ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } ; } }",
            "score": 98.97496202256944,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { while( parent != null else {",
            "score": 98.97077026367188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { while ( parent != null else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent ) ;",
            "score": 98.901171875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if( else",
            "score": 98.64855194091797,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if ( else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else { } }",
            "score": 98.37435913085938,
            "correctness": "uncompilable",
            "tokenized_patch": "if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { recordDepScope( recordNode ,",
            "score": 99.3674545288086,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , -1) ;",
            "score": 99.2727783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } } } else {",
            "score": 99.09075317382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } if( }",
            "score": 99.00939263237848,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else }",
            "score": 98.97488403320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { {",
            "score": 98.97051130022321,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n ) ;",
            "score": 98.89818115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } while else {",
            "score": 98.64854213169643,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } while else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else +",
            "score": 98.37139892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "context.recordDepScope( nameNode , ns ) ;",
            "score": 99.36721801757812,
            "correctness": "uncompilable",
            "tokenized_patch": "context . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) == ns )",
            "score": 99.214794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) == ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode , ns ) ; }",
            "score": 99.09039306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { } } else",
            "score": 99.00779215494792,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( false else {",
            "score": 98.97487386067708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( false else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { else { }",
            "score": 98.97030639648438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof NodeTraversal )",
            "score": 98.8940762606534,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof Node CaMeL Traversal )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else",
            "score": 98.3666748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( recordNode ,",
            "score": 99.36669108072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( record CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.2715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'c') ; } }",
            "score": 99.2715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'a') ; } }",
            "score": 99.2715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'b') ; } }",
            "score": 99.2715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( \"'s value.  \") ; } }",
            "score": 99.2715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode != null",
            "score": 99.21206868489584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node != null",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != this )",
            "score": 99.00586615668402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != this )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } if {",
            "score": 98.97441270616319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } if {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ; } }",
            "score": 98.89120822482639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else } }",
            "score": 98.64750671386719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } {",
            "score": 98.3638203938802,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "list( recordNode , ns ) ; } else {",
            "score": 99.27133413461539,
            "correctness": "uncompilable",
            "tokenized_patch": "list ( record CaMeL Node , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( ) != ns )",
            "score": 99.21181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( ) != ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { value = } } else {",
            "score": 99.00474853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { value = } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if { else } }",
            "score": 98.97352430555556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if { else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { break ; }",
            "score": 98.96714952256944,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { else ;",
            "score": 98.64715576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } {",
            "score": 98.36112060546876,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( t ) )",
            "score": 99.36640276227679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( t ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isFor( ns ) ) {",
            "score": 99.2710430438702,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.isFor( ) )",
            "score": 99.21112060546875,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent . is CaMeL For ( ) )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "{ { break ; } } } }",
            "score": 99.0015869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { break ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } else {",
            "score": 98.97335379464286,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( parent.}",
            "score": 98.96380615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( parent . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns ; } else",
            "score": 98.8863525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } */ } }",
            "score": 98.64710998535156,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ++",
            "score": 98.35648600260417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ++",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ) ; } } }",
            "score": 99.2709716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.contains( ) ) {",
            "score": 99.20970662434895,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . contains ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) ==",
            "score": 99.08473557692308,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( { } }",
            "score": 98.99993896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if else ; }",
            "score": 98.97273084852431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { { break ; } }",
            "score": 98.96327039930556,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope(",
            "score": 98.87745971679688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else } else {",
            "score": 98.6470947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } } else",
            "score": 98.35560099283855,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { if } } else",
            "score": 98.97201199001736,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent == null ) {",
            "score": 98.96198120117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { }",
            "score": 98.35207112630208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != n.getParent( ) )",
            "score": 99.36376139322917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != n . get CaMeL Parent ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns + false ) ;",
            "score": 99.27058410644531,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( } else",
            "score": 98.99783664279514,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else { else",
            "score": 98.97165934244792,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new { } }",
            "score": 98.96074083116319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t ) ;",
            "score": 98.85960693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { { }",
            "score": 98.64622497558594,
            "correctness": "wrong",
            "tokenized_patch": "} else { } { { }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} { } { else",
            "score": 98.34959920247395,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = parent.getParent( ) ; } }",
            "score": 99.27056884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = parent . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ) ;",
            "score": 99.2073465983073,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof Assignment ) {",
            "score": 99.08096313476562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof Assignment ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return true ; } } else",
            "score": 98.99778442382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return true ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { false ; } }",
            "score": 98.97010633680556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { String name = } ;",
            "score": 98.95982055664062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { String name = } ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode ;",
            "score": 98.85527208116319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else {",
            "score": 98.64576721191406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else {",
            "score": 98.34824829101562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( 'AstChangeProxy::getRhs ', ns ) ;",
            "score": 99.36243614783653,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( 'c', ns ) ;",
            "score": 99.36243614783653,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( 'a', ns ) ;",
            "score": 99.36243614783653,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( 'b', ns ) ;",
            "score": 99.36243614783653,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( \"'s value.  \", ns ) ;",
            "score": 99.36243614783653,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( $STRING$ , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( t , ns ) ;",
            "score": 99.26991271972656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( t , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns ; } }",
            "score": 99.20712280273438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = nameNode ; } }",
            "score": 99.08066813151042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = name CaMeL Node ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { { }",
            "score": 98.99681939019098,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return ; }",
            "score": 98.96992323133681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if( { {",
            "score": 98.957763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if ( { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } *{",
            "score": 98.64570617675781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return recordDepScope( nameNode , ns ) ; }",
            "score": 99.36174011230469,
            "correctness": "uncompilable",
            "tokenized_patch": "return record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return ; } } else {",
            "score": 99.26950073242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope == null )",
            "score": 98.99673122829861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { catch } } }",
            "score": 98.96980116102431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { catch } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( null ) ;",
            "score": 98.84190673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else Logger",
            "score": 98.34006754557292,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , current ) ;",
            "score": 99.26932525634766,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , current ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordNode , ns ) ;",
            "score": 99.20601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( } } } else {",
            "score": 98.99524603949652,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } else",
            "score": 98.96916852678571,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( n == null )",
            "score": 98.956787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( n == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; {",
            "score": 98.64546712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return { }",
            "score": 98.33986409505208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { break ; } } else {",
            "score": 98.99280463324652,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } */ } else",
            "score": 98.96912977430556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } * / } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( n instanceof Node ) {",
            "score": 98.95484008789063,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( n instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case n.getParent( ) :",
            "score": 98.82611083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "case n . get CaMeL Parent ( ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / else /",
            "score": 98.64500427246094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else log",
            "score": 98.339111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else log",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ? parent ; } } else {",
            "score": 99.268798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ? parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( this , ns ,",
            "score": 99.19968087332589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( this , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } } } else",
            "score": 98.99239095052083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } ,( }",
            "score": 98.96909586588542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } , ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return } }",
            "score": 98.95396931966145,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( node ) ;",
            "score": 98.82033081054688,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else void",
            "score": 98.33699544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else void",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , node ,",
            "score": 99.3579330444336,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , parent ,",
            "score": 99.2685317993164,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , parent ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns !=0) {",
            "score": 99.07689208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( node != null ) { {",
            "score": 98.9919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( node != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else if } } } else",
            "score": 98.96856011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else if } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; }",
            "score": 98.95223999023438,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if ) {",
            "score": 98.64389038085938,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else else",
            "score": 98.33497111002605,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getValue( ) != n )",
            "score": 99.1951904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Value ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'AstChangeProxy::getRhs '} }",
            "score": 98.99116821289063,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'c'} }",
            "score": 98.99116821289063,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a'} }",
            "score": 98.99116821289063,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'b'} }",
            "score": 98.99116821289063,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( \"'s value.  \"} }",
            "score": 98.99116821289063,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; } } } else",
            "score": 98.95147026909723,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if null ; }",
            "score": 98.64349365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else { else",
            "score": 98.33380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( type != null )",
            "score": 98.990771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( type != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { break ; }",
            "score": 98.95144314236111,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( {",
            "score": 98.81322021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { } / /",
            "score": 98.6434555053711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { } else",
            "score": 98.33371988932292,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != n ) { recordDepScope(",
            "score": 99.35545349121094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != n ) { record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( current ) ; } else {",
            "score": 99.2649676983173,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( current ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( recordNode ) {",
            "score": 99.19019664417614,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( record CaMeL Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else if( {",
            "score": 98.990478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else",
            "score": 98.96466064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { {",
            "score": 98.95102364676339,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode != null ) {",
            "score": 98.81009521484376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { *{ } }",
            "score": 98.64280700683594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { } else",
            "score": 98.33350626627605,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , target ) ;",
            "score": 99.26470947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , target ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( code != null ) {",
            "score": 99.06273193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( code != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else {( } } else",
            "score": 98.96432834201389,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( n != null ) {",
            "score": 98.94883897569444,
            "correctness": "wrong",
            "tokenized_patch": "} if ( n != null ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( parent != null ) {",
            "score": 98.80413818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else ; if else {",
            "score": 98.64274597167969,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else ; if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } else }",
            "score": 98.3309834798177,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , id ) ;",
            "score": 99.26410675048828,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , id ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( null != ns ) {",
            "score": 99.06173095703124,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( null != ns ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if( next != null )",
            "score": 98.98936631944444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( next != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return { else ; }",
            "score": 98.96268717447917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { assert false ; } }",
            "score": 98.94723849826389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { assert false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = nameNode ; }",
            "score": 98.8001220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = name CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else { if }",
            "score": 98.64271545410156,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else } }",
            "score": 98.32804361979167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , recordNode , ns ) ;",
            "score": 99.26387786865234,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( true ) {",
            "score": 99.06052652994792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else if( {",
            "score": 98.98734741210937,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / ***/",
            "score": 98.96247100830078,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( this ) ;",
            "score": 98.79478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *else { } }",
            "score": 98.64256286621094,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else } else",
            "score": 98.32454427083333,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; next =",
            "score": 99.2635726928711,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; next =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = recordNode ; }",
            "score": 99.05738414417614,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = record CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { } } else",
            "score": 98.984814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } return else ;",
            "score": 98.96022033691406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } return else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { parent = parent ; } }",
            "score": 98.94554985894098,
            "correctness": "wrong",
            "tokenized_patch": "{ { parent = parent ; } }",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else if } } } }",
            "score": 98.6420669555664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } }",
            "score": 98.32109375,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) != node )",
            "score": 99.35174153645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) != node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else if( {",
            "score": 98.98392944335937,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if else {",
            "score": 98.9593505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node.} } else {",
            "score": 98.94529893663194,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getCaMeL",
            "score": 98.77817789713542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } int index ;",
            "score": 98.64205932617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } int index ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } { else",
            "score": 98.31849161783855,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ,1) ;",
            "score": 99.26295471191406,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordNode , ns ) {",
            "score": 99.1821621981534,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( record CaMeL Node , ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent = n ; } } else {",
            "score": 99.055322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw null { } } else",
            "score": 98.95767550998264,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw null { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; } } else",
            "score": 98.94521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { if( parent != null )",
            "score": 98.77702501085069,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized else { }",
            "score": 98.6417007446289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } System",
            "score": 98.31540934244792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.recordDepScope( recordNode , ns ) ;",
            "score": 99.35149383544922,
            "correctness": "uncompilable",
            "tokenized_patch": "state . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node , ns ,",
            "score": 99.18214634486607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { for }",
            "score": 98.95756022135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { for }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; } } else",
            "score": 98.94510226779514,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; }",
            "score": 98.77219645182292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else *{ }",
            "score": 98.31363932291667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +3) ;",
            "score": 99.26251983642578,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +4) ;",
            "score": 99.26251983642578,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +24) ;",
            "score": 99.26251983642578,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +2) ;",
            "score": 99.26251983642578,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns +83) ;",
            "score": 99.26251983642578,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( n , ns ,",
            "score": 99.18206787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( n , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( parent != null ) {",
            "score": 99.05451049804688,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( parent != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } }",
            "score": 98.98141915457589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else } }",
            "score": 98.95557318793402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( parent } else",
            "score": 98.94486083984376,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( parent } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = ns ;",
            "score": 98.77115207248264,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else { if else }",
            "score": 98.64163970947266,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else }",
            "score": 98.31103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) != n",
            "score": 99.34931945800781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) != n",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns , size ) ;",
            "score": 99.26170349121094,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , size ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( != null ) {",
            "score": 99.05280219184027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node != null ) { } }",
            "score": 98.98119506835937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node != null ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { */ } }",
            "score": 98.95215521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { if( }",
            "score": 98.94270833333333,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } *{ } }",
            "score": 98.64118957519531,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else out",
            "score": 98.30887858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else out",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( source ) ;",
            "score": 99.34900841346153,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( source ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( value == null ) {",
            "score": 99.04755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( value == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent instanceof Node )",
            "score": 98.9796630859375,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent instanceof Node )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if } else { else ;",
            "score": 98.95162624782986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { break ; }",
            "score": 98.94267272949219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns != null ) {",
            "score": 98.75639343261719,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } catch else {",
            "score": 98.6406758626302,
            "correctness": "uncompilable",
            "tokenized_patch": "} } catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } } else",
            "score": 98.30474853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , value ) ;",
            "score": 99.2608413696289,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {(( NodeTraversal ) parent ).",
            "score": 99.17006272536058,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( ( Node CaMeL Traversal ) parent ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = current ; } else {",
            "score": 99.04469604492188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = current ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else */",
            "score": 98.95085906982422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; } }",
            "score": 98.94212123325893,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } } else",
            "score": 98.74372863769531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { } / *",
            "score": 98.64041900634766,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { } / *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else System",
            "score": 98.30342610677083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! recordDepScope( ns ) )",
            "score": 99.34783528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! record CaMeL Dep CaMeL Scope ( ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } else { else {",
            "score": 99.259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns ) ;",
            "score": 99.16649280894886,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch } else",
            "score": 98.95072937011719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { } }",
            "score": 98.94206407335069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope )",
            "score": 98.74289957682292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; { else {",
            "score": 98.6402816772461,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else if else",
            "score": 98.30316162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = null ; }",
            "score": 99.16441514756944,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } } else {",
            "score": 99.04268188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { if else }",
            "score": 98.94852023654514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else if( } }",
            "score": 98.94089965820312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope(",
            "score": 98.73942057291667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } / / / }",
            "score": 98.64024353027344,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } / / / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else public",
            "score": 98.30087280273438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else public",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i.recordDepScope( nameNode , ns ) ;",
            "score": 99.34740447998047,
            "correctness": "uncompilable",
            "tokenized_patch": "i . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode , ns ) ;",
            "score": 99.16117720170455,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { throw new } }",
            "score": 98.9693115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { throw new } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } if } } else",
            "score": 98.94740804036458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return else ; } } else",
            "score": 98.93919067382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } } / /",
            "score": 98.63984680175781,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else parent",
            "score": 98.29803466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else parent",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) && parent",
            "score": 99.34633963448661,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) && parent",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( n ) ;",
            "score": 99.2578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'AstChangeProxy::getRhs ') ;",
            "score": 98.9690673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'c') ;",
            "score": 98.9690673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a') ;",
            "score": 98.9690673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'b') ;",
            "score": 98.9690673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( \"'s value.  \") ;",
            "score": 98.9690673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if( else )",
            "score": 98.93809204101562,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if ( else )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ; }",
            "score": 98.72313581194196,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } int */",
            "score": 98.63958740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } int * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else =",
            "score": 98.2947285970052,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , n ) ; }",
            "score": 99.2568588256836,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns , ns ,",
            "score": 99.15841238839286,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { } } else",
            "score": 98.96782769097223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { if } } else",
            "score": 98.94382052951389,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( {",
            "score": 98.71192932128906,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } this",
            "score": 98.29292805989583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.getParent( ) != n )",
            "score": 99.344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . get CaMeL Parent ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = n.getParent( ) ; } }",
            "score": 99.25616455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = n . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordNode ; } }",
            "score": 99.0360107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Node ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false ) { else",
            "score": 98.94179280598958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return } } else {",
            "score": 98.93517303466797,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else } } }",
            "score": 98.63849639892578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } /",
            "score": 98.29066975911458,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( recordNode ,",
            "score": 99.3442626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ! recordNode , ns ) ;",
            "score": 99.25467936197917,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ! record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else(( NodeTraversal ) n ).",
            "score": 99.15543619791667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ( ( Node CaMeL Traversal ) n ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof String ) {",
            "score": 99.03599853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof String ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } } else { } }",
            "score": 98.96739366319444,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { } } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } else { else {",
            "score": 98.94116889105902,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { this.} } else {",
            "score": 98.93318684895833,
            "correctness": "uncompilable",
            "tokenized_patch": "} { this . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; }",
            "score": 98.707763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ; while else {",
            "score": 98.63813781738281,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ; while else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else System",
            "score": 98.2869873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , node ,",
            "score": 99.34410095214844,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return.getFirstChild( ) ;",
            "score": 99.15320696149554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = n ; } }",
            "score": 99.03451538085938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = n ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else {( } }",
            "score": 98.94087727864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent ; }",
            "score": 98.93218994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = parent ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } int else }",
            "score": 98.63777160644531,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } int else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t.recordDepScope( recordNode , ns ) ;",
            "score": 99.34407043457031,
            "correctness": "uncompilable",
            "tokenized_patch": "t . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( children ) ; } else {",
            "score": 99.25291090745192,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( children ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( null , ns ,",
            "score": 99.15312848772321,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( null , ns ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return ; } } else { }",
            "score": 98.96639675564236,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return ; } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally {",
            "score": 98.94081333705357,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else if( }",
            "score": 98.93146430121527,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } }",
            "score": 98.69869995117188,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if else",
            "score": 98.63764299665179,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else --",
            "score": 98.28490193684895,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else --",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( ns , ns ) ;",
            "score": 99.34380634014423,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.isForIn( ) ) {",
            "score": 99.15192522321429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . is CaMeL For CaMeL In ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( false ) {",
            "score": 99.02907986111111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( target != null )",
            "score": 98.96357557508681,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( target != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { } } }",
            "score": 98.94081115722656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; } } } else",
            "score": 98.93104858398438,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = n ;",
            "score": 98.69432915581598,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , parent ) ; }",
            "score": 99.2497314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , parent ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode.isFor( ) ) {",
            "score": 99.14540318080357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Node . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n ; }",
            "score": 99.02433268229167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } } else {",
            "score": 98.96293640136719,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } finally {",
            "score": 98.94059753417969,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { assert false ; } }",
            "score": 98.93095092773437,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { assert false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false ) {",
            "score": 98.6939926147461,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( false ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { } *if else",
            "score": 98.6365737915039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else t",
            "score": 98.28273518880208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else t",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( parent.getNext( ) != n )",
            "score": 99.34226888020834,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , null ,",
            "score": 99.24944661458333,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , null ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = t ; }",
            "score": 99.0208740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = t ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'AstChangeProxy::getRhs ') ; }",
            "score": 98.96159532335069,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'c') ; }",
            "score": 98.96159532335069,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'a') ; }",
            "score": 98.96159532335069,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( 'b') ; }",
            "score": 98.96159532335069,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( \"'s value.  \") ; }",
            "score": 98.96159532335069,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { throw { } }",
            "score": 98.93031819661458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { throw { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns == null )",
            "score": 98.69313557942708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } / if false",
            "score": 98.6364974975586,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } / if false",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { } {",
            "score": 98.28151448567708,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = n.getParent( ) ; } else {",
            "score": 99.34085518973214,
            "correctness": "wrong",
            "tokenized_patch": "n = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { ns = recordNode ; }",
            "score": 99.14069158380681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = record CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( type != null )",
            "score": 98.9615478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( type != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; if }",
            "score": 98.9383316040039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return else ; }",
            "score": 98.92969970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { else {",
            "score": 98.63644409179688,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else ;",
            "score": 98.28139241536458,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = ns.getFirstChild( ) ;",
            "score": 99.34049479166667,
            "correctness": "uncompilable",
            "tokenized_patch": "name CaMeL Node = ns . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = parent ; }",
            "score": 99.01361638849431,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = parent ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } if( parent != null )",
            "score": 98.96050415039062,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } if ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( true else {",
            "score": 98.93827989366319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( true else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( nameNode != null )",
            "score": 98.68782552083333,
            "correctness": "wrong",
            "tokenized_patch": "if ( name CaMeL Node != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { } { else }",
            "score": 98.63610076904297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { }",
            "score": 98.27977905273437,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} parent = n.getParent( ) ; } else {",
            "score": 99.33999837239584,
            "correctness": "uncompilable",
            "tokenized_patch": "} parent = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( pos ) ; } else {",
            "score": 99.24602801983173,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( pos ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ; } }",
            "score": 99.01047770182292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( target != null )",
            "score": 98.95670572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( target != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; return ; }",
            "score": 98.93763563368056,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( scope != null )",
            "score": 98.92879909939236,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( scope != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isCaMeL",
            "score": 98.68483479817708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else { else {",
            "score": 98.63594055175781,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( module ) ;",
            "score": 99.3397686298077,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( module ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break ; } else {",
            "score": 99.24468383789062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { addNode( ns ) ;",
            "score": 99.13447709517045,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { add CaMeL Node ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { code != null )",
            "score": 98.95665893554687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { code != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( else }",
            "score": 98.93727111816406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; }",
            "score": 98.68458775111607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } } } }",
            "score": 98.63579559326172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } System",
            "score": 98.27782185872395,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( t.getNext( ) != n )",
            "score": 99.33921712239584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( t . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break ; } } else {",
            "score": 99.24439586292614,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = recordNode ;",
            "score": 99.1299540201823,
            "correctness": "wrong",
            "tokenized_patch": "} else { name CaMeL Node = record CaMeL Node ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else if( ns != null ) {",
            "score": 99.00862630208333,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( ns != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { } }",
            "score": 98.95643310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { { return ; }",
            "score": 98.92722778320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else recordDepScope(",
            "score": 98.68246799045139,
            "correctness": "uncompilable",
            "tokenized_patch": "* else record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / if else {",
            "score": 98.63556780133929,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } {",
            "score": 98.2687744140625,
            "correctness": "wrong",
            "tokenized_patch": "} { } {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else parent = n ; } } }",
            "score": 99.00552978515626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { continue ; }",
            "score": 98.95496961805556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if }( else ; else",
            "score": 98.93681504991319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return null ; } } else",
            "score": 98.92694091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return null ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode != null )",
            "score": 98.68111165364583,
            "correctness": "wrong",
            "tokenized_patch": "if ( record CaMeL Node != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { int */ }",
            "score": 98.63534545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { int * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } this",
            "score": 98.26861572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.recordDepScope( recordNode , ns ) ;",
            "score": 99.33708190917969,
            "correctness": "uncompilable",
            "tokenized_patch": "n . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { if( }",
            "score": 98.95366753472223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return { } } } } else",
            "score": 98.93610975477431,
            "correctness": "uncompilable",
            "tokenized_patch": "else return { } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isForCaMeL",
            "score": 98.68031819661458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / if } }",
            "score": 98.63505554199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else.",
            "score": 98.26769002278645,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getFirstChild( ) != n )",
            "score": 99.33668619791666,
            "correctness": "wrong",
            "tokenized_patch": "if ( n . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { synchronized( n ) {",
            "score": 99.12126329210069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'AstChangeProxy::getRhs ') ;",
            "score": 98.99912331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'c') ;",
            "score": 98.99912331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'a') ;",
            "score": 98.99912331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( 'b') ;",
            "score": 98.99912331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( \"'s value.  \") ;",
            "score": 98.99912331321023,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } } else { {",
            "score": 98.95290798611111,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else if } } else",
            "score": 98.93587239583333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return false ; }",
            "score": 98.92551095145089,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordNode ;",
            "score": 98.67125108506944,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *} } /",
            "score": 98.63504028320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } else {",
            "score": 98.26350911458333,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! null ) {",
            "score": 98.99770779079861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; } } else",
            "score": 98.95143636067708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if } } else",
            "score": 98.93546549479167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( n == null ) {",
            "score": 98.92149047851562,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( n == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NameInformation ns = null ;",
            "score": 98.67106628417969,
            "correctness": "uncompilable",
            "tokenized_patch": "Name CaMeL Information ns = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ } } /",
            "score": 98.63499450683594,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } {",
            "score": 98.26106567382813,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( nameNode ,",
            "score": 99.33555501302084,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( name CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( nameNode ) {",
            "score": 99.11854137073864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( name CaMeL Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getParent( )",
            "score": 98.99196370442708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Parent ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { if( } else",
            "score": 98.95104370117187,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else break ;",
            "score": 98.93445502387152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = null ;",
            "score": 98.66390652126736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *{ if else {",
            "score": 98.63469696044922,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else }",
            "score": 98.253955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns1) ;",
            "score": 99.23827311197917,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = nameNode ; }",
            "score": 99.11527876420455,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = name CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { return ;",
            "score": 98.95062255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { else {",
            "score": 98.92029571533203,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else",
            "score": 98.66117350260417,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } else {",
            "score": 98.63392857142857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { else",
            "score": 98.25318400065105,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) != node )",
            "score": 99.33492024739583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) != node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ) ; int",
            "score": 99.23780924479166,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ; int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordNode( ns ) ;",
            "score": 99.11305930397727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Node ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isNull( ) ) {",
            "score": 98.99017333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL Null ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else != null )",
            "score": 98.95022243923611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } if }",
            "score": 98.93413434709821,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return false ; } else",
            "score": 98.92022705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return false ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != null &&",
            "score": 98.66058349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != null &&",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else else",
            "score": 98.25065104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isForIn( parent ) ) {",
            "score": 99.33442905970982,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL For CaMeL In ( parent ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.2344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'c') ; } }",
            "score": 99.2344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'a') ; } }",
            "score": 99.2344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'b') ; } }",
            "score": 99.2344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( \"'s value.  \") ; } }",
            "score": 99.2344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns.isFor( ) ) {",
            "score": 99.11079915364583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns . is CaMeL For ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else if( {",
            "score": 98.94901733398437,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else {",
            "score": 98.93409946986607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { if( {",
            "score": 98.91943969726563,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode != n )",
            "score": 98.65958658854167,
            "correctness": "wrong",
            "tokenized_patch": "if ( record CaMeL Node != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else if else ?",
            "score": 98.24949137369792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfw.recordDepScope( nameNode , ns ) ;",
            "score": 99.33296203613281,
            "correctness": "uncompilable",
            "tokenized_patch": "cfw . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , ns ,((",
            "score": 99.232958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns , ( (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( this ) {",
            "score": 99.1099853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ; } } } }",
            "score": 98.98301391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else = else ; }",
            "score": 98.93386501736111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else = else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( node == null ) {",
            "score": 98.91737670898438,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( node == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = nameNode ;",
            "score": 98.65911187065973,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = name CaMeL Node ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} *if else }",
            "score": 98.63057454427083,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else /",
            "score": 98.2481689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == n ) { recordDepScope(",
            "score": 99.33155822753906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == n ) { record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.hasNext( ) ) {",
            "score": 98.98299153645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . has CaMeL Next ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof else {",
            "score": 98.94251166449652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else break ;",
            "score": 98.93133544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if else {",
            "score": 98.91680230034723,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else {",
            "score": 98.65853881835938,
            "correctness": "wrong",
            "tokenized_patch": "return ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} catch( 'AstChangeProxy::getRhs '{ }",
            "score": 98.63052804129464,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'c'{ }",
            "score": 98.63052804129464,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'a'{ }",
            "score": 98.63052804129464,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'b'{ }",
            "score": 98.63052804129464,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( \"'s value.  \"{ }",
            "score": 98.63052804129464,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Error",
            "score": 98.24635823567708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Error",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.isForIn( ) )",
            "score": 99.33113606770833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . is CaMeL For CaMeL In ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns , parent ,",
            "score": 99.22627766927083,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns , parent ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( info != null ) {",
            "score": 98.94224243164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( info != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if }",
            "score": 98.93112618582589,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { if( {",
            "score": 98.91545274522569,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( true ) {",
            "score": 98.65750885009766,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( true ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } */ } /",
            "score": 98.62965611049107,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } =",
            "score": 98.24542236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target.recordDepScope( nameNode , ns ) ;",
            "score": 99.330322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "target . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw null ; } } else {",
            "score": 99.22442016601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { for( ; ; ) {",
            "score": 99.09095458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { for ( ; ; ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null && {",
            "score": 98.94026489257813,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / / **/",
            "score": 98.92949676513672,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( } else",
            "score": 98.91493055555556,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != n )",
            "score": 98.65322536892361,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if new else {",
            "score": 98.62942068917411,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if new else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else throws",
            "score": 98.24266560872395,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! parent.isFor( ) )",
            "score": 99.32965959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! parent . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( parent ) {",
            "score": 99.08915201822917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( parent ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent instanceof Node ) {",
            "score": 98.93905978732639,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent instanceof Node ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( else ) { }",
            "score": 98.92915852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { else { }",
            "score": 98.91448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else NameInformation ns ;",
            "score": 98.64363098144531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else Name CaMeL Information ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return true ;",
            "score": 98.62930733816964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else if else }",
            "score": 98.23976643880208,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { { } }",
            "score": 98.93671332465277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false { } }",
            "score": 98.92850748697917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { n = parent ; }",
            "score": 98.91335720486111,
            "correctness": "wrong",
            "tokenized_patch": "} { { n = parent ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { ; } }",
            "score": 98.63694545200893,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *{ } }",
            "score": 98.62788609095982,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else",
            "score": 98.23846435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Exception( ) ; }",
            "score": 98.96808416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Exception ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { return ; }",
            "score": 98.93651665581598,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { }",
            "score": 98.92815399169922,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { parent = parent ; }",
            "score": 98.91311306423611,
            "correctness": "wrong",
            "tokenized_patch": "} { { parent = parent ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} finally { } }",
            "score": 98.62710571289062,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } } }",
            "score": 98.23752848307292,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , t ) ; }",
            "score": 99.2220458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( index != null ) {",
            "score": 99.07171630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( index != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = n ; } }",
            "score": 98.96677468039773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = n ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( node == null )",
            "score": 98.9364501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( node == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if( }",
            "score": 98.92733425564236,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { super.} } else {",
            "score": 98.91217651367188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { super . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { else {",
            "score": 98.62557547433036,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else",
            "score": 98.62003173828126,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else *",
            "score": 98.23609415690105,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c.recordDepScope( nameNode , ns ) ;",
            "score": 99.32799530029297,
            "correctness": "uncompilable",
            "tokenized_patch": "c . record CaMeL Dep CaMeL Scope ( name CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n ; } } }",
            "score": 98.9637451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { assert scope != null ; }",
            "score": 98.93632202148437,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { assert scope != null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } catch else",
            "score": 98.92662217881944,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } catch else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return false ; }",
            "score": 98.91087036132812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / } }",
            "score": 98.62548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ;",
            "score": 98.61306326729911,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else throws",
            "score": 98.234619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return recordDepScope( recordNode , ns ) ; }",
            "score": 99.32756805419922,
            "correctness": "uncompilable",
            "tokenized_patch": "return record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getParent( ) ;",
            "score": 99.06688343394886,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else } } else",
            "score": 98.92445203993056,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { {",
            "score": 98.91020202636719,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( } }",
            "score": 98.6236572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope(",
            "score": 98.60452706473214,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else if else }",
            "score": 98.23455810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if else if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ? parent.getFirstChild( )",
            "score": 99.21736653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ? parent . get CaMeL First CaMeL Child ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } else { } }",
            "score": 98.93271213107639,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return else ; }",
            "score": 98.9241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( parent }",
            "score": 98.90957302517361,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( parent }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } / else {",
            "score": 98.62336077008929,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ; } else {",
            "score": 98.60444641113281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else code",
            "score": 98.2302754720052,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else code",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i.recordDepScope( recordNode , ns ) ;",
            "score": 99.3271255493164,
            "correctness": "uncompilable",
            "tokenized_patch": "i . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( index ) ;",
            "score": 99.21567946213942,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = ns ; } }",
            "score": 98.95363547585227,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = ns ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == this )",
            "score": 98.92964002821181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == this )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { break ; } } } else",
            "score": 98.90933227539062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **{",
            "score": 98.6204325358073,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ; } }",
            "score": 98.599365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else } }",
            "score": 98.22855631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent ; } }",
            "score": 98.95225694444444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } } else",
            "score": 98.92925347222223,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else */ } }",
            "score": 98.92383490668402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } } } else",
            "score": 98.90711127387152,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return {",
            "score": 98.61934407552083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else ;",
            "score": 98.2279764811198,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { recordDepScope( nameNode ,",
            "score": 99.32591959635417,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n ; } }",
            "score": 98.9501708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = n ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } } / /",
            "score": 98.92223442925348,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } } / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else assert",
            "score": 98.22606404622395,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else assert",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , t ,",
            "score": 99.32453918457031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , t ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw( null ) ; }",
            "score": 99.06157836914062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw ( null ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else break ; } } else {",
            "score": 98.94811333550348,
            "correctness": "uncompilable",
            "tokenized_patch": "* else break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / **/",
            "score": 98.91905212402344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent == null )",
            "score": 98.90418090820313,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent == null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else { } ;",
            "score": 98.61903889973958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.ns :",
            "score": 98.59391021728516,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . ns :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else :",
            "score": 98.22532145182292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNode( ) == n )",
            "score": 99.32352701822917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Node ( ) == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( ns != n ) {",
            "score": 99.06031629774306,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( ns != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = ns ; }",
            "score": 98.94737413194444,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { { else {",
            "score": 98.92527262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else return else ; }",
            "score": 98.91889784071181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else return else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( n instanceof Node ) {",
            "score": 98.90341186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( n instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **/ }",
            "score": 98.61881510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } } }",
            "score": 98.59042358398438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else int",
            "score": 98.21968587239583,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getIn( ) != n )",
            "score": 99.32332356770833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL In ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , t ) ; }",
            "score": 99.20741373697916,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , t ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { }",
            "score": 98.92425537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { return false ; }",
            "score": 98.90119086371527,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / / /",
            "score": 98.61769321986607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { {",
            "score": 98.21700032552083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { recordDepScope( t ) ;",
            "score": 99.2073974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { record CaMeL Dep CaMeL Scope ( t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ; } } }",
            "score": 98.9420654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( { } } else",
            "score": 98.92210693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else = null ; }",
            "score": 98.91760932074652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { while( else { break ; }",
            "score": 98.90106201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { while ( else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { */ }",
            "score": 98.61744035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } } else {",
            "score": 98.57781110491071,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } {",
            "score": 98.2156982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getNext( ) ;",
            "score": 99.04545454545455,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL Next ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { count ++ ; } } else",
            "score": 98.91963500976563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { count ++ ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return } } } else",
            "score": 98.91702609592014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { else {",
            "score": 98.90058898925781,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if } }",
            "score": 98.61680385044643,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ; }",
            "score": 98.57211303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } if else {",
            "score": 98.21530151367188,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "context.recordDepScope( recordNode , ns ) ;",
            "score": 99.32247161865234,
            "correctness": "uncompilable",
            "tokenized_patch": "context . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return ; } else {",
            "score": 99.20609741210937,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode = recordNode ;",
            "score": 98.9365567294034,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node = record CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code = } } else",
            "score": 98.91862657335069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else { break ; } }",
            "score": 98.900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns != null )",
            "score": 98.56697300502232,
            "correctness": "wrong",
            "tokenized_patch": "if ( ns != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "else if else { }",
            "score": 98.2115478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.contains( }",
            "score": 98.9171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . contains ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if }",
            "score": 98.91611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } if }",
            "score": 98.6156005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } if else",
            "score": 98.21028645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } } } else {",
            "score": 99.20380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( false ) {",
            "score": 99.02683512369792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { level = } } else",
            "score": 98.91653103298611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { level = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { **/ }",
            "score": 98.91506618923611,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { throw new { } }",
            "score": 98.89892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { throw new { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; }",
            "score": 98.56517028808594,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else logger",
            "score": 98.2089335123698,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ) ; } } else {",
            "score": 99.20213734019886,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = null ; } }",
            "score": 99.02649536132813,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = null ; } else {",
            "score": 98.92471652560764,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else return ; } } } else",
            "score": 98.91603393554688,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , false else",
            "score": 98.91431342230902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , false else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else { { {",
            "score": 98.89572482638889,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } **",
            "score": 98.61327253069196,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case NodeUtil.) :",
            "score": 98.5644302368164,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node CaMeL Util . ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else } else",
            "score": 98.20493570963542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , null ,",
            "score": 99.3185043334961,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , null ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw null ; } else {",
            "score": 99.02519395616319,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if } else",
            "score": 98.91224670410156,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { parent = }",
            "score": 98.89439697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { parent = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ; }",
            "score": 98.56312561035156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else try",
            "score": 98.2031962076823,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( t.getFirstChild( ) != n )",
            "score": 99.31849772135416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( t . get CaMeL First CaMeL Child ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ; } else {",
            "score": 99.0247314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( scope != null )",
            "score": 98.91109619140624,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( scope != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else = null ; }",
            "score": 98.91064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = parent ; } } else {",
            "score": 98.90901692708333,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.}",
            "score": 98.61162458147321,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } else {",
            "score": 98.56243896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getNode( ) != n )",
            "score": 99.316650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Node ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != null && {",
            "score": 98.91082763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != null && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } if }",
            "score": 98.90975952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isForCaMeL",
            "score": 98.90858043323864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else break ; } } else {",
            "score": 98.89311981201172,
            "correctness": "uncompilable",
            "tokenized_patch": "else break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( else }",
            "score": 98.61156209309895,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent != n ) {",
            "score": 98.55396270751953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } *",
            "score": 98.19830322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getNext( ) != n ) {",
            "score": 99.31620570591518,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Next ( ) != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns1) ;",
            "score": 99.19949544270834,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( null ) {",
            "score": 99.02259657118056,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new } } }",
            "score": 98.91036648220486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } } else {",
            "score": 98.9096450805664,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent ; } else {",
            "score": 98.9014663696289,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { logger.info( 'AstChangeProxy::getRhs 'else {",
            "score": 98.89215698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { logger . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { logger.info( 'c'else {",
            "score": 98.89215698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { logger . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { logger.info( 'a'else {",
            "score": 98.89215698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { logger . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { logger.info( 'b'else {",
            "score": 98.89215698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { logger . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { logger.info( \"'s value.  \"else {",
            "score": 98.89215698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { logger . info ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { *{ }",
            "score": 98.61000279017857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent ;",
            "score": 98.55370221819196,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else } { }",
            "score": 98.19675699869792,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c.recordDepScope( recordNode , ns ) ;",
            "score": 99.3143310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "c . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( recordNode , ns ) ; int",
            "score": 99.19925130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ; int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( recordNode , ns )",
            "score": 99.0220235188802,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( record CaMeL Node , ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = } }",
            "score": 98.9095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else = } } else",
            "score": 98.9088134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else { else {",
            "score": 98.89215087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } *{",
            "score": 98.60977608816964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { , ns ) ;",
            "score": 98.5527572631836,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } else",
            "score": 98.19223022460938,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , recordNode ) ; }",
            "score": 99.19827473958334,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , record CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if( )",
            "score": 98.90860324435764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent != null )",
            "score": 98.54987444196429,
            "correctness": "wrong",
            "tokenized_patch": "if ( parent != null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} } if else Exception",
            "score": 98.18804931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else Exception",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode , NodeCaMeL",
            "score": 99.31321716308594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node , Node CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return ; }",
            "score": 98.90808783637152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else",
            "score": 98.90748596191406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( parent {",
            "score": 98.88774278428819,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( parent {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else ; }",
            "score": 98.60736083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ) {",
            "score": 98.54808698381696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = nameNode ; } } else {",
            "score": 99.1927823153409,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = name CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} parent = n.getParent( ) ;",
            "score": 99.0189921061198,
            "correctness": "uncompilable",
            "tokenized_patch": "} parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { if } } else",
            "score": 98.90745713975694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns ; } }",
            "score": 98.89528401692708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { else { {",
            "score": 98.88722737630208,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if else }",
            "score": 98.60704694475446,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = recordNode ;",
            "score": 98.54718780517578,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = record CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( }",
            "score": 98.1815897623698,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordDepScope( ns ) ) {",
            "score": 99.31284005301339,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( record CaMeL Dep CaMeL Scope ( ns ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ; } } } else {",
            "score": 99.191943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } { else ; }",
            "score": 98.90732828776042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else {",
            "score": 98.90659586588542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { if( } else",
            "score": 98.887158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else { {",
            "score": 98.60630580357143,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.else {",
            "score": 98.53538513183594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else do",
            "score": 98.17948404947917,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else do",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode ; } } else {",
            "score": 99.18848673502605,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *****/",
            "score": 98.90690612792969,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { break ; } } else",
            "score": 98.887158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *} }",
            "score": 98.60558210100446,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*catch( Exception t ) {",
            "score": 98.53430938720703,
            "correctness": "uncompilable",
            "tokenized_patch": "* catch ( Exception t ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Runtime",
            "score": 98.17803955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Runtime",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = false ; }",
            "score": 99.01410590277777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { { return ; }",
            "score": 98.90562744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else { else {",
            "score": 98.8868408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else } }",
            "score": 98.60470145089286,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( Exception t ) {",
            "score": 98.53292846679688,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( Exception t ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } { else",
            "score": 98.17775472005208,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( node ) ; } }",
            "score": 99.31079915364583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( node ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } ) ; } else {",
            "score": 99.18370472301136,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = ns ;",
            "score": 99.00601196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node = ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } try { else",
            "score": 98.90639919704861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } try { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { } }",
            "score": 98.90296936035156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = null ; }",
            "score": 98.88735622829861,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { continue ; } }",
            "score": 98.88387722439236,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { continue ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ; } } else",
            "score": 98.5306625366211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if null {",
            "score": 98.17543538411458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if null {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == n.getParent( ) )",
            "score": 99.31075032552083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == n . get CaMeL Parent ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = nameNode ; } } else {",
            "score": 99.18131880326705,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = name CaMeL Node ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , true else",
            "score": 98.906005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , true else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break false ; } } else {",
            "score": 98.90290069580078,
            "correctness": "uncompilable",
            "tokenized_patch": "break false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } else {",
            "score": 98.88350423177083,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; } }",
            "score": 98.60010637555804,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else return ; } } else",
            "score": 98.5300064086914,
            "correctness": "uncompilable",
            "tokenized_patch": "* else return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } {",
            "score": 98.17521158854167,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( ) ) {",
            "score": 99.31063406808036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( next ) ;",
            "score": 99.18014761117789,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( next ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if else ; } } else",
            "score": 98.90576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if else ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.} } else {",
            "score": 98.9021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordDepScope ;",
            "score": 98.8853759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Dep CaMeL Scope ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return else {",
            "score": 98.8824234008789,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **/ }",
            "score": 98.59982735770089,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent == n ) {",
            "score": 98.52587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else else",
            "score": 98.17486572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target.recordDepScope( recordNode , ns ) ;",
            "score": 99.3096694946289,
            "correctness": "uncompilable",
            "tokenized_patch": "target . record CaMeL Dep CaMeL Scope ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ; } } } else {",
            "score": 99.17955433238636,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( target != null && {",
            "score": 98.90045776367188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target != null && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { break ; } } }",
            "score": 98.8820571899414,
            "correctness": "uncompilable",
            "tokenized_patch": "break { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else else",
            "score": 98.1748555501302,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( recordNode , null ,",
            "score": 99.30924224853516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( record CaMeL Node , null ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode , } else {",
            "score": 99.17093331473214,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node , } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else ; if }",
            "score": 98.90404595269098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else ; if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { throw new {",
            "score": 98.8808837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { throw new {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope(",
            "score": 98.52416229248047,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if else } }",
            "score": 98.17336018880208,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent.isFor( )",
            "score": 99.30865948016827,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( parent . is CaMeL For ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getParent( ) ; }",
            "score": 98.99698893229167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return { }",
            "score": 98.90387641059027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.} else {",
            "score": 98.90003051757813,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { { }",
            "score": 98.88027615017361,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else }",
            "score": 98.59856305803571,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } else",
            "score": 98.51905822753906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else this",
            "score": 98.17232259114583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , null ) ;",
            "score": 99.16544886997768,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode , ns )",
            "score": 98.9936190518466,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node , ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else { finally",
            "score": 98.90287272135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else { finally",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( type != null )",
            "score": 98.89935302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( type != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isEmpty ) {",
            "score": 98.86845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL Empty ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*, nameNode ) ;",
            "score": 98.51693725585938,
            "correctness": "uncompilable",
            "tokenized_patch": "* , name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else { }",
            "score": 98.171435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isForIn( ) && parent",
            "score": 99.30785369873047,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For CaMeL In ( ) && parent",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , n ) ;",
            "score": 99.16513497488839,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( ! ) {",
            "score": 98.90081108940973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( ! ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { return ;",
            "score": 98.89844428168402,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else { } }",
            "score": 98.87872314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } catch else {",
            "score": 98.59478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ;",
            "score": 98.51502075195313,
            "correctness": "wrong",
            "tokenized_patch": "} else { ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else else } else }",
            "score": 98.1708272298177,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; } } } else {",
            "score": 99.1632412997159,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getNext( ) ; }",
            "score": 98.98250325520833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null { } } else",
            "score": 98.89994981553819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } }",
            "score": 98.89583333333333,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = ns ; } }",
            "score": 98.85977783203126,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = ns ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { out ; }",
            "score": 98.59377615792411,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { out ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else }",
            "score": 98.170166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! recordDepScope( recordNode ,",
            "score": 99.30638122558594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! record CaMeL Dep CaMeL Scope ( record CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = nameNode ;",
            "score": 98.97628784179688,
            "correctness": "wrong",
            "tokenized_patch": "} else { name CaMeL Node = name CaMeL Node ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { else { else = }",
            "score": 98.89828152126736,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else { return ; }",
            "score": 98.89422607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'AstChangeProxy::getRhs 'else",
            "score": 98.87418212890626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'c'else",
            "score": 98.87418212890626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'a'else",
            "score": 98.87418212890626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( 'b'else",
            "score": 98.87418212890626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.info( \"'s value.  \"else",
            "score": 98.87418212890626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . info ( $STRING$ else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if null ;",
            "score": 98.59229532877605,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } else",
            "score": 98.51152692522321,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } if else",
            "score": 98.16839599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = n.getParent( ) ; } else {",
            "score": 99.30528913225446,
            "correctness": "uncompilable",
            "tokenized_patch": "node = n . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , ns , parent ) ;",
            "score": 99.16238839285714,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , ns , parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw t ; } } else",
            "score": 98.89285888671876,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw t ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else {",
            "score": 98.87394205729167,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = nameNode ; } else {",
            "score": 98.8407958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = name CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( Exception else {",
            "score": 98.59193638392857,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( Exception else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else else",
            "score": 98.16567993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( true ) {",
            "score": 98.97132703993056,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } if } else",
            "score": 98.89681243896484,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( } else if( }",
            "score": 98.89114040798611,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { super.} } else {",
            "score": 98.87353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { super . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null && !",
            "score": 98.84028930664063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null && !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( else ) {",
            "score": 98.59015764508929,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( else ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if else {",
            "score": 98.16304524739583,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , n ) ; }",
            "score": 99.15262545072116,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else { else = }",
            "score": 98.89435492621527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else { else = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( scope != null && {",
            "score": 98.88975219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( scope != null && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { node = parent ; }",
            "score": 98.87327745225694,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { node = parent ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = true ; } }",
            "score": 98.83184136284723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / **} /",
            "score": 98.58918108258929,
            "correctness": "uncompilable",
            "tokenized_patch": "} / * * } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ; } else {",
            "score": 98.50576782226562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else { }",
            "score": 98.16302490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.isFor( ) )",
            "score": 99.30360764723558,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } else { try",
            "score": 98.89168294270833,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } else { try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; } }",
            "score": 98.88768005371094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( n == null )",
            "score": 98.87028672960069,
            "correctness": "wrong",
            "tokenized_patch": "} { if ( n == null )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else parent = t ; } }",
            "score": 98.82980685763889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = t ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if true ; }",
            "score": 98.58912876674107,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else",
            "score": 98.50449829101562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } logger",
            "score": 98.1613057454427,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getNext( ) instanceof Node )",
            "score": 99.30325520833334,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL Next ( ) instanceof Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.15243094308036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'c') ; }",
            "score": 99.15243094308036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'a') ; }",
            "score": 99.15243094308036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( 'b') ; }",
            "score": 99.15243094308036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new RuntimeException( \"'s value.  \") ; }",
            "score": 99.15243094308036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return.getParent( ) ;",
            "score": 98.95790608723958,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { else break ; } } } else",
            "score": 98.88665771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { else break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node.{ } } else {",
            "score": 98.86766967773437,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node . { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return +1; }",
            "score": 98.82419162326389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return + 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *} }",
            "score": 98.58859252929688,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else /",
            "score": 98.16127522786458,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) ) {",
            "score": 99.15169852120536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { break ; } else",
            "score": 98.88648681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { break ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break { } } else",
            "score": 98.88595241970486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false else",
            "score": 98.58779907226562,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( new",
            "score": 98.4985580444336,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( new",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } { /",
            "score": 98.15980021158855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } { /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( ns ) ; } else",
            "score": 99.298291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( ns ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = true ; }",
            "score": 98.94780815972223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } catch else",
            "score": 98.88571506076389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } catch else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } } else { } } else",
            "score": 98.88560180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { } } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else {",
            "score": 98.86581856863839,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = node ; } }",
            "score": 98.82164171006944,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = node ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / /",
            "score": 98.58688354492188,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( parent , n ) ; } }",
            "score": 99.14767892020089,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( parent , n ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent != n ) {",
            "score": 98.94512939453125,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent != n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { if( else {",
            "score": 98.88571166992188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { break ; }",
            "score": 98.86504448784723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = null ; } }",
            "score": 98.818603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / /",
            "score": 98.58599853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else {",
            "score": 98.49786376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "* else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } { else",
            "score": 98.14937337239583,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = parent.getParent( ) ; } else {",
            "score": 99.29659598214286,
            "correctness": "wrong",
            "tokenized_patch": "n = parent . get CaMeL Parent ( ) ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { ns = ns ; }",
            "score": 98.94381374782986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( } } }",
            "score": 98.88519287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = false ; } }",
            "score": 98.81403266059027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else }( else {",
            "score": 98.57949393136161,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ; } }",
            "score": 98.49538748604911,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / { }",
            "score": 98.14865112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( n ) )",
            "score": 99.29489571707589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( n ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( parent , n ,",
            "score": 99.14557756696429,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( parent , n ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ;",
            "score": 98.94296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if else { } }",
            "score": 98.88494194878473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { } } }",
            "score": 98.88319396972656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return true ; }",
            "score": 98.86382378472223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = null ; } }",
            "score": 98.81149631076389,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ; }",
            "score": 98.49314371744792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else } {",
            "score": 98.14747111002605,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( parent ) )",
            "score": 99.29268101283482,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } } else ;",
            "score": 98.88347625732422,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( { return ; } } else",
            "score": 98.88289184570313,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( { return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ; } } else",
            "score": 98.81140747070313,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { catch else ;",
            "score": 98.57841273716518,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { catch else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*} else {",
            "score": 98.49125366210937,
            "correctness": "uncompilable",
            "tokenized_patch": "* } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { } { }",
            "score": 98.14731852213542,
            "correctness": "uncompilable",
            "tokenized_patch": "return { } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == n )",
            "score": 99.29267035590277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( }",
            "score": 98.9359130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } }",
            "score": 98.88316999162946,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { return ;",
            "score": 98.881103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { { break ; }",
            "score": 98.86054077148438,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return { }",
            "score": 98.57810756138393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} recordDepScope(",
            "score": 98.48609924316406,
            "correctness": "uncompilable",
            "tokenized_patch": "} record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else Logger",
            "score": 98.1464335123698,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getNode( ) ;",
            "score": 98.93589089133523,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL Node ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , null )",
            "score": 98.88229031032986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { this.} }",
            "score": 98.85880126953126,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { this . } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = nameNode ; } else {",
            "score": 98.802197265625,
            "correctness": "wrong",
            "tokenized_patch": "parent = name CaMeL Node ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { if( else }",
            "score": 98.57767159598214,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns ;",
            "score": 98.48379080636161,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } else }",
            "score": 98.14218139648438,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( recordDepScope( ns ) )",
            "score": 99.28990071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( record CaMeL Dep CaMeL Scope ( ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } else {",
            "score": 98.93287658691406,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } } else ;",
            "score": 98.88200378417969,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } } } else",
            "score": 98.88056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return ; } } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else {",
            "score": 98.85582478841145,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return +1; } }",
            "score": 98.79962768554688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return + 1 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **{ }",
            "score": 98.57766287667411,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ; }",
            "score": 98.4814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else start",
            "score": 98.14078776041667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else start",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.getFirstChild( ) ==",
            "score": 99.28849283854167,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . get CaMeL First CaMeL Child ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( !",
            "score": 98.9327725497159,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else } }",
            "score": 98.8819580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { continue ; } else",
            "score": 98.87530517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { continue ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { String name = }",
            "score": 98.85573323567708,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { String name = }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / {",
            "score": 98.57765706380208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { ; }",
            "score": 98.47923932756696,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else } }",
            "score": 98.13889567057292,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = n.getFirstChild( ) ;",
            "score": 99.28702799479167,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = n . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else return ; }",
            "score": 98.93145751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } }",
            "score": 98.8818868001302,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } else { } } else",
            "score": 98.87506713867188,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { break { } }",
            "score": 98.84935845269098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { break { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = t ; }",
            "score": 98.79746500651042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = t ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else ; }",
            "score": 98.57730538504464,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = ns ;",
            "score": 98.47622244698661,
            "correctness": "uncompilable",
            "tokenized_patch": "name CaMeL Node = ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else if else",
            "score": 98.1382344563802,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , ns ) ; }",
            "score": 99.13611778846153,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } } else",
            "score": 98.88162994384766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else break ; } } } else",
            "score": 98.87371148003473,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { else {",
            "score": 98.84797668457031,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *else { } /",
            "score": 98.57728794642857,
            "correctness": "uncompilable",
            "tokenized_patch": "} * else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ; } else",
            "score": 98.47449602399554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else node",
            "score": 98.1346944173177,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else node",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } } else { else",
            "score": 98.87345581054687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } } else {",
            "score": 98.84429059709821,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } catch else {",
            "score": 98.57661655970982,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ; } }",
            "score": 98.45472935267857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else Stack",
            "score": 98.13346354166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else Stack",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode == ns ) {",
            "score": 99.28173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node == ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope ++ ;",
            "score": 98.92136452414773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return else",
            "score": 98.88143157958984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return -1; } } } else",
            "score": 98.866943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return - 1 ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if null ;",
            "score": 98.57547433035714,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ) ;",
            "score": 98.45433349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else try",
            "score": 98.13332112630208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { } } else",
            "score": 98.86574300130208,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( node == null )",
            "score": 98.84188503689236,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( node == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; } } }",
            "score": 98.79153781467014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *{ } }",
            "score": 98.57530721028645,
            "correctness": "uncompilable",
            "tokenized_patch": "} * { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { }",
            "score": 98.44845145089286,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else Iterator",
            "score": 98.13211059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else Iterator",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( t ) ) {",
            "score": 99.2800762469952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( t ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode , ns ) ; } else {",
            "score": 99.13013805042614,
            "correctness": "uncompilable",
            "tokenized_patch": "name CaMeL Node , ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized( t ) {",
            "score": 98.91757541232639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized ( t ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( { return ; } }",
            "score": 98.86555989583333,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { break ; }",
            "score": 98.83873833550348,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { if( ns != null )",
            "score": 98.78608534071181,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { if ( ns != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ;",
            "score": 98.4445292154948,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } return",
            "score": 98.13057454427083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally { if else",
            "score": 98.87713623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( node != null ) {",
            "score": 98.86532931857639,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else parent = n ;",
            "score": 98.78364393446181,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else parent = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } } else",
            "score": 98.43844604492188,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } this",
            "score": 98.129638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( t , ns ) ; }",
            "score": 99.12770432692308,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( t , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode != n )",
            "score": 98.91243119673295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { if } }",
            "score": 98.87625122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { break ; } } } else",
            "score": 98.86488850911458,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( false else {",
            "score": 98.57368687220982,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( false else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; }",
            "score": 98.43770054408482,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else throw",
            "score": 98.1290283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else throw",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( ) && )",
            "score": 99.27823311941964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( ) && )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else continue ; } } else {",
            "score": 99.12765842013889,
            "correctness": "uncompilable",
            "tokenized_patch": "} else continue ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { false ; } } else",
            "score": 98.87604437934027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { false ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return ; } } else {",
            "score": 98.8647232055664,
            "correctness": "wrong",
            "tokenized_patch": "{ return ; } } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } else { { throw new {",
            "score": 98.83318413628473,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { throw new {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = recordNode ; }",
            "score": 98.776220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = record CaMeL Node ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { synchronized else {",
            "score": 98.57366071428571,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { synchronized else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } } }",
            "score": 98.42713274274554,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else /",
            "score": 98.125732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node.getNext( ) != n )",
            "score": 99.27817007211539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw( null ) ;",
            "score": 98.90803358289931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw ( null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; } } }",
            "score": 98.83248901367188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( else } }",
            "score": 98.57351248604911,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } else {",
            "score": 98.12527465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = n.getParent( ) ; if( parent",
            "score": 99.276123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = n . get CaMeL Parent ( ) ; if ( parent",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.1246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'c') ; } }",
            "score": 99.1246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'a') ; } }",
            "score": 99.1246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'b') ; } }",
            "score": 99.1246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( \"'s value.  \") ; } }",
            "score": 99.1246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else ; else",
            "score": 98.87416585286458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; }",
            "score": 98.86380004882812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = this ; } }",
            "score": 98.77486165364583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = this ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*return ; } else {",
            "score": 98.40802873883929,
            "correctness": "uncompilable",
            "tokenized_patch": "* return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else { } }",
            "score": 98.12518310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "else else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.getValue( ) ;",
            "score": 98.90294300426136,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . get CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } else { }",
            "score": 98.87355041503906,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break false ; } }",
            "score": 98.86353556315105,
            "correctness": "uncompilable",
            "tokenized_patch": "break false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.equals( ) ) {",
            "score": 98.77147216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . equals ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } return",
            "score": 98.12513224283855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { continue ; } else {",
            "score": 99.11319308810764,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { continue ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } if else ;",
            "score": 98.87342071533203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code.append( } }",
            "score": 98.86229858398437,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code . append ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else { {",
            "score": 98.83000837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } logger",
            "score": 98.1250712076823,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ns ; } }",
            "score": 98.90037706163194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ns ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else { break ; }",
            "score": 98.85963270399306,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { return } }",
            "score": 98.82594129774306,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { return } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { **/",
            "score": 98.57033865792411,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else",
            "score": 98.39479573567708,
            "correctness": "uncompilable",
            "tokenized_patch": "* else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else callback",
            "score": 98.12353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else callback",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { else",
            "score": 98.85957845052083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { else {",
            "score": 98.82446967230902,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if null ; }",
            "score": 98.56984456380208,
            "correctness": "uncompilable",
            "tokenized_patch": "} if null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ; } else",
            "score": 98.39363316127232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else return",
            "score": 98.12269083658855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.add( ns ) ; } else {",
            "score": 99.1038485440341,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . add ( ns ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { while( false ) {",
            "score": 98.8990478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { while ( false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false else ;",
            "score": 98.87214660644531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { node = } } else",
            "score": 98.85892062717014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { node = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { return ; } } }",
            "score": 98.82439422607422,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ } else {",
            "score": 98.39334106445312,
            "correctness": "uncompilable",
            "tokenized_patch": "* / } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else this",
            "score": 98.12244669596355,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } } } else {",
            "score": 99.10372314453124,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent != n )",
            "score": 98.8966796875,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent != n )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else ; } else if }",
            "score": 98.87177276611328,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } else if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return false ; } else {",
            "score": 98.85822405133929,
            "correctness": "uncompilable",
            "tokenized_patch": "return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else { if {",
            "score": 98.82430013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else { if {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally {( else {",
            "score": 98.56968470982143,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false )",
            "score": 98.38104248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else_",
            "score": 98.12237548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else _",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = n ; }",
            "score": 98.88928900824652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if { else { } }",
            "score": 98.87015109592014,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if { else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } if( {",
            "score": 98.85781521267361,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { break ; } }",
            "score": 98.82201385498047,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else {( else ;",
            "score": 98.56930106026786,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( true )",
            "score": 98.38080705915179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else throws",
            "score": 98.1222432454427,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( recordNode ) ;",
            "score": 99.26866803850446,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } , false )",
            "score": 98.86940511067708,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } , false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent != null else",
            "score": 98.82154676649306,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent != null else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else { } }",
            "score": 98.56807163783482,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ; } else",
            "score": 98.37019566127232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( parent.getNext( ) != n )",
            "score": 99.26600060096153,
            "correctness": "timeout",
            "tokenized_patch": "while ( parent . get CaMeL Next ( ) != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "current = n.getParent( ) ;",
            "score": 98.8872958096591,
            "correctness": "uncompilable",
            "tokenized_patch": "current = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } }( false )",
            "score": 98.86916097005208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ( false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent instanceof Node )",
            "score": 98.82037353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent instanceof Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } {",
            "score": 98.56729888916016,
            "correctness": "uncompilable",
            "tokenized_patch": "} } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else return ; }",
            "score": 98.36300659179688,
            "correctness": "uncompilable",
            "tokenized_patch": "* else return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else pos",
            "score": 98.1134541829427,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else pos",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( t , ns ) )",
            "score": 99.26542445591518,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( t , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } }",
            "score": 98.86872100830078,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( } else {",
            "score": 98.85574776785714,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { NameInformation ns ;",
            "score": 98.72798665364583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { Name CaMeL Information ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else return ; } }",
            "score": 98.36143275669643,
            "correctness": "uncompilable",
            "tokenized_patch": "* else return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else *",
            "score": 98.11295572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ) ; *",
            "score": 99.0953838641827,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } else if( } else",
            "score": 98.85533311631944,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new null ; }",
            "score": 98.72557237413194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *{ /",
            "score": 98.56692940848214,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * { /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*++ ns ; } else",
            "score": 98.36078752790179,
            "correctness": "uncompilable",
            "tokenized_patch": "* ++ ns ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else else",
            "score": 98.11268310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordDepScope( ns , ns ) )",
            "score": 99.260986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Dep CaMeL Scope ( ns , ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = n.getParent( ) ; } }",
            "score": 99.09481107271634,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = n . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = n ;",
            "score": 98.8815185546875,
            "correctness": "wrong",
            "tokenized_patch": "} else { name CaMeL Node = n ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { return else ; }",
            "score": 98.86839294433594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else return ; } } } else",
            "score": 98.85286458333333,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent.} }",
            "score": 98.81547037760417,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent . } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = null ; } } }",
            "score": 98.71967230902777,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = null ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } - else {",
            "score": 98.56605747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } - else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = n ;",
            "score": 98.36018589564732,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = n ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} } } {",
            "score": 98.11250610351563,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope != null )",
            "score": 99.25800030048077,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( else { if }",
            "score": 98.86602105034723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } else { } else",
            "score": 98.85259399414062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } else { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { return null ; }",
            "score": 98.81502956814236,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = type ; } }",
            "score": 98.71846516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = type ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } try",
            "score": 98.1119384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent.isFor( ) )",
            "score": 99.25641741071429,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } }",
            "score": 98.86349051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ) ; }",
            "score": 98.85072021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent instanceof Node )",
            "score": 98.81472439236111,
            "correctness": "wrong",
            "tokenized_patch": "} { if ( parent instanceof Node )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} { } else ;",
            "score": 98.56556193033855,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ;",
            "score": 98.35271344866071,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else else { }",
            "score": 98.1113993326823,
            "correctness": "uncompilable",
            "tokenized_patch": "if else else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.08806818181819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'c') ; }",
            "score": 99.08806818181819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'a') ; }",
            "score": 99.08806818181819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'b') ; }",
            "score": 99.08806818181819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( \"'s value.  \") ; }",
            "score": 99.08806818181819,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else recordDepScope( ) ;",
            "score": 98.87285822088069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else record CaMeL Dep CaMeL Scope ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } { if }",
            "score": 98.86248101128473,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( info != null )",
            "score": 98.85043674045139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( info != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; } else {",
            "score": 98.81198120117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ; } else",
            "score": 98.70873345269098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / } /",
            "score": 98.56453159877232,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } } }",
            "score": 98.35076904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode != ns ) {",
            "score": 99.25384521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node != ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false else {",
            "score": 98.86163330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode = null ;",
            "score": 98.85943603515625,
            "correctness": "wrong",
            "tokenized_patch": "} else { name CaMeL Node = null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } else { if( else )",
            "score": 98.81102837456598,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( else )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { try ;",
            "score": 98.56395467122395,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { try ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.else",
            "score": 98.34828404017857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } { else",
            "score": 98.11118570963542,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode != null )",
            "score": 99.25185324928977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ) ; }",
            "score": 99.0836932842548,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { finally {",
            "score": 98.86149766710069,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(( parent != null )",
            "score": 98.84990844726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ( parent != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break -1; } } } else",
            "score": 98.84925672743056,
            "correctness": "uncompilable",
            "tokenized_patch": "break - 1 ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { break ; } } } else",
            "score": 98.81087239583333,
            "correctness": "uncompilable",
            "tokenized_patch": "break { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "false ; } else {",
            "score": 98.3461405436198,
            "correctness": "uncompilable",
            "tokenized_patch": "false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else in",
            "score": 98.11018880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else in",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else ; } } } else",
            "score": 98.86062961154514,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return -1; } }",
            "score": 98.84746442522321,
            "correctness": "uncompilable",
            "tokenized_patch": "return - 1 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { n.} } else {",
            "score": 98.80862765842014,
            "correctness": "uncompilable",
            "tokenized_patch": "} { n . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } }",
            "score": 98.34547729492188,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } throw",
            "score": 98.1073710123698,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } throw",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( nameNode ) ;",
            "score": 99.25002615792411,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ! ) { else",
            "score": 98.86031087239583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( }",
            "score": 98.84692993164063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . equals ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else { { {",
            "score": 98.8077163696289,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; break ; } }",
            "score": 98.34538922991071,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else throw",
            "score": 98.10736083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else throw",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / **/ }",
            "score": 98.85942077636719,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node.}",
            "score": 98.84662628173828,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( parent == null ) {",
            "score": 98.80735948350694,
            "correctness": "wrong",
            "tokenized_patch": "} if ( parent == null ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} else } / else {",
            "score": 98.55860246930804,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ } } else {",
            "score": 98.3359375,
            "correctness": "uncompilable",
            "tokenized_patch": "* / } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } {",
            "score": 98.10712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( node ) )",
            "score": 99.24558803013393,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( node ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } else ; } else",
            "score": 98.859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } else ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { return false ;",
            "score": 98.84583740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = recordNode ;",
            "score": 98.83181762695312,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = record CaMeL Node ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else ; } } else {",
            "score": 98.68917083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if else ;",
            "score": 98.55757359095982,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ;",
            "score": 98.3298848470052,
            "correctness": "uncompilable",
            "tokenized_patch": "break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } { else",
            "score": 98.10643310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "else } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.recordDepScope( recordNode ) ;",
            "score": 99.24505615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "this . record CaMeL Dep CaMeL Scope ( record CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , ns ) ; }",
            "score": 99.07511080228366,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return false ; } else",
            "score": 98.85863579644098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent.}",
            "score": 98.80374484592014,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if } }",
            "score": 98.5575459798177,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*NodeUtil.",
            "score": 98.32943725585938,
            "correctness": "uncompilable",
            "tokenized_patch": "* Node CaMeL Util .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } System",
            "score": 98.10501098632812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , ns ) ;",
            "score": 99.07283528645833,
            "correctness": "wrong",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , ns ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else { { if( } } else",
            "score": 98.84360961914062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { if ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = recordNode ;",
            "score": 98.82817993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = record CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { else {",
            "score": 98.80303955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / else { }",
            "score": 98.5574442545573,
            "correctness": "uncompilable",
            "tokenized_patch": "} / else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-1; } else {",
            "score": 98.32818603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "- 1 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else /",
            "score": 98.10364786783855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = n.getParent( ) ; } }",
            "score": 99.07057542067308,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = n . get CaMeL Parent ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else ;",
            "score": 98.85682678222656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else { return ; } } } else",
            "score": 98.84197387695312,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode , ns ) {",
            "score": 98.82587280273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Node , ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { { {",
            "score": 98.80265808105469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return ; } } else {",
            "score": 98.67243957519531,
            "correctness": "uncompilable",
            "tokenized_patch": "else return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else )",
            "score": 98.55727713448661,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ;",
            "score": 98.3273696899414,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { } } }",
            "score": 98.09950764973958,
            "correctness": "uncompilable",
            "tokenized_patch": "return { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , n ) ; }",
            "score": 99.06981482872597,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { if else }",
            "score": 98.856689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( parent == n )",
            "score": 98.81554565429687,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( parent == n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} { return true ; } } else",
            "score": 98.7998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return true ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } } }",
            "score": 98.55699666341145,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else return ; } else",
            "score": 98.32695661272321,
            "correctness": "uncompilable",
            "tokenized_patch": "* else return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } try",
            "score": 98.09862263997395,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isEmpty( ) )",
            "score": 99.23769906850961,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL Empty ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { null ;",
            "score": 98.85601128472223,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return true ; } }",
            "score": 98.79962921142578,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ) ; } }",
            "score": 98.66730414496527,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else ; }",
            "score": 98.55666678292411,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": return ; } else {",
            "score": 98.32684326171875,
            "correctness": "uncompilable",
            "tokenized_patch": ": return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } else",
            "score": 98.09841918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { true ; } } else {",
            "score": 99.06715698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } / ***",
            "score": 98.85361056857639,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } / * * *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( parent instanceof Node ) {",
            "score": 98.83884684244792,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( parent instanceof Node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { else {",
            "score": 98.79924011230469,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else error",
            "score": 98.09613037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else error",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.",
            "score": 98.8019307454427,
            "correctness": "wrong",
            "tokenized_patch": "} else { this .",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { return false {",
            "score": 98.55453055245536,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return false {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*, ns ) ;",
            "score": 98.31837972005208,
            "correctness": "uncompilable",
            "tokenized_patch": "* , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.hasChild( ) )",
            "score": 99.2364032451923,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . has CaMeL Child ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / ***/",
            "score": 98.85216522216797,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( node == null ) {",
            "score": 98.83714463975694,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( node == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *{ } /",
            "score": 98.55292619977679,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*return ; } } else",
            "score": 98.31692068917411,
            "correctness": "uncompilable",
            "tokenized_patch": "* return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.recordDepScope( nameNode ) ;",
            "score": 99.23394775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "this . record CaMeL Dep CaMeL Scope ( name CaMeL Node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ; } else {",
            "score": 99.06365966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if( }",
            "score": 98.85186089409723,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if else ; {",
            "score": 98.55255998883929,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return ; } } else",
            "score": 98.31612723214286,
            "correctness": "uncompilable",
            "tokenized_patch": "else return ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } else /",
            "score": 98.09145100911458,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { / */",
            "score": 98.85169982910156,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else if( } else",
            "score": 98.83565945095486,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else if ( } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode != n ) {",
            "score": 98.79512329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Node != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { {",
            "score": 98.78935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else }",
            "score": 98.55152239118304,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } }",
            "score": 98.31338936941964,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else } }",
            "score": 98.09014892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} parent = n.getParent( ) ; }",
            "score": 99.22754845252403,
            "correctness": "uncompilable",
            "tokenized_patch": "} parent = n . get CaMeL Parent ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'AstChangeProxy::getRhs ') ; } }",
            "score": 99.05874399038461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'c') ; } }",
            "score": 99.05874399038461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'a') ; } }",
            "score": 99.05874399038461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( 'b') ; } }",
            "score": 99.05874399038461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new Error( \"'s value.  \") ; } }",
            "score": 99.05874399038461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } if else",
            "score": 98.85108947753906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { type = } } else",
            "score": 98.83485243055556,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { type = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return n ; } }",
            "score": 98.79505072699652,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return n ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return ; } } } else",
            "score": 98.7889404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = current ; } }",
            "score": 98.65374077690973,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = current ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } }",
            "score": 98.5503438313802,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { ;",
            "score": 98.3031717936198,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else count",
            "score": 98.08773803710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else count",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( n.isFor( ) )",
            "score": 99.22617750901442,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( n . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } }",
            "score": 98.85051618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( } else {",
            "score": 98.83450317382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else { {",
            "score": 98.78829956054688,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if false ; }",
            "score": 98.55008951822917,
            "correctness": "uncompilable",
            "tokenized_patch": "} if false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*} } else {",
            "score": 98.30218505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "* } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( ns.isFor( ) )",
            "score": 99.22481863839286,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( ns . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; } else",
            "score": 98.84912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( } } else {",
            "score": 98.83411516462054,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else break ;",
            "score": 98.7888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = n ) ; }",
            "score": 98.64633517795139,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*; } else {",
            "score": 98.2970682779948,
            "correctness": "uncompilable",
            "tokenized_patch": "* ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else /",
            "score": 98.08760070800781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.05697866586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'c') ; }",
            "score": 99.05697866586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'a') ; }",
            "score": 99.05697866586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( 'b') ; }",
            "score": 99.05697866586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new RuntimeException( \"'s value.  \") ; }",
            "score": 99.05697866586539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false else { else",
            "score": 98.84886338975694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } break ; } } else",
            "score": 98.83330620659723,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { return ; }",
            "score": 98.78395589192708,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.next( ) ;",
            "score": 98.78162299262152,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . next ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally { }",
            "score": 98.54986572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} , ns ) ;",
            "score": 98.29611206054688,
            "correctness": "uncompilable",
            "tokenized_patch": "} , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else target",
            "score": 98.0862325032552,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else target",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = n.getParent( ) ; } else",
            "score": 99.22237454927884,
            "correctness": "uncompilable",
            "tokenized_patch": "n = n . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return {",
            "score": 98.84856305803571,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( node != null ) {",
            "score": 98.83059353298611,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( node != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return true ; } } else {",
            "score": 98.78174591064453,
            "correctness": "uncompilable",
            "tokenized_patch": "return true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( ns != null )",
            "score": 98.77357788085938,
            "correctness": "wrong",
            "tokenized_patch": "} else { if ( ns != null )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if( ns.isCaMeL",
            "score": 98.63846164279514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else ; {",
            "score": 98.54857381184895,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } else",
            "score": 98.29469517299107,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else { else }",
            "score": 98.08376057942708,
            "correctness": "uncompilable",
            "tokenized_patch": "if else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else } }",
            "score": 98.84841918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { else break ; }",
            "score": 98.82750786675348,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { else break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; else break ; } } else",
            "score": 98.77983940972223,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; else break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = parent ; } else {",
            "score": 98.63802337646484,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = parent ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = t ;",
            "score": 98.29451206752232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = t ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } } {",
            "score": 98.08235677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { true ; } } else",
            "score": 98.84813096788194,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { true ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(( parent != n )",
            "score": 98.76903076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ( parent != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if } } }",
            "score": 98.54623849051339,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else break ; }",
            "score": 98.28965250651042,
            "correctness": "uncompilable",
            "tokenized_patch": "* else break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else String",
            "score": 98.07972208658855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else String",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.hasNext( ) )",
            "score": 99.22073129507211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . has CaMeL Next ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } else {",
            "score": 98.84774780273438,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new } }",
            "score": 98.824462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } return false ; }",
            "score": 98.77720642089844,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = nameNode ;",
            "score": 98.76446533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = name CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break ;",
            "score": 98.28875732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else else } else",
            "score": 98.07799275716145,
            "correctness": "uncompilable",
            "tokenized_patch": "if else else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { return ; } }",
            "score": 99.04197184244792,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else { } } else",
            "score": 98.82375081380208,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } else { } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else break ; } }",
            "score": 98.28870500837054,
            "correctness": "uncompilable",
            "tokenized_patch": "* else break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else",
            "score": 98.0775858561198,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = ns ; } } else {",
            "score": 99.03237575954861,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } else ;",
            "score": 98.84676688058036,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof } }",
            "score": 98.82014973958333,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return false ;",
            "score": 98.77585856119792,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns != n )",
            "score": 98.74176703559027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = null ; } else {",
            "score": 98.61299133300781,
            "correctness": "wrong",
            "tokenized_patch": "ns = null ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { for else {",
            "score": 98.54343087332589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { for else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else , ns ) ;",
            "score": 98.28255789620536,
            "correctness": "uncompilable",
            "tokenized_patch": "} else , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else !",
            "score": 98.0773417154948,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( t.isFor( ) )",
            "score": 99.2172382061298,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( t . is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } else { else {",
            "score": 99.03180541992188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else { try {",
            "score": 98.84589301215277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else { try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } parent = } } else",
            "score": 98.81896294487848,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } parent = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { { {",
            "score": 98.77522277832031,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-1} else {",
            "score": 98.28196207682292,
            "correctness": "uncompilable",
            "tokenized_patch": "- 1 } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } public",
            "score": 98.076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } public",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode == n ) {",
            "score": 99.21641031901042,
            "correctness": "wrong",
            "tokenized_patch": "} else if ( record CaMeL Node == n ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "parent = n ; } } else {",
            "score": 99.03156873914931,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else if } }",
            "score": 98.84529876708984,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break -1; } }",
            "score": 98.81807163783482,
            "correctness": "uncompilable",
            "tokenized_patch": "break - 1 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { parent.} } else {",
            "score": 98.77464463975694,
            "correctness": "uncompilable",
            "tokenized_patch": "} { parent . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } */ }",
            "score": 98.54071044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { else { }",
            "score": 98.075439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( ns ) ;",
            "score": 99.2161356608073,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ****/",
            "score": 98.84497833251953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent instanceof } else",
            "score": 98.81797281901042,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent instanceof } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { super.}",
            "score": 98.53955950055804,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { super . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else throw null ; }",
            "score": 98.27933175223214,
            "correctness": "uncompilable",
            "tokenized_patch": "* else throw null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else System",
            "score": 98.07474772135417,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if {",
            "score": 98.84478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } } else if( {",
            "score": 98.81712510850694,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } } else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { final NodeUtil.",
            "score": 98.71436225043402,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { final Node CaMeL Util .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = null ; }",
            "score": 98.5921401977539,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ") ; } else {",
            "score": 98.2627665201823,
            "correctness": "uncompilable",
            "tokenized_patch": ") ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( {",
            "score": 98.07461547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} parent = n.getParent( ) ; } else",
            "score": 99.21269008091518,
            "correctness": "uncompilable",
            "tokenized_patch": "} parent = n . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } */",
            "score": 98.84452056884766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { break ; }",
            "score": 98.77182345920139,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else { {",
            "score": 98.538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else n",
            "score": 98.07297770182292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else n",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getNext( ) != n )",
            "score": 99.21188589242789,
            "correctness": "wrong",
            "tokenized_patch": "if ( n . get CaMeL Next ( ) != n )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} if } } else { if else",
            "score": 98.84351264105902,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } else { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node != null ) { {",
            "score": 98.81561957465277,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node != null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { { {",
            "score": 98.76473563058036,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( ) ; } else {",
            "score": 98.57586669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( else else }",
            "score": 98.53868756975446,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if null ;",
            "score": 98.07130940755208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } } } }",
            "score": 99.01793212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { break ;",
            "score": 98.8155517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } else { else {",
            "score": 98.7645034790039,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( else { }",
            "score": 98.53802490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; break ; }",
            "score": 98.25152587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } Logger",
            "score": 98.07004801432292,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } Logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordDepScope( ) )",
            "score": 99.20879657451923,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Dep CaMeL Scope ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = ns ; } } else {",
            "score": 99.01548936631944,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally",
            "score": 98.84116617838542,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node.} else {",
            "score": 98.76309967041016,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = null ;",
            "score": 98.7040786743164,
            "correctness": "wrong",
            "tokenized_patch": "} else { ns = null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "209"
        },
        {
            "patch": "} else if( ! ) {",
            "score": 98.5691909790039,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ! ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **/ } }",
            "score": 98.53718784877232,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } else {",
            "score": 98.2512919108073,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else { } /",
            "score": 98.06729125976562,
            "correctness": "uncompilable",
            "tokenized_patch": "if else { } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { {",
            "score": 98.76130676269531,
            "correctness": "uncompilable",
            "tokenized_patch": "} { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent ) {",
            "score": 98.56532287597656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally { else { }",
            "score": 98.53646414620536,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally { else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else } { else",
            "score": 98.0669657389323,
            "correctness": "uncompilable",
            "tokenized_patch": "else else } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isForIn( parent ) )",
            "score": 99.20728478064903,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL For CaMeL In ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else return ; } else {",
            "score": 99.013134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } } }",
            "score": 98.76124572753906,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = n ;",
            "score": 98.55659484863281,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = n ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { else }",
            "score": 98.0657470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { return else ;",
            "score": 98.83587646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { return else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { { } else",
            "score": 98.81322564019098,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ;",
            "score": 98.67856270926339,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = ns ; } else {",
            "score": 98.5554428100586,
            "correctness": "wrong",
            "tokenized_patch": "ns = ns ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { / else }",
            "score": 98.53566196986607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ;",
            "score": 98.2476094563802,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } {",
            "score": 98.04458618164062,
            "correctness": "uncompilable",
            "tokenized_patch": "else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.isFor( )",
            "score": 99.20558675130208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . is CaMeL For ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else break {",
            "score": 98.83552551269531,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return false ; } else {",
            "score": 98.75695037841797,
            "correctness": "uncompilable",
            "tokenized_patch": "} return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns ; } else {",
            "score": 98.54918670654297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else else",
            "score": 98.53548758370536,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } else {",
            "score": 98.24611206054688,
            "correctness": "uncompilable",
            "tokenized_patch": "break } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } if else",
            "score": 98.04205932617188,
            "correctness": "uncompilable",
            "tokenized_patch": "else } if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { false ; } } else {",
            "score": 99.0115478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { false ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } } } else {",
            "score": 98.75676727294922,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } / else { }",
            "score": 98.53480747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "else } / else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/",
            "score": 98.24503580729167,
            "correctness": "uncompilable",
            "tokenized_patch": "* /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else { }",
            "score": 98.03321533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "else else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / */ }",
            "score": 98.82814025878906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return ; }",
            "score": 98.75281633649554,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return +1; } else {",
            "score": 98.5430908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return + 1 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "true ; } else {",
            "score": 98.2202657063802,
            "correctness": "uncompilable",
            "tokenized_patch": "true ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else",
            "score": 98.00900268554688,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns , ns ) ;",
            "score": 99.00778198242188,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { else ; }",
            "score": 98.82791137695312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( } } else {",
            "score": 98.80766296386719,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ns ; }",
            "score": 98.66453552246094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *else {",
            "score": 98.542529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*return ; } else",
            "score": 98.21484375,
            "correctness": "uncompilable",
            "tokenized_patch": "* return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { else {",
            "score": 97.98400268554687,
            "correctness": "uncompilable",
            "tokenized_patch": "else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( recordDepScope( ns ) )",
            "score": 99.19642991286058,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( record CaMeL Dep CaMeL Scope ( ns ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { value = } } else",
            "score": 98.80719672309027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { value = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.} }",
            "score": 98.75218963623047,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-1;",
            "score": 98.21237182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "- 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } }",
            "score": 97.98334350585938,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns ; } } else {",
            "score": 99.00292358398437,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ****/",
            "score": 98.82685198102679,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = } } else",
            "score": 98.80660671657986,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { continue ; }",
            "score": 98.751708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*return ; }",
            "score": 98.19869384765624,
            "correctness": "uncompilable",
            "tokenized_patch": "* return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else",
            "score": 97.97986602783203,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } ) ;",
            "score": 98.82569885253906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { catch( } } else",
            "score": 98.80392116970486,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { catch ( } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else {",
            "score": 98.75066266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.getParent( ).",
            "score": 98.65839979383681,
            "correctness": "uncompilable",
            "tokenized_patch": "n . get CaMeL Parent ( ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns == null ) {",
            "score": 98.53411865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } catch else { }",
            "score": 98.53271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } catch else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else continue ; }",
            "score": 98.19459025065105,
            "correctness": "uncompilable",
            "tokenized_patch": "} else continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if else {",
            "score": 97.95414428710937,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( parent ) )",
            "score": 99.1892801920573,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . equals ( parent ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ? ns : null ; } }",
            "score": 98.99611409505208,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ? ns : null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else ; }",
            "score": 98.82395935058594,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( { return ; }",
            "score": 98.80341254340277,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = parent ; }",
            "score": 98.75062561035156,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = parent ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else { } {",
            "score": 98.53172956194196,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*++ ns ;",
            "score": 98.19321899414062,
            "correctness": "uncompilable",
            "tokenized_patch": "* ++ ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { else",
            "score": 97.95389404296876,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else return }",
            "score": 98.82196044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else return }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; else {",
            "score": 98.53095354352679,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = n ; } else {",
            "score": 98.53031158447266,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = n ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return ; } }",
            "score": 98.18397013346355,
            "correctness": "uncompilable",
            "tokenized_patch": "else return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else else",
            "score": 97.9442138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } }",
            "score": 98.81894938151042,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( recordNode , ns )",
            "score": 98.64765760633681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( record CaMeL Node , ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else continue ; } else {",
            "score": 98.52950286865234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else continue ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / / }",
            "score": 98.52919514973958,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( )",
            "score": 98.16328938802083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else {",
            "score": 97.93456268310547,
            "correctness": "uncompilable",
            "tokenized_patch": "if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode == ns ) {",
            "score": 99.17864990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node == ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = nameNode ; } else {",
            "score": 98.99088541666667,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = name CaMeL Node ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { if } if }",
            "score": 98.81806945800781,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { node = } else {",
            "score": 98.7406005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} { node = } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = parent ; }",
            "score": 98.5209732055664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = parent ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else *",
            "score": 97.93161010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( nameNode",
            "score": 99.17743389423077,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( name CaMeL Node",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ****/ }",
            "score": 98.81581115722656,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( } }",
            "score": 98.73923165457589,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.",
            "score": 98.64596557617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns ) {",
            "score": 98.51990509033203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else }",
            "score": 97.92764282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = recordNode ; } else {",
            "score": 98.97718302408855,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = record CaMeL Node ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} } if } / */",
            "score": 98.81497192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } { return false ; }",
            "score": 98.7384262084961,
            "correctness": "uncompilable",
            "tokenized_patch": "} } { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if true else {",
            "score": 98.52765764508929,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if true else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent.",
            "score": 98.1520751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } } else",
            "score": 97.92349243164062,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = parent.getParent( ) ; } else",
            "score": 99.17571551983173,
            "correctness": "uncompilable",
            "tokenized_patch": "n = parent . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'AstChangeProxy::getRhs ') ; } else {",
            "score": 98.97370741102431,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'c') ; } else {",
            "score": 98.97370741102431,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'a') ; } else {",
            "score": 98.97370741102431,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( 'b') ; } else {",
            "score": 98.97370741102431,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( \"'s value.  \") ; } else {",
            "score": 98.97370741102431,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( $STRING$ ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return ; } } else {",
            "score": 98.73701477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "} return ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if } /",
            "score": 98.5262451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = true ; } else {",
            "score": 98.5171127319336,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = true ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent ; }",
            "score": 98.15150960286458,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { if } }",
            "score": 98.81407928466797,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { else",
            "score": 98.794677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( true else {",
            "score": 98.52566964285714,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( true else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = parent ;",
            "score": 98.50732421875,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = parent ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else parent ;",
            "score": 98.14819946289063,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } /",
            "score": 97.89320678710938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n , n ) ;",
            "score": 98.97271728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( }",
            "score": 98.73270089285714,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { NodeUtil.",
            "score": 98.60804748535156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { Node CaMeL Util .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / *} } /",
            "score": 98.52546037946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} / * } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if ; } else {",
            "score": 98.50223541259766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { } }",
            "score": 97.8847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if } ; }",
            "score": 98.81336212158203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if } ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { break ; } } } else",
            "score": 98.78856065538194,
            "correctness": "uncompilable",
            "tokenized_patch": "else { break ; } } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": return ; } else",
            "score": 98.14085896809895,
            "correctness": "uncompilable",
            "tokenized_patch": ": return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else /",
            "score": 97.88191528320313,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode != n )",
            "score": 99.16291947798295,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node != n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if } } else ;",
            "score": 98.81277465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { log.} }",
            "score": 98.78844451904297,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { log . } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns != n ) {",
            "score": 98.5893783569336,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **if else",
            "score": 98.52338518415179,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*) ;",
            "score": 98.13948822021484,
            "correctness": "uncompilable",
            "tokenized_patch": "* ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return ; } {",
            "score": 98.72746930803571,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return ; } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent == null ) {",
            "score": 98.50057220458984,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else throws",
            "score": 97.87061157226563,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = n.getParent( ) ; } else",
            "score": 99.16049429086539,
            "correctness": "uncompilable",
            "tokenized_patch": "node = n . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( ) ; } }",
            "score": 98.957275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { if( }",
            "score": 98.78667534722223,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( parent.}",
            "score": 98.72520446777344,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( parent . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / *else {",
            "score": 98.56295013427734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **}",
            "score": 98.52227783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; return ; }",
            "score": 98.12745157877605,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } else",
            "score": 97.86561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(( parent.isFor( )",
            "score": 99.15920785757211,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ( parent . is CaMeL For ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if( else ;",
            "score": 98.81131417410714,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { } }",
            "score": 98.7846450805664,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } else {",
            "score": 98.72392926897321,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { try { }",
            "score": 98.52112688337054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { try { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = n ; } else {",
            "score": 98.4955062866211,
            "correctness": "wrong",
            "tokenized_patch": "parent = n ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { System.println( 'AstChangeProxy::getRhs ') ;",
            "score": 98.94577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.println( 'c') ;",
            "score": 98.94577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.println( 'a') ;",
            "score": 98.94577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.println( 'b') ;",
            "score": 98.94577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.println( \"'s value.  \") ;",
            "score": 98.94577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . println ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } else {",
            "score": 98.81104387555804,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if new else {",
            "score": 98.5208740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if new else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = ns ; } else {",
            "score": 98.49485778808594,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if(",
            "score": 98.1202880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else } }",
            "score": 97.85399780273437,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.isForIn( ) )",
            "score": 99.15652231069711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . is CaMeL For CaMeL In ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = parent ; } } else {",
            "score": 98.94523790147569,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = parent ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } *else ;",
            "score": 98.81085205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } * else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { else {",
            "score": 98.77855682373047,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} break ; } } else {",
            "score": 98.7209243774414,
            "correctness": "uncompilable",
            "tokenized_patch": "} break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = false ;",
            "score": 98.5531997680664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *{ } } }",
            "score": 98.51790945870536,
            "correctness": "uncompilable",
            "tokenized_patch": "} * { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = ns ;",
            "score": 98.49406433105469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { parent = ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else throw null ; }",
            "score": 98.11885579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "else throw null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } }",
            "score": 97.85209655761719,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = n ; } } else {",
            "score": 98.94322374131944,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = n ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { } } else {",
            "score": 98.72022247314453,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { if( ) {",
            "score": 98.55289459228516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / *else { }",
            "score": 98.51708112444196,
            "correctness": "uncompilable",
            "tokenized_patch": "} / * else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { for(",
            "score": 98.11862182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { for (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else } {",
            "score": 97.8451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( n ) )",
            "score": 99.15219116210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . equals ( n ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { if( {",
            "score": 98.77631971571181,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return n ; }",
            "score": 98.55091857910156,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = node ;",
            "score": 98.47862897600446,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ } else",
            "score": 98.11398315429688,
            "correctness": "uncompilable",
            "tokenized_patch": "* / } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return {",
            "score": 97.84368896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( ns.isFor( ) &&",
            "score": 99.15151742788461,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( ns . is CaMeL For ( ) &&",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = ns ; } } else {",
            "score": 98.93734402126736,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ns ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { if } }",
            "score": 98.80852508544922,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { break ; }",
            "score": 98.71798706054688,
            "correctness": "uncompilable",
            "tokenized_patch": "} { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *} } }",
            "score": 98.51616559709821,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = false ; } else {",
            "score": 98.47531127929688,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*} else { }",
            "score": 98.11197916666667,
            "correctness": "uncompilable",
            "tokenized_patch": "* } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } } }",
            "score": 97.83904418945312,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = n.getParent( ) ; } else",
            "score": 99.15015587439903,
            "correctness": "uncompilable",
            "tokenized_patch": "parent = n . get CaMeL Parent ( ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } else { } }",
            "score": 98.9320556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } else { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else continue ;",
            "score": 98.80723571777344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { { return {",
            "score": 98.71742248535156,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { { return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } *{",
            "score": 98.51602172851562,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = ns ; }",
            "score": 98.47488403320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*++ ns ; }",
            "score": 98.10943603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "* ++ ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else else }",
            "score": 97.83382568359374,
            "correctness": "uncompilable",
            "tokenized_patch": "if else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } else { recordDepScope(",
            "score": 99.14883188100961,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } else { record CaMeL Dep CaMeL Scope (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'AstChangeProxy::getRhs ') ; }",
            "score": 98.930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'c') ; }",
            "score": 98.930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'a') ; }",
            "score": 98.930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( 'b') ; }",
            "score": 98.930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Error( \"'s value.  \") ; }",
            "score": 98.930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return } }",
            "score": 98.71626499720982,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return.[0] ;",
            "score": 98.54217529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} return . [ 0 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } finally { }",
            "score": 98.515869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } finally { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = parent ; } else {",
            "score": 98.472900390625,
            "correctness": "wrong",
            "tokenized_patch": "parent = parent ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} {",
            "score": 97.80377197265625,
            "correctness": "wrong",
            "tokenized_patch": "} {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else if( recordNode == ns )",
            "score": 99.14661754261364,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node == ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } else if else",
            "score": 98.80422973632812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } } else {",
            "score": 98.76944405691964,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } else { {",
            "score": 98.71422576904297,
            "correctness": "wrong",
            "tokenized_patch": "} { } } else { {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "73"
        },
        {
            "patch": "} else throw null ; }",
            "score": 98.53730119977679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **{ }",
            "score": 98.51577758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { finally {",
            "score": 98.10697428385417,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { } else",
            "score": 97.7994384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( {",
            "score": 98.91230912642045,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return else { {",
            "score": 98.71257672991071,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } else }",
            "score": 98.51561628069196,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = true ;",
            "score": 98.46723284040179,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ } } else",
            "score": 98.10240681966145,
            "correctness": "uncompilable",
            "tokenized_patch": "* / } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / }",
            "score": 97.78951416015624,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = ns ; } else {",
            "score": 98.90897827148437,
            "correctness": "uncompilable",
            "tokenized_patch": "name CaMeL Node = ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { if( {",
            "score": 98.76381429036458,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return false ; } } }",
            "score": 98.71110534667969,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return false ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **if } }",
            "score": 98.51479666573661,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*) ; } else {",
            "score": 98.46515764508929,
            "correctness": "uncompilable",
            "tokenized_patch": "* ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else else }",
            "score": 97.76470947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "else else else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = null ; } } else {",
            "score": 98.90633816189236,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = null ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else if } } }",
            "score": 98.80259704589844,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { } } else {",
            "score": 98.76277378627232,
            "correctness": "uncompilable",
            "tokenized_patch": "else { } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return false ; }",
            "score": 98.71035766601562,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode.",
            "score": 98.4643325805664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-0} else {",
            "score": 98.09979248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "- 0 } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if else",
            "score": 97.75634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( parent.isFor( )",
            "score": 99.13468111478366,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( parent . is CaMeL For ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( else ;",
            "score": 98.80232238769531,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent else {",
            "score": 98.76050567626953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw null ;",
            "score": 98.52308146158855,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *{ } else {",
            "score": 98.51260811941964,
            "correctness": "uncompilable",
            "tokenized_patch": "} * { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break +1; } else {",
            "score": 98.45929718017578,
            "correctness": "uncompilable",
            "tokenized_patch": "break + 1 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*return ; } }",
            "score": 98.09756469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "* return ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( { return ; } else",
            "score": 98.75980631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( { return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { *if else {",
            "score": 98.51240757533482,
            "correctness": "uncompilable",
            "tokenized_patch": "} { * if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = null ;",
            "score": 98.45724923270089,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else { }",
            "score": 97.73824462890624,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == node ) {",
            "score": 99.13203735351563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == node ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return -1; } else {",
            "score": 98.75965118408203,
            "correctness": "uncompilable",
            "tokenized_patch": "return - 1 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / else {",
            "score": 98.51209368024554,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "**",
            "score": 98.09181722005208,
            "correctness": "uncompilable",
            "tokenized_patch": "* *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else *{",
            "score": 97.73541870117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else * {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; if } } }",
            "score": 98.79872131347656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; if } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else { else {",
            "score": 98.51198032924107,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { nameNode ;",
            "score": 98.50857543945312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { name CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else throws",
            "score": 97.732861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "getNode( recordNode , ns ) ;",
            "score": 99.12845865885417,
            "correctness": "uncompilable",
            "tokenized_patch": "get CaMeL Node ( record CaMeL Node , ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'AstChangeProxy::getRhs ') ;",
            "score": 98.89080200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'c') ;",
            "score": 98.89080200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'a') ;",
            "score": 98.89080200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'b') ;",
            "score": 98.89080200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( \"'s value.  \") ;",
            "score": 98.89080200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return { } } }",
            "score": 98.79747009277344,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { { { {",
            "score": 98.70505196707589,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } *}",
            "score": 98.51179722377232,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = this ;",
            "score": 98.43671526227679,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = this ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ break ; }",
            "score": 98.08024088541667,
            "correctness": "uncompilable",
            "tokenized_patch": "* / break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'AstChangeProxy::getRhs ') ; }",
            "score": 99.12578735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'c') ; }",
            "score": 99.12578735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'a') ; }",
            "score": 99.12578735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'b') ; }",
            "score": 99.12578735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( \"'s value.  \") ; }",
            "score": 99.12578735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return / **/",
            "score": 98.7960433959961,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ break ; } } else {",
            "score": 98.75059509277344,
            "correctness": "uncompilable",
            "tokenized_patch": "{ break ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { break ; } }",
            "score": 98.70480782645089,
            "correctness": "uncompilable",
            "tokenized_patch": "break { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent = false ;",
            "score": 98.43439592633929,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else { }",
            "score": 98.07932739257812,
            "correctness": "uncompilable",
            "tokenized_patch": "* else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { }",
            "score": 97.72554321289063,
            "correctness": "wrong",
            "tokenized_patch": "} { { }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "break ; } } if( }",
            "score": 98.74761199951172,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { this.}",
            "score": 98.70310974121094,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { this . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **if else }",
            "score": 98.51158796037946,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * if else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns ) ; }",
            "score": 98.4955825805664,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else nameNode ;",
            "score": 98.42197963169643,
            "correctness": "uncompilable",
            "tokenized_patch": "} else name CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else continue ; }",
            "score": 98.07930501302083,
            "correctness": "uncompilable",
            "tokenized_patch": "* else continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { }",
            "score": 97.72090911865234,
            "correctness": "uncompilable",
            "tokenized_patch": "return { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( nameNode ,",
            "score": 98.87871759588069,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( name CaMeL Node ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } } else {",
            "score": 98.7030741373698,
            "correctness": "wrong",
            "tokenized_patch": "{ } } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else { else ; {",
            "score": 98.51038469587054,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else return ; }",
            "score": 98.49454498291016,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else ) ;",
            "score": 98.07918294270833,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else {",
            "score": 97.720458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( parent ) ;",
            "score": 99.11778767903645,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( } ) ;",
            "score": 98.79389190673828,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { break ; } } }",
            "score": 98.74478912353516,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'AstChangeProxy::getRhs 'else {",
            "score": 98.50983537946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'c'else {",
            "score": 98.50983537946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'a'else {",
            "score": 98.50983537946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( 'b'else {",
            "score": 98.50983537946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch( \"'s value.  \"else {",
            "score": 98.50983537946429,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch ( $STRING$ else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = true ;",
            "score": 98.49067687988281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} break ; } else {",
            "score": 98.41785539899554,
            "correctness": "uncompilable",
            "tokenized_patch": "} break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "**else {",
            "score": 98.0775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "* * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else else else",
            "score": 97.7203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( t ) ;",
            "score": 99.11732991536458,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( t ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( ns ) ; }",
            "score": 98.87265846946023,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { this.} }",
            "score": 98.69951520647321,
            "correctness": "uncompilable",
            "tokenized_patch": "} { this . } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else ; else }",
            "score": 98.50955636160714,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else ; else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return ; }",
            "score": 98.06482950846355,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else int }",
            "score": 97.72017822265624,
            "correctness": "uncompilable",
            "tokenized_patch": "} else int }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } catch }",
            "score": 98.7930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } / *{ }",
            "score": 98.50949532645089,
            "correctness": "uncompilable",
            "tokenized_patch": "} } / * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*} else",
            "score": 98.06378173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "* } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else } else",
            "score": 97.71688842773438,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( n ) ; }",
            "score": 98.86562278053977,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = null ; }",
            "score": 98.79203578404018,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { } } } else {",
            "score": 98.69320678710938,
            "correctness": "wrong",
            "tokenized_patch": "{ { } } } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { else ; }",
            "score": 98.50942993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw true ; }",
            "score": 98.48419189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns = nameNode ;",
            "score": 98.40073067801339,
            "correctness": "uncompilable",
            "tokenized_patch": "ns = name CaMeL Node ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } else",
            "score": 98.06197102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else try",
            "score": 97.71506958007812,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.recordDepScope( ns ) ;",
            "score": 99.10746256510417,
            "correctness": "uncompilable",
            "tokenized_patch": "this . record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } else { {",
            "score": 98.86070556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ; } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else / **/",
            "score": 98.79150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else / * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *} else {",
            "score": 98.50927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { println( ) ;",
            "score": 98.48037719726562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { println ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return ; }",
            "score": 98.05579223632813,
            "correctness": "uncompilable",
            "tokenized_patch": "else return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else System",
            "score": 97.69078369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else = } } else ;",
            "score": 98.79114532470703,
            "correctness": "uncompilable",
            "tokenized_patch": "} else = } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } { return ; }",
            "score": 98.69044494628906,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } { return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ else } {",
            "score": 97.6884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ else } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else parent = n.getParent( ) ;",
            "score": 99.10512288411458,
            "correctness": "uncompilable",
            "tokenized_patch": "else parent = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return false ; } }",
            "score": 98.79092407226562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} */ } else {",
            "score": 98.477783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} * / } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return ; } else {",
            "score": 98.38453892299107,
            "correctness": "uncompilable",
            "tokenized_patch": "} return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; break ;",
            "score": 98.05239868164062,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } try",
            "score": 97.68677978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode != ns )",
            "score": 99.1004971590909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node != ns )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = n ; } else {",
            "score": 98.83455810546874,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = n ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} if } } / */",
            "score": 98.78883361816406,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } } / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { return null ; } }",
            "score": 98.68948364257812,
            "correctness": "uncompilable",
            "tokenized_patch": "} { return null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} while else { }",
            "score": 98.50846354166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} while else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ) ; }",
            "score": 98.475341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; }",
            "score": 98.05030059814453,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { } {",
            "score": 97.67999877929688,
            "correctness": "uncompilable",
            "tokenized_patch": "return { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent.equals( ) )",
            "score": 99.0975674715909,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent . equals ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } break ; } }",
            "score": 98.83246527777777,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if }( else {",
            "score": 98.78860473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { if( {",
            "score": 98.6885986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } **",
            "score": 98.50838623046874,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.else {",
            "score": 98.47085571289062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "**else",
            "score": 98.04529571533203,
            "correctness": "uncompilable",
            "tokenized_patch": "* * else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } System",
            "score": 97.6695068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } ****/",
            "score": 98.78544616699219,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } / {",
            "score": 98.50743756975446,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / *else {",
            "score": 98.46828787667411,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else int",
            "score": 97.66209411621094,
            "correctness": "uncompilable",
            "tokenized_patch": "} else int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode != ) {",
            "score": 99.09022105823864,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node != ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = recordNode ; } else {",
            "score": 98.82698364257813,
            "correctness": "wrong",
            "tokenized_patch": "parent = record CaMeL Node ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} { if } } if }",
            "score": 98.7841567993164,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( parent.}",
            "score": 98.68790435791016,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( parent . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} catch else ; { }",
            "score": 98.50680977957589,
            "correctness": "uncompilable",
            "tokenized_patch": "} catch else ; { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw false ; }",
            "score": 98.46651458740234,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( true ) {",
            "score": 98.34552873883929,
            "correctness": "wrong",
            "tokenized_patch": "} if ( true ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "{ } else {",
            "score": 97.65485229492188,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( nameNode == n )",
            "score": 99.08954412286931,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( name CaMeL Node == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return : null ; } }",
            "score": 98.82031860351563,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return : null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / *} }",
            "score": 98.78374481201172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / * } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } */",
            "score": 98.5066426595052,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} nameNode = ns ;",
            "score": 98.46580505371094,
            "correctness": "uncompilable",
            "tokenized_patch": "} name CaMeL Node = ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return ; } else {",
            "score": 98.3443603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "else return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NameInformation ns ;",
            "score": 98.0375467936198,
            "correctness": "uncompilable",
            "tokenized_patch": "Name CaMeL Information ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else *}",
            "score": 97.64736938476562,
            "correctness": "uncompilable",
            "tokenized_patch": "} else * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = n.getParent( ) ;",
            "score": 99.08686967329545,
            "correctness": "wrong",
            "tokenized_patch": "n = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} else if }( } }",
            "score": 98.78349304199219,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } ( } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( { {",
            "score": 98.73023332868304,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } else { else {",
            "score": 98.6873779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *if } else {",
            "score": 98.50634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "} * if } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} finally {",
            "score": 98.46499633789062,
            "correctness": "uncompilable",
            "tokenized_patch": "} finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ) ; } else {",
            "score": 98.33830915178571,
            "correctness": "uncompilable",
            "tokenized_patch": "return ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else break ;",
            "score": 98.035400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } else /",
            "score": 97.63779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "else } else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != null ) { parent.",
            "score": 99.08660888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != null ) { parent .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if( else {",
            "score": 98.7830581665039,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if ( else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break { } } } else {",
            "score": 98.68634796142578,
            "correctness": "uncompilable",
            "tokenized_patch": "break { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **/",
            "score": 98.50499877929687,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = ns ;",
            "score": 98.46451568603516,
            "correctness": "wrong",
            "tokenized_patch": "} else { ns = ns ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else parent = type ;",
            "score": 98.33281598772321,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent = type ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ }",
            "score": 98.03521728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "* / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else",
            "score": 97.6368637084961,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( recordNode == n )",
            "score": 99.0858154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( record CaMeL Node == n )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw null ; } } }",
            "score": 98.81140747070313,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw null ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } */",
            "score": 98.78166198730469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return } } } else {",
            "score": 98.68389129638672,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } } else ;",
            "score": 98.50473458426339,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return [0] ;",
            "score": 98.46089935302734,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return [ 0 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case ) : return ;",
            "score": 98.03509521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "case ) : return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if else else",
            "score": 97.618408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( n ) ;",
            "score": 99.08437093098958,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( index ) ;",
            "score": 98.80596923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( index ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if } else { if }",
            "score": 98.78124237060547,
            "correctness": "uncompilable",
            "tokenized_patch": "} if } else { if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( true ) {",
            "score": 98.32870047433036,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*) ; } else",
            "score": 98.03256225585938,
            "correctness": "uncompilable",
            "tokenized_patch": "* ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else else",
            "score": 97.61828002929687,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent == recordNode )",
            "score": 99.08229758522727,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent == record CaMeL Node )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else = } }",
            "score": 98.77896881103516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else = } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { this.} else {",
            "score": 98.68331146240234,
            "correctness": "uncompilable",
            "tokenized_patch": "} { this . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": throw null ; }",
            "score": 98.0303243001302,
            "correctness": "uncompilable",
            "tokenized_patch": ": throw null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ } else }",
            "score": 97.61210327148437,
            "correctness": "uncompilable",
            "tokenized_patch": "{ } else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { recordDepScope( getCaMeL",
            "score": 99.0735371907552,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { record CaMeL Dep CaMeL Scope ( get CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( ) ; }",
            "score": 98.79965209960938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else / / */",
            "score": 98.77760314941406,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else / / * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break true ; } } else {",
            "score": 98.6832275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "break true ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } *if else",
            "score": 98.50293986002605,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { parent = null ;",
            "score": 98.45133209228516,
            "correctness": "wrong",
            "tokenized_patch": "} else { parent = null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "*/ return ; }",
            "score": 98.02968343098958,
            "correctness": "uncompilable",
            "tokenized_patch": "* / return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { { }",
            "score": 97.60128173828124,
            "correctness": "uncompilable",
            "tokenized_patch": "else { { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = recordDepScope( ns ) ;",
            "score": 99.06905110677083,
            "correctness": "uncompilable",
            "tokenized_patch": "n = record CaMeL Dep CaMeL Scope ( ns ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = nameNode ; } else {",
            "score": 98.79412231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = name CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( true else ;",
            "score": 98.7772216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( true else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else } } else { else {",
            "score": 98.68180847167969,
            "correctness": "uncompilable",
            "tokenized_patch": "else } } else { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.this.",
            "score": 98.44937896728516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . this .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else ns = null ; }",
            "score": 98.31669398716518,
            "correctness": "uncompilable",
            "tokenized_patch": "else ns = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return ; } else",
            "score": 98.02752685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "else return ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else *",
            "score": 97.597119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ***/ }",
            "score": 98.77679443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "} else * * * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break false ; } else {",
            "score": 98.71351841517857,
            "correctness": "uncompilable",
            "tokenized_patch": "break false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return ; } } }",
            "score": 98.6791000366211,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( } } }",
            "score": 98.50163922991071,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( false ) {",
            "score": 98.44654192243304,
            "correctness": "wrong",
            "tokenized_patch": "} if ( false ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "60"
        },
        {
            "patch": "} ) ;",
            "score": 98.02525329589844,
            "correctness": "uncompilable",
            "tokenized_patch": "} ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else } *",
            "score": 97.58214721679687,
            "correctness": "uncompilable",
            "tokenized_patch": "} else } *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'AstChangeProxy::getRhs ') ;",
            "score": 98.78657836914063,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'c') ;",
            "score": 98.78657836914063,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'a') ;",
            "score": 98.78657836914063,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( 'b') ;",
            "score": 98.78657836914063,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "recordDepScope( \"'s value.  \") ;",
            "score": 98.78657836914063,
            "correctness": "uncompilable",
            "tokenized_patch": "record CaMeL Dep CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if } } } }",
            "score": 98.7764892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( node != null )",
            "score": 98.71246337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( node != null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { clear( ) ;",
            "score": 98.43898010253906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { clear ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else logger",
            "score": 97.56863403320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { System.} } else {",
            "score": 98.7830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { System . } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } finally { if } }",
            "score": 98.77525329589844,
            "correctness": "uncompilable",
            "tokenized_patch": "} } finally { if } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( } } else {",
            "score": 98.70819854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { break {",
            "score": 98.50108119419643,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else ;",
            "score": 98.02437337239583,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if else else",
            "score": 97.5531234741211,
            "correctness": "uncompilable",
            "tokenized_patch": "if else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( node != n ) {",
            "score": 99.0616455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( node != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; } } catch }",
            "score": 98.77487182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ; } {",
            "score": 98.70433807373047,
            "correctness": "wrong",
            "tokenized_patch": "} else { return ; } {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "62"
        },
        {
            "patch": "} } } *{ }",
            "score": 98.50084577287946,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } * { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw n ; }",
            "score": 98.43537902832031,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*} } else",
            "score": 98.0225830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "* } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } /",
            "score": 97.55115509033203,
            "correctness": "uncompilable",
            "tokenized_patch": "} } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "current = nameNode ; } else {",
            "score": 98.77836303710937,
            "correctness": "uncompilable",
            "tokenized_patch": "current = name CaMeL Node ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } catch { }",
            "score": 98.77328491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } catch { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return false ; }",
            "score": 98.70335170200893,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { super.} else {",
            "score": 98.67256164550781,
            "correctness": "uncompilable",
            "tokenized_patch": "} { super . } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } while else",
            "score": 98.49870082310268,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } while else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / *else {",
            "score": 98.28909301757812,
            "correctness": "uncompilable",
            "tokenized_patch": "} / * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "+1} else {",
            "score": 98.01814778645833,
            "correctness": "uncompilable",
            "tokenized_patch": "+ 1 } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if",
            "score": 97.54920959472656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } } catch else",
            "score": 98.77307891845703,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } } catch else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { node = } }",
            "score": 98.70327758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { node = } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { {",
            "score": 98.67082868303571,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } } /",
            "score": 98.49831717354911,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } } /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return ns ;",
            "score": 98.42995779854911,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else parent ; } }",
            "score": 98.28426688058036,
            "correctness": "uncompilable",
            "tokenized_patch": "} else parent ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*; } else",
            "score": 98.01629638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "* ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else",
            "score": 97.54293060302734,
            "correctness": "uncompilable",
            "tokenized_patch": "else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( ns ) ; }",
            "score": 99.06043497721355,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( ns ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / ****/",
            "score": 98.77224731445312,
            "correctness": "uncompilable",
            "tokenized_patch": "} / * * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { { return } } }",
            "score": 98.67047119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "} { { return } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} *{ if else {",
            "score": 98.49720982142857,
            "correctness": "uncompilable",
            "tokenized_patch": "} * { if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.next ; }",
            "score": 98.4299545288086,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . next ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( false ) {",
            "score": 98.28411865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ; }",
            "score": 98.01529541015626,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else this",
            "score": 97.49751281738281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else this",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { recordDepScope( node ) ;",
            "score": 99.06041463216145,
            "correctness": "uncompilable",
            "tokenized_patch": "else { record CaMeL Dep CaMeL Scope ( node ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } finally ;",
            "score": 98.77143859863281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } finally ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } return ; } else {",
            "score": 98.6700668334961,
            "correctness": "uncompilable",
            "tokenized_patch": "} } return ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { / else /",
            "score": 98.49654715401786,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { / else /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else ns = null ; }",
            "score": 98.4295883178711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else ns = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! true ) {",
            "score": 98.28206961495536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ) ; } else",
            "score": 98.0115966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ) ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else",
            "score": 97.47572835286458,
            "correctness": "uncompilable",
            "tokenized_patch": "else else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if } } } }",
            "score": 98.77100372314453,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if } } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } System.{",
            "score": 98.49636404854911,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } System . {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { code = null ;",
            "score": 98.42915344238281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { code = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case Node.null :",
            "score": 98.00551350911458,
            "correctness": "uncompilable",
            "tokenized_patch": "case Node . null :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { throw new null ; } }",
            "score": 98.76121826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { throw new null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return ; } } }",
            "score": 98.69892229352679,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { else { else",
            "score": 98.49562290736607,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { else { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return.next ;",
            "score": 98.42681012834821,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return . next ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; } else {",
            "score": 98.27405657087054,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*else System.else",
            "score": 98.0039774576823,
            "correctness": "uncompilable",
            "tokenized_patch": "* else System . else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ else }",
            "score": 97.4662857055664,
            "correctness": "uncompilable",
            "tokenized_patch": "/ else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else recordDepScope( parent ) ;",
            "score": 99.05253462357955,
            "correctness": "uncompilable",
            "tokenized_patch": "else record CaMeL Dep CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } else = null ;",
            "score": 98.77001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return ; } else { }",
            "score": 98.76093885633681,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return ; } else { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { } return ; }",
            "score": 98.66348702566964,
            "correctness": "uncompilable",
            "tokenized_patch": "} { } return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } */ else {",
            "score": 98.49418422154018,
            "correctness": "uncompilable",
            "tokenized_patch": "} } * / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this.try {",
            "score": 98.42557525634766,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this . try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else break ; } else {",
            "score": 98.27243477957589,
            "correctness": "uncompilable",
            "tokenized_patch": "else break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ; } else ;",
            "score": 98.0024922688802,
            "correctness": "uncompilable",
            "tokenized_patch": "return ; } else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else logger",
            "score": 97.4618148803711,
            "correctness": "uncompilable",
            "tokenized_patch": "} else logger",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if } finally ;",
            "score": 98.76976667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if } finally ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } if( {",
            "score": 98.69676971435547,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if else { else }",
            "score": 98.49379185267857,
            "correctness": "uncompilable",
            "tokenized_patch": "} if else { else }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { true ; }",
            "score": 98.42431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*; } } else {",
            "score": 98.27241734095982,
            "correctness": "uncompilable",
            "tokenized_patch": "* ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "false ; } else",
            "score": 98.00221557617188,
            "correctness": "uncompilable",
            "tokenized_patch": "false ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = n.getParent( ) ;",
            "score": 99.0454989346591,
            "correctness": "uncompilable",
            "tokenized_patch": "node = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else / / *} }",
            "score": 98.76935577392578,
            "correctness": "uncompilable",
            "tokenized_patch": "} else / / * } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'AstChangeProxy::getRhs ',",
            "score": 98.74978298611111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'c',",
            "score": 98.74978298611111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'a',",
            "score": 98.74978298611111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( 'b',",
            "score": 98.74978298611111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else throw new Exception( \"'s value.  \",",
            "score": 98.74978298611111,
            "correctness": "uncompilable",
            "tokenized_patch": "} else throw new Exception ( $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { if( }",
            "score": 98.66288248697917,
            "correctness": "uncompilable",
            "tokenized_patch": "} { if ( }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { consume( ) ;",
            "score": 98.42078399658203,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { consume ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-3} else {",
            "score": 97.99973551432292,
            "correctness": "uncompilable",
            "tokenized_patch": "- $NUMBER$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-4} else {",
            "score": 97.99973551432292,
            "correctness": "uncompilable",
            "tokenized_patch": "- $NUMBER$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-24} else {",
            "score": 97.99973551432292,
            "correctness": "uncompilable",
            "tokenized_patch": "- $NUMBER$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-2} else {",
            "score": 97.99973551432292,
            "correctness": "uncompilable",
            "tokenized_patch": "- $NUMBER$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-83} else {",
            "score": 97.99973551432292,
            "correctness": "uncompilable",
            "tokenized_patch": "- $NUMBER$ } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return { else",
            "score": 97.42460632324219,
            "correctness": "uncompilable",
            "tokenized_patch": "return { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nameNode = parent ; } else {",
            "score": 98.74920654296875,
            "correctness": "wrong",
            "tokenized_patch": "name CaMeL Node = parent ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} else if( target.}",
            "score": 98.69569396972656,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( target . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { else { else { {",
            "score": 98.66251373291016,
            "correctness": "uncompilable",
            "tokenized_patch": "} { else { else { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } } } { }",
            "score": 98.49249267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } } { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { this ) ; }",
            "score": 98.41740417480469,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { this ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ns ; } else {",
            "score": 98.27151925223214,
            "correctness": "uncompilable",
            "tokenized_patch": "return ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "+1;",
            "score": 97.98341369628906,
            "correctness": "uncompilable",
            "tokenized_patch": "+ 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else try",
            "score": 97.41870880126953,
            "correctness": "uncompilable",
            "tokenized_patch": "} else try",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( isFor( ) )",
            "score": 99.04433371803977,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( is CaMeL For ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } finally ;",
            "score": 98.76741027832031,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } finally ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { } } ) ; }",
            "score": 98.74872504340277,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } } ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } break ; } }",
            "score": 98.6927490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } return ; }",
            "score": 98.66179547991071,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if false ; {",
            "score": 98.49236188616071,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if false ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns = n ;",
            "score": 98.41629028320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / else {",
            "score": 98.26947631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "} / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break } } else",
            "score": 97.95614013671874,
            "correctness": "uncompilable",
            "tokenized_patch": "break } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if else",
            "score": 97.41619110107422,
            "correctness": "uncompilable",
            "tokenized_patch": "else if else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( parent != private ) {",
            "score": 99.04309692382813,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( parent != private ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if } } } catch }",
            "score": 98.76598358154297,
            "correctness": "uncompilable",
            "tokenized_patch": "else if } } } catch }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} */ if else {",
            "score": 98.49162946428571,
            "correctness": "uncompilable",
            "tokenized_patch": "} * / if else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ns == n ) {",
            "score": 98.41590881347656,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ns == n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! false ) {",
            "score": 98.26800537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ": return ; }",
            "score": 97.9555908203125,
            "correctness": "uncompilable",
            "tokenized_patch": ": return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else else {",
            "score": 97.41063690185547,
            "correctness": "uncompilable",
            "tokenized_patch": "else else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'AstChangeProxy::getRhs ') ;",
            "score": 99.03961859809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'c') ;",
            "score": 99.03961859809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'a') ;",
            "score": 99.03961859809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( 'b') ;",
            "score": 99.03961859809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { error( \"'s value.  \") ;",
            "score": 99.03961859809027,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else if } if }",
            "score": 98.76582336425781,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else if } if }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "valueNode = ns ; } else {",
            "score": 98.7431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "value CaMeL Node = ns ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return -1; }",
            "score": 98.68849182128906,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return - 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return } } else {",
            "score": 98.66084798177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } if ) } }",
            "score": 98.49092320033482,
            "correctness": "uncompilable",
            "tokenized_patch": "} } if ) } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *else {",
            "score": 98.26671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *",
            "score": 97.95074462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "/ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else return",
            "score": 97.38716125488281,
            "correctness": "uncompilable",
            "tokenized_patch": "} else return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( current != n ) {",
            "score": 99.03812255859376,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( current != n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( false ) ;",
            "score": 98.7652359008789,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ns ; }",
            "score": 98.40569196428571,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ns ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return ; }",
            "score": 97.94112548828124,
            "correctness": "uncompilable",
            "tokenized_patch": "} return ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else System",
            "score": 97.36588287353516,
            "correctness": "uncompilable",
            "tokenized_patch": "} else System",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if else ; else ;",
            "score": 98.76519775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if else ; else ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { ) ; } } }",
            "score": 98.73025851779514,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { ) ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { break {",
            "score": 98.49029541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { close( ) ;",
            "score": 98.405517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { close ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( !",
            "score": 98.2567647298177,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( !",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ++ ns ;",
            "score": 97.93595581054687,
            "correctness": "uncompilable",
            "tokenized_patch": "} ++ ns ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "catch else {",
            "score": 97.29685974121094,
            "correctness": "uncompilable",
            "tokenized_patch": "catch else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        }
    ]
}