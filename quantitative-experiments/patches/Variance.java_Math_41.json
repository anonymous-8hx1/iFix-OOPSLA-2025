{
    "src": "for ( int i = 0 ; i < weights . length ; i ++ ) {",
    "patches": [
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 100.01140227141204,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.96624755859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.95134024784483,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.86407470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.86139594184027,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) {",
            "score": 99.80681818181819,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) {",
            "score": 99.77955627441406,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < weights.length ; i ++ )",
            "score": 99.76043701171875,
            "correctness": "wrong",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.94797188895089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.90577076099537,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.83930121527777,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) {",
            "score": 99.78656768798828,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.75301513671874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int n =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.75137992527173,
            "correctness": "wrong",
            "tokenized_patch": "int n = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; i ++ ) {",
            "score": 99.7394131747159,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) {",
            "score": 99.7233154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.93993236400463,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.89365415219908,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) {",
            "score": 99.807861328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ )",
            "score": 99.80761000689338,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.79395209418402,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ ) {",
            "score": 99.76707458496094,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.72751193576389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) {",
            "score": 99.72066243489583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.91962722252156,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.76560572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.73756917317708,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; i ++ ) {",
            "score": 99.72666237571023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; i ++ ) {",
            "score": 99.7150545987216,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) {",
            "score": 99.71061401367187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.85286458333333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.77137340198864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.74645385742187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.73091457201087,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.72173751027961,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) {",
            "score": 99.70501098632812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.91109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.85149016203704,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < begin + length ; i ++ ) {",
            "score": 99.76299493963069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <0; i ++ ) {",
            "score": 99.73009723165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.72112482244319,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int weights =0; for( int i =0; i < weights ; i ++ ) {",
            "score": 99.70932152157738,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 ; for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) {",
            "score": 99.69900512695312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.90747974537037,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum2; i ++ ) {",
            "score": 99.71912339154412,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.71912339154412,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i ++ ) {",
            "score": 99.71912339154412,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i ++ ) {",
            "score": 99.71912339154412,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i ++ ) {",
            "score": 99.71912339154412,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n = weights.length ; for( int i =0; i < n ; i ++ ) {",
            "score": 99.70169200067934,
            "correctness": "wrong",
            "tokenized_patch": "int n = weights . length ; for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.89794017650463,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.8416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) {",
            "score": 99.74600982666016,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.72280883789062,
            "correctness": "wrong",
            "tokenized_patch": "if ( weights != null ) for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ )",
            "score": 99.70177504595588,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start ; i ++ ) {",
            "score": 99.69883728027344,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { {",
            "score": 99.67777934827302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i ++ ) {",
            "score": 99.67002868652344,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.88602000269397,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.83897569444444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i <= weights.length ; i ++ ) {",
            "score": 99.69234890407986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; i ++ ) {",
            "score": 99.6630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.87980704471983,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i < n ; i ++ ) {",
            "score": 99.6897684733073,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i < n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) {",
            "score": 99.68583170572917,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights ; i ++ ) {",
            "score": 99.66039276123047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.87767682756696,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.823955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + begin + length ; i ++ ) {",
            "score": 99.73231090198864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "synchronized( weights ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.71000339673913,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( weights ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- ) {",
            "score": 99.6869140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { {",
            "score": 99.67819695723684,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ length -1] ; i ++ ) {",
            "score": 99.66638764880952,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length - 1 ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.86865234375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.823466796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.73216552734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return weights [ i ] ;",
            "score": 99.7085469563802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ )",
            "score": 99.68053481158088,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) {",
            "score": 99.66316053602431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < max ; i ++ ) {",
            "score": 99.6556167602539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start + length ; i ++ ) {",
            "score": 99.65217420789931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.82307942708333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin ; i ++ ) {",
            "score": 99.73184204101562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < n ; i ++ ) {",
            "score": 99.70645805027173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; i ++ ) { {",
            "score": 99.68379543138587,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin + begin ; i < begin + length ; i ++ ) {",
            "score": 99.6728848544034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i ++ ) {",
            "score": 99.661474609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < sumWts ; i ++ ) {",
            "score": 99.65829806857639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ ) {",
            "score": 99.65542602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start ; i ++ ) {",
            "score": 99.6513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.866435546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = weights [ i ] - mean ;",
            "score": 99.82117151331019,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin + length ; i ++ ) {",
            "score": 99.72413219105114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70405910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.67521158854167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length + length ; i ++ ) {",
            "score": 99.67158813476563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i <= weights.length ; i ++ ) {",
            "score": 99.66041148792614,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <0; i ++ ) {",
            "score": 99.64783477783203,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.8635674838362,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum2+= weights [ i ] ;",
            "score": 99.81763634314903,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum9111962718267217978+= weights [ i ] ;",
            "score": 99.81763634314903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum37+= weights [ i ] ;",
            "score": 99.81763634314903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum3+= weights [ i ] ;",
            "score": 99.81763634314903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum1983+= weights [ i ] ;",
            "score": 99.81763634314903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : weights.length ; i ++ ) {",
            "score": 99.72252807617187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ? weights [ i ] : weights ) {",
            "score": 99.70125679347827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ? weights [ i ] : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { {",
            "score": 99.65267141241776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i < weights.length ; i ++ ) {",
            "score": 99.6484707919034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.6484707919034,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i < weights.length ; i ++ ) {",
            "score": 99.6484707919034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i < weights.length ; i ++ ) {",
            "score": 99.6484707919034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i < weights.length ; i ++ ) {",
            "score": 99.6484707919034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { {",
            "score": 99.6460693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+0; i < weights.length ; i ++ ) {",
            "score": 99.64574584960937,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i + i ] ;",
            "score": 99.8611260775862,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - mean ;",
            "score": 99.80820493344908,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.70845947265624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "synchronized( this ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6989109205163,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( this ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ )",
            "score": 99.65185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length ; i ++ ) {",
            "score": 99.64450412326389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) {",
            "score": 99.62530876608456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.80551938657408,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < length ; i ++ ) {",
            "score": 99.69577955163044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin + length ; i ++ ) {",
            "score": 99.66928439670139,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i <= n ; i ++ ) {",
            "score": 99.66415405273438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i <= n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( final int i =0; i < weights.length ; i ++ ) {",
            "score": 99.63150827508224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < list.length ; i ++ ) {",
            "score": 99.62156168619792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.85930765086206,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts =0;",
            "score": 99.80515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin + begin + length ; i ++ ) {",
            "score": 99.68822132457386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length && i < weights.length ; i ++ ) {",
            "score": 99.6567891438802,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.length ; i ++ ) {",
            "score": 99.64420572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights ; i ++ ) {",
            "score": 99.62814331054688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.85829741379311,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.79694733796296,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == null ) { for( int i =0; i < weights.length ; i ++ )",
            "score": 99.68978881835938,
            "correctness": "wrong",
            "tokenized_patch": "if ( weights == null ) { for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0: weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.68534712357955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i < weights.length ; i ++ ) {",
            "score": 99.66072998046874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int i =0; for( int i = start ; i < length ; i ++ ) {",
            "score": 99.62669735863095,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { )",
            "score": 99.61917917351974,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin + length ; i ++ ) {",
            "score": 99.68006591796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + begin +0; i < begin + length ; i ++ ) {",
            "score": 99.65947931463069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i >=0; i -- ) {",
            "score": 99.6530253092448,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i ++ ) {",
            "score": 99.64140881990132,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < isBiasCorrected ; i ++ ) {",
            "score": 99.63065795898437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < is CaMeL Bias CaMeL Corrected ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; i ++ ) {",
            "score": 99.62245008680556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+1; i < weights.length ; i ++ ) {",
            "score": 99.61908569335938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.85572265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( i =0; i < weights.length ; i ++ ) {",
            "score": 99.68649291992188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n = weights.length ; for( int i = start ; i < n ; i ++ ) {",
            "score": 99.6493503736413,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = weights . length ; for ( int i = start ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -- ) {",
            "score": 99.63916015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int i =0; for( int i =0; i < length ; i ++ ) {",
            "score": 99.62074497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length1; i < weights.length ; i ++ ) {",
            "score": 99.61345563616071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.855458984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.78783275462963,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int length =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6845172384511,
            "correctness": "uncompilable",
            "tokenized_patch": "int length = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) -1; i >=0; i -- ) {",
            "score": 99.64912923177083,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int weights = weights ; for( int i =0; i < weights ; i ++ ) {",
            "score": 99.63191731770833,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = weights ; for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < weights.length ; i ++ ) {",
            "score": 99.62873670789931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - length ; i ++ ) {",
            "score": 99.611376953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -1] ;",
            "score": 99.85313678609914,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev = values [ i ] ;",
            "score": 99.78688401442308,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights ) {",
            "score": 99.68232865767045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < weights.length ; i ++ ) {",
            "score": 99.66935591264205,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +( start + length ) ; i < weights.length ; i ++ ) {",
            "score": 99.64652506510417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + ( start + length ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; ++ i ) {",
            "score": 99.62871759588069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( double i =0; i < weights.length ; i ++ ) {",
            "score": 99.623291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.length ; i ++ ) {",
            "score": 99.61004638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.85163826778017,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - weights.length ; i ++ ) {",
            "score": 99.68195134943181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= weights.length ; i ++ ) {",
            "score": 99.64612426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i < begin + length ; i ++ ) {",
            "score": 99.64114990234376,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin + 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i -- =0; i < weights.length ; i ++ ) {",
            "score": 99.62058619449013,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=0; i ++ ) {",
            "score": 99.61187744140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.85083849676724,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <0; i ++ ) {",
            "score": 99.66423950195312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && ! weights [ i ] ; i ++ ) {",
            "score": 99.6431884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && ! weights [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length + length ; i < weights.length ; i ++ ) {",
            "score": 99.63835005326705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i <= weights.length ; i ++ ) {",
            "score": 99.623193359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin - length ; i < weights.length ; i ++ ) {",
            "score": 99.616943359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - n ; i ++ ) {",
            "score": 99.6016845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.84994393807871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *dev ;",
            "score": 99.78406213831019,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} i =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.67371136209239,
            "correctness": "uncompilable",
            "tokenized_patch": "} i = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin : weights.length ; i ++ ) {",
            "score": 99.6614990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1; i ++ ) {",
            "score": 99.61920776367188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = n ; i < weights.length ; i ++ ) {",
            "score": 99.60143364800348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum2;",
            "score": 99.84658377511161,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum9111962718267217978;",
            "score": 99.84658377511161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum37;",
            "score": 99.84658377511161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum3;",
            "score": 99.84658377511161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum1983;",
            "score": 99.84658377511161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.78090639467592,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( weights == null ) { for( int i =0; i <0; i ++ ) {",
            "score": 99.66990064538044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) { for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i < weights.length ; i ++ ) {",
            "score": 99.6592529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null && i < weights.length ; i ++ ) {",
            "score": 99.6424560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length + length ; i ++ ) {",
            "score": 99.634716796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =2; i < weights.length ; i ++ ) {",
            "score": 99.61778428819444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.61778428819444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; i ++ ) {",
            "score": 99.61778428819444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i < weights.length ; i ++ ) {",
            "score": 99.61778428819444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; i ++ ) {",
            "score": 99.61778428819444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < length ; i ++ ) {",
            "score": 99.60845947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+ weights.length ; i ++ ) {",
            "score": 99.5994873046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] / dev ;",
            "score": 99.84626717403017,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] / dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum = values [ i ] - mean ;",
            "score": 99.78013780381944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin [ i ] ; i < begin + length ; i ++ ) {",
            "score": 99.65857514880952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ i ] ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i + i + i ; i < weights.length ; i ++ ) {",
            "score": 99.64122517903645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin + length ; i ++ ) {",
            "score": 99.63388671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >= weights.length ; i ++ ) {",
            "score": 99.61603338068181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <0; i ++ ) {",
            "score": 99.59931030273438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.844208984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.7753515625,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + weights.length ; i ++ ) {",
            "score": 99.6682461825284,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length + length ; i < weights.length ; i ++ ) {",
            "score": 99.65615012428977,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ )",
            "score": 99.60780962775735,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.84145171066811,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *mean ;",
            "score": 99.77442310474537,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length [ i ] ; i ++ ) {",
            "score": 99.65493629092262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin +1; i < begin + length ; i ++ ) {",
            "score": 99.63151411576705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0- mean ; i < weights.length ; i ++ ) {",
            "score": 99.60736083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length0; i < weights.length ; i ++ ) {",
            "score": 99.60396902901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.7738506610577,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.7738506610577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.7738506610577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.7738506610577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.7738506610577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.0) {",
            "score": 99.65956624348958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - length ; i ++ ) {",
            "score": 99.65188259548611,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + i ; i < weights.length ; i ++ ) {",
            "score": 99.63208618164063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights.length ; i ++ ) {",
            "score": 99.62940063476563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.60507684004934,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.5968017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min ; i ++ ) {",
            "score": 99.59059143066406,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts =0.0;",
            "score": 99.77341037326389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < max ; i ++ ) {",
            "score": 99.65914784307066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : weights.length ; i ++ ) {",
            "score": 99.6509676846591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i -- ) {",
            "score": 99.59721235795455,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "try { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.58973999023438,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.83879743303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.7717918113426,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i < begin + length ; i ++ ) {",
            "score": 99.6496914950284,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < begin + length ; i ++ ) {",
            "score": 99.62748413085937,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + i + i -1; i < weights.length ; i ++ ) {",
            "score": 99.62577311197917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < weights.length ; i ++ ) {",
            "score": 99.60027465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i != weights.length ; i ++ ) {",
            "score": 99.59569202769886,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i != weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; } }",
            "score": 99.83872407058189,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.77039026331019,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.length ) {",
            "score": 99.65870157877605,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length + length ; i < begin + length ; i ++ ) {",
            "score": 99.64943625710227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights [ i ].length ; i ++ ) {",
            "score": 99.59411039806548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { }",
            "score": 99.59409051192434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.8342754657452,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *mean ;",
            "score": 99.77001953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + begin ; i ++ ) {",
            "score": 99.64895968967014,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length ; i ++ ) { {",
            "score": 99.62703450520833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length - start + length ) ; i ++ ) {",
            "score": 99.62472534179688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - start + length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights ; i < weights.length ; i ++ ) {",
            "score": 99.59157986111111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start + length ; i ++ ) {",
            "score": 99.57537841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.83310546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = weights [ i ] - mean ;",
            "score": 99.76856372974537,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length + length ; i ++ ) {",
            "score": 99.6449307528409,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + begin ; i < weights.length ; i ++ ) {",
            "score": 99.62337646484374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i <= n ; i -- ) {",
            "score": 99.62117513020833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i <= n ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ )",
            "score": 99.59072730654762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'expansion values,'; i ++ ) {",
            "score": 99.58988037109376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'population'; i ++ ) {",
            "score": 99.58988037109376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - ' or '; i ++ ) {",
            "score": 99.58988037109376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'sample'; i ++ ) {",
            "score": 99.58988037109376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'population variance'; i ++ ) {",
            "score": 99.58988037109376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start + length ; i ++ ) {",
            "score": 99.57461886935764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.831708984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int max =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65377674932066,
            "correctness": "wrong",
            "tokenized_patch": "int max = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i < begin ; i ++ ) {",
            "score": 99.64358859592014,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +0; i < begin + length ; i ++ ) { {",
            "score": 99.62168666294643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { {",
            "score": 99.59592572380515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( int i =0; i <0; i ++ ) {",
            "score": 99.58965773809524,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1; i -- ) {",
            "score": 99.5896240234375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ )",
            "score": 99.57368738511029,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.83109828404018,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >1) {",
            "score": 99.767392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int iterator =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6535113790761,
            "correctness": "wrong",
            "tokenized_patch": "int iterator = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin - begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.64357688210227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + i + length ; i < begin + length ; i ++ ) {",
            "score": 99.62147105823864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { else",
            "score": 99.59588944284539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ) ; i ++ ) {",
            "score": 99.58801879882813,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i <2; i ++ ) {",
            "score": 99.5867691040039,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <9111962718267217978; i ++ ) {",
            "score": 99.5867691040039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <37; i ++ ) {",
            "score": 99.5867691040039,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <3; i ++ ) {",
            "score": 99.5867691040039,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <1983; i ++ ) {",
            "score": 99.5867691040039,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { {",
            "score": 99.57251694623162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.83063874421296,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = weights [ i ] ;",
            "score": 99.766513671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( weights == null ) for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65346272786458,
            "correctness": "wrong",
            "tokenized_patch": "if ( weights == null ) for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + start ; i < weights.length ; i ++ ) {",
            "score": 99.6191162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length + length ; i ++ ) { {",
            "score": 99.61316499255952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ ; i < weights.length ; i ++ ) {",
            "score": 99.58964269301471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length.length ; i ++ ) {",
            "score": 99.58763427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i < weights.length ; i ++ ) {",
            "score": 99.58452690972223,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length +1; i ++ ) {",
            "score": 99.57064208984374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] + dev ;",
            "score": 99.82855435075432,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] + dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.765478515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin - length + length ; i < begin + length ; i ++ ) {",
            "score": 99.64272238991477,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin - length + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i >=0; i -- ) {",
            "score": 99.6185302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.6127596768466,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0- length ; i < weights.length ; i ++ ) {",
            "score": 99.58843383789062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < ! weights.length ; i ++ ) {",
            "score": 99.5839779502467,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ! weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] + mean ;",
            "score": 99.82575094288794,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] + mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.76486545138889,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin , i =0; i < begin + length ; i ++ ) {",
            "score": 99.63709605823864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin , i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { {",
            "score": 99.61204127261513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < value.length ; i ++ ) {",
            "score": 99.58478461371527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <0; i ++ ) {",
            "score": 99.58353678385417,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ length ; i < weights.length ; i ++ ) {",
            "score": 99.5825439453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { { {",
            "score": 99.56519165039063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -0] ;",
            "score": 99.82555731411638,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 0 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum2+= weights [ i ] ;",
            "score": 99.76462965745192,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum9111962718267217978+= weights [ i ] ;",
            "score": 99.76462965745192,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum37+= weights [ i ] ;",
            "score": 99.76462965745192,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum3+= weights [ i ] ;",
            "score": 99.76462965745192,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum1983+= weights [ i ] ;",
            "score": 99.76462965745192,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : i + length ; i < begin + length ; i ++ ) {",
            "score": 99.63474343039773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : i + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n = weights [ i ] ; for( int i =0; i < n ; i ++ ) {",
            "score": 99.61441040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = weights [ i ] ; for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin + length ; i ++ ) { {",
            "score": 99.61176990327381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i ; i < weights.length ; i ++ ) {",
            "score": 99.58476118607955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) {",
            "score": 99.58280181884766,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i ++ =0; i < weights.length ; i ++ ) {",
            "score": 99.58102898848684,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i +1] ;",
            "score": 99.82511112607759,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { dev = values [ i ] ;",
            "score": 99.76441368689903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { dev = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < length ; i ++ ) {",
            "score": 99.63473510742188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, i = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.61311848958333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +1; i < weights.length ; i ++ ) {",
            "score": 99.60985717773437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum2; i ++ )",
            "score": 99.57933807373047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i ++ )",
            "score": 99.57933807373047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i ++ )",
            "score": 99.57933807373047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i ++ )",
            "score": 99.57933807373047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i ++ )",
            "score": 99.57933807373047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -2; i ++ ) {",
            "score": 99.57623291015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length -9111962718267217978; i ++ ) {",
            "score": 99.57623291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -37; i ++ ) {",
            "score": 99.57623291015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length -3; i ++ ) {",
            "score": 99.57623291015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length -1983; i ++ ) {",
            "score": 99.57623291015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < start + length ; i ++ ) {",
            "score": 99.561376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.82497642780173,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *dev ;",
            "score": 99.76311125578704,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ? weights [ i ] : weights ) { }",
            "score": 99.64797973632812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ? weights [ i ] : weights ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length +1; i < begin + length ; i ++ ) {",
            "score": 99.63311212713069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final int i =0, n = weights.length ; i < n ; i ++ ) {",
            "score": 99.61279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 , n = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean ; i ++ ) {",
            "score": 99.60972595214844,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -2; i <= weights.length ; i ++ ) {",
            "score": 99.57941228693181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i <= weights.length ; i ++ ) {",
            "score": 99.57941228693181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i <= weights.length ; i ++ ) {",
            "score": 99.57941228693181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i <= weights.length ; i ++ ) {",
            "score": 99.57941228693181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i <= weights.length ; i ++ ) {",
            "score": 99.57941228693181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = - mean ; i < weights.length ; i ++ ) {",
            "score": 99.5770263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i =0; i < weights.length ; i ++ ) {",
            "score": 99.56103515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( short i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += weights [ i ] ;",
            "score": 99.82460239955357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.76137514467592,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights == null ) { for( int i =0; i < n ; i ++ ) {",
            "score": 99.64670728600544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) { for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n -1; i ++ ) {",
            "score": 99.6102803548177,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.57664853050595,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ; i < weights.length ; i ++ ) {",
            "score": 99.57321166992188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [0] ; i ++ ) {",
            "score": 99.55961528577302,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ 0 ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.82398302801724,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights != null && n < weights.length ; i ++ ) {",
            "score": 99.6461181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null && n < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < begin + length ; i ++ ) { {",
            "score": 99.60407366071429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + begin ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0; for( int i =0; i < weights ; i -- ) {",
            "score": 99.57662527901786,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 ; for ( int i = 0 ; i < weights ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0; i ++ ) {",
            "score": 99.57469177246094,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0.length ; i ++ ) {",
            "score": 99.57159423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0=0; i < weights.length ; i ++ ) {",
            "score": 99.55734252929688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts = weights [ i ] ;",
            "score": 99.82206669560185,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) var = values [ i ] - mean ;",
            "score": 99.75998159555289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) var = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : var + length ; i < begin + length ; i ++ ) {",
            "score": 99.62996049360795,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : var + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.null ; i ++ ) {",
            "score": 99.57607693142361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights.length ; i ++ ) {",
            "score": 99.57145860460069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ ++ i ) {",
            "score": 99.56828227796052,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.820556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.758623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights.length ) {",
            "score": 99.64535522460938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.62952769886364,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1, n = weights.length ; i < n ; i ++ ) {",
            "score": 99.60958862304688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 , n = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=0; i ++ ) {",
            "score": 99.57362670898438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ] ; i < weights.length ; i ++ ) {",
            "score": 99.56663876488095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < max ; i ++ ) {",
            "score": 99.55601501464844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.81940569196429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = weights [ i ] - mean ;",
            "score": 99.75377061631944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i >=0; i ++ ) {",
            "score": 99.64464314778645,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : values.length ; i < begin + length ; i ++ ) {",
            "score": 99.62926136363636,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n + length ; i ++ ) {",
            "score": 99.6093037923177,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length +1; i < weights.length ; i ++ ) {",
            "score": 99.59995339133523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights [ length -0] ; i ++ ) {",
            "score": 99.57360258556548,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length - 0 ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < values.length ; i ++ ) {",
            "score": 99.57098388671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0&& i < weights.length ; i ++ ) {",
            "score": 99.56593831380208,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i < weights.length ; i ++ ) {",
            "score": 99.55587158203124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.81776165140086,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.753154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null && weights.length >0; i ++ ) {",
            "score": 99.6436055501302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null && weights . length > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length1; i < begin + length ; i ++ ) {",
            "score": 99.62855747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.60890706380208,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < weights.length ; i ++ ) {",
            "score": 99.569921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < false ; i ++ ) {",
            "score": 99.56592559814453,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < false ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ ) { {",
            "score": 99.5553840188419,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ] ;",
            "score": 99.81563895089286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64292399088542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + begin ; i < begin + length ; i ++ ) {",
            "score": 99.6280850497159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i < n ; i ++ ) {",
            "score": 99.60779918323864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < weights.length ; i ++ ) {",
            "score": 99.56999376085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < weights.length ; i ++ ) {",
            "score": 99.56999376085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < weights.length ; i ++ ) {",
            "score": 99.56999376085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < weights.length ; i ++ ) {",
            "score": 99.56999376085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < weights.length ; i ++ ) {",
            "score": 99.56999376085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= start + length ; i ++ ) {",
            "score": 99.5495361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.8150047019676,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum = values [ i ] ;",
            "score": 99.75184044471153,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i += weights [ i ] ) {",
            "score": 99.64073689778645,
            "correctness": "timeout",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i += weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean.length ; i ++ ) {",
            "score": 99.627685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -0) -1; i >=0; i -- ) {",
            "score": 99.6077168782552,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 0 ) - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} for( int i = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.56970796130952,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) {",
            "score": 99.56308322482639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { {",
            "score": 99.54523026315789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] << dev ;",
            "score": 99.81317349137932,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] << dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.750302734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < weights ; i ++ ) {",
            "score": 99.64048700747283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights , i =0; i < begin ; i ++ ) {",
            "score": 99.6276522549716,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights , i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length -1; i <= n ; i ++ ) {",
            "score": 99.60768636067708,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length - 1 ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) {",
            "score": 99.56256103515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.81300511853448,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.74825345552884,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.1) {",
            "score": 99.6398213704427,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin1; i < weights.length ; i ++ ) {",
            "score": 99.5611572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1+ weights.length ; i ++ ) {",
            "score": 99.56016235351562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= start + length ; i ++ ) {",
            "score": 99.54290161132812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.81289567618535,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.74808304398148,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.63889567057292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < begin ; i ++ ) {",
            "score": 99.62659912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.60472571331522,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.59671020507812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ ; i < weights.length ; i ++ ) {",
            "score": 99.56524103338069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < weights.length ; i ++ ) {",
            "score": 99.55971950954861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( long i =0; i < weights.length ; i ++ ) {",
            "score": 99.54216172960069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.81167497306035,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum2;",
            "score": 99.747763671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum9111962718267217978;",
            "score": 99.747763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum37;",
            "score": 99.747763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum3;",
            "score": 99.747763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum1983;",
            "score": 99.747763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.63758341471355,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin +0+ length ; i < begin + length ; i ++ ) {",
            "score": 99.62461159446023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < max( weights , start , length ) ; i ++ ) {",
            "score": 99.60209324048913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ( weights , start , length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "clear( ) ; for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.5939608487216,
            "correctness": "wrong",
            "tokenized_patch": "clear ( ) ; for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start +0; i < weights.length ; i ++ ) {",
            "score": 99.54125366210937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.81068638392857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.74753146701389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin : begin + length ; i ++ ) {",
            "score": 99.6241122159091,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin : begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <= weights.length ; i ++ ) {",
            "score": 99.60164184570313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0; for( int i =1; i < weights ; i ++ ) {",
            "score": 99.56401134672619,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 ; for ( int i = 1 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts -= weights [ i ] ;",
            "score": 99.80989583333333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts -= weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.74486400462963,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( weights == null ) { for( int i =0; i < length ; i ++ ) {",
            "score": 99.63534943953805,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) { for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights = i ; for( int i =0; i < weights ; i ++ ) {",
            "score": 99.56326729910714,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = i ; for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - ; i ++ ) {",
            "score": 99.55812474300987,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ )",
            "score": 99.55675551470588,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] ;",
            "score": 99.8086328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.74195240162037,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <=0; i ++ ) {",
            "score": 99.63428795855978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +1; i < begin + length ; i ++ ) {",
            "score": 99.59306640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < length ; i ++ ) {",
            "score": 99.562744140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i1++ ) {",
            "score": 99.55630011307566,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-0; i < weights.length ; i ++ ) {",
            "score": 99.55502319335938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "/ *for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.53486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.80774377893519,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum2=0.0;",
            "score": 99.74154897836539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum9111962718267217978=0.0;",
            "score": 99.74154897836539,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum37=0.0;",
            "score": 99.74154897836539,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum3=0.0;",
            "score": 99.74154897836539,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum1983=0.0;",
            "score": 99.74154897836539,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int list =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.63412873641305,
            "correctness": "wrong",
            "tokenized_patch": "int list = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + i + i -1; i <= weights.length ; i ++ ) {",
            "score": 99.59801228841145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, i =0; i < begin + length ; i ++ ) {",
            "score": 99.59295099431819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <=0; i ++ ) {",
            "score": 99.53143310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double sumWts =0;",
            "score": 99.741103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int0=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.63198454483695,
            "correctness": "uncompilable",
            "tokenized_patch": "int 0 = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i < weights.length ; i ++ ) {",
            "score": 99.59795587713069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length + length ; i < begin + length ; i ++ ) {",
            "score": 99.5929287997159,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < arraycopy( weights , i ) ; i ++ ) {",
            "score": 99.55581519717262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < arraycopy ( weights , i ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = values.length ; i < weights.length ; i ++ ) {",
            "score": 99.552734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.80552936422414,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.74076786747685,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return weights [ i ] ;",
            "score": 99.63162364130434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin [ i ] - mean ; i < begin ; i ++ ) {",
            "score": 99.61996605282738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ i ] - mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=0; i -- ) {",
            "score": 99.55826416015626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0.0; i ++ ) {",
            "score": 99.55188666449652,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0- weights.length ; i ++ ) {",
            "score": 99.55176391601563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <= length ; i ++ ) {",
            "score": 99.52947998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.80537471064815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.59713612432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -0; i < weights.length ; i ++ ) {",
            "score": 99.59085886101974,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.null ; i ++ ) {",
            "score": 99.5579501065341,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ ) {",
            "score": 99.55127716064453,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < min ; i ++ ) {",
            "score": 99.52906036376953,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.74001736111111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i >0; i ++ ) {",
            "score": 99.62855596127717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.0; i ++ ) {",
            "score": 99.55517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.55094604492187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.get( i ) ; i ++ ) {",
            "score": 99.55085100446429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . get ( i ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { ) {",
            "score": 99.52881469726563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.80369285300925,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.738828125,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <2; i ++ ) {",
            "score": 99.62765370244566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <9111962718267217978; i ++ ) {",
            "score": 99.62765370244566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <37; i ++ ) {",
            "score": 99.62765370244566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <3; i ++ ) {",
            "score": 99.62765370244566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <1983; i ++ ) {",
            "score": 99.62765370244566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < begin + begin + length ; i ++ ) {",
            "score": 99.61857466264205,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < begin + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights == null ?0: weights.length ; i ++ ) {",
            "score": 99.59384155273438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ? 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length + length ; i ++ ) {",
            "score": 99.5887939453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { else {",
            "score": 99.54771728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.80218716325432,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ++1] ; i ++ ) {",
            "score": 99.62756878396739,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ++ 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) -1; i >0; i -- ) {",
            "score": 99.59310913085938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) - 1 ; i > 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + - length ; i < begin + length ; i ++ ) {",
            "score": 99.58684430803571,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + - length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; ++ i ) {",
            "score": 99.55162464488636,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < accum2; i ++ ) {",
            "score": 99.54757869944854,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < accum9111962718267217978; i ++ ) {",
            "score": 99.54757869944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum37; i ++ ) {",
            "score": 99.54757869944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum3; i ++ ) {",
            "score": 99.54757869944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum1983; i ++ ) {",
            "score": 99.54757869944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start ; i ++ ) {",
            "score": 99.52838134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.80205829326923,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { accum2+= weights [ i ] ;",
            "score": 99.7381122295673,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { accum9111962718267217978+= weights [ i ] ;",
            "score": 99.7381122295673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { accum37+= weights [ i ] ;",
            "score": 99.7381122295673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { accum3+= weights [ i ] ;",
            "score": 99.7381122295673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { accum1983+= weights [ i ] ;",
            "score": 99.7381122295673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0.0; for( int i =0; i < weights ; i ++ ) {",
            "score": 99.6275050951087,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 . 0 ; for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length + begin + length ; i ++ ) {",
            "score": 99.6172207919034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =( weights.length - start ) -1; i >=0; i -- ) {",
            "score": 99.59307861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - start ) - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights = length ; for( int i =0; i < weights ; i ++ ) {",
            "score": 99.54986281622024,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = length ; for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) { }",
            "score": 99.54816545758929,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < start + length ; i ++ ) {",
            "score": 99.52837524414062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights.[ i ] ;",
            "score": 99.80138288225446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights . [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] ; }",
            "score": 99.73773662860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i >=0; i ++ ) {",
            "score": 99.62734587296195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin + length ; i ++ ) {",
            "score": 99.61688232421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =( weights.length -1) /2; i >=0; i -- ) {",
            "score": 99.59236653645833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =( weights.length -1) /9111962718267217978; i >=0; i -- ) {",
            "score": 99.59236653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) /37; i >=0; i -- ) {",
            "score": 99.59236653645833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =( weights.length -1) /3; i >=0; i -- ) {",
            "score": 99.59236653645833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =( weights.length -1) /1983; i >=0; i -- ) {",
            "score": 99.59236653645833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length -1; i < weights.length ; i ++ ) {",
            "score": 99.54849853515626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "do { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.54337768554687,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; ++ i ) {",
            "score": 99.52574327256944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - accum2;",
            "score": 99.80064174107143,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - accum9111962718267217978;",
            "score": 99.80064174107143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - accum37;",
            "score": 99.80064174107143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - accum3;",
            "score": 99.80064174107143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - accum1983;",
            "score": 99.80064174107143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum = weights [ i ] - mean ;",
            "score": 99.73609302662037,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum = weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length - length ; i < begin + length ; i ++ ) {",
            "score": 99.61607776988636,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin + length - length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start , n = weights.length -1; i >=0; i -- ) {",
            "score": 99.59208170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + mean ; i ++ ) {",
            "score": 99.57735188802083,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; ++ i ) {",
            "score": 99.54828435724431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ )",
            "score": 99.54026884191177,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.52501156455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.73422128182871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} } } else { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.62532905910327,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } else { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin + length + length ; i ++ ) {",
            "score": 99.61542302911931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { { else {",
            "score": 99.57698567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i <= weights.length ; i ++ ) {",
            "score": 99.546630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - max ; i ++ ) {",
            "score": 99.54406127929687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - length ; i ++ ) {",
            "score": 99.53879123263889,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < start + weights.length ; i ++ ) {",
            "score": 99.52376708984374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.80002267020089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.73420319733796,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum2; i < begin + length ; i ++ ) {",
            "score": 99.57626488095238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum9111962718267217978; i < begin + length ; i ++ ) {",
            "score": 99.57626488095238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum37; i < begin + length ; i ++ ) {",
            "score": 99.57626488095238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum3; i < begin + length ; i ++ ) {",
            "score": 99.57626488095238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum1983; i < begin + length ; i ++ ) {",
            "score": 99.57626488095238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /0; i < weights.length ; i ++ ) {",
            "score": 99.54608709161931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0; i -- ) {",
            "score": 99.54306030273438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length /1; i ++ ) {",
            "score": 99.53821411132813,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i < weights.length -1; i ++ ) {",
            "score": 99.52160034179687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - sumWts ;",
            "score": 99.79982152478448,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - sum CaMeL Wts ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.7337176983173,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ++ ] ; i ++ ) {",
            "score": 99.62248091264205,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ++ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : evaluate( values , begin , length ) ) {",
            "score": 99.6125155362216,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : evaluate ( values , begin , length ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +1; i < begin + length ; i ++ ) { {",
            "score": 99.57609049479167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 1 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i i ++ ) {",
            "score": 99.54465203536184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = null ; i < weights.length ; i ++ ) {",
            "score": 99.54277886284723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = null ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { {",
            "score": 99.53802811472039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max ; i < weights.length ; i ++ ) {",
            "score": 99.52152506510417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts >0) {",
            "score": 99.73237666377315,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin ; i ++ ) {",
            "score": 99.6112060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.58863321940105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var + length ; i ++ ) {",
            "score": 99.57526991102431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < var + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < sumWts ; i ++ )",
            "score": 99.53785615808823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum CaMeL Wts ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <0; i ++ ) {",
            "score": 99.51992458767361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] *dev ;",
            "score": 99.73151765046296,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin + length [ i ] ; i ++ ) {",
            "score": 99.61102585565476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int n = weights.length ; for( int i =0; i < n ; i ++ ) {",
            "score": 99.587890625,
            "correctness": "wrong",
            "tokenized_patch": "final int n = weights . length ; for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "/ **for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.54264322916667,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i ] < weights.length ; i ++ ) {",
            "score": 99.53927451685855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i ] < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i +0] ;",
            "score": 99.79690867456897,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + 0 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts +=0.0;",
            "score": 99.73107458043981,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( weights instanceof for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.61756963315217,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( weights instanceof for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double weights [ ] ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.58706266983695,
            "correctness": "uncompilable",
            "tokenized_patch": "double weights [ ] ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / sumWts ; i ++ ) {",
            "score": 99.57306463068181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i <0; i ++ ) {",
            "score": 99.51660834418402,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] ;",
            "score": 99.7963671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + i + i + i ; i <= weights.length ; i ++ ) {",
            "score": 99.58692423502605,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i + i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < begin + length ; i ++ ) {",
            "score": 99.57236842105263,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length -0) ; i ++ ) {",
            "score": 99.54233620383523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - 0 ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ] ++ ) {",
            "score": 99.53620348478618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start ; i ++ ) {",
            "score": 99.51473236083984,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.79633620689656,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - begin ;",
            "score": 99.73026077835648,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - begin ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int n = weights.length ; for( int i =0; i <0; i ++ ) {",
            "score": 99.6147991677989,
            "correctness": "wrong",
            "tokenized_patch": "int n = weights . length ; for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "assert weights != null ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.58583135190217,
            "correctness": "wrong",
            "tokenized_patch": "assert weights != null ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin + length + length ; i ++ ) {",
            "score": 99.57161865234374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights [ i ] ; i < weights.length ; i ++ ) {",
            "score": 99.5359119233631,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights [ i ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < dev ; i ++ ) {",
            "score": 99.53541564941406,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.79629629629629,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum += weights [ i ] *dev ;",
            "score": 99.73017939814815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights [ i ] : weights ) { }",
            "score": 99.6143108865489,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights [ i ] : weights ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i <= weights.length ; i ++ ) {",
            "score": 99.57988947088069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >= weights.length ; i ++ ) {",
            "score": 99.54164817116477,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - i ; i ++ ) {",
            "score": 99.535791015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin +1; i ++ ) {",
            "score": 99.53541395399306,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < weights ; i ++ ) {",
            "score": 99.50981309678819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i + i ] ;",
            "score": 99.79586476293103,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double dev = values [ i ] ;",
            "score": 99.72960486778847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double dev = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / weights.length ; i ++ ) {",
            "score": 99.61362526633523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length + length ; i < begin + begin ; i ++ ) {",
            "score": 99.6090975674716,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length1; i < weights.length ; i ++ ) {",
            "score": 99.5411312705592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] ; i ++ ) {",
            "score": 99.53448127297794,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <1; i ++ ) {",
            "score": 99.61085045855978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin [ i ] + mean ; i < begin ; i ++ ) {",
            "score": 99.60821242559524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ i ] + mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i < n ; i ++ ) { {",
            "score": 99.57861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i < n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.57014604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ) ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.53971354166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} ) ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-1; i < weights.length ; i ++ ) {",
            "score": 99.5338623046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < begin ; i ++ ) {",
            "score": 99.5333480834961,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0.0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.79403791756465,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7278464988426,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ )",
            "score": 99.53274739583334,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <= start + length ; i ++ ) {",
            "score": 99.50924682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i - i ] ;",
            "score": 99.79316237877156,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum2= weights [ i ] ;",
            "score": 99.72783745659723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum9111962718267217978= weights [ i ] ;",
            "score": 99.72783745659723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum37= weights [ i ] ;",
            "score": 99.72783745659723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum3= weights [ i ] ;",
            "score": 99.72783745659723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum1983= weights [ i ] ;",
            "score": 99.72783745659723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ; } } }",
            "score": 99.60886548913044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n && weights [ i ] >0; i ++ ) {",
            "score": 99.57804008152173,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n && weights [ i ] > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + i ; i < weights.length ; i ++ ) {",
            "score": 99.5677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i == weights.length ; i ++ ) {",
            "score": 99.53865189985795,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i == weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { {",
            "score": 99.53250925164474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < max ; i ++ ) {",
            "score": 99.52778930664063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.79302509014423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum2+= weights [ i ] ; }",
            "score": 99.72775607638889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum9111962718267217978+= weights [ i ] ; }",
            "score": 99.72775607638889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum37+= weights [ i ] ; }",
            "score": 99.72775607638889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum3+= weights [ i ] ; }",
            "score": 99.72775607638889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum1983+= weights [ i ] ; }",
            "score": 99.72775607638889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /2; i ++ ) {",
            "score": 99.57369384765624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length /9111962718267217978; i ++ ) {",
            "score": 99.57369384765624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /37; i ++ ) {",
            "score": 99.57369384765624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length /3; i ++ ) {",
            "score": 99.57369384765624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length /1983; i ++ ) {",
            "score": 99.57369384765624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin - length ; i < begin + length ; i ++ ) {",
            "score": 99.532373046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i >=0; i -- ) {",
            "score": 99.50914171006944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.79301234654018,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { var = values [ i ] ;",
            "score": 99.72762357271634,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <= n ; i ++ ) {",
            "score": 99.60629670516305,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length : weights.length ; i ++ ) {",
            "score": 99.60480291193181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i + i ; i < weights.length ; i ++ ) {",
            "score": 99.57077858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + sumWts ; i ++ ) {",
            "score": 99.56720525568181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length +0; i < weights.length ; i ++ ) {",
            "score": 99.53688742897727,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i == weights.length ; i ++ ) {",
            "score": 99.53190782335069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights [0] ; i ++ ) {",
            "score": 99.50765830592105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights [ 0 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { sumWts += weights [ i ] ;",
            "score": 99.79258897569444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.72740342881944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : begin ; i < weights.length ; i ++ ) {",
            "score": 99.6046142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + weights.length ; i ++ ) {",
            "score": 99.57073364257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.53399103338069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) {",
            "score": 99.53150939941406,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "final for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.52696468955592,
            "correctness": "uncompilable",
            "tokenized_patch": "final for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.50647583007813,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.79200157752403,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i >0) {",
            "score": 99.727373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + begin + length ; i < begin ; i ++ ) {",
            "score": 99.6045809659091,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + begin + length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int length = weights.length ; for( int i =0; i < length ; i ++ ) {",
            "score": 99.60279381793478,
            "correctness": "uncompilable",
            "tokenized_patch": "int length = weights . length ; for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -0; i < weights.length ; i ++ ) {",
            "score": 99.56536865234375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i <= length ; i ++ ) {",
            "score": 99.53179931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i += begin ; i < weights.length ; i ++ ) {",
            "score": 99.53135172526042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.weights.length ; i ++ ) {",
            "score": 99.52642822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) {",
            "score": 99.50611877441406,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) sumWts += weights [ i ] ;",
            "score": 99.72690054086539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - min ; i ++ ) {",
            "score": 99.60264892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n =0; for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.56935716711956,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = 0 ; for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < begin + length ; i ++ ) {",
            "score": 99.56446533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=1; i ++ ) {",
            "score": 99.53148803710937,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -- ; i < weights.length ; i ++ ) {",
            "score": 99.53033088235294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i(0=0; i < weights.length ; i ++ ) {",
            "score": 99.5247314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ( 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start =0; i < weights.length ; i ++ ) {",
            "score": 99.50523681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.79160853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts +=0.0;",
            "score": 99.72664388020833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts += 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights = weights ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.60047978940217,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = weights ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; i -- ) {",
            "score": 99.53022904829545,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ begin ; i < weights.length ; i ++ ) {",
            "score": 99.52557983398438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < l ; i ++ ) {",
            "score": 99.5245132446289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < l ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < start ; i ++ ) {",
            "score": 99.50266520182292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts >1) {",
            "score": 99.72643590856481,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + length ; i < begin + begin ; i ++ ) {",
            "score": 99.60199529474431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0.1; for( int i =0; i < weights ; i ++ ) {",
            "score": 99.6002887228261,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 . 1 ; for ( int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < start ; i ++ ) {",
            "score": 99.56752080502717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <=0; i ++ ) {",
            "score": 99.52938842773438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.equals( weights ) ; i ++ ) {",
            "score": 99.5234607514881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . equals ( weights ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= start + length ; i -- ) {",
            "score": 99.500341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.7261375144676,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin ; i ++ ) {",
            "score": 99.6015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >0; i ++ ) {",
            "score": 99.59954833984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length +1; i < weights.length ; i ++ ) {",
            "score": 99.56749378551136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + dev ; i ++ ) {",
            "score": 99.56227416992188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i =0; i < weights.isEmpty( ) ; i ++ ) {",
            "score": 99.52903053977273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . is CaMeL Empty ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ; i < weights.length ; i ++ ) {",
            "score": 99.49945389597039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - mean ; }",
            "score": 99.78976004464286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.7253125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0: weights.length ; i < begin ; i ++ ) {",
            "score": 99.60086059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < min ; i ++ ) {",
            "score": 99.59817637567934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i < weights.length ; i ++ ) { {",
            "score": 99.56584366508152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ length -1] ; i -- ) {",
            "score": 99.52866908482143,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length - 1 ] ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -=0; i < weights.length ; i ++ ) {",
            "score": 99.52528889973958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1- weights.length ; i ++ ) {",
            "score": 99.52217407226563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] / mean ;",
            "score": 99.78912984913794,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] / mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev = weights [ i ] ;",
            "score": 99.7252197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin - length ; i ++ ) {",
            "score": 99.60070122612848,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + i -1; i < weights.length ; i ++ ) {",
            "score": 99.56565163352273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /1; i < weights.length ; i ++ ) {",
            "score": 99.52765447443181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = - ; i < weights.length ; i ++ ) {",
            "score": 99.52505154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.0; i < weights.length ; i ++ ) {",
            "score": 99.5208740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length -1; i ++ ) {",
            "score": 99.49758572048611,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.78842268318965,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - dev ;",
            "score": 99.72515190972223,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + length -1; i >= start + length ; i -- ) {",
            "score": 99.56397594105114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i >= start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +1; i < begin + length ; i ++ ) {",
            "score": 99.55767267400569,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=2; i ++ ) {",
            "score": 99.52656860351563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=9111962718267217978; i ++ ) {",
            "score": 99.52656860351563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=37; i ++ ) {",
            "score": 99.52656860351563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=3; i ++ ) {",
            "score": 99.52656860351563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1983; i ++ ) {",
            "score": 99.52656860351563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0: weights.length ; i <0; i ++ ) {",
            "score": 99.52470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;1++ ) {",
            "score": 99.52065022786458,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < start ; i ++ ) {",
            "score": 99.49509006076389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; else {",
            "score": 99.78743770204741,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts ==0) {",
            "score": 99.72498010706019,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin + length ; i < begin + begin ; i ++ ) {",
            "score": 99.59974254261364,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + length ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <= n ; i ++ ) {",
            "score": 99.56328790838069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0.begin ; i < weights.length ; i ++ ) {",
            "score": 99.5240478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i <0; i ++ ) {",
            "score": 99.51907348632812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i + n ] ;",
            "score": 99.78673053609914,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + n ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) dev = values [ i ] - mean ;",
            "score": 99.72310697115384,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) dev = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < < n ; i ++ ) {",
            "score": 99.56150220788044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ ) {",
            "score": 99.55733913845486,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - i ; i <= weights.length ; i ++ ) {",
            "score": 99.52655584161931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin / sumWts ; i ++ ) {",
            "score": 99.52296752929688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length +0; i ++ ) {",
            "score": 99.51882934570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i >= start + length ; i ++ ) {",
            "score": 99.4940185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i -1] ;",
            "score": 99.78609913793103,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.720927734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ; } } }",
            "score": 99.59061863111413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; ++ i ) {",
            "score": 99.52455444335938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0/ weights.length ; i ++ ) {",
            "score": 99.51703491210938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 / weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] ;",
            "score": 99.7853125,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev =0.0;",
            "score": 99.719267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max =0; i < weights.length ; i ++ ) {",
            "score": 99.58971058238636,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , max = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i += weights.length ; i < begin + length ; i ++ ) {",
            "score": 99.55504760742187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += weights . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < -1; i ++ ) {",
            "score": 99.52446432674633,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < n ; i ++ ) {",
            "score": 99.5145751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i < weights.length ; i ++ ) {",
            "score": 99.48976536800987,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { accum2+= weights [ i ] *dev ;",
            "score": 99.7187969501202,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { accum $NUMBER$ += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { accum9111962718267217978+= weights [ i ] *dev ;",
            "score": 99.7187969501202,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { accum $NUMBER$ += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { accum37+= weights [ i ] *dev ;",
            "score": 99.7187969501202,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { accum $NUMBER$ += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { accum3+= weights [ i ] *dev ;",
            "score": 99.7187969501202,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { accum $NUMBER$ += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { accum1983+= weights [ i ] *dev ;",
            "score": 99.7187969501202,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { accum $NUMBER$ += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n =0; i < weights.length ; i ++ ) {",
            "score": 99.58897816051136,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, n = start + length ; i < n ; i ++ ) {",
            "score": 99.55760609019886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = start + length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == length ; i ++ ) {",
            "score": 99.52354600694444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) {",
            "score": 99.521484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ; }",
            "score": 99.51420665922619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.78504289899554,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.71835561899039,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int var =0; for( int i =0; i < begin ; i ++ ) {",
            "score": 99.59581938244048,
            "correctness": "uncompilable",
            "tokenized_patch": "int var = 0 ; for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == null ?1: weights [ i ] ) {",
            "score": 99.58795720880681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ? 1 : weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n = weights.length ; for( int i =0; i <= n ; i ++ ) {",
            "score": 99.55684230638587,
            "correctness": "wrong",
            "tokenized_patch": "int n = weights . length ; for ( int i = 0 ; i <= n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >= -1; i ++ ) {",
            "score": 99.5234607514881,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights && i < weights ; i ++ ) {",
            "score": 99.48903198242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights && i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.78465113146552,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.71829927884616,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.71829927884616,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.71829927884616,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.71829927884616,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.71829927884616,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == null ?0: weights [ i ] ) {",
            "score": 99.5853271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ? 0 : weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ; } else {",
            "score": 99.55458135190217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= length ; i ++ ) {",
            "score": 99.52294311523437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i +=0; i < begin + length ; i ++ ) {",
            "score": 99.52048746744792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( char i =0; i < weights.length ; i ++ ) {",
            "score": 99.48629421657986,
            "correctness": "wrong",
            "tokenized_patch": "for ( char i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.783447265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin - length ; i ++ ) {",
            "score": 99.59510387073864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? n ++ : weights [ i ] ) {",
            "score": 99.58366593070652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? n ++ : weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { { break ; }",
            "score": 99.55305619673295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length -1) ; i ++ ) {",
            "score": 99.55256791548295,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - 1 ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ;",
            "score": 99.52043714021382,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i < i ; i ++ ) {",
            "score": 99.50720825195313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7831398292824,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( i < weights.length ) { sumWts += weights [ i ] *( dev *dev ) ;",
            "score": 99.717763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( i < weights . length ) { sum CaMeL Wts += weights [ i ] * ( dev * dev ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <1; i ++ ) {",
            "score": 99.5946044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i <= weights.length ; i ++ ) { {",
            "score": 99.55166227921195,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.52065894717262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i ++ ) {",
            "score": 99.50631713867188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i +1; i < weights.length ; i ++ ) {",
            "score": 99.485546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += values [ i ] ;",
            "score": 99.78258825231481,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum = weights [ i ] ;",
            "score": 99.71689077524039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < begin + mean ; i ++ ) {",
            "score": 99.59409401633523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < begin + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ? weights [ i ] : weights ) ;",
            "score": 99.57992951766305,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ? weights [ i ] : weights ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + weights.length ; i ++ ) {",
            "score": 99.55156860351562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < isBiasCorrected ; i ++ ) {",
            "score": 99.52001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < is CaMeL Bias CaMeL Corrected ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ; }",
            "score": 99.5187755766369,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.0; i ++ ) {",
            "score": 99.50602213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length +1; i ++ ) {",
            "score": 99.48521728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.78207284432871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length ==1) {",
            "score": 99.71580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length == 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.57880249023438,
            "correctness": "uncompilable",
            "tokenized_patch": "} } for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length + length ; i ++ ) { {",
            "score": 99.551025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ i ] ; i ++ ) {",
            "score": 99.50479929070724,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i ++ )",
            "score": 99.48263389185855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } sumWts += weights [ i ] ;",
            "score": 99.78191266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { dev = weights [ i ] ;",
            "score": 99.71326622596153,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { dev = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < values.length ; i ++ ) {",
            "score": 99.59199662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.551025390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start , n = start + length ; i < n ; i ++ ) {",
            "score": 99.54969371448864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = start + length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- = begin ; i < weights.length ; i ++ ) {",
            "score": 99.51894017269737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length length1; i < weights.length ; i ++ ) {",
            "score": 99.51819957386364,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length length 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - start ; i ++ ) {",
            "score": 99.50476684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;0; i < weights.length ; i ++ ) {",
            "score": 99.48003540039062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length + length ; i < weights.length ; i ++ ) {",
            "score": 99.71148681640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < mean ; i ++ ) {",
            "score": 99.59065551757813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i < weights.length ; i ++ ) {",
            "score": 99.57732599431819,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; i ++ )",
            "score": 99.51689220610119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.78105107060185,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.711025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : values.length ; i ++ ) {",
            "score": 99.58980712890624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights ; }",
            "score": 99.57697860054348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + mean ; i ++ ) {",
            "score": 99.5493896484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + i ; i <= weights.length ; i ++ ) {",
            "score": 99.54856567382812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; i -- ) {",
            "score": 99.51679021661931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0- mean ; i < begin + length ; i ++ ) {",
            "score": 99.51660766601563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < matches.length ; i ++ ) {",
            "score": 99.50417073567708,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < matches . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double sumWts =0;",
            "score": 99.710439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin + begin ; i ++ ) {",
            "score": 99.58961070667614,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights [ i ] : weights ) {",
            "score": 99.576904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights [ i ] : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + i ; i < begin + length ; i ++ ) {",
            "score": 99.54878540039063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <0; i ++ ) {",
            "score": 99.54665305397727,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i != weights.length ; i ++ ) {",
            "score": 99.51653497869319,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i != weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length && i < weights.length ; i ++ ) {",
            "score": 99.50391235351563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i <= length ; i ++ ) {",
            "score": 99.47495727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.780029296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = weights [ i ] ;",
            "score": 99.71001953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin + length ; i ++ ) {",
            "score": 99.58720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length :0; i < weights.length ; i ++ ) {",
            "score": 99.5481289950284,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length : 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start + length ; i < weights.length ; i ++ ) {",
            "score": 99.5457763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < name.length ; i ++ ) {",
            "score": 99.47451443142361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < name . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.7798321063702,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum2=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70940692608173,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum9111962718267217978=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70940692608173,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum37=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70940692608173,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum3=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70940692608173,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum1983=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70940692608173,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i < begin + length ; i ++ ) {",
            "score": 99.58619995117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length -1; i ++ ) {",
            "score": 99.5744384765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length - false ; i ++ ) {",
            "score": 99.50256958007813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - false ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77969473379629,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum =0.0;",
            "score": 99.70912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + begin + begin ; i ++ ) {",
            "score": 99.58551580255681,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights ) { }",
            "score": 99.57311480978261,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { if( ) {",
            "score": 99.5413234544837,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < isBiasCorrected ; i ++ )",
            "score": 99.5137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < is CaMeL Bias CaMeL Corrected ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] / dev ;",
            "score": 99.77965887661638,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] / dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) var = weights [ i ] - mean ;",
            "score": 99.7089092548077,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) var = weights [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var ; i ++ ) {",
            "score": 99.51322937011719,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < var ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i( i =0; i < weights.length ; i ++ ) {",
            "score": 99.50057983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <=0; i ++ ) {",
            "score": 99.47261555989583,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( double ) weights [ i ] ;",
            "score": 99.77950613839286,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( double ) weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin : begin + length ; i ++ ) {",
            "score": 99.58319091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.5455322265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 * weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights ) {",
            "score": 99.5402301290761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != begin + length ; i ++ ) {",
            "score": 99.51322428385417,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i < start.length ; i ++ ) {",
            "score": 99.47247314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.7792547817888,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i >1) {",
            "score": 99.7070703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights instanceof for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.5721768465909,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights instanceof for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.NaN ; i ++ ) {",
            "score": 99.54473266601562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . Na CaMeL N ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i < n ; i ++ )",
            "score": 99.5398586107337,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =1; i < weights.length ; i ++ ) {",
            "score": 99.49839154411765,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length -1; i ++ ) {",
            "score": 99.47220865885417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ++ ] ;",
            "score": 99.77879987444196,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ++ ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( length >1) {",
            "score": 99.7064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < max ; i ++ ) {",
            "score": 99.58198852539063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { for( ; ) {",
            "score": 99.57185164741848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { for ( ; ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { { {",
            "score": 99.510595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < < weights.length ; i ++ ) {",
            "score": 99.49834241365132,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < -1; i ++ ) {",
            "score": 99.47181611902573,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77871817129629,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.706435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "long sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin [ i ] ; i < weights.length ; i ++ ) {",
            "score": 99.58142671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ i ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -0; i < begin + length ; i ++ ) {",
            "score": 99.54383544921875,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin - 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, max = weights.length ; i < max ; i ++ ) {",
            "score": 99.5382412997159,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , max = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights != length ; i ++ ) {",
            "score": 99.51048448350694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- begin ; i < weights.length ; i ++ ) {",
            "score": 99.51011962890625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = length +1; i < weights.length ; i ++ ) {",
            "score": 99.49658203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77773100754311,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { {",
            "score": 99.53974841889881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) { {",
            "score": 99.53753952752976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / / }",
            "score": 99.49637276785714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length +1; i <= length ; i ++ ) {",
            "score": 99.47056884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + 1 ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *accum ;",
            "score": 99.77625774515086,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * accum ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + begin + begin ; i < weights.length ; i ++ ) {",
            "score": 99.53938432173295,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { ) {",
            "score": 99.49605712890624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.7055859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin :0; i < begin ; i ++ ) {",
            "score": 99.57998996310764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < begin + length ; i ++ ) {",
            "score": 99.53925238715277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < begin + length ; i ++ ) {",
            "score": 99.53925238715277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < begin + length ; i ++ ) {",
            "score": 99.53925238715277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i < begin + length ; i ++ ) {",
            "score": 99.53925238715277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i < begin + length ; i ++ ) {",
            "score": 99.53925238715277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( double i =0; i < begin + length ; i ++ ) {",
            "score": 99.50846354166667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; i ++ )",
            "score": 99.50709170386905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start *length ; i < weights.length ; i ++ ) {",
            "score": 99.46876831054688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start * length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.77605329241071,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.77605329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.77605329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.77605329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.77605329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.evaluate( values , begin , length ) ; i ++ ) {",
            "score": 99.70541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . evaluate ( values , begin , length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } } } else {",
            "score": 99.56844429347827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin +0; i < weights.length ; i ++ ) {",
            "score": 99.53912908380681,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, l = weights.length ; i < l ; i ++ ) {",
            "score": 99.5365323153409,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , l = weights . length ; i < l ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ;",
            "score": 99.5080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.50687081473214,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ++0; i < weights.length ; i ++ ) {",
            "score": 99.46860865542763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ++ 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77502893518519,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { { dev = values [ i ] ;",
            "score": 99.70530348557692,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { { dev = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin *length ; i ++ ) {",
            "score": 99.57834201388889,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin * length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <= n ; i ++ ) { {",
            "score": 99.53544284986413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + min ; i ++ ) {",
            "score": 99.50752088758681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i <0; i ++ ) {",
            "score": 99.492236328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= length -1; i ++ ) {",
            "score": 99.46741333007813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.774951171875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights ) ;",
            "score": 99.56646173650569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i -1; i < weights.length ; i ++ ) { {",
            "score": 99.53457243546195,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + sumWts ; i ++ ) {",
            "score": 99.5072998046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < weights.length -1; i ++ ) {",
            "score": 99.4919677734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length -1; i >=0; i -- ) {",
            "score": 99.46629638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - dev ;",
            "score": 99.77487521701389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < evaluate( values , weights , begin , length ) ; i ++ ) {",
            "score": 99.70494140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < evaluate ( values , weights , begin , length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + [ i ] ; i ++ ) {",
            "score": 99.57703247070313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i + i ; i < weights.length ; i ++ ) { {",
            "score": 99.53450874660327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ mean ; i < weights.length ; i ++ ) {",
            "score": 99.50653076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights -- ; }",
            "score": 99.50548206676136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights -- ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <1; i ++ ) {",
            "score": 99.49149169921876,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < weights ; i ++ ) {",
            "score": 99.46531846788194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum2; }",
            "score": 99.77422043372844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum9111962718267217978; }",
            "score": 99.77422043372844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum37; }",
            "score": 99.77422043372844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum3; }",
            "score": 99.77422043372844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - accum1983; }",
            "score": 99.77422043372844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) var = values [ i ] - mean ;",
            "score": 99.7035381610577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) var = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.56340997869319,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights ; i < weights.length ; i ++ ) {",
            "score": 99.53636474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length +1; i < weights.length ; i ++ ) { {",
            "score": 99.5337550951087,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - begin ; i < weights.length ; i ++ ) {",
            "score": 99.50643920898438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "/ ***for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.50526012073864,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * * * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.= weights.length ; i ++ ) {",
            "score": 99.4904552641369,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . = weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length( ) ; i ++ ) {",
            "score": 99.4650146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77377424568965,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts +=0;",
            "score": 99.7027734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts += 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; i ++ )",
            "score": 99.53276134672619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < sumWts ; i ++ ) {",
            "score": 99.50641547309027,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; n ++ ) {",
            "score": 99.49030219184027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; n ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i -1; i < weights.length ; i ++ ) {",
            "score": 99.4646240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - accum2;",
            "score": 99.77369035993304,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - accum9111962718267217978;",
            "score": 99.77369035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - accum37;",
            "score": 99.77369035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - accum3;",
            "score": 99.77369035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - accum1983;",
            "score": 99.77369035993304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >0) {",
            "score": 99.701884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + length ; i < begin ; i ++ ) {",
            "score": 99.57485961914062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = min ; i < weights.length ; i ++ ) {",
            "score": 99.56232367621527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = min ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i >=0; i ++ ) {",
            "score": 99.5050048828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < random.length ; i ++ ) {",
            "score": 99.48993598090277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < random . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <=0; i ++ ) {",
            "score": 99.46327718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.7734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "final double sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.70106858473558,
            "correctness": "uncompilable",
            "tokenized_patch": "final double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin : weights.length ; i ++ ) {",
            "score": 99.5746737393466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length + mean ; i < weights.length ; i ++ ) {",
            "score": 99.53504527698864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length + mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i <= n ; i ++ ) {",
            "score": 99.5313720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.50581868489583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=1; i -- ) {",
            "score": 99.50479736328126,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length2; i < weights.length ; i ++ ) {",
            "score": 99.48986235119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.48986235119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length37; i < weights.length ; i ++ ) {",
            "score": 99.48986235119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length3; i < weights.length ; i ++ ) {",
            "score": 99.48986235119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length1983; i < weights.length ; i ++ ) {",
            "score": 99.48986235119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0= start ; i < weights.length ; i ++ ) {",
            "score": 99.46326293945313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.77290562220982,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { double dev = values [ i ] - mean ;",
            "score": 99.70084322415866,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { double dev = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i ++ ; } }",
            "score": 99.55923063858695,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i ++ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i =0; i < weights.length ; i ++ ) {",
            "score": 99.53399979440789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.null.length ; i ++ ) {",
            "score": 99.50345458984376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . null . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < true ; i ++ ) {",
            "score": 99.48971557617188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < true ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.46306762695312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77283203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "Object sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.69908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "Object sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin >0; i ++ ) {",
            "score": 99.57196044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights [ i ] ; i ++ ) {",
            "score": 99.53084309895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < *weights.length ; i ++ ) {",
            "score": 99.50239000822368,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < * weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start + length ; i ++ ) { {",
            "score": 99.4630062705592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += ! weights [ i ] ;",
            "score": 99.77276611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += ! weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts +=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.69849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts += 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights !=0: weights.length ; i ++ ) {",
            "score": 99.5718994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ++ ] ; i ++ ) { {",
            "score": 99.55867866847827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ++ ] ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + i ; i < begin + length ; i ++ ) { {",
            "score": 99.53278459821429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i -1; i <= weights.length ; i ++ ) {",
            "score": 99.53049538352273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - begin ; i < weights.length ; i ++ ) {",
            "score": 99.5043881064967,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + length ; i < length ; i ++ ) { {",
            "score": 99.4630062705592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i + i ] ;",
            "score": 99.77223363415948,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i + i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < i ; i ++ ) {",
            "score": 99.57145385742187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) ;",
            "score": 99.55765109592014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( reverse ) {",
            "score": 99.52893597146739,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( reverse ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ )",
            "score": 99.50420735677083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0, weights.length ; i ++ ) {",
            "score": 99.4855712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 , weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [1] ) {",
            "score": 99.46212158203124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ 1 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ]2;",
            "score": 99.77165004185268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ]9111962718267217978;",
            "score": 99.77165004185268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ]37;",
            "score": 99.77165004185268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ]3;",
            "score": 99.77165004185268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ]1983;",
            "score": 99.77165004185268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.69552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ?0: weights [ i ] ) {",
            "score": 99.55627972146739,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ? 0 : weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.53229314630681,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin * weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( true ) {",
            "score": 99.52859629755434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.trim( ).length ; i ++ ) {",
            "score": 99.50156471946023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . trim ( ) . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { /",
            "score": 99.48548648231908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i >= start + length ; i ++ ) {",
            "score": 99.46187744140624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i >= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77123084435097,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77123084435097,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77123084435097,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77123084435097,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.77123084435097,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =1; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.695087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 1 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : weights.length ) {",
            "score": 99.57095191592262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } else { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.55593039772727,
            "correctness": "uncompilable",
            "tokenized_patch": "} } else { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = values.length ; i < n ; i ++ ) {",
            "score": 99.5268887606534,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = values . length ; i < n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < accum2; i ++ ) { {",
            "score": 99.50335693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i ++ ) { {",
            "score": 99.50335693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i ++ ) { {",
            "score": 99.50335693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i ++ ) { {",
            "score": 99.50335693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i ++ ) { {",
            "score": 99.50335693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0[0] ; i < weights.length ; i ++ ) {",
            "score": 99.48475864955357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 [ 0 ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ )",
            "score": 99.46185623972039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; } }",
            "score": 99.77083613954741,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { accum2+= weights [ i ] ;",
            "score": 99.69493689903847,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { accum9111962718267217978+= weights [ i ] ;",
            "score": 99.69493689903847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { accum37+= weights [ i ] ;",
            "score": 99.69493689903847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { accum3+= weights [ i ] ;",
            "score": 99.69493689903847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { accum1983+= weights [ i ] ;",
            "score": 99.69493689903847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { accum $NUMBER$ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin + length ; i ++ ) { {",
            "score": 99.53192429315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double {",
            "score": 99.52613525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ )",
            "score": 99.50328304893092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ ; i <= weights.length ; i ++ ) {",
            "score": 99.5010986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ] ; i < weights.length ; i ++ ) {",
            "score": 99.48385459498355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length +1; i ++ ) {",
            "score": 99.46038140190973,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i == begin ) {",
            "score": 99.694853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i == begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i ++ ) { {",
            "score": 99.52566964285714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.1; i < weights.length ; i ++ ) {",
            "score": 99.50086669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < length ; i ++ ) {",
            "score": 99.48365614149306,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >= start + length ; i ++ ) {",
            "score": 99.45926242404514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *accum2;",
            "score": 99.76918247767857,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *accum9111962718267217978;",
            "score": 99.76918247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *accum37;",
            "score": 99.76918247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *accum3;",
            "score": 99.76918247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *accum1983;",
            "score": 99.76918247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } if( length >1) {",
            "score": 99.69479604867789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } if ( length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights i ++ ; }",
            "score": 99.55480426290761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights i ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int ++ i =0; i < weights.length ; i ++ ) {",
            "score": 99.53092876233552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < list.length ; i ++ ) {",
            "score": 99.5004549893466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i1; i < weights.length ; i ++ ) {",
            "score": 99.4824154502467,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <=0; i ++ ) {",
            "score": 99.45724148220486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.76909930889423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { { sumWts += weights [ i ] ;",
            "score": 99.69455190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length : weights.length ; i ++ ) {",
            "score": 99.56575150923295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i ] < weights.length ; i ++ ) {",
            "score": 99.48172433035714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i ] < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; ++ i ) {",
            "score": 99.45711059570313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.76898403825432,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts =0;",
            "score": 99.694013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length1; i ++ ) {",
            "score": 99.56534616570724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length + weights.length ; i ++ ) {",
            "score": 99.53083939985795,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { {",
            "score": 99.52283999794408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49788208007813,
            "correctness": "uncompilable",
            "tokenized_patch": "else { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int n =0; n < weights.length ; n ++ ) {",
            "score": 99.45699734157986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int n = 0 ; n < weights . length ; n ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.76870840567129,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / / } } }",
            "score": 99.55349864130434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / / } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length - start ) ; i ++ ) {",
            "score": 99.52159534801136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - start ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i < begin ; i ++ ) {",
            "score": 99.50026448567708,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - length -1; i >=0; i -- ) {",
            "score": 99.49765846946023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Math.weights.length ; i ++ ) {",
            "score": 99.48106689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i -- ) {",
            "score": 99.45665147569444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += [ i ] ;",
            "score": 99.7684326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.69297438401442,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i < begin + length ; i ++ ) {",
            "score": 99.55828857421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) for( int i =0; i < weights.length ; i ++ )",
            "score": 99.5527874490489,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double ) {",
            "score": 99.52105422247024,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =01; i < weights.length ; i ++ ) {",
            "score": 99.50001284950658,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "i =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4975253018466,
            "correctness": "uncompilable",
            "tokenized_patch": "i = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ++ ; i < weights.length ; i ++ ) {",
            "score": 99.48101515997024,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ++ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ )",
            "score": 99.45537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7683574969952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum = values [ i ] ;",
            "score": 99.69288048377403,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin [ i ] ; i ++ ) {",
            "score": 99.55820826480263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >0; i -- ) {",
            "score": 99.520947265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.1; i ++ ) {",
            "score": 99.49657093394886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ; i ++ ) {",
            "score": 99.48064864309211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >= start ; i ++ ) {",
            "score": 99.45525360107422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.76822636045259,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum2= weights [ i ] ;",
            "score": 99.69246732271634,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum9111962718267217978= weights [ i ] ;",
            "score": 99.69246732271634,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum37= weights [ i ] ;",
            "score": 99.69246732271634,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum3= weights [ i ] ;",
            "score": 99.69246732271634,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum1983= weights [ i ] ;",
            "score": 99.69246732271634,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights !=0; i ++ ) {",
            "score": 99.55816650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + i ; i ++ ) {",
            "score": 99.49846055772569,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >= length ; i -- ) {",
            "score": 99.49651489257812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights ; i ++ ) {",
            "score": 99.45466613769531,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights , i ] ;",
            "score": 99.76802119502315,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights , i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts +=0;",
            "score": 99.69220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, i =0; i < weights.length ; i ++ ) {",
            "score": 99.55161354758523,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -0; i < begin + length ; i ++ ) { {",
            "score": 99.5297619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start ; i <= weights.length ; i ++ ) {",
            "score": 99.52044067382812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { {",
            "score": 99.49842026654412,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.4963611421131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - ; ++ i ) {",
            "score": 99.47871479235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start.length ; i ++ ) {",
            "score": 99.45414225260417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts = weights [ i ] - mean ;",
            "score": 99.76734240301724,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts +=0.0;",
            "score": 99.69150015024039,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ; } else {",
            "score": 99.55131199048913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i -- ) {",
            "score": 99.529296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < weights [ i ] ; i ++ ) {",
            "score": 99.51738048735119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) break ;",
            "score": 99.49822034333882,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = false ; i < weights.length ; i ++ ) {",
            "score": 99.4781494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = false ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76714215959821,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += accum2;",
            "score": 99.691396484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += accum9111962718267217978;",
            "score": 99.691396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += accum37;",
            "score": 99.691396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += accum3;",
            "score": 99.691396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += accum1983;",
            "score": 99.691396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length : weights.length ; i ++ ) {",
            "score": 99.557861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < iterator.length ; i ++ ) {",
            "score": 99.55121527777777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int0=0; i < weights.length ; i ++ ) {",
            "score": 99.52867296006944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >0; i ++ ) {",
            "score": 99.49813842773438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.49406352796052,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0[ i ] ; i < weights.length ; i ++ ) {",
            "score": 99.47784133184524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 [ i ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.76606096540179,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { { dev = values [ i ] - mean ;",
            "score": 99.69126539963942,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { { dev = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin.length ; i ++ ) {",
            "score": 99.55738661024306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.52828369140624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + n ; i < weights.length ; i ++ ) {",
            "score": 99.5161865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + n ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ )",
            "score": 99.49680463005515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < - -1; i ++ ) {",
            "score": 99.4935302734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for(( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.45341411389802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.76589439655173,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum = values [ i ] ;",
            "score": 99.69078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : i ; i < weights.length ; i ++ ) {",
            "score": 99.55595092773437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; int < weights.length ; i ++ ) {",
            "score": 99.54911973741319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; int < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *sumWts ; i ++ ) {",
            "score": 99.52800958806819,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { synchronized( this ) {",
            "score": 99.51579483695652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { synchronized ( this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i - length ; i < weights.length ; i ++ ) {",
            "score": 99.49664916992188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i != weights.length ; i ++ ) {",
            "score": 99.4931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i != weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.4771664268092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i = start ; i < weights.length ; i ++ ) {",
            "score": 99.45249430338542,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( short i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts = weights [ i ] ; }",
            "score": 99.76583426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts ) {",
            "score": 99.69052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i ++ ) { continue ; }",
            "score": 99.54694930366848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -0; i < begin + length ; i ++ ) {",
            "score": 99.52784488075658,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum2; i ++ ) {",
            "score": 99.49630126953124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum9111962718267217978; i ++ ) {",
            "score": 99.49630126953124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum37; i ++ ) {",
            "score": 99.49630126953124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum3; i ++ ) {",
            "score": 99.49630126953124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum1983; i ++ ) {",
            "score": 99.49630126953124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < max ; i ++ ) {",
            "score": 99.45231119791667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.765673828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < begin ; i ++ ) {",
            "score": 99.69005816915761,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < min ; i ++ ) {",
            "score": 99.55443115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < max ; i ++ ) {",
            "score": 99.54694158380681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; ++ i ) {",
            "score": 99.51499245383523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin *accum ; i < weights.length ; i ++ ) {",
            "score": 99.49609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length -1; i < weights.length ; i ++ ) {",
            "score": 99.4923428622159,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < out.length ; i ++ ) {",
            "score": 99.47357177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < out . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <= length ; i ++ ) {",
            "score": 99.45215521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7654229525862,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double var = values [ i ] ;",
            "score": 99.6896503155048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1: weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.55426580255681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 : weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = Integer.NaN ; i < weights.length ; i ++ ) {",
            "score": 99.5267001065341,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = Integer . Na CaMeL N ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i ) {",
            "score": 99.514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin ; i ++ ) {",
            "score": 99.49587673611111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=2; i -- ) {",
            "score": 99.491162109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=9111962718267217978; i -- ) {",
            "score": 99.491162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=37; i -- ) {",
            "score": 99.491162109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=3; i -- ) {",
            "score": 99.491162109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1983; i -- ) {",
            "score": 99.491162109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; -- i ) {",
            "score": 99.47211371527777,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; -- i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double dev = values [ i ] ;",
            "score": 99.68954702524039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double dev = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { {",
            "score": 99.52606491815476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0.0; i ++ ) {",
            "score": 99.49567328559027,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < 0 . 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "this.for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49103393554688,
            "correctness": "uncompilable",
            "tokenized_patch": "this . for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.45059204101562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76470736799568,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int accum2=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6891377766927,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum9111962718267217978=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6891377766927,
            "correctness": "wrong",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int accum37=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6891377766927,
            "correctness": "wrong",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int accum3=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6891377766927,
            "correctness": "wrong",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int accum1983=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6891377766927,
            "correctness": "wrong",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length ) ; i < weights.length ; i ++ ) {",
            "score": 99.5259021577381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length -1) ; i ++ ) { {",
            "score": 99.51351265285327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - 1 ) ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = this.weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.49000133167614,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = this . weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + weights.length ; i <0; i ++ ) {",
            "score": 99.45057983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; break ;",
            "score": 99.76439587823276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double accum2=0.0;",
            "score": 99.68873009314903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double accum9111962718267217978=0.0;",
            "score": 99.68873009314903,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double accum37=0.0;",
            "score": 99.68873009314903,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double accum3=0.0;",
            "score": 99.68873009314903,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double accum1983=0.0;",
            "score": 99.68873009314903,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + start + length ; i < weights.length ; i ++ ) { {",
            "score": 99.513427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + max ; i ++ ) {",
            "score": 99.49331325954861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -- ) { sumWts += weights [ i ] ;",
            "score": 99.76378038194444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -- ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >= weights.length ; i ++ ) {",
            "score": 99.54404703776042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + i + length ; i < weights.length ; i ++ ) {",
            "score": 99.52561257102273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <0; i ++ ) { {",
            "score": 99.51328974184783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- mean ; i < begin ; i ++ ) {",
            "score": 99.4931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.4896304481908,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < format.length ; i ++ ) {",
            "score": 99.47095404730902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < format . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights + weights.length ; i ++ ) {",
            "score": 99.44918823242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=0; }",
            "score": 99.6850390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length : weights.length ; i < begin ; i ++ ) {",
            "score": 99.55272327769886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length : weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin + length ; i ++ ) { {",
            "score": 99.52526274181548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i <= n ; i ++ )",
            "score": 99.51328974184783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i <= n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.4930355674342,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + n ; i ++ ) {",
            "score": 99.47032470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights ; i ++ ) { {",
            "score": 99.4486945657169,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts : += weights [ i ] ;",
            "score": 99.76303536551339,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts : += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.684794921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ] ; i ++ ) {",
            "score": 99.55266462053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length *1; i < weights.length ; i ++ ) {",
            "score": 99.52503551136364,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length * 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin : weights ) {",
            "score": 99.4929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length i1; i < weights.length ; i ++ ) {",
            "score": 99.4892245205966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length i 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.44834594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] + dev ;",
            "score": 99.76302363954741,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] + dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] ; }",
            "score": 99.68459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < begin ; i ++ ) {",
            "score": 99.55247192382812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length *sumWts ; i ++ ) {",
            "score": 99.52494673295455,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, l = weights.length ; i < l ; i ++ ) { {",
            "score": 99.5111667798913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , l = weights . length ; i < l ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i1++ ) {",
            "score": 99.46892951516544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start - length ; i ++ ) {",
            "score": 99.44834391276042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i + i ] ;",
            "score": 99.76270435474537,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i + i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length + length + length + length ; i < weights.length ; i ++ ) {",
            "score": 99.6842041015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length + length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ length + length ; i < weights.length ; i ++ ) {",
            "score": 99.5521573153409,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length length ; i < weights.length ; i ++ ) {",
            "score": 99.46865699404762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; ; i < weights.length ; i ++ ) {",
            "score": 99.44676449424342,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76240596064815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76240596064815,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76240596064815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76240596064815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76240596064815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum2=0.0;",
            "score": 99.6829833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum9111962718267217978=0.0;",
            "score": 99.6829833984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum37=0.0;",
            "score": 99.6829833984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum3=0.0;",
            "score": 99.6829833984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum1983=0.0;",
            "score": 99.6829833984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin : begin + length ; i ++ ) {",
            "score": 99.55191040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { { else {",
            "score": 99.5241466703869,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +1; i <= weights.length ; i ++ ) {",
            "score": 99.4888583096591,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { ) {",
            "score": 99.46865505642361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i -0] ;",
            "score": 99.76225754310344,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 0 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += sumWts ;",
            "score": 99.6829833984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += sum CaMeL Wts ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) throws RuntimeException {",
            "score": 99.54005015980114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) throws Runtime CaMeL Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- length ; i < begin + length ; i ++ ) {",
            "score": 99.4909912109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= start + weights.length ; i ++ ) {",
            "score": 99.445849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76187028556035,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "double sumWts =0; for( int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.68203125,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin1; i ++ ) {",
            "score": 99.550048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length -1; i < weights.length ; i ++ ) {",
            "score": 99.53999660326087,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + values.length ; i ++ ) {",
            "score": 99.52333374023438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) { double ) {",
            "score": 99.50826893682066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) { double ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < begin + length ; i ++ ) {",
            "score": 99.49098607113487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i > weights.length ; i ++ ) {",
            "score": 99.48838112571023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - -1; i ++ ) {",
            "score": 99.46738978794643,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; i ++ ) { {",
            "score": 99.44573010896382,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i + i ] ;",
            "score": 99.76186186691811,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i + i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "double sumWts +=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6815625,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts += 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ )",
            "score": 99.49087042557566,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length -1; i >=0; i ++ ) {",
            "score": 99.488037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { {",
            "score": 99.4455502158717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76175491898148,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.68119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < begin ; i ++ ) {",
            "score": 99.54959445529514,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin.0; i < weights.length ; i ++ ) {",
            "score": 99.52229614257813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i + i ; i <= weights.length ; i ++ ) {",
            "score": 99.50755726207386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -1; i < weights.length ; i ++ ) {",
            "score": 99.49030151367188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + start ; i < length ; i ++ ) {",
            "score": 99.44514295789931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i != length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.761650390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.679873046875,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length | weights.length ; i ++ ) {",
            "score": 99.53785289417614,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length | weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : weights.length ) {",
            "score": 99.52213327508224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start + i ; i < weights.length ; i ++ ) {",
            "score": 99.50694691051136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { { {",
            "score": 99.4896240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length( ) ; i < weights.length ; i ++ ) {",
            "score": 99.48757102272727,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ( ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i i =0; i < weights.length ; i ++ ) {",
            "score": 99.46639854029605,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts -= weights [ i ] *dev ;",
            "score": 99.76126414331897,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts -= weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum = weights [ i ] ;",
            "score": 99.6796484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : values.length ; i <0; i ++ ) {",
            "score": 99.548193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ++ ] ; i ++ ) { }",
            "score": 99.53737474524456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ++ ] ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "clear( ) ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.5221280184659,
            "correctness": "wrong",
            "tokenized_patch": "clear ( ) ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =1; i <= weights.length ; i ++ ) {",
            "score": 99.50621202256944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.( -1; i < weights.length ; i ++ ) {",
            "score": 99.48749334161931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . ( - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1.length ; i ++ ) {",
            "score": 99.46590847439236,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >=0; i ++ ) {",
            "score": 99.4443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } sumWts =0;",
            "score": 99.67951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.48844829358552,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights ; i ++ ) {",
            "score": 99.4658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sumWts ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76114004629629,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < sum CaMeL Wts ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "final int sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.67916165865384,
            "correctness": "uncompilable",
            "tokenized_patch": "final int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + length ; i ++ ) { {",
            "score": 99.52046130952381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { }",
            "score": 99.48817202919408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ] ++ ) {",
            "score": 99.46565515854779,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76061559606481,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=0.0;",
            "score": 99.67870154747597,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : var + length ; i < weights.length ; i ++ ) {",
            "score": 99.54775168678977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : var + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.5043612393466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.48595081676136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1/ weights.length ; i ++ ) {",
            "score": 99.4648681640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 / weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.76060267857143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i <= n ; i ++ ) { {",
            "score": 99.50422469429348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i <= n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - i ; i < weights.length ; i ++ ) {",
            "score": 99.48718872070313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.null ; i < weights.length ; i ++ ) {",
            "score": 99.48572387695313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . null ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ 'expansion values,'; i < weights.length ; i ++ ) {",
            "score": 99.464306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ 'population'; i < weights.length ; i ++ ) {",
            "score": 99.464306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ ' or '; i < weights.length ; i ++ ) {",
            "score": 99.464306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ 'sample'; i < weights.length ; i ++ ) {",
            "score": 99.464306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ 'population variance'; i < weights.length ; i ++ ) {",
            "score": 99.464306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [0] ; i ++ ) {",
            "score": 99.44300672743056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ 0 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.76025390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "else { var =( accum -( accum2*accum2/ sumWts ) ) / sumWts ;",
            "score": 99.6783984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) / sumWts ;",
            "score": 99.6783984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum37*accum37/ sumWts ) ) / sumWts ;",
            "score": 99.6783984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum3*accum3/ sumWts ) ) / sumWts ;",
            "score": 99.6783984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum1983*accum1983/ sumWts ) ) / sumWts ;",
            "score": 99.6783984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2/ sumWts ; i ++ ) {",
            "score": 99.52001953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978/ sumWts ; i ++ ) {",
            "score": 99.52001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37/ sumWts ; i ++ ) {",
            "score": 99.52001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3/ sumWts ; i ++ ) {",
            "score": 99.52001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983/ sumWts ; i ++ ) {",
            "score": 99.52001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i <= weights.length ; i ++ ) {",
            "score": 99.50418701171876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } else",
            "score": 99.48632202148437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < -1; i ++ ) {",
            "score": 99.48540969122024,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0+ length ; i ++ ) {",
            "score": 99.46312120225694,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.44267835115132,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { else { sumWts += weights [ i ] ;",
            "score": 99.75964776400862,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { else { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : weights.length + length ; i ++ ) {",
            "score": 99.54701926491477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : weights . length + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i < weights.length ; i ++ )",
            "score": 99.48604543585526,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n +0; i < weights.length ; i ++ ) {",
            "score": 99.46307373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.4425537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.75959725215517,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights [ i ] = dev ;",
            "score": 99.6779296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights [ i ] = dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < begin : weights.length ; i ++ ) {",
            "score": 99.54676513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i -1; i <= weights.length ; i ++ ) { {",
            "score": 99.50357719089673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - 1 ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { }",
            "score": 99.48573704769737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i >=0; i ++ ) {",
            "score": 99.4849853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >=0; i ++ ) {",
            "score": 99.4849853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >=0; i ++ ) {",
            "score": 99.4849853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >=0; i ++ ) {",
            "score": 99.4849853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >=0; i ++ ) {",
            "score": 99.4849853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < 'expansion values,'; i ++ ) {",
            "score": 99.46306610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'population'; i ++ ) {",
            "score": 99.46306610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ' or '; i ++ ) {",
            "score": 99.46306610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'sample'; i ++ ) {",
            "score": 99.46306610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'population variance'; i ++ ) {",
            "score": 99.46306610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i < length ; i ++ ) {",
            "score": 99.44243028428819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i -1] ;",
            "score": 99.75929418103448,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i - 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = weights [ i ] ; }",
            "score": 99.6775371844952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= n ; i ++ ) {",
            "score": 99.5347900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length :1; i < weights.length ; i ++ ) {",
            "score": 99.51933149857955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length : 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= weights.length ; i -- ) {",
            "score": 99.50334028764205,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= weights . length ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { else",
            "score": 99.48505602384868,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length / length ; i < weights.length ; i ++ ) {",
            "score": 99.48438609730114,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length / length ; i ++ ) {",
            "score": 99.4627197265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < NaN ; i ++ ) {",
            "score": 99.44240993923611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Na CaMeL N ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.75910897090517,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum2+= sumWts ;",
            "score": 99.677177734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += sum CaMeL Wts ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum9111962718267217978+= sumWts ;",
            "score": 99.677177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum37+= sumWts ;",
            "score": 99.677177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum3+= sumWts ;",
            "score": 99.677177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum1983+= sumWts ;",
            "score": 99.677177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, min =0; i < weights.length ; i ++ ) {",
            "score": 99.53464577414773,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , min = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < [ weights.length -1] ; i ++ ) {",
            "score": 99.48418634588069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ weights . length - 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = weights.length -1; i < weights.length ; i ++ ) {",
            "score": 99.46263485863095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = weights . length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = start ; i < weights.length ; i ++ ) {",
            "score": 99.44114854600694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.75882662259616,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += sumWts ;",
            "score": 99.67714280348558,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += sum CaMeL Wts ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + begin + length ; i < begin ; i ++ ) {",
            "score": 99.5448486328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i -- ; } }",
            "score": 99.534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i -- ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = values.length ; i < n ; i ++ ) { {",
            "score": 99.50196373980978,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = values . length ; i < n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i -- ) {",
            "score": 99.48484293619792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.0; i ++ ) {",
            "score": 99.48368696732955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m1; i ++ ) {",
            "score": 99.46172736672794,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start.0; i < weights.length ; i ++ ) {",
            "score": 99.44100952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i > begin ) {",
            "score": 99.676015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i > begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < mean ; i ++ ) {",
            "score": 99.5448226928711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights [ i ] ;",
            "score": 99.5337550951087,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length + weights.length ; i ++ ) {",
            "score": 99.51755593039773,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, max = weights.length ; i < max ; i ++ ) { {",
            "score": 99.50118885869566,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , max = weights . length ; i < max ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1.0; i < weights.length ; i ++ ) {",
            "score": 99.48469848632813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - -1; i < weights.length ; i ++ ) {",
            "score": 99.48364868164063,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Double.length ; i ++ ) {",
            "score": 99.46157497829861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Double . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.75837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < begin ; i ++ ) {",
            "score": 99.67546280570652,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + begin ; i ++ ) {",
            "score": 99.5447509765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 0; } }",
            "score": 99.53220533288044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return 0 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0.0; i < weights.length ; i ++ ) {",
            "score": 99.51711203835227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 0 . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- ) { {",
            "score": 99.50025576636905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < weights.length ; i ++ )",
            "score": 99.48400160845588,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < super.length ; i ++ ) {",
            "score": 99.48265245225694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < super . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = true ; i < weights.length ; i ++ ) {",
            "score": 99.46145968967014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = true ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights1.length ; i ++ ) {",
            "score": 99.44058388157895,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights 1 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.75788826778017,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.67529296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length : weights.length ; i <0; i ++ ) {",
            "score": 99.54450017755681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length : weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i < weights.length ; i ++ ) { {",
            "score": 99.51697358630952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length +1; i <= weights.length ; i ++ ) {",
            "score": 99.49894575639205,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ~ weights.length ; i ++ ) {",
            "score": 99.48245399876645,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ~ weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < null ; i ++ ) {",
            "score": 99.46115112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0; i ++ ) { {",
            "score": 99.44022863051471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.75787984913794,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i ==0) {",
            "score": 99.675107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = super.weights.length -1; i >=0; i -- ) {",
            "score": 99.49872381036931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = super . weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum ; i ++ ) {",
            "score": 99.48289489746094,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < start ; i ++ ) { {",
            "score": 99.4390869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] + mean ;",
            "score": 99.75787984913794,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] + mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { if( length >1) {",
            "score": 99.675029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { if ( length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : i + length ; i < weights.length ; i ++ ) {",
            "score": 99.5442227450284,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : i + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i =0; }",
            "score": 99.53112262228261,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i = 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +0; i < begin + length ; i ++ ) {",
            "score": 99.51575816761364,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; =0; i < weights.length ; i ++ ) {",
            "score": 99.45997256324405,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length -1; i ++ ) {",
            "score": 99.4387939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i -1] ;",
            "score": 99.75712528935185,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i - 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { sumWts +=0;",
            "score": 99.67470139723558,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "try { for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.54412231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights != null ? weights [ i ] : weights ) {",
            "score": 99.5309170809659,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights != null ? weights [ i ] : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length || i < weights.length ; i ++ ) {",
            "score": 99.48015747070312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length || i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7568359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum += weights [ i ] ;",
            "score": 99.67390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin : weights.length ; i ++ ) {",
            "score": 99.54411177201705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ )",
            "score": 99.45859888980263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! weights [0].equals( weights [0] ) ) {",
            "score": 99.43753390842014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ 0 ] . equals ( weights [ 0 ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.7566338900862,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts =1;",
            "score": 99.672548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts = 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum2*accum2/ sumWts ) ) >0) {",
            "score": 99.54371226917614,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) >0) {",
            "score": 99.54371226917614,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum37*accum37/ sumWts ) ) >0) {",
            "score": 99.54371226917614,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum3*accum3/ sumWts ) ) >0) {",
            "score": 99.54371226917614,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum1983*accum1983/ sumWts ) ) >0) {",
            "score": 99.54371226917614,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i >=0; i ++ ) {",
            "score": 99.5293301669034,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <1; i ++ ) {",
            "score": 99.5145492553711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =( weights.length -1) -1; i >=0; i -- )",
            "score": 99.4951808763587,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) - 1 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { else",
            "score": 99.48167660361842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length - length ) ; i ++ ) {",
            "score": 99.47965864701705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) )",
            "score": 99.45858425564236,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < this.weights.length ; i ++ ) {",
            "score": 99.43668823242187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < this . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( accum -( accum2*accum2/ sumWts ) ) /( sumWts -1.0) ;",
            "score": 99.75651332310268,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /( sumWts -1.0) ;",
            "score": 99.75651332310268,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( accum -( accum37*accum37/ sumWts ) ) /( sumWts -1.0) ;",
            "score": 99.75651332310268,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( accum -( accum3*accum3/ sumWts ) ) /( sumWts -1.0) ;",
            "score": 99.75651332310268,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( accum -( accum1983*accum1983/ sumWts ) ) /( sumWts -1.0) ;",
            "score": 99.75651332310268,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) sumWts += weights [ i ] ;",
            "score": 99.67247596153847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin1; i < begin + length ; i ++ ) {",
            "score": 99.54342490748355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- )",
            "score": 99.49473812705592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; while ++ i ) {",
            "score": 99.4578921669408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; while ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { { {",
            "score": 99.43648952907986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.75605830439815,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.67181865985577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i < begin + length ; i ++ ) { {",
            "score": 99.51371837797619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - length ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ) {",
            "score": 99.49385209517045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ] ; i < weights.length ; i ++ ) {",
            "score": 99.4577572471217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.75586809430804,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.75586809430804,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.75586809430804,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.75586809430804,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.75586809430804,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.671806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.arraycopy( weights ,0, weights ,0, weights.length ) ;",
            "score": 99.52869330512152,
            "correctness": "uncompilable",
            "tokenized_patch": "System . arraycopy ( weights , 0 , weights , 0 , weights . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +0; i ++ ) {",
            "score": 99.48149956597223,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.null ; i ++ ) {",
            "score": 99.47861550071023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length1; i <= weights.length ; i ++ ) {",
            "score": 99.45682198660714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( float i =0; i < weights.length ; i ++ ) {",
            "score": 99.43533664279514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( float i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < weights.length ; i ++ ) { }",
            "score": 99.67153695913461,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin :0; i ++ ) {",
            "score": 99.54229736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) continue ;",
            "score": 99.52815326891448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length ; i ++ ) { {",
            "score": 99.4920654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >=0; i ++ ) {",
            "score": 99.48119354248047,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / *}",
            "score": 99.4565662202381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / * }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; ++ i ) {",
            "score": 99.43514404296874,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { { sumWts += weights [ i ] ;",
            "score": 99.75531877790179,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = weights [ i ] ;",
            "score": 99.67126953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin : weights.length ) {",
            "score": 99.54201372931985,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sumWts ; i ++ ) { {",
            "score": 99.480712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum CaMeL Wts ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.null ; i ++ ) {",
            "score": 99.47853781960227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length || i ++ ) {",
            "score": 99.45652262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } if( isBiasCorrected ) {",
            "score": 99.75435965401786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum2)",
            "score": 99.671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum9111962718267217978)",
            "score": 99.671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum37)",
            "score": 99.671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum3)",
            "score": 99.671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum1983)",
            "score": 99.671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.begin ; i < weights.length ; i ++ ) {",
            "score": 99.54118208451705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum2*accum2/ sumWts ) ) >1) {",
            "score": 99.51068670099431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) >1) {",
            "score": 99.51068670099431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum37*accum37/ sumWts ) ) >1) {",
            "score": 99.51068670099431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum3*accum3/ sumWts ) ) >1) {",
            "score": 99.51068670099431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum1983*accum1983/ sumWts ) ) >1) {",
            "score": 99.51068670099431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49106667258523,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ) ; i < weights.length ; i ++ ) {",
            "score": 99.47796075994319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.=0; i < weights.length ; i ++ ) {",
            "score": 99.4560314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += accum2;",
            "score": 99.67042893629808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += accum9111962718267217978;",
            "score": 99.67042893629808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += accum37;",
            "score": 99.67042893629808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += accum3;",
            "score": 99.67042893629808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += accum1983;",
            "score": 99.67042893629808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin1; i ++ ) {",
            "score": 99.54094587053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum2; i ++ ) {",
            "score": 99.51065866570724,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + accum9111962718267217978; i ++ ) {",
            "score": 99.51065866570724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum37; i ++ ) {",
            "score": 99.51065866570724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum3; i ++ ) {",
            "score": 99.51065866570724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum1983; i ++ ) {",
            "score": 99.51065866570724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - length ; i < weights.length ; i ++ ) {",
            "score": 99.47972347861842,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < length +1; i ++ ) {",
            "score": 99.43412272135417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.75378870081019,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i ++ )",
            "score": 99.52752685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean + weights.length ; i ++ ) {",
            "score": 99.51055908203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < this.weights.length ; i ++ ) {",
            "score": 99.4793701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < this . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Double.MIN_VALUE ; i ++ ) {",
            "score": 99.4337158203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < Double . MIN _ VALUE ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] + mean ;",
            "score": 99.75371636284723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] + mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.0)",
            "score": 99.52734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length :1; i ++ ) {",
            "score": 99.5104248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start - start ; i < weights.length ; i ++ ) {",
            "score": 99.4900146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i -- ) {",
            "score": 99.4776123046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.753681640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i = begin ; i < weights.length ; i ++ ) { {",
            "score": 99.6676776592548,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length - length ; i ++ ) {",
            "score": 99.54006958007812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + begin +1; i < weights.length ; i ++ ) {",
            "score": 99.50996537642045,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = i - mean ; i < weights.length ; i ++ ) {",
            "score": 99.47825317382812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ;1++ ) {",
            "score": 99.4774169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( ] i =0; i < weights.length ; i ++ ) {",
            "score": 99.45395236545139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ] i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < name.length ; i ++ ) {",
            "score": 99.43256971571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < name . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.667373046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.) {",
            "score": 99.52664317255434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n =0; i < weights.length ; i ++ ) { {",
            "score": 99.48924719769022,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < weights.length ; i ++ )",
            "score": 99.4774169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; -- i ) {",
            "score": 99.47712846235795,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; -- i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= start ; i ++ ) {",
            "score": 99.43193223741319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < weights.length ; i ++ ) { {",
            "score": 99.6673000169837,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin *length ; i ++ ) {",
            "score": 99.53957297585227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin * length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, length = weights.length ; i < length ; i ++ ) {",
            "score": 99.5265780362216,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && i < n ; i ++ ) {",
            "score": 99.4881591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i -- < weights.length ; i ++ ) {",
            "score": 99.47710217927632,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i -- < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < clone.length ; i ++ ) {",
            "score": 99.45296223958333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < clone . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.75213623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) if( isBiasCorrected ) {",
            "score": 99.66695462740384,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin +1; i ++ ) {",
            "score": 99.53953043619792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length % weights.length ; i ++ ) {",
            "score": 99.52651145241477,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length % weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; ++ i ) { {",
            "score": 99.48750636888587,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; ++ i ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0.0; i < weights.length ; i ++ ) {",
            "score": 99.47699584960938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.=1; i ++ ) {",
            "score": 99.45252749794408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . = 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts = weights [ i ] ;",
            "score": 99.75173611111111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.666396484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin : values.length ; i ++ ) {",
            "score": 99.5382080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ; } }",
            "score": 99.52617853338069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length :0; i < begin + length ; i ++ ) {",
            "score": 99.5069912997159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length : 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double weights [ ] ;",
            "score": 99.48747452445652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double weights [ ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < weights.length ; i ++ )",
            "score": 99.47652395148026,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /0; i ++ ) {",
            "score": 99.4524658203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Double.NaN ; i ++ ) {",
            "score": 99.43117065429688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < Double . Na CaMeL N ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.75157819475446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i >=0; i -- )",
            "score": 99.48741083559783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = values.length ; i < begin + length ; i ++ ) {",
            "score": 99.47626953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = values . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = value.length -1; i < weights.length ; i ++ ) {",
            "score": 99.47529740767045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = value . length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < i ; i ++ ) {",
            "score": 99.4521484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ) {",
            "score": 99.43111979166666,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i length < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.75122942243304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i length < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { sumWts =0;",
            "score": 99.66559307391827,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { sum CaMeL Wts = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin : weights.length ; i ++ ) {",
            "score": 99.53748668323864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - begin ; i < begin + length ; i ++ ) {",
            "score": 99.506689453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + ; i < weights.length ; i ++ ) {",
            "score": 99.48726613898026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- mean ; i < weights.length ; i ++ )",
            "score": 99.47626696134868,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < length ; i -- ) {",
            "score": 99.47515869140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { { {",
            "score": 99.431103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts ++ += weights [ i ] ;",
            "score": 99.75098528180804,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts ++ += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( ; i < weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.665302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length + length ) ; i ++ ) {",
            "score": 99.53722034801136,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length + length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i ++ ) {",
            "score": 99.50606536865234,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ! ) {",
            "score": 99.4857761548913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ! ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length *0; i < weights.length ; i ++ ) {",
            "score": 99.47514204545455,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length * 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( double i =0; i < weights.length ; i ++ )",
            "score": 99.47504021139706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start && i < length ; i ++ ) {",
            "score": 99.43050537109374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start && i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts -= weights [ i ] ; }",
            "score": 99.75019182477679,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts -= weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =1; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.66505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 1 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin *length ; i ++ ) {",
            "score": 99.53703477647569,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin * length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} else { } for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.47475363991477,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { } for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.begin ; i < begin + length ; i ++ ) {",
            "score": 99.47446899414062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { ) {",
            "score": 99.45118408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.749521484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( i >0) {",
            "score": 99.664130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( i > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i <= weights.length ; i ++ ) {",
            "score": 99.52496892755681,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + weights.length ; i < begin + length ; i ++ ) {",
            "score": 99.5052490234375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + weights . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ start ; i < weights.length ; i ++ ) {",
            "score": 99.48572387695313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i <= weights.length ; ++ i ) {",
            "score": 99.47429865056819,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < [0].length ; i ++ ) {",
            "score": 99.47405395507812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ 0 ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { sumWts += dev ;",
            "score": 99.66380896935097,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { sum CaMeL Wts += dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights [ i ] : weights ) ; }",
            "score": 99.52455205502717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights [ i ] : weights ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { { break ; }",
            "score": 99.50489390980114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i <= weights.length ; i ++ ) {",
            "score": 99.47421104029605,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "Iterator for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.47397974917763,
            "correctness": "uncompilable",
            "tokenized_patch": "Iterator for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -1++ ) {",
            "score": 99.429736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i - 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, i =0; i < weights.length ; i ++ ) { {",
            "score": 99.4841839334239,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ++ ; }",
            "score": 99.47320001775569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.74818638392857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts += dev ;",
            "score": 99.663291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -2; i < weights.length ; i ++ ) {",
            "score": 99.47385767886513,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.47385767886513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -37; i < weights.length ; i ++ ) {",
            "score": 99.47385767886513,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -3; i < weights.length ; i ++ ) {",
            "score": 99.47385767886513,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -1983; i < weights.length ; i ++ ) {",
            "score": 99.47385767886513,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0| weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.4731778231534,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 | weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { )",
            "score": 99.44956752232143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < length ; i ++ ) {",
            "score": 99.42966595818015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.747880859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "float sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.66318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "float sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : length ; i ++ ) {",
            "score": 99.53464577414773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length + length ; i ++ ) {",
            "score": 99.50320434570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length + length ; i < weights.length ; i ++ ) {",
            "score": 99.48334295099431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < begin ; i ++ ) {",
            "score": 99.47337510850694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < length ; i ++ ) {",
            "score": 99.47310791015624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < weights.length -0; i ++ ) {",
            "score": 99.44932861328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < length ; i ++ ) { {",
            "score": 99.42946263363487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int ++ i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74778529575893,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.662548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.47308349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "* ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.0; i ++ ) {",
            "score": 99.4719571200284,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( long i = start ; i < weights.length ; i ++ ) {",
            "score": 99.42922634548611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < weights.length ; i ++ ) { }",
            "score": 99.66254131610577,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin.length ; i ++ ) {",
            "score": 99.53288130326705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;0< weights.length ; i ++ ) {",
            "score": 99.52258978949652,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; 0 < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "while(( accum -( accum2*accum2/ sumWts ) ) >1) {",
            "score": 99.50302956321023,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) >1) {",
            "score": 99.50302956321023,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum37*accum37/ sumWts ) ) >1) {",
            "score": 99.50302956321023,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum3*accum3/ sumWts ) ) >1) {",
            "score": 99.50302956321023,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( accum -( accum1983*accum1983/ sumWts ) ) >1) {",
            "score": 99.50302956321023,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +2; i < weights.length ; i ++ ) {",
            "score": 99.48262329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.48262329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +37; i < weights.length ; i ++ ) {",
            "score": 99.48262329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +3; i < weights.length ; i ++ ) {",
            "score": 99.48262329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1983; i < weights.length ; i ++ ) {",
            "score": 99.48262329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -1; i ++ ) {",
            "score": 99.47306993272569,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length - i ) ; i ++ ) {",
            "score": 99.47170188210227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - i ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = n +1; i < weights.length ; i ++ ) {",
            "score": 99.44888305664062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= start ; i ++ ) {",
            "score": 99.42887369791667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ) ;",
            "score": 99.74754987444196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.661435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0,0=0; i < weights.length ; i ++ ) {",
            "score": 99.52178400213069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length + length ; i < begin ; i ++ ) {",
            "score": 99.5028076171875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length /2; i ++ ) {",
            "score": 99.48160400390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length /9111962718267217978; i ++ ) {",
            "score": 99.48160400390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length /37; i ++ ) {",
            "score": 99.48160400390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length /3; i ++ ) {",
            "score": 99.48160400390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length /1983; i ++ ) {",
            "score": 99.48160400390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.47154541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ )",
            "score": 99.42845052083334,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74747721354167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "List sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.660517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "List sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ].length ; i ++ ) {",
            "score": 99.52173913043478,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.50275268554688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- length ; i < begin ; i ++ ) {",
            "score": 99.47244601779514,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - length ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - length -1; i >=1; i ++ ) {",
            "score": 99.47145774147727,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = n -1; i < weights.length ; i ++ ) {",
            "score": 99.448291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == weights.length ; i ++ ) {",
            "score": 99.4284423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts2=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65924541766827,
            "correctness": "wrong",
            "tokenized_patch": "int sum CaMeL Wts $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sumWts9111962718267217978=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65924541766827,
            "correctness": "wrong",
            "tokenized_patch": "int sum CaMeL Wts $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sumWts37=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65924541766827,
            "correctness": "wrong",
            "tokenized_patch": "int sum CaMeL Wts $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sumWts3=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65924541766827,
            "correctness": "wrong",
            "tokenized_patch": "int sum CaMeL Wts $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sumWts1983=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65924541766827,
            "correctness": "wrong",
            "tokenized_patch": "int sum CaMeL Wts $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start +1; i < weights.length -1; i ++ ) {",
            "score": 99.4808016690341,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin *weights.length ; i ++ ) {",
            "score": 99.47243041992188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin * weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i -- ; }",
            "score": 99.4711581143466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i -- ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < start ; i ++ ) {",
            "score": 99.44815063476562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min.length ; i ++ ) {",
            "score": 99.42839219835069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >2) {",
            "score": 99.658984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >9111962718267217978) {",
            "score": 99.658984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >37) {",
            "score": 99.658984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >3) {",
            "score": 99.658984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >1983) {",
            "score": 99.658984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin + mean ; i ++ ) {",
            "score": 99.53151633522727,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin + mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, l =0; i < weights.length ; i ++ ) {",
            "score": 99.48065740411931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , l = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i -- =0; i < weights.length ; i ++ ) { {",
            "score": 99.47221069335937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.values( ).length ; i ++ ) {",
            "score": 99.47092507102273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . values ( ) . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; int i < weights.length ; i ++ ) {",
            "score": 99.42833187705592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; int i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var = values [ i ] ;",
            "score": 99.74650772758152,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { dev =0.0;",
            "score": 99.65865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { dev = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: values.length ; i < weights.length ; i ++ ) {",
            "score": 99.5314608487216,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( i =0; i < weights.length ; i ++ ) {",
            "score": 99.52099609375,
            "correctness": "wrong",
            "tokenized_patch": "int i = 0 ; for ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) throws Exception {",
            "score": 99.50198364257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) throws Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start + length ; i <= weights.length ; i ++ ) {",
            "score": 99.47996937144886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin int i ; i ++ ) {",
            "score": 99.47201877170139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin int i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ; i ++ ) {",
            "score": 99.47083875868056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n + weights.length ; i ++ ) {",
            "score": 99.44788818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights + weights.length ; i ++ ) {",
            "score": 99.4276611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { double sumWts =0;",
            "score": 99.6586328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean : weights.length ; i ++ ) {",
            "score": 99.5314208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= n ; i ++ ) {",
            "score": 99.52041625976562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2+ sumWts ; i ++ ) {",
            "score": 99.50161597842262,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978+ sumWts ; i ++ ) {",
            "score": 99.50161597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37+ sumWts ; i ++ ) {",
            "score": 99.50161597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3+ sumWts ; i ++ ) {",
            "score": 99.50161597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983+ sumWts ; i ++ ) {",
            "score": 99.50161597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.47078247070313,
            "correctness": "uncompilable",
            "tokenized_patch": "} { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < list.length ; i ++ ) {",
            "score": 99.42703586154514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ] - mean ;",
            "score": 99.74608470775463,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum2+= accum2;",
            "score": 99.65760294596355,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum9111962718267217978+= accum9111962718267217978;",
            "score": 99.65760294596355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum37+= accum37;",
            "score": 99.65760294596355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum3+= accum3;",
            "score": 99.65760294596355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum1983+= accum1983;",
            "score": 99.65760294596355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin , i =0; i < weights.length ; i ++ ) {",
            "score": 99.53115012428977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin , i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = values.length + length ; i < weights.length ; i ++ ) {",
            "score": 99.50145374644886,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = values . length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = ) ; i < weights.length ; i ++ ) {",
            "score": 99.47951931423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < max ; i ++ ) {",
            "score": 99.44767252604167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= start + weights.length ; i ++ ) {",
            "score": 99.42613525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= start + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum2; }",
            "score": 99.6568134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum9111962718267217978; }",
            "score": 99.6568134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum37; }",
            "score": 99.6568134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum3; }",
            "score": 99.6568134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += accum1983; }",
            "score": 99.6568134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += accum $NUMBER$ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < n ; i ++ ) {",
            "score": 99.53092651367187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + iterator.length ; i < weights.length ; i ++ ) {",
            "score": 99.4782381924716,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + iterator . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < weights.length ; i ++ )",
            "score": 99.47111002604167,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i < weights.length ; ++ i ) {",
            "score": 99.46995960582386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i < weights.length ; ++ i ) {",
            "score": 99.46995960582386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i < weights.length ; ++ i ) {",
            "score": 99.46995960582386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i < weights.length ; ++ i ) {",
            "score": 99.46995960582386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i < weights.length ; ++ i ) {",
            "score": 99.46995960582386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( Object i =0; i < weights.length ; i ++ ) {",
            "score": 99.44757080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Object i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i <= weights.length ; i ++ ) {",
            "score": 99.42597399259868,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double dev =0.0;",
            "score": 99.65623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double dev = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.52940673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ++ ; } }",
            "score": 99.51940387228261,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ++ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + mean ; i ++ ) {",
            "score": 99.50080702039931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin - weights.length ; i ++ ) {",
            "score": 99.46967163085938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.42558208264802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += += weights [ i ] ;",
            "score": 99.74512590680804,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =2; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = $NUMBER$ ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =9111962718267217978; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = $NUMBER$ ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =37; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = $NUMBER$ ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =3; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = $NUMBER$ ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =1983; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = $NUMBER$ ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < list.length ; i ++ ) {",
            "score": 99.5290194424716,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = Double.NaN ; i < weights.length ; i ++ ) {",
            "score": 99.50055486505681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = Double . Na CaMeL N ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.4761474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= begin ; i < weights.length ; i ++ ) {",
            "score": 99.46957058376736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length -1; i >=1; i -- ) {",
            "score": 99.468994140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i >= 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < n ; i -- ) {",
            "score": 99.44721221923828,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < value.length ; i ++ ) {",
            "score": 99.42536078559027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74505615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=1; }",
            "score": 99.655654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max =0; i <= weights.length ; i ++ ) {",
            "score": 99.51863236860795,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , max = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights ; i < begin + length ; i ++ ) {",
            "score": 99.499853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; i ++ ) { {",
            "score": 99.47556470788044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ = begin ; i < weights.length ; i ++ ) {",
            "score": 99.46950812088816,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1|| i < weights.length ; i ++ ) {",
            "score": 99.46870561079545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 || i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ) {",
            "score": 99.44714936755952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min + length ; i ++ ) {",
            "score": 99.42534722222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ] ;",
            "score": 99.74488176618304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts =0;",
            "score": 99.65491739908855,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts = 0 ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin , length : weights.length ; i ++ ) {",
            "score": 99.52885298295455,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin , length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights += weights ; }",
            "score": 99.51818316915761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights += weights ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i -1; i >=0; i -- ) {",
            "score": 99.47556374289773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin , length ; i ++ ) {",
            "score": 99.46880425347223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin , length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue {",
            "score": 99.44668579101562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74481879340277,
            "correctness": "wrong",
            "tokenized_patch": "for ( short i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts =0; }",
            "score": 99.654599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { else {",
            "score": 99.49958147321429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, l = weights.length ; i < n ; i ++ ) {",
            "score": 99.475341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , l = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i != weights.length ; i ++ ) {",
            "score": 99.46877712673611,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i < weights.length ; i ++ )",
            "score": 99.4682284268466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i1) {",
            "score": 99.4462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < matches ; i ++ ) {",
            "score": 99.4247055053711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < matches ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev = values [ i ] - mean ;",
            "score": 99.74465506417411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( length ==1) {",
            "score": 99.65408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( length == 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != begin ; i ++ ) {",
            "score": 99.46843719482422,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) throws",
            "score": 99.46808539496527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / i ; i ++ ) {",
            "score": 99.44627685546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length +1; i < length ; i ++ ) {",
            "score": 99.42400512695312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + 1 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int var =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "int var = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin +1; i ++ ) {",
            "score": 99.5279873934659,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length *dev ; i ++ ) {",
            "score": 99.49885864257813,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length * dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights [ i ++ ] ; i ++ ) {",
            "score": 99.44603881835937,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ++ ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int i ; for( i =0; i < weights.length ; i ++ ) {",
            "score": 99.42380981445312,
            "correctness": "wrong",
            "tokenized_patch": "int i ; for ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( double ) values [ i ] ;",
            "score": 99.74343436104911,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( double ) values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "double sumWts =0; for( int i = begin ; i < weights.length ; i ++ ) { {",
            "score": 99.6532451923077,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + values.length ; i < weights.length ; i ++ ) {",
            "score": 99.49815784801136,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.47435238486842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < weights.length ; i ++ )",
            "score": 99.4671566611842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i < weights.length ; i ++ ) {",
            "score": 99.44546072823661,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i <= weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74277524594908,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "double accum2=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65303861177884,
            "correctness": "uncompilable",
            "tokenized_patch": "double accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double accum9111962718267217978=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65303861177884,
            "correctness": "wrong",
            "tokenized_patch": "double accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "double accum37=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65303861177884,
            "correctness": "wrong",
            "tokenized_patch": "double accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "double accum3=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65303861177884,
            "correctness": "wrong",
            "tokenized_patch": "double accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "double accum1983=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.65303861177884,
            "correctness": "wrong",
            "tokenized_patch": "double accum $NUMBER$ = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < mean + length ; i ++ ) {",
            "score": 99.52625189887152,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < i ; i ++ ) {",
            "score": 99.51564719460227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { break ; } }",
            "score": 99.47403617527173,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - mean ; i < weights.length ; i ++ ) {",
            "score": 99.46704711914063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < copy.length ; i ++ ) {",
            "score": 99.46687825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < copy . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.= length ; i ++ ) {",
            "score": 99.44504266036184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . = length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < min ; i ++ ) {",
            "score": 99.42352973090277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.742568359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin - length + length ; i < weights.length ; i ++ ) {",
            "score": 99.52577903053977,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} for( int i =0; i < weights.length -1; i ++ ) {",
            "score": 99.51556687127976,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights.length ; i ++ )",
            "score": 99.46701531661184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - 'expansion values,'; i < weights.length ; i ++ ) {",
            "score": 99.46674138849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - 'population'; i < weights.length ; i ++ ) {",
            "score": 99.46674138849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ' or '; i < weights.length ; i ++ ) {",
            "score": 99.46674138849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - 'sample'; i < weights.length ; i ++ ) {",
            "score": 99.46674138849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - 'population variance'; i < weights.length ; i ++ ) {",
            "score": 99.46674138849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ ) { { {",
            "score": 99.42320421006944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + i ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74196144386575,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + i ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin double length ; i ++ ) {",
            "score": 99.52572970920139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin double length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights length ++ ; }",
            "score": 99.51525348165761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights length ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max.length ; i ++ ) {",
            "score": 99.44403076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights ; i ++ ) { {",
            "score": 99.42319623161765,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.65244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : values.length ; i ++ ) {",
            "score": 99.52470259232955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >0; i ++ ) {",
            "score": 99.51516723632812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin.0; i < begin + length ; i ++ ) {",
            "score": 99.49788818359374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( final int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( final int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && i ++ ) {",
            "score": 99.44400363498264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= max ; i ++ ) {",
            "score": 99.42256164550781,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.74118477957589,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum -( accum2*accum2/ sumWts ) ) / sumWts ;",
            "score": 99.65240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) / sumWts ;",
            "score": 99.65240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum -( accum37*accum37/ sumWts ) ) / sumWts ;",
            "score": 99.65240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum -( accum3*accum3/ sumWts ) ) / sumWts ;",
            "score": 99.65240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum -( accum1983*accum1983/ sumWts ) ) / sumWts ;",
            "score": 99.65240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0+ length ; i < weights.length ; i ++ ) {",
            "score": 99.52460271661931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *weights.length ; i ++ ) {",
            "score": 99.51502574573864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < begin + length ; i ++ ) { {",
            "score": 99.49736585115132,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i < weights.length ; i ++ ) {",
            "score": 99.47117106119792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin *sum ; i ++ ) {",
            "score": 99.46575249565973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin * sum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < l.length ; i ++ ) {",
            "score": 99.46556260850694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < l . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+2; i < weights.length ; i ++ ) {",
            "score": 99.44391479492188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.44391479492188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+37; i < weights.length ; i ++ ) {",
            "score": 99.44391479492188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+3; i < weights.length ; i ++ ) {",
            "score": 99.44391479492188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+1983; i < weights.length ; i ++ ) {",
            "score": 99.44391479492188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i <= start ; i ++ ) {",
            "score": 99.42233615451389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var = values [ i ] ;",
            "score": 99.74093495244566,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { sumWts +=1;",
            "score": 99.651875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { sum CaMeL Wts += 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin + begin ; i ++ ) {",
            "score": 99.52412719726563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin / weights.length ; i ++ ) {",
            "score": 99.46552124023438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { ) {",
            "score": 99.42219373914931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ i ] ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74092320033482,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ] ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { var =0.0;",
            "score": 99.65142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { var = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length - length ; i ++ ) {",
            "score": 99.52382202148438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < weights.length ; i ++ )",
            "score": 99.4708835767663,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i < weights.length ; ) {",
            "score": 99.44305778952206,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i < weights . length ; ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=0; i -- ) {",
            "score": 99.42218780517578,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7408984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double weights [ ] =0;",
            "score": 99.65130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double weights [ ] = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ mean + length ; i < weights.length ; i ++ ) {",
            "score": 99.52362615411931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + mean + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights ) ; }",
            "score": 99.51374617866848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start && i < weights.length ; i ++ ) {",
            "score": 99.47084738991477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.null ; i ++ ) {",
            "score": 99.46494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ begin ; i < begin + length ; i ++ ) {",
            "score": 99.46473999023438,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = 0 + begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =1; i < this.weights.length ; i ++ ) {",
            "score": 99.44284057617188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < this . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final i =0; i < weights.length ; i ++ ) {",
            "score": 99.4219970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74081856863839,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += dev ; }",
            "score": 99.651181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= n ; i ++ ) {",
            "score": 99.5133056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length int1; i < weights.length ; i ++ ) {",
            "score": 99.46462180397727,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length int 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < weights.length ; i ++ ) { {",
            "score": 99.46449681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [0] < weights [1] ) {",
            "score": 99.42135009765624,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 0 ] < weights [ 1 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.74040876116071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } sumWts +=0;",
            "score": 99.6511328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } sum CaMeL Wts += 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <0; i ++ ) {",
            "score": 99.52306450737848,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ++ ) {",
            "score": 99.51316324869792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < weights.length ; i ++ ) { {",
            "score": 99.46353952508224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <0; i -- ) {",
            "score": 99.44219970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ++ ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.74037388392857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ++ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } double sumWts =0;",
            "score": 99.65101036658653,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin - length ; i ++ ) {",
            "score": 99.52261352539062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights ; i < begin + length ; i ++ ) { {",
            "score": 99.49505905877976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < n ; i ++ ) {",
            "score": 99.46954345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.=1; i < weights.length ; i ++ ) {",
            "score": 99.44184802827381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! weights [0].equals( weights [1] ) ) {",
            "score": 99.42076280381944,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ 0 ] . equals ( weights [ 1 ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.73991789641204,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev =0;",
            "score": 99.65079398777173,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + [ i ] ; i ++ ) {",
            "score": 99.52236938476562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + max ; i ++ ) {",
            "score": 99.51288452148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0.0; i < begin + length ; i ++ ) {",
            "score": 99.494873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 0 . 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i == weights.length ; i ++ ) {",
            "score": 99.464111328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i == weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) {",
            "score": 99.46331787109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+0; i <= weights.length ; i ++ ) {",
            "score": 99.44149780273438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights [0] ; i ++ ) {",
            "score": 99.42019171463816,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights [ 0 ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i == length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.739697265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i == length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int dev =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.650771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "int dev = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return ) ; } }",
            "score": 99.51230256453805,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < begin + length ; i ++ ) {",
            "score": 99.49350314670139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < begin + length ; i ++ ) {",
            "score": 99.49350314670139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < begin + length ; i ++ ) {",
            "score": 99.49350314670139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < begin + length ; i ++ ) {",
            "score": 99.49350314670139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < begin + length ; i ++ ) {",
            "score": 99.49350314670139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i - start ; i < weights.length ; i ++ ) {",
            "score": 99.46823952414773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i >=0; i -- ) {",
            "score": 99.46387329101563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >=0; i -- ) {",
            "score": 99.46387329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >=0; i -- ) {",
            "score": 99.46387329101563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >=0; i -- ) {",
            "score": 99.46387329101563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >=0; i -- ) {",
            "score": 99.46387329101563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length +0; i < weights.length ; i ++ ) {",
            "score": 99.441015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <= start + weights.length ; i ++ ) {",
            "score": 99.42017822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] ; }",
            "score": 99.73963341346153,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts +=0;",
            "score": 99.65053304036458,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( weights != null && weights.length >0) { return weights [ i ] ; } } }",
            "score": 99.51185674252717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights . length > 0 ) { return weights [ i ] ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < this.weights.length ; i ++ ) {",
            "score": 99.46383231026786,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < this . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < weights.length ; i ++ )",
            "score": 99.46238080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; i ++ )",
            "score": 99.46238080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; i ++ )",
            "score": 99.46238080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < weights.length ; i ++ )",
            "score": 99.46238080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; i ++ )",
            "score": 99.46238080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1+0; i < weights.length ; i ++ ) {",
            "score": 99.44091186523437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum - accum2)",
            "score": 99.65023099459134,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum - accum9111962718267217978)",
            "score": 99.65023099459134,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum - accum37)",
            "score": 99.65023099459134,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum - accum3)",
            "score": 99.65023099459134,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum - accum1983)",
            "score": 99.65023099459134,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { { continue ; }",
            "score": 99.49309747869319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) { {",
            "score": 99.46742314877717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; ++ i ) {",
            "score": 99.46346435546874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i += begin ; i < begin + length ; i ++ ) {",
            "score": 99.46141221788194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - SIZE ; i ++ ) {",
            "score": 99.44090576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - SIZE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >0; i -- ) {",
            "score": 99.4184341430664,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var = values [ i ] ;",
            "score": 99.73952318274456,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum2=0;",
            "score": 99.64987182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum9111962718267217978=0;",
            "score": 99.64987182617188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum37=0;",
            "score": 99.64987182617188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum3=0;",
            "score": 99.64987182617188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum1983=0;",
            "score": 99.64987182617188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( accum -( accum2*accum2/ sumWts ) ) {",
            "score": 99.52119954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.52119954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum37*accum37/ sumWts ) ) {",
            "score": 99.52119954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum3*accum3/ sumWts ) ) {",
            "score": 99.52119954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.52119954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int var =0; i < weights.length ; i ++ ) {",
            "score": 99.49288601345486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int var = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= weights.length ; i ++ ) { {",
            "score": 99.46673874627976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length - ; i < weights.length ; i ++ ) {",
            "score": 99.46317915482955,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = m1; i < weights.length ; i ++ ) {",
            "score": 99.44077662417763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = m 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { try {",
            "score": 99.41837768554687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights2[ i ] ;",
            "score": 99.73938860212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights $NUMBER$ [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights9111962718267217978[ i ] ;",
            "score": 99.73938860212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights $NUMBER$ [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights37[ i ] ;",
            "score": 99.73938860212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights $NUMBER$ [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights3[ i ] ;",
            "score": 99.73938860212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights $NUMBER$ [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights1983[ i ] ;",
            "score": 99.73938860212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights $NUMBER$ [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { dev = values [ i ] ;",
            "score": 99.64979619565217,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ; } }",
            "score": 99.51137473366477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < isEmpty ; i ++ ) {",
            "score": 99.462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < is CaMeL Empty ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i + length ; i ++ ) {",
            "score": 99.46040174696181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i < start + length ; i ++ ) {",
            "score": 99.41795043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin : weights.length ; i < begin ; i ++ ) {",
            "score": 99.5209073153409,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + begin : weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights [ i ] : weights ) { {",
            "score": 99.51081649116848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights [ i ] : weights ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length < weights.length ; i ++ ) {",
            "score": 99.46602376302083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin + length ; i ++ )",
            "score": 99.45927877987133,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < values.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73868815104167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < values . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int dev =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64835258152173,
            "correctness": "uncompilable",
            "tokenized_patch": "int dev = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >1; i ++ ) {",
            "score": 99.51054077148437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < accum2; i ++ ) {",
            "score": 99.45854635799633,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < accum9111962718267217978; i ++ ) {",
            "score": 99.45854635799633,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < accum37; i ++ ) {",
            "score": 99.45854635799633,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < accum3; i ++ ) {",
            "score": 99.45854635799633,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < accum1983; i ++ ) {",
            "score": 99.45854635799633,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max , weights.length ; i ++ ) {",
            "score": 99.43983154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max , weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i < length ; i ++ ) {",
            "score": 99.416162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *(",
            "score": 99.73824637276786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=0;",
            "score": 99.64791870117188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights -- ; } }",
            "score": 99.51022206182066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights -- ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == begin + length ; i ++ ) {",
            "score": 99.49161783854167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length -1; i <= n ; i -- )",
            "score": 99.46423870584239,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 1 ; i <= n ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; ++ i ) {",
            "score": 99.46210038034539,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- ; i < weights.length ; i ++ ) {",
            "score": 99.4581363075658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i != weights.length ; i ++ ) {",
            "score": 99.41605631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i != weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts -= weights [ i ] ;",
            "score": 99.73817274305556,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts -= weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < weights.length + length ; i ++ ) {",
            "score": 99.4912841796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length -1; i ++ ) {",
            "score": 99.4638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'expansion values,'+ weights.length ; i ++ ) {",
            "score": 99.4385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'population'+ weights.length ; i ++ ) {",
            "score": 99.4385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ' or '+ weights.length ; i ++ ) {",
            "score": 99.4385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'sample'+ weights.length ; i ++ ) {",
            "score": 99.4385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'population variance'+ weights.length ; i ++ ) {",
            "score": 99.4385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0int i < weights.length ; i ++ ) {",
            "score": 99.41496446397569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 int i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { double sumWts =0;",
            "score": 99.647255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - begin ; i < begin + length ; i ++ ) { {",
            "score": 99.49042038690476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - begin ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length -1; i ++ ) {",
            "score": 99.46332397460938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < max ; i ++ ) {",
            "score": 99.41493733723958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; else",
            "score": 99.73784528459821,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Iterator i = weights.length ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.646337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "Iterator i = weights . length ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <2+ weights.length ; i ++ ) {",
            "score": 99.43751831054688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <9111962718267217978+ weights.length ; i ++ ) {",
            "score": 99.43751831054688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <37+ weights.length ; i ++ ) {",
            "score": 99.43751831054688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <3+ weights.length ; i ++ ) {",
            "score": 99.43751831054688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <1983+ weights.length ; i ++ ) {",
            "score": 99.43751831054688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start , i =0; i < length ; i ++ ) {",
            "score": 99.4146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { sumWts += weights [ i ] ; }",
            "score": 99.73747035435268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double var =0.0;",
            "score": 99.64541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double var = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length : weights.length ; i < length ; i ++ ) {",
            "score": 99.51973100142045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length : weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length - weights.length ; i ++ ) {",
            "score": 99.50905443274456,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = Integer.NaN ; i < begin + length ; i ++ ) {",
            "score": 99.4896573153409,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = Integer . Na CaMeL N ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /0; i <= weights.length ; i ++ ) {",
            "score": 99.4613370028409,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i >= start + weights.length ; i ++ ) {",
            "score": 99.41403198242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= start + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts -- += weights [ i ] ;",
            "score": 99.73741803850446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts -- += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "short sumWts =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "short sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :1; i < weights.length ; i ++ ) {",
            "score": 99.51959228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= max ; i ++ ) {",
            "score": 99.50892333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start ; i ++ ) { {",
            "score": 99.46229463465073,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; weights < weights.length ; i ++ ) {",
            "score": 99.43738471137152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; weights < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - accum2;",
            "score": 99.73679896763393,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - accum9111962718267217978;",
            "score": 99.73679896763393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - accum37;",
            "score": 99.73679896763393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - accum3;",
            "score": 99.73679896763393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - accum1983;",
            "score": 99.73679896763393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum2/ sumWts ; i ++ ) {",
            "score": 99.645009765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum9111962718267217978/ sumWts ; i ++ ) {",
            "score": 99.645009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum37/ sumWts ; i ++ ) {",
            "score": 99.645009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum3/ sumWts ; i ++ ) {",
            "score": 99.645009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum1983/ sumWts ; i ++ ) {",
            "score": 99.645009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < length ; i ++ ) {",
            "score": 99.51929931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < values.length ; i ++ ) {",
            "score": 99.46111505681819,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0- length ; i < weights.length ; i ++ )",
            "score": 99.45638877467105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= start + length ; i ++ ) {",
            "score": 99.412548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i <= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i length < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73564801897321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i length < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { dev =0.0;",
            "score": 99.64451090494792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { dev = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights.begin ; i < begin + length ; i ++ ) {",
            "score": 99.51889870383523,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.46161179315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.( ) ; i < weights.length ; i ++ ) {",
            "score": 99.46086774553571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . ( ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < begin + length ; i ++ ) {",
            "score": 99.45586480034723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.0; i ++ ) {",
            "score": 99.43705919053819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length ==1&& weights [1] < weights [1] ) {",
            "score": 99.4123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length == 1 && weights [ 1 ] < weights [ 1 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7354148582176,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts = begin ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = begin ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.length -1; i < weights.length ; i ++ ) {",
            "score": 99.507080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && i < weights.length ; i ++ )",
            "score": 99.4606402853261,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ?0; i < weights.length ; i ++ ) {",
            "score": 99.46061567826705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ? 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < begin + length ; i ++ ) {",
            "score": 99.4558041221217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i2++ ) {",
            "score": 99.4368960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i9111962718267217978++ ) {",
            "score": 99.4368960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i37++ ) {",
            "score": 99.4368960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i3++ ) {",
            "score": 99.4368960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i1983++ ) {",
            "score": 99.4368960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.2; i < weights.length ; i ++ ) {",
            "score": 99.41213989257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.41213989257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.37; i < weights.length ; i ++ ) {",
            "score": 99.41213989257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.3; i < weights.length ; i ++ ) {",
            "score": 99.41213989257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.1983; i < weights.length ; i ++ ) {",
            "score": 99.41213989257812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += [ i ] *dev ;",
            "score": 99.73529052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length -0; i < weights.length ; i ++ ) {",
            "score": 99.64407348632812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length /0.length ; i ++ ) {",
            "score": 99.5063809481534,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / 0 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i < begin ; i ++ ) {",
            "score": 99.488037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.1; i ++ ) {",
            "score": 99.46053059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < begin ; i ++ ) {",
            "score": 99.4557746438419,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - true ; i ++ ) {",
            "score": 99.43661499023438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - true ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4117919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.73528180803571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double accum =0.0;",
            "score": 99.64369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double accum = 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length +1; i < weights.length ; i ++ ) {",
            "score": 99.51842151988636,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < n.length ; i ++ ) {",
            "score": 99.50635443793402,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <( weights.length -1) ; i ++ ) {",
            "score": 99.46034934303977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < ( weights . length - 1 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sum( ) ; i ++ ) {",
            "score": 99.45519341362848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / ; }",
            "score": 99.43655831473214,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i = start ; i < length ; i ++ ) {",
            "score": 99.41155646829044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73505316840277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sum2=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6436767578125,
            "correctness": "wrong",
            "tokenized_patch": "int sum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sum9111962718267217978=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6436767578125,
            "correctness": "wrong",
            "tokenized_patch": "int sum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sum37=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6436767578125,
            "correctness": "wrong",
            "tokenized_patch": "int sum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sum3=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6436767578125,
            "correctness": "wrong",
            "tokenized_patch": "int sum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sum1983=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6436767578125,
            "correctness": "wrong",
            "tokenized_patch": "int sum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { continue ; } }",
            "score": 99.50619904891305,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { continue ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= -1; i -- ) {",
            "score": 99.46017020089286,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= - 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + start +1; i < weights.length ; i ++ ) {",
            "score": 99.46002752130681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n -0; i < weights.length ; i ++ ) {",
            "score": 99.4364501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +0; i < length ; i ++ ) {",
            "score": 99.41117350260417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.7347999855324,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) var = values [ i ] ;",
            "score": 99.64356486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i =0; i < begin + length ; i ++ ) {",
            "score": 99.48700272409539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && i < start ; i ++ ) {",
            "score": 99.4599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ; i ++ )",
            "score": 99.45983208550348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i < begin ; i ++ ) {",
            "score": 99.45419650607639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin - length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73470052083333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < evaluate( values , begin , length ) ; i ++ ) {",
            "score": 99.64328931725544,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < evaluate ( values , begin , length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <=0; i ++ ) {",
            "score": 99.50520463423295,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length / sumWts ; i ++ ) {",
            "score": 99.4869051846591,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= n -1; i ++ ) {",
            "score": 99.45982776988636,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= n - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ ; i < weights.length ; i ++ ) {",
            "score": 99.4361508018092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= max ; i ++ ) {",
            "score": 99.40980360243056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += value [ i ] ;",
            "score": 99.73427553530092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += value [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double sumWts +=0;",
            "score": 99.641865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double sum CaMeL Wts += 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n =0; i <= weights.length ; i ++ ) {",
            "score": 99.50431685014205,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i >= weights.length ; i ++ ) {",
            "score": 99.45943603515624,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >= start ; i ++ ) {",
            "score": 99.40946197509766,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] *dev ; }",
            "score": 99.73420933314732,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i [ i ] =0; i < weights.length ; i ++ ) {",
            "score": 99.51703171502976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i [ i ] = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >0; i -- ) {",
            "score": 99.45913357204861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i > 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < - weights.length ; i ++ ) {",
            "score": 99.45892012746711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < n ; i ++ ) {",
            "score": 99.43472290039062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum2; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73396519252232,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + accum9111962718267217978; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73396519252232,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum37; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73396519252232,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum3; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73396519252232,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum1983; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73396519252232,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long sumWts =0; for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.640390625,
            "correctness": "uncompilable",
            "tokenized_patch": "long sum CaMeL Wts = 0 ; for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - n ; i < weights.length ; i ++ ) {",
            "score": 99.50367320667614,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - n ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length ; i <= weights.length ; i ++ ) {",
            "score": 99.45890299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < weights.length ; i ++ ) { {",
            "score": 99.45166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; i ++ ) { {",
            "score": 99.45166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; i ++ ) { {",
            "score": 99.45166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < weights.length ; i ++ ) { {",
            "score": 99.45166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; i ++ ) { {",
            "score": 99.45166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; ++ i ) {",
            "score": 99.40892791748047,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - accum2;",
            "score": 99.73361642020089,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - accum9111962718267217978;",
            "score": 99.73361642020089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - accum37;",
            "score": 99.73361642020089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - accum3;",
            "score": 99.73361642020089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - accum1983;",
            "score": 99.73361642020089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts =0;",
            "score": 99.63900756835938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + weights.length ; i ++ ) {",
            "score": 99.516845703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights length i ++ ;",
            "score": 99.50361965013587,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights length i ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /2; i <= weights.length ; i ++ ) {",
            "score": 99.45887340198864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /9111962718267217978; i <= weights.length ; i ++ ) {",
            "score": 99.45887340198864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /37; i <= weights.length ; i ++ ) {",
            "score": 99.45887340198864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /3; i <= weights.length ; i ++ ) {",
            "score": 99.45887340198864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /1983; i <= weights.length ; i ++ ) {",
            "score": 99.45887340198864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ) {",
            "score": 99.4511249248798,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.73348885995371,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int dev2=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6389872233073,
            "correctness": "wrong",
            "tokenized_patch": "int dev $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int dev9111962718267217978=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6389872233073,
            "correctness": "wrong",
            "tokenized_patch": "int dev $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int dev37=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6389872233073,
            "correctness": "wrong",
            "tokenized_patch": "int dev $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int dev3=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6389872233073,
            "correctness": "wrong",
            "tokenized_patch": "int dev $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int dev1983=0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6389872233073,
            "correctness": "wrong",
            "tokenized_patch": "int dev $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length - length ; i >=0; i ++ ) {",
            "score": 99.5035400390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < i + length ; i ++ ) {",
            "score": 99.48444158380681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < i + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : sumWts ) {",
            "score": 99.45088465073529,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start | length ; i < weights.length ; i ++ ) {",
            "score": 99.40801391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start | length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += [ i ] - mean ;",
            "score": 99.73348563058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =0.0; }",
            "score": 99.638076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = 0 . 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.5167236328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, iterator =0; i < weights.length ; i ++ ) {",
            "score": 99.50330699573864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , iterator = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i < l ; i ++ ) {",
            "score": 99.45845336914063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < l ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin int length ; i ++ ) {",
            "score": 99.45055474175348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin int length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >> < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73337227957589,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >> < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) if( length >1) {",
            "score": 99.63800048828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) if ( length > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.1)",
            "score": 99.5022503396739,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( byte i =0; i < weights.length ; i ++ ) {",
            "score": 99.4578857421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( byte i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start , n =0; i < weights.length ; i ++ ) {",
            "score": 99.45781915838069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ] ; i ++ ) {",
            "score": 99.44969985064338,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sign ; i ++ ) {",
            "score": 99.43399047851562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sign ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=0; i ++ ) { {",
            "score": 99.40760713465073,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.73204210069444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( length >1) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.636630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( length > 1 ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.charAt( i ) ; i ++ ) {",
            "score": 99.50197435461956,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . char CaMeL At ( i ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin.begin ; i < begin + length ; i ++ ) {",
            "score": 99.48334350585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < iterator.length ; i ++ ) {",
            "score": 99.45786354758523,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i < weights.length ; i ++ )",
            "score": 99.44916735197368,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73201497395833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} / *for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.50137183779762,
            "correctness": "uncompilable",
            "tokenized_patch": "} / * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( isBiasCorrected ) &&( isBiasCorrected ) ) {",
            "score": 99.48305053710938,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( is CaMeL Bias CaMeL Corrected ) && ( is CaMeL Bias CaMeL Corrected ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < value.length ; i ++ ) {",
            "score": 99.45774147727273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { if( ) {",
            "score": 99.45683149857955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i - weights.length -1; i ++ ) {",
            "score": 99.43251342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i - weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < i ; i ++ ) {",
            "score": 99.406494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.731923828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length + mean ; i < begin + length ; i ++ ) {",
            "score": 99.48295454545455,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length + mean ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'expansion values,'.length ; i ++ ) {",
            "score": 99.45716688368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'population'.length ; i ++ ) {",
            "score": 99.45716688368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ' or '.length ; i ++ ) {",
            "score": 99.45716688368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'sample'.length ; i ++ ) {",
            "score": 99.45716688368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < 'population variance'.length ; i ++ ) {",
            "score": 99.45716688368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $STRING$ . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length || i >0; i ++ ) {",
            "score": 99.45676491477273,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { }",
            "score": 99.4468635110294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) { {",
            "score": 99.43159412202381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < trim ; i ++ ) {",
            "score": 99.40585327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < trim ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=1.0;",
            "score": 99.63595815805289,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 1 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights ==0: weights.length ; i ++ ) {",
            "score": 99.51536976207386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i < begin + length ; i ++ ) {",
            "score": 99.48288302951389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <=( weights.length -1) ; i ++ ) {",
            "score": 99.45676491477273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= ( weights . length - 1 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= start ; i -- ) {",
            "score": 99.40569390190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i.< weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73157610212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i . < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( sumWts ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.635693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( sum CaMeL Wts ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += begin + length ; i < begin + length ; i ++ ) { {",
            "score": 99.48263113839286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin + length ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length -1; i >=0; i ++ ) {",
            "score": 99.4562755766369,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -- ) { {",
            "score": 99.44549881784539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -- ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts : weights [ i ] ;",
            "score": 99.73137297453704,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts : weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length ; i ++ ) { }",
            "score": 99.63337053571429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + [ i ] ; i ++ ) { {",
            "score": 99.51527622767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + [ i ] ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, length =0; i < weights.length ; i ++ ) {",
            "score": 99.5006436434659,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length + length ; i <= weights.length ; i ++ ) {",
            "score": 99.4562655362216,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.2; i ++ ) {",
            "score": 99.45601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.9111962718267217978; i ++ ) {",
            "score": 99.45601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.37; i ++ ) {",
            "score": 99.45601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.3; i ++ ) {",
            "score": 99.45601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.1983; i ++ ) {",
            "score": 99.45601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < begin ; i ++ ) {",
            "score": 99.44538879394531,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Number.MIN_VALUE ; i ++ ) {",
            "score": 99.40538940429687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Number . MIN _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.73131872106481,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { int sumWts =0;",
            "score": 99.6328515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { int sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length += weights.length ; i ++ ) {",
            "score": 99.5006103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length += weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum2*accum2/ sumWts ) ) ==0) {",
            "score": 99.482177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) ==0) {",
            "score": 99.482177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum37*accum37/ sumWts ) ) ==0) {",
            "score": 99.482177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum3*accum3/ sumWts ) ) ==0) {",
            "score": 99.482177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum1983*accum1983/ sumWts ) ) ==0) {",
            "score": 99.482177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length - n ) ; i ++ ) {",
            "score": 99.45601029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - n ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && i >0; i -- ) {",
            "score": 99.45533336292614,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i > 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin >=0; i ++ ) {",
            "score": 99.44529893663194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i > start + length ; i ++ ) {",
            "score": 99.40504964192708,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i > start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ) ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73120989118304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ) ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length -1; i < weights.length ; i ++ ) {",
            "score": 99.63262939453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin.begin ; i < weights.length ; i ++ ) {",
            "score": 99.48209838867187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [0].length ; i ++ ) {",
            "score": 99.45593843005952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ 0 ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length && n < weights.length ; i ++ ) {",
            "score": 99.43085327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length && n < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [1] ; i ++ ) {",
            "score": 99.40480443050987,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ 1 ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i != begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73116500289352,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =0.0;",
            "score": 99.63259887695312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = - begin ; i < begin + length ; i ++ ) {",
            "score": 99.48189504523026,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =( weights.length -0) -1; i >=0; i -- )",
            "score": 99.45430324388587,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 0 ) - 1 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i1=0; i < weights.length ; i ++ ) {",
            "score": 99.445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i 1 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < get( weights ).length ; i ++ ) {",
            "score": 99.43067568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < get ( weights ) . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Double.MAX_VALUE ; i ++ ) {",
            "score": 99.40480346679688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < Double . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin - length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73111074942129,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin - length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i ++ ) { {",
            "score": 99.48181762695313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.45589192708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -- )",
            "score": 99.44489602481617,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.i ; i ++ ) {",
            "score": 99.43065728081598,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0+ weights.length ; i ++ ) {",
            "score": 99.40445556640626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.73093894675925,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) if( isBiasCorrected ) {",
            "score": 99.63100022536058,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length ; i < begin + length ; i ++ ) { {",
            "score": 99.4816662016369,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ **/ for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4558438387784,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * * / for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /2; i <= weights.length ; i ++ ) {",
            "score": 99.4530917080966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /9111962718267217978; i <= weights.length ; i ++ ) {",
            "score": 99.4530917080966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /37; i <= weights.length ; i ++ ) {",
            "score": 99.4530917080966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /3; i <= weights.length ; i ++ ) {",
            "score": 99.4530917080966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /1983; i <= weights.length ; i ++ ) {",
            "score": 99.4530917080966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <=0; i ++ ) {",
            "score": 99.44475555419922,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0,0; i < weights.length ; i ++ ) {",
            "score": 99.40419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.73046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.length )",
            "score": 99.49986200747283,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . length )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < matches.length ; i ++ ) {",
            "score": 99.4554443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < matches . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start +.length ; i ++ ) {",
            "score": 99.45200709292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < in.length ; i ++ ) {",
            "score": 99.44409857855902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < in . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + i ; i ++ ) {",
            "score": 99.43009033203126,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final long i =0; i < weights.length ; i ++ ) {",
            "score": 99.40391138980263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final long i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.73046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.62783578725961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + min ; i ++ ) {",
            "score": 99.49912719726562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+0; i < begin + length ; i ++ ) {",
            "score": 99.48104858398438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i <= -1; i ++ ) {",
            "score": 99.45518275669643,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /2; i < weights.length ; i ++ ) {",
            "score": 99.4519930752841,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.4519930752841,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /37; i < weights.length ; i ++ ) {",
            "score": 99.4519930752841,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length /3; i < weights.length ; i ++ ) {",
            "score": 99.4519930752841,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /1983; i < weights.length ; i ++ ) {",
            "score": 99.4519930752841,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "List for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.44404039884868,
            "correctness": "uncompilable",
            "tokenized_patch": "List for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < chars.length ; i ++ ) {",
            "score": 99.40355088975694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < chars . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.73031503182871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i = begin ; i < begin ; i ++ ) {",
            "score": 99.62759001358695,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i < begin + length ; i ++ ) { {",
            "score": 99.51202101934524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) { }",
            "score": 99.49892790421195,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length || i < n ; i ++ ) {",
            "score": 99.4516268643466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { {",
            "score": 99.40349982766544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum2*accum2/ sumWts ) ) ;",
            "score": 99.73003278459821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) ;",
            "score": 99.73003278459821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum37*accum37/ sumWts ) ) ;",
            "score": 99.73003278459821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum3*accum3/ sumWts ) ) ;",
            "score": 99.73003278459821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum1983*accum1983/ sumWts ) ) ;",
            "score": 99.73003278459821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < weights.length ; i ++ ) { }",
            "score": 99.62742017663044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <2; i ++ ) {",
            "score": 99.51195678710937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <9111962718267217978; i ++ ) {",
            "score": 99.51195678710937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <37; i ++ ) {",
            "score": 99.51195678710937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <3; i ++ ) {",
            "score": 99.51195678710937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <1983; i ++ ) {",
            "score": 99.51195678710937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Float.length ; i ++ ) {",
            "score": 99.45426432291667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Float . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { double {",
            "score": 99.45140438988095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { double {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin / accum ; i ++ ) {",
            "score": 99.44290500217014,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / accum ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ weights.length ; i <0; i ++ ) {",
            "score": 99.42919311523437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i -- ) {",
            "score": 99.40274658203126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72994559151786,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : evaluate( values , begin , length ) ; i ++ ) {",
            "score": 99.51180013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : evaluate ( values , begin , length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return weights ; } }",
            "score": 99.49869437839673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return weights ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1.0; i < begin + length ; i ++ ) {",
            "score": 99.48046264648437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 . 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ && {",
            "score": 99.45387098524306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < accum2; i ++ ) {",
            "score": 99.44254343133224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < accum9111962718267217978; i ++ ) {",
            "score": 99.44254343133224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < accum37; i ++ ) {",
            "score": 99.44254343133224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < accum3; i ++ ) {",
            "score": 99.44254343133224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < accum1983; i ++ ) {",
            "score": 99.44254343133224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < round ; i ++ ) {",
            "score": 99.42916870117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < round ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i > start + length ; i ++ ) {",
            "score": 99.4023681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i > start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - accum2;",
            "score": 99.72945731026786,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - accum9111962718267217978;",
            "score": 99.72945731026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - accum37;",
            "score": 99.72945731026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - accum3;",
            "score": 99.72945731026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - accum1983;",
            "score": 99.72945731026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return sumWts ;",
            "score": 99.62511097301136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49826531661184,
            "correctness": "uncompilable",
            "tokenized_patch": "/ for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && ! weights [ i ] ; i ++ )",
            "score": 99.4509914232337,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && ! weights [ i ] ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < values.length ; i ++ ) {",
            "score": 99.4423828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { var = values [ i ] - mean ;",
            "score": 99.72941371372768,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { var = values [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : length ; i ++ ) {",
            "score": 99.511474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max( weights.length ) ; i ++ ) {",
            "score": 99.45348539806548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ( weights . length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && ! weights [ i ] ) {",
            "score": 99.45061383928571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && ! weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - length ; i ++ )",
            "score": 99.4422248391544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin - length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n1; i < weights.length ; i ++ ) {",
            "score": 99.42904502467105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ ) { ) {",
            "score": 99.40199110243056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < list.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7293113425926,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < list . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length + weights.length ; i ++ ) {",
            "score": 99.498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +0; i <= weights.length ; i ++ ) {",
            "score": 99.45334694602273,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length ; i ++ ) /",
            "score": 99.42901290090461,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ; i ++ ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + weights.length ; i < length ; i ++ ) {",
            "score": 99.40169677734374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sum =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.62422511888587,
            "correctness": "wrong",
            "tokenized_patch": "int sum = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < mean.length ; i ++ ) {",
            "score": 99.51099310980902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < mean . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, list =0; i < weights.length ; i ++ ) {",
            "score": 99.49803577769886,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , list = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length ; i >=1; i ++ ) {",
            "score": 99.45309787326389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start , n = weights.length -1; i <= n ; i ++ )",
            "score": 99.45048191236413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length - 1 ; i <= n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + sum ; i ++ ) {",
            "score": 99.44181315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + sum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ; i ++ ) ) {",
            "score": 99.42882080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ; i ++ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.72888635706019,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length +1; i ++ ) {",
            "score": 99.47907104492188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i != begin + length ; i ++ ) {",
            "score": 99.44155544704861,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i != begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int weights =0; weights < weights.length ; weights ++ ) {",
            "score": 99.42869737413194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int weights = 0 ; weights < weights . length ; weights ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < start - length ; i ++ ) {",
            "score": 99.40137329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.72850690569196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.72850690569196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.72850690569196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.72850690569196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.72850690569196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >1)",
            "score": 99.62211100260417,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > 1 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length - weights.length ; ++ i ) {",
            "score": 99.49749200994319,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - weights . length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length - start + length ) ; i ++ )",
            "score": 99.45011039402173,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - start + length ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start - length ; i ++ ) {",
            "score": 99.42852783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( i < weights.length ) ; i ++ ) {",
            "score": 99.40113525390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ( i < weights . length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] *mean ;",
            "score": 99.72843424479167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length , weights.length ; i ++ ) {",
            "score": 99.49724786931819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length , weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < dev + length ; i ++ ) {",
            "score": 99.47897677951389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < dev + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i = start + i - start ; i <= weights.length ; i ++ ) {",
            "score": 99.4497403231534,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < n ; i ++ ) {",
            "score": 99.42850748697917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < Number.MIN_VALUE ; i ++ ) {",
            "score": 99.40079956054687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < Number . MIN _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72831669560185,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts +=0.0;",
            "score": 99.62158203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : begin ; i < length ; i ++ ) {",
            "score": 99.51020643446181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49695933948864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i ++ ; }",
            "score": 99.4525479403409,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i ; i < weights.length ; i ++ ) { {",
            "score": 99.44860258556548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + accum ; i ++ ) {",
            "score": 99.43910047743056,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + accum ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length + 'expansion values,'; i ++ ) {",
            "score": 99.428369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + 'population'; i ++ ) {",
            "score": 99.428369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + ' or '; i ++ ) {",
            "score": 99.428369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + 'sample'; i ++ ) {",
            "score": 99.428369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + 'population variance'; i ++ ) {",
            "score": 99.428369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights [ i ] ; i ++ ) {",
            "score": 99.40074398643092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72828052662037,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += sumWts ;",
            "score": 99.62106557992789,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += sum CaMeL Wts ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < Math.NaN ; i ++ ) {",
            "score": 99.47841186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < Math . Na CaMeL N ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i <= weights.length ; i ++ ) {",
            "score": 99.45233154296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length1; i ++ ) ;",
            "score": 99.42833862304687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length 1 ; i ++ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i length ] ;",
            "score": 99.72810581752232,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i length ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { double sumWts =0;",
            "score": 99.62012780230978,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin >0; i ++ ) {",
            "score": 99.50986056857639,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ n ; i < weights.length ; i ++ ) {",
            "score": 99.49671020507813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + n ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.47826038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.47826038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.47826038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.47826038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.47826038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = T1; i < weights.length ; i ++ ) {",
            "score": 99.45201351768092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = T 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; i -- ) {",
            "score": 99.4478426846591,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ -1; i < weights.length ; i ++ ) {",
            "score": 99.42787388392857,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <= -1; i ++ ) {",
            "score": 99.39957921645221,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =0.0;",
            "score": 99.61947631835938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin -1; i < begin + length ; i ++ ) {",
            "score": 99.47824096679688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.length ; ++ i ) {",
            "score": 99.45178803943452,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { {",
            "score": 99.44703584558823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i >= start + length ; i -- ) {",
            "score": 99.39937133789063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i >= start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i -0] ;",
            "score": 99.7278464988426,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i - 0 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int var =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6193316915761,
            "correctness": "uncompilable",
            "tokenized_patch": "int var = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights ; i ++ ) {",
            "score": 99.49627685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0; for( int i =0; i < weights ; i ++ ) { {",
            "score": 99.4517489346591,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 ; for ( int i = 0 ; i < weights ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1+1; i < weights.length ; i ++ ) {",
            "score": 99.4468661221591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0.length ; i < weights.length ; i ++ ) {",
            "score": 99.42777099609376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.39837036132812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72779224537037,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += dev ;",
            "score": 99.61843872070312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} } } for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49583798363095,
            "correctness": "uncompilable",
            "tokenized_patch": "} } } for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights.length ; i ++ ) { {",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights != null ; i ++ ) {",
            "score": 99.4517489346591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights != null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start - weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.44667746803977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < weights.length ; i ++ )",
            "score": 99.43770345052083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= -1; i ++ ) {",
            "score": 99.39834755345395,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.72735595703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.72735595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.72735595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.72735595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.72735595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin [ i ] + length ; i < weights.length ; i ++ ) {",
            "score": 99.61715565557066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ i ] + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.49556107954545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < weights.length ; i ++ ) { {",
            "score": 99.47786458333333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i <= weights.length ; i -- ) {",
            "score": 99.45128284801136,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i ++ ; i < weights.length ; i ++ )",
            "score": 99.437255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; ++ ++ i ) {",
            "score": 99.42743210565476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; ++ ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < length -1; i ++ ) {",
            "score": 99.39788818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.72724260602679,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts = weights [ i ]",
            "score": 99.6171123798077,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : length ; i < weights.length ; i ++ ) {",
            "score": 99.5071533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /2; i < weights.length ; i ++ ) {",
            "score": 99.44577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.44577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /37; i < weights.length ; i ++ ) {",
            "score": 99.44577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /3; i < weights.length ; i ++ ) {",
            "score": 99.44577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length /1983; i < weights.length ; i ++ ) {",
            "score": 99.44577858664773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length / $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max =0; i < weights.length ; i ++ ) {",
            "score": 99.427294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += values [ i ] ; }",
            "score": 99.72682407924107,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length1; i < weights.length ; i ++ ) {",
            "score": 99.50711495535714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length /2; i ++ ) {",
            "score": 99.44514604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length /9111962718267217978; i ++ ) {",
            "score": 99.44514604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length /37; i ++ ) {",
            "score": 99.44514604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length /3; i ++ ) {",
            "score": 99.44514604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length /1983; i ++ ) {",
            "score": 99.44514604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ +1) {",
            "score": 99.42726440429688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ + 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.726796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=1;",
            "score": 99.61622111002605,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= begin : weights.length ; i ++ ) {",
            "score": 99.50698852539062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length -1; i <= weights.length ; i ++ ) {",
            "score": 99.4931003736413,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length0; i <= weights.length ; i ++ ) {",
            "score": 99.450439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ )",
            "score": 99.43659410978618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / *",
            "score": 99.42686767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >=0; i -- ) {",
            "score": 99.39692687988281,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.72669328962054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - begin + length ; i ++ ) {",
            "score": 99.50686645507812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1&& i < weights.length ; i ++ ) {",
            "score": 99.45029518821023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i -1; i <= weights.length ; i ++ ) {",
            "score": 99.44507446289063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - mean ; i < begin + length ; i ++ ) {",
            "score": 99.43622789884868,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - mean ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.null -0; i ++ ) {",
            "score": 99.42664184570313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . null - 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; ++ i ) {",
            "score": 99.39691925048828,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.72627314814815,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum - accum2)",
            "score": 99.61424842247597,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum - accum9111962718267217978)",
            "score": 99.61424842247597,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum - accum37)",
            "score": 99.61424842247597,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum - accum3)",
            "score": 99.61424842247597,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum - accum1983)",
            "score": 99.61424842247597,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + dev ; i ++ ) {",
            "score": 99.47576226128473,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - length -1; i < length ; i ++ ) {",
            "score": 99.45002885298295,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + iterator ; i < weights.length ; i ++ ) {",
            "score": 99.44491577148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + iterator ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start + length ; i ++ )",
            "score": 99.39652745863971,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.72599283854167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] - mean",
            "score": 99.61376014122597,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] - mean",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int ++ i =0; i < begin + length ; i ++ ) {",
            "score": 99.47573370682566,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.length1; i < weights.length ; i ++ ) {",
            "score": 99.42611839657738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . length 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; ++ i ) {",
            "score": 99.3961181640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >= weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72588433159723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "synchronized(0) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.61351477581522,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( 0 ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length -0; i < weights.length ; i ++ ) {",
            "score": 99.49208374023438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i0++ ) {",
            "score": 99.44959781044408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i 0 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <= n ; i -- ) {",
            "score": 99.4439364346591,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= n ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0*accum ; i < weights.length ; i ++ )",
            "score": 99.4354312294408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; - ++ i ) {",
            "score": 99.42575555098684,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; - ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) sumWts += weights [ i ] *dev ;",
            "score": 99.72584751674107,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i = begin ; i < begin ; i ++ ) {",
            "score": 99.6133343240489,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length1; i ++ ) {",
            "score": 99.50509482935855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( i =0; i < weights.length ; i ++ )",
            "score": 99.49165675951087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < begin ; i ++ ) {",
            "score": 99.4353386374081,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ; i ++ ) ;",
            "score": 99.42542788856908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ; i ++ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts >0)",
            "score": 99.6129901592548,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts > 0 )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < values.length ; i ++ ) {",
            "score": 99.50499877929687,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i >=0; i ++ ) {",
            "score": 99.49109996448864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( } for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.47443498883929,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( } for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i >= weights.length ; i ++ ) {",
            "score": 99.44938520951705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >= weights.length ; i ++ ) {",
            "score": 99.44938520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >= weights.length ; i ++ ) {",
            "score": 99.44938520951705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >= weights.length ; i ++ ) {",
            "score": 99.44938520951705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >= weights.length ; i ++ ) {",
            "score": 99.44938520951705,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, ; i < weights.length ; i ++ ) {",
            "score": 99.44341719777961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i =0; i < weights.length ; i ++ ) { {",
            "score": 99.39537289268092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( short i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length > i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length > i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts ==0)",
            "score": 99.6128399188702,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts == 0 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin : begin + length ; i ++ ) { {",
            "score": 99.50467354910714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length + weights.length ; i ++ ) {",
            "score": 99.49095569957386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >> < weights.length ; i ++ ) {",
            "score": 99.43503931949013,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >> < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.425048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < -1; i ++ ) {",
            "score": 99.39507092927632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.72557721819196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts =0.0;",
            "score": 99.6125957782452,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + begin - length ; i ++ ) {",
            "score": 99.503515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + mean ; i < weights.length ; i ++ ) {",
            "score": 99.47374267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ?1; i < weights.length ; i ++ ) {",
            "score": 99.44932972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ? 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <( weights.length - start ) ; i ++ ) {",
            "score": 99.44267134232955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < ( weights . length - start ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights ==0; i ++ ) {",
            "score": 99.43450927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ;0< weights.length ; i ++ ) {",
            "score": 99.39464653862848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; 0 < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] *dev ; }",
            "score": 99.72535051618304,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i <0; i ++ ) {",
            "score": 99.50310601128473,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length - weights.length ; i ++ ) {",
            "score": 99.49050071022727,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +( start + length ) ; i < weights.length ; i ++ )",
            "score": 99.44226604959239,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + ( start + length ) ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < begin ; i ++ ) {",
            "score": 99.43403625488281,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <1; i ++ ) {",
            "score": 99.42491319444444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =00; i < weights.length ; i ++ ) {",
            "score": 99.39460192228618,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i",
            "score": 99.724873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum - dev )",
            "score": 99.609013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - dev )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin :0.0; i ++ ) {",
            "score": 99.50282592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : 0 . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= weights.length -1; i ++ ) {",
            "score": 99.44223854758523,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < isBiasCorrected ) {",
            "score": 99.43363683363971,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ; i =0; i < weights.length ; i ++ ) {",
            "score": 99.42476196289063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ; i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights1; i ++ ) {",
            "score": 99.39448816636029,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights.[ i ] ;",
            "score": 99.72483607700893,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights . [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = Double.NaN ;",
            "score": 99.60887732872597,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = Double . Na CaMeL N ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length.1; i ++ ) {",
            "score": 99.44838256835938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length . 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + n -1; i < weights.length ; i ++ ) {",
            "score": 99.44078480113636,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + n - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.=0; i ++ ) {",
            "score": 99.4244449013158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . = 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, weights =0; i < weights ; i ++ ) {",
            "score": 99.39430541992188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , weights = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] *dev ; }",
            "score": 99.72465297154018,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 2; } }",
            "score": 99.48903490149456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return $NUMBER$ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 9111962718267217978; } }",
            "score": 99.48903490149456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return $NUMBER$ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 37; } }",
            "score": 99.48903490149456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return $NUMBER$ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 3; } }",
            "score": 99.48903490149456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return $NUMBER$ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 1983; } }",
            "score": 99.48903490149456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return $NUMBER$ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length.length ; i ++ ) {",
            "score": 99.47308349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < arraycopy.length ; i ++ ) {",
            "score": 99.42441813151042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < arraycopy . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , i = start ; i < length ; i ++ ) {",
            "score": 99.39381103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum2+= weights [ i ]",
            "score": 99.60482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum9111962718267217978+= weights [ i ]",
            "score": 99.60482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum37+= weights [ i ]",
            "score": 99.60482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum3+= weights [ i ]",
            "score": 99.60482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum1983+= weights [ i ]",
            "score": 99.60482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin ; i ++ ) { {",
            "score": 99.50234840029762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length ; i ++ )",
            "score": 99.43304764597039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= start + length ; i -- ) {",
            "score": 99.39230007595486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var = values [ i ] ;",
            "score": 99.7240574048913,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i <= weights.length ; i ++ ) {",
            "score": 99.60391845703126,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = Math.0; i < weights.length ; i ++ ) {",
            "score": 99.5018798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = Math . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i +1; i < weights.length ; i ++ ) {",
            "score": 99.43996360085227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i == weights.length ; i ++ ) {",
            "score": 99.43204074435764,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i == weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights.length >1&& weights [1] <= weights [1] ) {",
            "score": 99.39219360351562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] <= weights [ 1 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.72365897042411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = Double.NaN ;",
            "score": 99.60277381310097,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = Double . Na CaMeL N ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =1; i < begin + begin + length ; i ++ ) {",
            "score": 99.50127563476562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start , max = weights.length ; i < max ; i ++ ) {",
            "score": 99.43986372514205,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , max = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i -- ) {",
            "score": 99.42427825927734,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length +1; i ++ ) {",
            "score": 99.39216918945313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < weights.length ; i ++ ) { double",
            "score": 99.6024639423077,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : weights.length ; i ++ ) { {",
            "score": 99.50123232886905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { for( ) {",
            "score": 99.48832563920455,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { for ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < weights.length ; i ++ ) { {",
            "score": 99.43962751116071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.43198756167763,
            "correctness": "uncompilable",
            "tokenized_patch": "long for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i [0] =0; i < weights.length ; i ++ ) {",
            "score": 99.42424665178571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i [ 0 ] = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >=0; i ++ ) {",
            "score": 99.39216613769531,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72299081307871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - dev )",
            "score": 99.60201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - dev )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= list.length ; i ++ ) {",
            "score": 99.44677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start ; i < weights.length ; i ++ ) { {",
            "score": 99.43912760416667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1/ weights.length ; i ++ ) {",
            "score": 99.42357788085937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 / weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min + weights.length ; i ++ ) {",
            "score": 99.39191284179688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.72277379918981,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts >1)",
            "score": 99.60147798978366,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts > 1 )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin.length ; i ++ ) {",
            "score": 99.50034586588542,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i >=1; i ++ ) {",
            "score": 99.48809259588069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i >= 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length -1; i <= weights.length ; i ++ ) {",
            "score": 99.44635009765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "try { for( int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.39166870117188,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.72275216238839,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.6001446063702,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / dev ; i ++ ) {",
            "score": 99.47142333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =( weights.length -1) -1; i >0; i -- )",
            "score": 99.43824303668478,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) - 1 ; i > 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { { {",
            "score": 99.43115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Integer i =0; i < weights.length ; i ++ ) {",
            "score": 99.42350938585069,
            "correctness": "wrong",
            "tokenized_patch": "for ( Integer i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i >= start + length ; i -- ) {",
            "score": 99.39160834418402,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.72265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - mean",
            "score": 99.5994121844952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - mean",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} ***for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4875155362216,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum( dev ) ; i ++ ) {",
            "score": 99.43083110608552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum ( dev ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start / length ; i ++ ) {",
            "score": 99.39130995008681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start / length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( float i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72245732060185,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( float i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { if( isBiasCorrected )",
            "score": 99.59891451322116,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length && < weights.length ; i ++ ) {",
            "score": 99.48742145040761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i -- ) {",
            "score": 99.47081841362848,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'expansion values,'; i ++ ) {",
            "score": 99.4453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'population'; i ++ ) {",
            "score": 99.4453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= ' or '; i ++ ) {",
            "score": 99.4453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'sample'; i ++ ) {",
            "score": 99.4453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'population variance'; i ++ ) {",
            "score": 99.4453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) { ) {",
            "score": 99.4375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < - mean ; i ++ ) {",
            "score": 99.43055635340073,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - mean ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i ++0=0; i < weights.length ; i ++ ) {",
            "score": 99.4229736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) ) {",
            "score": 99.39129959909539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; ++ i ) { sumWts += weights [ i ] ;",
            "score": 99.72225839120371,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; ++ i ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double",
            "score": 99.59551038240132,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length - length ; i ++ ) {",
            "score": 99.48666381835938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i.length < weights.length ; i ++ ) {",
            "score": 99.445263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i . length < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + min ; i ++ ) {",
            "score": 99.42945014105902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <2; i ++ ) {",
            "score": 99.4225830078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <9111962718267217978; i ++ ) {",
            "score": 99.4225830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <37; i ++ ) {",
            "score": 99.4225830078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <3; i ++ ) {",
            "score": 99.4225830078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <1983; i ++ ) {",
            "score": 99.4225830078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + weights.length ; i <=0; i ++ ) {",
            "score": 99.391162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { }",
            "score": 99.59535435267857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < length ; i ++ ) {",
            "score": 99.49845377604167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < var + length ; i ++ ) {",
            "score": 99.46979437934027,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < var + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i >=0; i ++ ) {",
            "score": 99.44442894345238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + n ; i <= weights.length ; i ++ ) {",
            "score": 99.43743286132812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + n ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >0; i ++ ) {",
            "score": 99.429443359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i +=0.0; i < weights.length ; i ++ ) {",
            "score": 99.42230545847039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i += 0 . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < length ; i ++ ) {",
            "score": 99.39071316189236,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.72212275752315,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length -0; i < weights.length ; i ++ ) {",
            "score": 99.59398304332386,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin [ i ] ; i ++ ) {",
            "score": 99.4976870888158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max( weights ) ; i ++ ) {",
            "score": 99.48638594777961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ( weights ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum2; i < weights.length ; i ++ ) {",
            "score": 99.46971493675595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.46971493675595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum37; i < weights.length ; i ++ ) {",
            "score": 99.46971493675595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum3; i < weights.length ; i ++ ) {",
            "score": 99.46971493675595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum1983; i < weights.length ; i ++ ) {",
            "score": 99.46971493675595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i == weights.length ; i ++ ) {",
            "score": 99.44410400390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i == weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i ++ ; i < weights.length ; i ++ ) { {",
            "score": 99.42931450737848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = list.length ; i < weights.length ; i ++ ) {",
            "score": 99.42201538085938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = list . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! weights [ i ].equals( weights [ i ] ) ) {",
            "score": 99.39058430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ i ] . equals ( weights [ i ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += l [ i ] ;",
            "score": 99.72203233506944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += l [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length -0; i < begin + length ; i ++ ) {",
            "score": 99.5931063565341,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length - 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin ] ; i ++ ) {",
            "score": 99.49724469866071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= begin + length ; i ++ ) {",
            "score": 99.46969943576389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i = start +1; i < weights.length ; i ++ ) {",
            "score": 99.43726870888158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = start + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { ;",
            "score": 99.42925704152961,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for(0i =0; i < weights.length ; i ++ ) {",
            "score": 99.42199028862848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( 0 i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [0] ; i ++ ) { {",
            "score": 99.39051513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ 0 ] ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i != begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72189670138889,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0: weights.length ; i ++ ) {",
            "score": 99.4969482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-0; i < begin + length ; i ++ ) {",
            "score": 99.468994140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i <=0; i -- ) {",
            "score": 99.43722534179688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = - mean ; i < weights.length ; i ++ )",
            "score": 99.42897542317708,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - mean ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < double.MIN_VALUE ; i ++ ) {",
            "score": 99.39031372070312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < double . MIN _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] + mean ;",
            "score": 99.7217429832176,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] + mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev = values [ i ]",
            "score": 99.59236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = values [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i -0; i < weights.length ; i ++ ) {",
            "score": 99.43718927556819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = values.length ; i < begin ; i ++ ) {",
            "score": 99.42894829644098,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = values . length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.42184287623355,
            "correctness": "uncompilable",
            "tokenized_patch": "for for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start + length ; i ++ ) { {",
            "score": 99.39015599300987,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] length ;",
            "score": 99.72091238839286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] length ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ]",
            "score": 99.59138997395833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +1; i < weights.length ; i ++ ) { {",
            "score": 99.46857561383929,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i <= length ; i ++ ) {",
            "score": 99.4428955078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ; i ++ ) { )",
            "score": 99.43711786684783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = var ; i < weights.length ; i ++ ) {",
            "score": 99.42857530381944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = var ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { }",
            "score": 99.42142944335937,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i <= max ; i ++ ) {",
            "score": 99.38934326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =0.0; }",
            "score": 99.720791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = 0 . 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ,",
            "score": 99.59070763221153,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.435693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "double { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < values.length ; i ++ ) { {",
            "score": 99.42796566611842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < values . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length1; i <0; i ++ ) {",
            "score": 99.42141884251645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i >=0; i -- ) {",
            "score": 99.38931613498264,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length /1; i ++ ) {",
            "score": 99.46834716796874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length / 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -0; i >= -1; i ++ ) {",
            "score": 99.44269670758929,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, l = weights.length ; i < max ; i ++ ) {",
            "score": 99.43549138849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , l = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < begin ; i ++ ) {",
            "score": 99.42537689208984,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < begin ; i ++ ) {",
            "score": 99.42537689208984,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < begin ; i ++ ) {",
            "score": 99.42537689208984,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i < begin ; i ++ ) {",
            "score": 99.42537689208984,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i < begin ; i ++ ) {",
            "score": 99.42537689208984,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < var ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.72033203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < var ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : begin + length ; i <0; i ++ ) {",
            "score": 99.4956298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, i =0; i <= weights.length ; i ++ ) {",
            "score": 99.48479669744319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights -- ;",
            "score": 99.44239443824405,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null && i < weights.length ; i ++ )",
            "score": 99.4353664232337,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null && i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - weights.length ; i ++ ) {",
            "score": 99.4212646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start *length ; i ++ ) {",
            "score": 99.388916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start * length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i != length ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.71984411168981,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ]",
            "score": 99.58870442708333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; length ++ ) {",
            "score": 99.48476833767361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; length ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - length ; i < begin + length ; i ++ ) {",
            "score": 99.46778628700658,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -2; i >=1; i ++ ) {",
            "score": 99.4422119140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >=1; i ++ ) {",
            "score": 99.4422119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >=1; i ++ ) {",
            "score": 99.4422119140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >=1; i ++ ) {",
            "score": 99.4422119140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >=1; i ++ ) {",
            "score": 99.4422119140625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <=( weights.length -1) ; i ++ ) {",
            "score": 99.43513627485795,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= ( weights . length - 1 ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0-0; i < begin ; i ++ ) {",
            "score": 99.42395697699652,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i < max ; i ++ ) {",
            "score": 99.4208740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < min ; i ++ ) {",
            "score": 99.38871256510417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( long i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71983506944444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < weights.length ; i ++ ) { double",
            "score": 99.58751502403847,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum2*accum2/ sumWts ) ) /(",
            "score": 99.49546508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /(",
            "score": 99.49546508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum37*accum37/ sumWts ) ) /(",
            "score": 99.49546508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum3*accum3/ sumWts ) ) /(",
            "score": 99.49546508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum1983*accum1983/ sumWts ) ) /(",
            "score": 99.49546508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i >0; i ++ ) {",
            "score": 99.48438609730114,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i > 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Void.length ; i ++ ) {",
            "score": 99.44133843315973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Void . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < SIZE ; i ++ ) {",
            "score": 99.42384338378906,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < SIZE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i [ i ] < weights.length ; i ++ ) {",
            "score": 99.42086356026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i [ i ] < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length( ) ; i ++ ) {",
            "score": 99.38829345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] - mean ; }",
            "score": 99.71979631696429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -1)",
            "score": 99.58654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin [ i ] ; i < begin ; i ++ ) {",
            "score": 99.49539987664474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ i ] ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >> <= weights.length ; i ++ ) {",
            "score": 99.48422639266305,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >> <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + accum2; i ++ ) {",
            "score": 99.46707589285714,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i =0; i < weights.length + accum9111962718267217978; i ++ ) {",
            "score": 99.46707589285714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + accum37; i ++ ) {",
            "score": 99.46707589285714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + accum3; i ++ ) {",
            "score": 99.46707589285714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + accum1983; i ++ ) {",
            "score": 99.46707589285714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < -2; i ++ ) {",
            "score": 99.44102567784927,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < -9111962718267217978; i ++ ) {",
            "score": 99.44102567784927,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < -37; i ++ ) {",
            "score": 99.44102567784927,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < -3; i ++ ) {",
            "score": 99.44102567784927,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < -1983; i ++ ) {",
            "score": 99.44102567784927,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length -1; i >0; i -- ) {",
            "score": 99.43497924804687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i > 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m1.length ; i ++ ) {",
            "score": 99.42064144736842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m 1 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final short i =0; i < weights.length ; i ++ ) {",
            "score": 99.38827996504934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final short i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *accum2;",
            "score": 99.71975272042411,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *accum9111962718267217978;",
            "score": 99.71975272042411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *accum37;",
            "score": 99.71975272042411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *accum3;",
            "score": 99.71975272042411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] *accum1983;",
            "score": 99.71975272042411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] * accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts +=0;",
            "score": 99.5858154296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i ] < weights.length ; i ++ ) {",
            "score": 99.48352581521739,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i ] < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i >=0; i ++ ) {",
            "score": 99.44064812911184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + iterator.length -1; i >=0; i -- ) {",
            "score": 99.4347256747159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + iterator . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0[1] ; i < weights.length ; i ++ ) {",
            "score": 99.42050316220238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 [ 1 ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.71973560474537,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.begin ; i < begin ; i ++ ) {",
            "score": 99.49330444335938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.48283247514205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + - length ; i < weights.length ; i ++ ) {",
            "score": 99.466796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + - length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length { weights.length ; i ++ ) {",
            "score": 99.44054066051136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length { weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) { if( {",
            "score": 99.43453846807066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.begin ; i ++ ) {",
            "score": 99.4219970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , length = start ; i < length ; i ++ ) {",
            "score": 99.38822631835937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , length = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.719453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0: weights.length ; i < length ; i ++ ) {",
            "score": 99.493212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - iterator.length ; i ++ ) {",
            "score": 99.48259943181819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i > length ; i ++ ) {",
            "score": 99.42011108398438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length +2; i ++ ) {",
            "score": 99.38809204101562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length +9111962718267217978; i ++ ) {",
            "score": 99.38809204101562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length +37; i ++ ) {",
            "score": 99.38809204101562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length +3; i ++ ) {",
            "score": 99.38809204101562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length +1983; i ++ ) {",
            "score": 99.38809204101562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.71908133370536,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { } double sumWts =0;",
            "score": 99.58413461538461,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { } double sum CaMeL Wts = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : i ; i < begin + length ; i ++ ) {",
            "score": 99.49319458007812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : i ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length - length ; i ++ ) {",
            "score": 99.48246837797619,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +2; i < weights.length ; i ++ ) {",
            "score": 99.46648559570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.46648559570312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +37; i < weights.length ; i ++ ) {",
            "score": 99.46648559570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +3; i < weights.length ; i ++ ) {",
            "score": 99.46648559570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +1983; i < weights.length ; i ++ ) {",
            "score": 99.46648559570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=2; i ++ ) {",
            "score": 99.43912353515626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=9111962718267217978; i ++ ) {",
            "score": 99.43912353515626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=37; i ++ ) {",
            "score": 99.43912353515626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=3; i ++ ) {",
            "score": 99.43912353515626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=1983; i ++ ) {",
            "score": 99.43912353515626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( {",
            "score": 99.43419828869048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - dev ; i < weights.length ; i ++ ) {",
            "score": 99.42116827713816,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - dev ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0,1; i < weights.length ; i ++ ) {",
            "score": 99.41943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *",
            "score": 99.71894892939815,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin *begin + length ; i ++ ) {",
            "score": 99.49295654296876,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin * begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ; } } }",
            "score": 99.48244310461956,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ; } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ )",
            "score": 99.42115693933823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;0++ ) {",
            "score": 99.41893174913194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; 0 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0.0; i ++ ) {",
            "score": 99.38767496744792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *mean ; }",
            "score": 99.71891566685268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( sumWts ==1)",
            "score": 99.58294208233173,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( sum CaMeL Wts == 1 )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length - weights.length ; i ++ ) {",
            "score": 99.482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ i < weights.length ; i ++ ) {",
            "score": 99.43831380208333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i = start +1; i < weights.length ; i ++ ) {",
            "score": 99.43329412286931,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = start + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-0; i < weights.length ; i ++ )",
            "score": 99.4205386513158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start.length ; i < weights.length ; i ++ ) {",
            "score": 99.387646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts = weights [ i ] ;",
            "score": 99.71769205729167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts = weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights [ i ] - mean ; i ++ ) {",
            "score": 99.58283342633929,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ] - mean ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, start =0; i < weights.length ; i ++ ) {",
            "score": 99.48158957741477,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , start = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -2; i < weights.length ; i -- ) {",
            "score": 99.43752219460227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i < weights.length ; i -- ) {",
            "score": 99.43752219460227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i < weights.length ; i -- ) {",
            "score": 99.43752219460227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i < weights.length ; i -- ) {",
            "score": 99.43752219460227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i < weights.length ; i -- ) {",
            "score": 99.43752219460227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start - start ; i <= weights.length ; i ++ ) {",
            "score": 99.43296508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - mean ; }",
            "score": 99.71746826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i >0)",
            "score": 99.5823974609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i > 0 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + mean ; i ++ ) {",
            "score": 99.49112548828126,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = - values.length ; i < weights.length ; i ++ ) {",
            "score": 99.46541341145833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < start / weights.length ; i ++ ) {",
            "score": 99.43751220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start / weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start || i < weights.length ; i ++ ) {",
            "score": 99.43259499289773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start || i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { ) {",
            "score": 99.41873168945312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length +1; i ++ ) {",
            "score": 99.38621826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin *length ; i ++ ) {",
            "score": 99.49072875976563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin * length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length + weights.length ; ++ i ) {",
            "score": 99.48113458806819,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < [1] ; i ++ ) {",
            "score": 99.43745561079545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < [ 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i + i + i ; i < weights.length ; i ++ )",
            "score": 99.43209706182066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i + i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i <0; i ++ ) {",
            "score": 99.41866455078124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i <0; i ++ ) {",
            "score": 99.41866455078124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i <0; i ++ ) {",
            "score": 99.41866455078124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i <0; i ++ ) {",
            "score": 99.41866455078124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i <0; i ++ ) {",
            "score": 99.41866455078124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts +=1.0;",
            "score": 99.58041616586539,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += 1 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights == null ) for( int i =0; i < weights.length ; i ++ )",
            "score": 99.48063858695652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( String i =0; i < weights.length ; i ++ ) {",
            "score": 99.43718126085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( String i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ begin ; i < begin ; i ++ ) {",
            "score": 99.41951497395833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + begin ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <= start + length ; i ++ ) { {",
            "score": 99.38601845189145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.71670297475961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =( accum -1)",
            "score": 99.579619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = ( accum - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length : weights.length ; i ++ ) {",
            "score": 99.49019368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length = weights.length ; i ++ ) {",
            "score": 99.48056862571023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length = weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.getN( ) ; i ++ ) {",
            "score": 99.43717817826705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . get CaMeL N ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < accum2; i ++ ) {",
            "score": 99.41951258042279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.41951258042279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < accum37; i ++ ) {",
            "score": 99.41951258042279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < accum3; i ++ ) {",
            "score": 99.41951258042279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < accum1983; i ++ ) {",
            "score": 99.41951258042279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i *weights.length ; i ++ ) {",
            "score": 99.41821967230902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i * weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( ; i < weights.length ; i ++ ) {",
            "score": 99.38573346819196,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] ; } }",
            "score": 99.71668836805556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < begin + length ; i ++ )",
            "score": 99.57958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < mean : weights.length ; i ++ ) {",
            "score": 99.49019165039063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < mean : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < begin + length ; i ++ ) { {",
            "score": 99.46475074404762,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >= length ; i ++ ) {",
            "score": 99.43652954101563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( double i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.41939968532986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i1i ++ ) {",
            "score": 99.41746826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i 1 i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights && i <= weights ; i ++ ) {",
            "score": 99.38528442382812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights && i <= weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < start + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71628146701389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < start + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum2*accum2/ sumWts ) ; i ++ )",
            "score": 99.5793359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ )",
            "score": 99.5793359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum37*accum37/ sumWts ) ; i ++ )",
            "score": 99.5793359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum3*accum3/ sumWts ) ; i ++ )",
            "score": 99.5793359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum1983*accum1983/ sumWts ) ; i ++ )",
            "score": 99.5793359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - begin ; i ++ ) {",
            "score": 99.48994954427083,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start -0; i < weights.length ; i ++ ) {",
            "score": 99.43153076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0; i ++ )",
            "score": 99.4188232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+1; i <= weights.length ; i ++ ) {",
            "score": 99.41735229492187,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0=0; i < length ; i ++ ) {",
            "score": 99.38518608940973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < n ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7159375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < n ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length - length ; i ++ ) {",
            "score": 99.48963623046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - start ; i < weights.length ; i ++ ) {",
            "score": 99.47978071732955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < values.length ; i ++ ) {",
            "score": 99.46419677734374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < values . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= length ; i -- ) {",
            "score": 99.43633422851562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "boolean ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4314197358631,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin / sumWts ; i ++ )",
            "score": 99.41880396792763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin / sum CaMeL Wts ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start && i < length ; i ++ ) {",
            "score": 99.3851318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start && i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.715419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i -- ) {",
            "score": 99.43586168791118,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ) { {",
            "score": 99.43122664741848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < values.length ; i ++ )",
            "score": 99.4183708639706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < values . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ i ; i ++ ) {",
            "score": 99.41692437065973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final double i =0; i < weights.length ; i ++ ) {",
            "score": 99.385009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final double i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i.< weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71539306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i . < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length ==1)",
            "score": 99.57614135742188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length == 1 )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin && i < weights.length ; i ++ ) {",
            "score": 99.48910183376736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights )",
            "score": 99.47967819940476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i >=0; i ++ ) {",
            "score": 99.4355135830966,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - length ; i ++ ) { {",
            "score": 99.41827713815789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin - length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] *dev ; }",
            "score": 99.71536690848214,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) if( isBiasCorrected ) {",
            "score": 99.57558969350961,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} for( int i =0; i <0; i ++ ) {",
            "score": 99.4796501608456,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.46270751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "* / for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.43545386904762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i +1; i <= weights.length ; i ++ ) {",
            "score": 99.43087158203124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i + 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < max ; i ++ ) {",
            "score": 99.41819763183594,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1.0; i ++ ) {",
            "score": 99.38399929470486,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 . 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.71521935096153,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts ++ ;",
            "score": 99.57547129755434,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, length = weights.length ; i <= length ; i ++ ) {",
            "score": 99.47959206321023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = weights . length ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i <= weights.length ; i ++ )",
            "score": 99.435302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i <0; i ++ ) {",
            "score": 99.43074174360795,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start / length ; i < weights.length ; i ++ ) {",
            "score": 99.383935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start / length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { sumWts += weights [ i ] *dev ;",
            "score": 99.71511501736111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin1; i ++ ) {",
            "score": 99.48851821001838,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length -0; i ++ ) {",
            "score": 99.47920154389881,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length - 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { ) {",
            "score": 99.462353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i -- ) {",
            "score": 99.38392639160156,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = value [ i ] - mean ;",
            "score": 99.715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = value [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts =0;",
            "score": 99.57474772135417,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ mean ; i < begin + length ; i ++ ) {",
            "score": 99.48837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + mean ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <1; i ++ ) {",
            "score": 99.47877086292614,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < begin + length + length ; i ++ ) {",
            "score": 99.4622314453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i = weights.length -1; i >=0; i -- ) {",
            "score": 99.43453543526786,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + begin ; i < weights.length ; i ++ ) {",
            "score": 99.43040161132812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights.length ; i ++ ) { {",
            "score": 99.41643323396382,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0| weights.length ; i ++ ) {",
            "score": 99.4161376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 | weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71454535590277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin1: weights.length ; i ++ ) {",
            "score": 99.48831612723214,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin 1 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min( weights.length ) ; i ++ ) {",
            "score": 99.43441917782738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min ( weights . length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1, n = weights.length ; i < n ; i ++ )",
            "score": 99.42960258152173,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 , n = weights . length ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- = begin ; i < begin + length ; i ++ ) {",
            "score": 99.41642680921052,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+0; i <0; i ++ ) {",
            "score": 99.41611056857639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start =0; i < length ; i ++ ) {",
            "score": 99.38344319661458,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; {",
            "score": 99.71453857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] : weights.length )",
            "score": 99.47817595108695,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : weights . length )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i <=0; i ++ ) {",
            "score": 99.43434448242188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i != weights.length ; i ++ )",
            "score": 99.41635311351104,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; i ++ )",
            "score": 99.41500051398026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <= length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71402994791667,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum2= weights [ i ]",
            "score": 99.57367412860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum9111962718267217978= weights [ i ]",
            "score": 99.57367412860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum37= weights [ i ]",
            "score": 99.57367412860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum3= weights [ i ]",
            "score": 99.57367412860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum1983= weights [ i ]",
            "score": 99.57367412860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum $NUMBER$ = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < mean ; i ++ ) {",
            "score": 99.48775227864583,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0;( i < weights.length ) ? weights [ i ] : weights )",
            "score": 99.47786812160327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( i < weights . length ) ? weights [ i ] : weights )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +1; i < begin ; i ++ ) {",
            "score": 99.4613525390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- ) { ) {",
            "score": 99.42946555397727,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i i =0; i < weights.length ; i ++ ) {",
            "score": 99.41499837239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start + length ; i < length ; i ++ ) {",
            "score": 99.38339233398438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.71397986778847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( isBiasCorrected )",
            "score": 99.5732421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "try { var = accum -( accum2*accum2/ sumWts ) ;",
            "score": 99.41550806949013,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var = accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ;",
            "score": 99.41550806949013,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var = accum -( accum37*accum37/ sumWts ) ;",
            "score": 99.41550806949013,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var = accum -( accum3*accum3/ sumWts ) ;",
            "score": 99.41550806949013,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var = accum -( accum1983*accum1983/ sumWts ) ;",
            "score": 99.41550806949013,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / /",
            "score": 99.41497802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= length +1; i ++ ) {",
            "score": 99.38319702148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum2*accum2/ sumWts ) ; i ++ ) {",
            "score": 99.71395438058036,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < var +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ ) {",
            "score": 99.71395438058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum37*accum37/ sumWts ) ; i ++ ) {",
            "score": 99.71395438058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum3*accum3/ sumWts ) ; i ++ ) {",
            "score": 99.71395438058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum1983*accum1983/ sumWts ) ; i ++ ) {",
            "score": 99.71395438058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0; for( int i = begin + length ; i < weights.length ; i ++ )",
            "score": 99.5731670673077,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = begin + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.48670654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) { {",
            "score": 99.42939685639881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { int",
            "score": 99.41541812294408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; ++ i ) {",
            "score": 99.41482204861111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights == null ; i ++ ) {",
            "score": 99.38318549262152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] *dev ;",
            "score": 99.7139304832176,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights != null && n < weights.length ; i ++ )",
            "score": 99.47683848505434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null && n < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start + i ; i <= weights.length ; i ++ ) {",
            "score": 99.42926580255681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + max ; i ++ ) {",
            "score": 99.41516791449652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= this.weights.length ; i ++ ) {",
            "score": 99.41473388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= this . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights != null ; i ++ ) {",
            "score": 99.38309054904514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights != null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.7134422019676,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < var ; i ++ ) {",
            "score": 99.48619995117187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < var ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length + length ; i < weights.length ; i ++ ) {",
            "score": 99.45963134765626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length / ; i < weights.length ; i ++ ) {",
            "score": 99.433349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length / ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.begin ; i < begin ; i ++ ) {",
            "score": 99.41419813368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7130859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ weights.length ; i <= weights.length ; i ++ ) {",
            "score": 99.47658469460227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + weights . length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length + length ; i ++ ) {",
            "score": 99.45939127604167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < this..weights.length ; i ++ ) {",
            "score": 99.43257068452381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ )",
            "score": 99.42890481387867,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < sumWts ; i ++ ) {",
            "score": 99.413818359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i != start + length ; i ++ ) {",
            "score": 99.38277180989583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i != start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] / mean ;",
            "score": 99.71304434317129,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] / mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev =0.0;",
            "score": 99.57191975911458,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i <= begin + length ; i ++ ) {",
            "score": 99.48566284179688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length1) ; i ++ ) {",
            "score": 99.4323497953869,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length 1 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + values.length ; i < weights.length ; i ++ ) {",
            "score": 99.42887739701705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin1; i < weights.length ; i ++ )",
            "score": 99.41370307074652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= start - length ; i ++ ) {",
            "score": 99.38225708007812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] - dev ;",
            "score": 99.71290870949075,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length +0; i < weights.length ; i ++ ) {",
            "score": 99.57187721946023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *dev ; i ++ ) {",
            "score": 99.45867919921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, i = start ; i < weights.length ; i ++ ) {",
            "score": 99.42851118607955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.41328510485198,
            "correctness": "uncompilable",
            "tokenized_patch": "{ for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + ) ; i < weights.length ; i ++ ) {",
            "score": 99.38200073242187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = value [ i ] ;",
            "score": 99.712841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = value [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length -0; i ++ ) {",
            "score": 99.47618408203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = var + length ; i < weights.length ; i ++ ) {",
            "score": 99.45828247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = var + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length /2; i ++ ) {",
            "score": 99.4281893643466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length /9111962718267217978; i ++ ) {",
            "score": 99.4281893643466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length /37; i ++ ) {",
            "score": 99.4281893643466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length /3; i ++ ) {",
            "score": 99.4281893643466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length /1983; i ++ ) {",
            "score": 99.4281893643466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ].length ; i ++ ) {",
            "score": 99.41317409939236,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i <0; i ++ ) {",
            "score": 99.41229858398438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.38154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts *= weights [ i ] ;",
            "score": 99.71283637152777,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts *= weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *1; i ++ ) {",
            "score": 99.5714111328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : begin + length ; i < length ; i ++ ) {",
            "score": 99.48421630859374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + max ; i < weights.length ; i ++ ) {",
            "score": 99.45820922851563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + max ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'expansion values,'; i -- ) {",
            "score": 99.432080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'population'; i -- ) {",
            "score": 99.432080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= ' or '; i -- ) {",
            "score": 99.432080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'sample'; i -- ) {",
            "score": 99.432080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= 'population variance'; i -- ) {",
            "score": 99.432080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= $STRING$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i [ ] i =0; i < begin ; i ++ ) {",
            "score": 99.41309878700658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i [ ] i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0*weights.length ; i ++ ) {",
            "score": 99.41188354492188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 * weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < value.length ; i ++ ) {",
            "score": 99.3806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i > length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.712822265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i > length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin :0; i ++ ) {",
            "score": 99.48381890190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { System.arraycopy( weights ,0, weights ,0, weights ) ;",
            "score": 99.47532056725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { System . arraycopy ( weights , 0 , weights , 0 , weights ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - ; i < begin + length ; i ++ ) {",
            "score": 99.45799424913194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final ) ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4311755952381,
            "correctness": "uncompilable",
            "tokenized_patch": "final ) ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.41294459292763,
            "correctness": "uncompilable",
            "tokenized_patch": "else for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , weights =0; i < weights ; i ++ ) {",
            "score": 99.38049926757813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , weights = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.71255057198661,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length + weights.length ; i ++ ) {",
            "score": 99.47519753196023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int0=0; i < begin + length ; i ++ ) {",
            "score": 99.45751274956598,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 0 = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= start ; i ++ ) {",
            "score": 99.4308349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + ; i ++ ) {",
            "score": 99.41180098684211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start - length ; i ++ ) {",
            "score": 99.38028293185764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <= begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71237521701389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { if( length >1)",
            "score": 99.57074444110577,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { if ( length > 1 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < dev + weights.length ; i ++ ) {",
            "score": 99.45748901367188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < dev + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { ) {",
            "score": 99.43056418678977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+ accum2; i ++ ) {",
            "score": 99.41166606702302,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0+ accum9111962718267217978; i ++ ) {",
            "score": 99.41166606702302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+ accum37; i ++ ) {",
            "score": 99.41166606702302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+ accum3; i ++ ) {",
            "score": 99.41166606702302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+ accum1983; i ++ ) {",
            "score": 99.41166606702302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) { )",
            "score": 99.4115978422619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >0&& weights [0] < weights [0] ) {",
            "score": 99.38025512695313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 0 && weights [ 0 ] < weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i -1] ;",
            "score": 99.71227575231481,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i - 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, length = weights.length ; i <0; i ++ ) {",
            "score": 99.47437633167614,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.71218436104911,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i >0; i ++ ) {",
            "score": 99.48310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.43019505550987,
            "correctness": "uncompilable",
            "tokenized_patch": "public for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n ; i <= weights.length ; i ++ ) {",
            "score": 99.42723253038194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i <0; i ++ ) {",
            "score": 99.41029866536458,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i < 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights2; i ++ ) {",
            "score": 99.38005514705883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights9111962718267217978; i ++ ) {",
            "score": 99.38005514705883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights37; i ++ ) {",
            "score": 99.38005514705883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights3; i ++ ) {",
            "score": 99.38005514705883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights1983; i ++ ) {",
            "score": 99.38005514705883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += values [ i ] ;",
            "score": 99.7119773582176,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum = values [ i ]",
            "score": 99.568525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum = values [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.45701904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length -1; i <= length ; i ++ ) {",
            "score": 99.43003151633523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i <= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final int i = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.4270252046131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = values.length ; i < weights.length ; i ++ )",
            "score": 99.41022049753289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = values . length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i -- ) {",
            "score": 99.38003540039062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts += weights [ i ] ;",
            "score": 99.71145193917411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum2*accum2/ sumWts ) ) / sumWts ;",
            "score": 99.5680621603261,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) / sumWts ;",
            "score": 99.5680621603261,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum37*accum37/ sumWts ) ) / sumWts ;",
            "score": 99.5680621603261,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum3*accum3/ sumWts ) ) / sumWts ;",
            "score": 99.5680621603261,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum1983*accum1983/ sumWts ) ) / sumWts ;",
            "score": 99.5680621603261,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < dev ; i ++ ) {",
            "score": 99.48277587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < dev ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length + dev ; i ++ ) {",
            "score": 99.45701904296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length + dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i =0|| i < weights.length ; i ++ ) {",
            "score": 99.41106499565973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 || i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= weights.length ; i < weights.length ; i ++ )",
            "score": 99.41009842722039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= weights . length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i < weights.length ; ++ i ) {",
            "score": 99.37970291940789,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.71122685185185,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.56685697115384,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : accum ; i < weights.length ; i ++ ) {",
            "score": 99.48261108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : accum ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length - start ) -1; i >=0; i -- )",
            "score": 99.42668350883152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - start ) - 1 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ i ; i < weights.length ; i ++ ) {",
            "score": 99.4110595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +2; i ++ ) {",
            "score": 99.40999348958333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin +9111962718267217978; i ++ ) {",
            "score": 99.40999348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +37; i ++ ) {",
            "score": 99.40999348958333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin +3; i ++ ) {",
            "score": 99.40999348958333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin +1983; i ++ ) {",
            "score": 99.40999348958333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71120876736111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71120876736111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71120876736111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71120876736111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71120876736111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i >0; i ++ ) {",
            "score": 99.4738037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >0; i ++ ) {",
            "score": 99.4738037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >0; i ++ ) {",
            "score": 99.4738037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >0; i ++ ) {",
            "score": 99.4738037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >0; i ++ ) {",
            "score": 99.4738037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.2; i ++ ) {",
            "score": 99.42925347222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.9111962718267217978; i ++ ) {",
            "score": 99.42925347222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.37; i ++ ) {",
            "score": 99.42925347222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.3; i ++ ) {",
            "score": 99.42925347222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.1983; i ++ ) {",
            "score": 99.42925347222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- ) { if( {",
            "score": 99.42660920516305,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- ) { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max - length ; i ++ ) {",
            "score": 99.41094970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i ++ )",
            "score": 99.40968831380208,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ) ; i < weights.length ; i ++ ) {",
            "score": 99.4569091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = value.length ; i < weights.length ; i ++ ) {",
            "score": 99.42914428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = value . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length - start ; i < weights.length ; i ++ ) {",
            "score": 99.42638050426136,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < min ; i ++ ) {",
            "score": 99.41060180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i < weights.length )",
            "score": 99.56449068509616,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i < weights . length )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i <= weights.length -2; i ++ ) {",
            "score": 99.47349853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length -9111962718267217978; i ++ ) {",
            "score": 99.47349853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length -37; i ++ ) {",
            "score": 99.47349853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length -3; i ++ ) {",
            "score": 99.47349853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length -1983; i ++ ) {",
            "score": 99.47349853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i ++ ) { if( {",
            "score": 99.42624830163044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i ++ ) { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ )",
            "score": 99.4088996438419,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights == weights.length ; i ++ ) {",
            "score": 99.37860717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights == weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum2*",
            "score": 99.71042209201389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.71042209201389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum37*",
            "score": 99.71042209201389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum3*",
            "score": 99.71042209201389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.71042209201389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0: weights.length ; i ++ ) {",
            "score": 99.48214721679688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ length1] ; i ++ ) {",
            "score": 99.47303466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length - start ; i ++ ) {",
            "score": 99.42611694335938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length - start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <2- weights.length ; i ++ ) {",
            "score": 99.41030883789062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <9111962718267217978- weights.length ; i ++ ) {",
            "score": 99.41030883789062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <37- weights.length ; i ++ ) {",
            "score": 99.41030883789062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ - weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <3- weights.length ; i ++ ) {",
            "score": 99.41030883789062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <1983- weights.length ; i ++ ) {",
            "score": 99.41030883789062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ - weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + begin ; i ++ )",
            "score": 99.40867704503677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= weights.length ; i ++ ) {",
            "score": 99.37857055664062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] [",
            "score": 99.71039496527777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] [",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < begin + length ; i ++ )",
            "score": 99.56430053710938,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n -1; i <= weights.length ; i ++ ) {",
            "score": 99.42584228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < n ; i ++ ) {",
            "score": 99.41014404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { ;",
            "score": 99.40850508840461,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < value.length ; i ++ ) { {",
            "score": 99.37852718955592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < value . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.71033203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { i ++ ;",
            "score": 99.56363932291667,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { i ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin : length ; i ++ ) {",
            "score": 99.48095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /1; i <= weights.length ; i ++ ) {",
            "score": 99.47221235795455,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >= - -1; i ++ ) {",
            "score": 99.42737926136364,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= - - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i ++ ) { ) {",
            "score": 99.42573686079545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + i ; i ++ ) {",
            "score": 99.40829128689236,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; ++ i < weights.length ; i ++ ) {",
            "score": 99.3784115439967,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; ++ i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += dev ;",
            "score": 99.56290690104167,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : i ; i < begin ; i ++ ) {",
            "score": 99.48069254557292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : i ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + list.length ; i ++ ) {",
            "score": 99.47217906605114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } }",
            "score": 99.40955810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i < begin + length ; i ++ )",
            "score": 99.40802965666118,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - length ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + i ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.71009657118056,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + i ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i == begin )",
            "score": 99.56276448567708,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i == begin )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i > weights.length ; i ++ ) {",
            "score": 99.40932210286458,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin *accum ; i ++ ) {",
            "score": 99.40753851996527,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin * accum ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start1; i < weights.length ; i ++ ) {",
            "score": 99.378173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] *dev ;",
            "score": 99.71006040219908,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] * dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.evaluate( values , weights , begin , length ) ; i ++ )",
            "score": 99.56201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . evaluate ( values , weights , begin , length ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length :0; i ++ ) {",
            "score": 99.45560913085937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.1; i ++ ) {",
            "score": 99.4267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -=0; i < begin + length ; i ++ ) {",
            "score": 99.40742323133681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.37806396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( short i = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ] *mean ;",
            "score": 99.71006040219908,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts = weights [ i ]",
            "score": 99.56195537860577,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i >=0; i ++ ) {",
            "score": 99.4797119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.45543212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "/ ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.( ) ; i ++ ) {",
            "score": 99.42673853824013,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max = weights.length -1; i < max ; i ++ )",
            "score": 99.4256007982337,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , max = weights . length - 1 ; i < max ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i -- ) {",
            "score": 99.40858764648438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = i ; i < weights.length ; i ++ ) { {",
            "score": 99.40736148231908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min ; i ++ ) { {",
            "score": 99.37800867417279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = weights [ i ] *mean ;",
            "score": 99.70945457175925,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = weights [ i ] * mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin % weights.length ; i ++ ) {",
            "score": 99.4796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin % weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.indexOf( weights ) ; i ++ ) {",
            "score": 99.47144616168478,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . index CaMeL Of ( weights ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < false ; i ++ ) {",
            "score": 99.42650146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < false ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < weights.length ; i ++ )",
            "score": 99.40712603400735,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length.length ; i ++ ) {",
            "score": 99.37775336371527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts = weights [ i ] ;",
            "score": 99.70902054398148,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts = weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i == weights.length )",
            "score": 99.560546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i == weights . length )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <=1; i ++ ) {",
            "score": 99.47090287642045,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { break ; }",
            "score": 99.45504324776786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [ -1] ; i ++ ) {",
            "score": 99.42650082236842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ - 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i + i -1; i < weights.length ; i ++ )",
            "score": 99.42540973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) }",
            "score": 99.40836181640626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.40659693667763,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights , i ] ; }",
            "score": 99.70880126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights , i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ] - mean",
            "score": 99.56024639423077,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ] - mean",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i < weights.length ; i ++ )",
            "score": 99.42645554315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i < weights.length ; i ++ )",
            "score": 99.42645554315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i < weights.length ; i ++ )",
            "score": 99.42645554315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -3; i < weights.length ; i ++ )",
            "score": 99.42645554315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1983; i < weights.length ; i ++ )",
            "score": 99.42645554315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + weights.length ; i <= weights.length ; i ++ ) {",
            "score": 99.4253817471591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max ; i ++ ) { {",
            "score": 99.37717572380515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <2; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.708759765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <9111962718267217978; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.708759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <37; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.708759765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <3; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.708759765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <1983; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.708759765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] *dev",
            "score": 99.56023700420673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < mean ; i ++ ) {",
            "score": 99.47928466796876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <( weights.length ) ; i ++ ) {",
            "score": 99.42631603422619,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < ( weights . length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- begin ; i < begin ; i ++ ) {",
            "score": 99.40601942274306,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - begin ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; i -- ) {",
            "score": 99.37658013237848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i + i ] ;",
            "score": 99.70834237557871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i + i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length -1; i < weights.length ; i ++ ) {",
            "score": 99.55840509588069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i += weights.length ; i < weights.length ; i ++ ) { {",
            "score": 99.45393880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += weights . length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i >=0; i -- )",
            "score": 99.42531419836956,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0.0; i ++ )",
            "score": 99.40593405330883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Number.MAX_VALUE ; i ++ ) {",
            "score": 99.37647705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Number . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +1; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.70832429108796,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + 1 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i >1)",
            "score": 99.55813598632812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i > 1 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, length = weights.length ; i >=0; i ++ ) {",
            "score": 99.46998180042614,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = weights . length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin + weights.length ; i ++ ) {",
            "score": 99.45347290039062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i ++ {",
            "score": 99.40786597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i ++ {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < min + length ; i ++ ) {",
            "score": 99.37645806206598,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < min + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] ; } else {",
            "score": 99.70738874162946,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( length >1)",
            "score": 99.55811564127605,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( length > 1 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0, values.length ; i < weights.length ; i ++ ) {",
            "score": 99.46985973011364,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; ++ i < weights.length ; ) {",
            "score": 99.42576962425595,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; ++ i < weights . length ; ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i <= weights.length ; i ++ ) { {",
            "score": 99.42511858258929,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; ++ i ) {",
            "score": 99.407861328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <2; i ++ ) {",
            "score": 99.40555572509766,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <9111962718267217978; i ++ ) {",
            "score": 99.40555572509766,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <37; i ++ ) {",
            "score": 99.40555572509766,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <3; i ++ ) {",
            "score": 99.40555572509766,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <1983; i ++ ) {",
            "score": 99.40555572509766,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0= start ; i < length ; i ++ ) {",
            "score": 99.37641059027777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sumWts ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70725795200893,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum CaMeL Wts ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) return sumWts ;",
            "score": 99.55726207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) return sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < length ; i ++ ) {",
            "score": 99.46970436789773,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) throws Exception {",
            "score": 99.4533447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) throws Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < -0; i ++ ) {",
            "score": 99.42528578814338,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Character.length ; i ++ ) {",
            "score": 99.40782335069444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Character . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { }",
            "score": 99.40544048108552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i = start ; i < length ; i ++ ) {",
            "score": 99.37639702690973,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i == begin + length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.7072120949074,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i == begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts +=1;",
            "score": 99.5563252766927,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin ) {",
            "score": 99.47836483226104,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < isBiasCorrected ; i ++ ) { {",
            "score": 99.4524158296131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < is CaMeL Bias CaMeL Corrected ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i != n ; i ++ ) {",
            "score": 99.42478249289773,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i != n ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < accum - dev ; i ++ ) {",
            "score": 99.40530056423611,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + weights.length ; i < start ; i ++ ) {",
            "score": 99.37559814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.70720563616071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.70720563616071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.70720563616071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.70720563616071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.70720563616071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =0.0;",
            "score": 99.55517578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = mean ; i < weights.length ; i ++ ) {",
            "score": 99.47814263237848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i < values.length ; i ++ ) {",
            "score": 99.45228881835938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length - length -1; i <0; i ++ ) {",
            "score": 99.42488236860795,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : values.length ; i <1; i ++ ) {",
            "score": 99.47796630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; for( i < weights.length ; i ++ ) {",
            "score": 99.46888427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; for ( i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { }",
            "score": 99.42467680431548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { double {",
            "score": 99.42406005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { double {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - accum2; i ++ ) {",
            "score": 99.405029296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum - accum9111962718267217978; i ++ ) {",
            "score": 99.405029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - accum37; i ++ ) {",
            "score": 99.405029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - accum3; i ++ ) {",
            "score": 99.405029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - accum1983; i ++ ) {",
            "score": 99.405029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.70703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < m1; i ++ ) {",
            "score": 99.42445591517857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < m 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i <1; i ++ ) {",
            "score": 99.4071044921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i != begin ; i ++ ) {",
            "score": 99.40502166748047,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.37477416992188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] - mean ; }",
            "score": 99.70697893415179,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + iterator.length ; i ++ ) {",
            "score": 99.46882768110795,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + mean ; i < begin + length ; i ++ ) {",
            "score": 99.451953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + mean ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1; ++ i ) {",
            "score": 99.4244384765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 1 ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { final double {",
            "score": 99.42402576264881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { final double {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < weights.length ; i ++ )",
            "score": 99.4049136513158,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(0=0; i < weights.length ; i ++ ) {",
            "score": 99.374267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.70686848958333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( length >0)",
            "score": 99.55384318033855,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( length > 0 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : begin + begin ; i < begin ; i ++ ) {",
            "score": 99.47717895507813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < min ; i ++ ) {",
            "score": 99.4687832919034,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; length < weights.length ; i ++ ) {",
            "score": 99.40660264756944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; length < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length.length ; i ++ ) {",
            "score": 99.37373657226563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! accum -( accum2*accum2/ sumWts ) ) {",
            "score": 99.4770572060033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.4770572060033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! accum -( accum37*accum37/ sumWts ) ) {",
            "score": 99.4770572060033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! accum -( accum3*accum3/ sumWts ) ) {",
            "score": 99.4770572060033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! accum -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.4770572060033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = list.length -1; i < weights.length ; i ++ ) {",
            "score": 99.46876109730114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = list . length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { double ) {",
            "score": 99.42339797247024,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { double ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i( weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.40634155273438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ( weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < var ; i ++ ) {",
            "score": 99.40453338623047,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < var ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =2; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70683942522321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70683942522321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70683942522321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70683942522321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70683942522321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) sumWts += weights [ i ]",
            "score": 99.5523046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { for( int i ++",
            "score": 99.4685695482337,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { for ( int i ++",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++0; i < weights.length ; i ++ )",
            "score": 99.42353959517045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - begin ; i < begin ; i ++ ) {",
            "score": 99.40398491753473,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - begin ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < min && i < length ; i ++ ) {",
            "score": 99.373193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min && i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.70679615162037,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int sumWts =0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.55136108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.47606811523437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - values.length ; i ++ ) {",
            "score": 99.46828391335227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - values . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start , i =0; i < weights.length ; i ++ ) {",
            "score": 99.4228848544034,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.max ; i ++ ) {",
            "score": 99.40610080295139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+0; i < begin ; i ++ ) {",
            "score": 99.40365939670139,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.70668381911058,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : var + length ; i < begin ; i ++ ) {",
            "score": 99.47520141601562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : var + length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i > n ; i ++ ) {",
            "score": 99.46806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [1] ; i ++ ) {",
            "score": 99.42291937934027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n =0; i < n ; i ++ ) {",
            "score": 99.42217407226562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for(.i =0; i < weights.length ; i ++ ) {",
            "score": 99.40593804253473,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( . i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { {",
            "score": 99.4033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.37269287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -- ) { sumWts += weights [ i ] ; }",
            "score": 99.70659528459821,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -- ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length >0; i ++ ) {",
            "score": 99.4751708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.arraycopy( weights ,0, weights ,1, weights.length ) ;",
            "score": 99.46797688802083,
            "correctness": "uncompilable",
            "tokenized_patch": "System . arraycopy ( weights , 0 , weights , 1 , weights . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = null ; i < begin + length ; i ++ ) {",
            "score": 99.45041232638889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = null ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < list.length ; i ++ ) {",
            "score": 99.40579833984376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < exp.length ; i ++ ) {",
            "score": 99.37223307291667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < exp . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70647723858173,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev =0;",
            "score": 99.5497159090909,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin1; i < begin ; i ++ ) {",
            "score": 99.47450884650735,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length >1) ; i ++ ) {",
            "score": 99.4678067294034,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length > 1 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { m",
            "score": 99.4222476356908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { m",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i ==0; i ++ ) {",
            "score": 99.4057861328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i == 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( long i =0; i < weights.length ; i ++ ) { {",
            "score": 99.37153705797698,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) { var = values [ i ] ;",
            "score": 99.70644350405092,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin +1; i ++ ) {",
            "score": 99.47430419921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "int1; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.45031156994048,
            "correctness": "uncompilable",
            "tokenized_patch": "int 1 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length + ; i < weights.length ; i ++ ) {",
            "score": 99.42208426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length + ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / ;",
            "score": 99.40509643554688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum2*accum2/ sumWts ) /( sumWts -1.0) ;",
            "score": 99.549453125,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum9111962718267217978*accum9111962718267217978/ sumWts ) /( sumWts -1.0) ;",
            "score": 99.549453125,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum37*accum37/ sumWts ) /( sumWts -1.0) ;",
            "score": 99.549453125,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum3*accum3/ sumWts ) /( sumWts -1.0) ;",
            "score": 99.549453125,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum1983*accum1983/ sumWts ) /( sumWts -1.0) ;",
            "score": 99.549453125,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / ( sum CaMeL Wts - 1 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : i + length ; i < begin ; i ++ ) {",
            "score": 99.47408447265624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : i + length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) { } } }",
            "score": 99.46740191915761,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( isBiasCorrected ) &&( isBiasCorrected ) ) {",
            "score": 99.4498779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( is CaMeL Bias CaMeL Corrected ) && ( is CaMeL Bias CaMeL Corrected ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i - weights.length ; i ++ ) {",
            "score": 99.40488009982639,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - ; i < weights.length ; i ++ ) {",
            "score": 99.40189401726974,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { else {",
            "score": 99.37140502929688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.7051953125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length - weights.length ; i ++ ) {",
            "score": 99.46717418323864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) }",
            "score": 99.42199028862848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length -1; i < n ; i ++ )",
            "score": 99.4205906080163,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length - 1 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / n ; i ++ ) {",
            "score": 99.40484619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >= start ; i -- ) {",
            "score": 99.37135314941406,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= start ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var = values [ i ] ;",
            "score": 99.70503566576087,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum2+= weights [ i ]",
            "score": 99.54830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum9111962718267217978+= weights [ i ]",
            "score": 99.54830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum37+= weights [ i ]",
            "score": 99.54830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum3+= weights [ i ]",
            "score": 99.54830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { accum1983+= weights [ i ]",
            "score": 99.54830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { accum $NUMBER$ += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i ++ ) { }",
            "score": 99.46709914434524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int0= begin ; i < weights.length ; i ++ ) {",
            "score": 99.44953070746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 0 = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length -1; i >=0; i -- )",
            "score": 99.42043138586956,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length - 1 ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { *",
            "score": 99.40482370476974,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i -- ) {",
            "score": 99.40087890625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; ++ i >=0; ) {",
            "score": 99.37118326822916,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i >= 0 ; ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - weights.length ; i ++ ) { }",
            "score": 99.46689240828805,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i ; i >=0; i ++ ) {",
            "score": 99.42169189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -=2) {",
            "score": 99.42030552455357,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -=9111962718267217978) {",
            "score": 99.42030552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -=37) {",
            "score": 99.42030552455357,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -=3) {",
            "score": 99.42030552455357,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -=1983) {",
            "score": 99.42030552455357,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < i - length ; i ++ ) {",
            "score": 99.40469021267361,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum - length ; i ++ )",
            "score": 99.40064194623162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.70482421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ] ; i < weights.length ; i ++ ) {",
            "score": 99.54735043174342,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <= begin ; i ++ ) {",
            "score": 99.47322998046874,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i <= begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min( weights ) ; i ++ ) {",
            "score": 99.46656558388158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min ( weights ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.42012329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+0; i ++ ) {",
            "score": 99.40467664930556,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+0; i < weights.length ; i ++ )",
            "score": 99.40058336759868,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - dev ; }",
            "score": 99.70472063337054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.54701741536458,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights ) { if( isBiasCorrected ) {",
            "score": 99.47320556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights..length ; i ++ ) {",
            "score": 99.46652061060855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length + length ; i < begin + length ; i ++ ) {",
            "score": 99.44879150390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length || weights ; i ++ ) {",
            "score": 99.42147972470238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length || weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < ) {",
            "score": 99.41990831163194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1+1; i < weights.length ; i ++ ) {",
            "score": 99.4044677734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin double ; i ++ ) {",
            "score": 99.40028291590073,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin double ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start *length ; i ++ ) {",
            "score": 99.37043592664931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start * length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i +",
            "score": 99.70458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < begin ; i ++ ) {",
            "score": 99.47313096788194,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0/ weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.46629749644886,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 / weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( i = start ; i < weights.length ; i ++ ) {",
            "score": 99.41981416590073,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ;1< weights.length ; i ++ ) {",
            "score": 99.4043212890625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; 1 < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i -- < weights.length ; i ++ ) {",
            "score": 99.40013363486842,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i -- < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < short.MAX_VALUE ; i ++ ) {",
            "score": 99.3703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < short . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { if( length >1)",
            "score": 99.54636637369792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { if ( length > 1 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin / length ; i ++ ) {",
            "score": 99.47201877170139,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length *dev ; i ++ ) {",
            "score": 99.448193359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length * dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "final int n = weights.length ; for( int i =0; i < n ; i ++ )",
            "score": 99.41968834918478,
            "correctness": "uncompilable",
            "tokenized_patch": "final int n = weights . length ; for ( int i = 0 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.1) {",
            "score": 99.40428466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { else",
            "score": 99.39992161800987,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < start - length ; i ++ ) {",
            "score": 99.37027587890626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum2*accum2/ sumWts ) )",
            "score": 99.70408347800925,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) )",
            "score": 99.70408347800925,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum37*accum37/ sumWts ) )",
            "score": 99.70408347800925,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum3*accum3/ sumWts ) )",
            "score": 99.70408347800925,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum1983*accum1983/ sumWts ) )",
            "score": 99.70408347800925,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum2*accum2/ sumWts ) ) / sumWts ) {",
            "score": 99.54635620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) / sumWts ) {",
            "score": 99.54635620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum37*accum37/ sumWts ) ) / sumWts ) {",
            "score": 99.54635620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum3*accum3/ sumWts ) ) / sumWts ) {",
            "score": 99.54635620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum1983*accum1983/ sumWts ) ) / sumWts ) {",
            "score": 99.54635620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < begin : weights.length ) {",
            "score": 99.47164481026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < begin : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ) ; i < begin + length ; i ++ ) {",
            "score": 99.44817243303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ) ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.; i ++ ) {",
            "score": 99.40422506893383,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { ;",
            "score": 99.39983053768383,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] - var ;",
            "score": 99.70394784432871,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - var ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0: begin ; i < begin + length ; i ++ ) {",
            "score": 99.4714111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, l = weights.length -1; i < l ; i ++ )",
            "score": 99.41933806046195,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , l = weights . length - 1 ; i < l ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = new =0; i < weights.length ; i ++ ) {",
            "score": 99.40410766601562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = new = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= weights ; i ++ ) {",
            "score": 99.36958143446181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.54630903764205,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ length -1; i <= weights.length ; i ++ ) {",
            "score": 99.46513227982955,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin / sumWts ; i ++ ) {",
            "score": 99.4474853515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin / sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Math.MAX_VALUE ; i ++ ) {",
            "score": 99.40409545898437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < Number.MAX_VALUE ; i ++ ) {",
            "score": 99.36904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < Number . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *dev ; }",
            "score": 99.70390101841518,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] * dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.5462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;1++ i ) {",
            "score": 99.42078921669408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; 1 ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length1; i ++ ) {",
            "score": 99.40408325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < double.MAX_VALUE ; i ++ ) {",
            "score": 99.36903686523438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < double . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev = weights [ i ] - mean ;",
            "score": 99.70332554408482,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev = weights [ i ] - mean ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum2; i ++ ) {",
            "score": 99.54580543154762,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum9111962718267217978; i ++ ) {",
            "score": 99.54580543154762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum37; i ++ ) {",
            "score": 99.54580543154762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum3; i ++ ) {",
            "score": 99.54580543154762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *accum1983; i ++ ) {",
            "score": 99.54580543154762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < begin ; i ++ ) {",
            "score": 99.47022202435662,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -0; i < weights.length ; i ++ ) { {",
            "score": 99.44703369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < |= weights.length ; i ++ ) {",
            "score": 99.42069284539474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < |= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = weights.length -1; i >=0; i -- ) {",
            "score": 99.41873972039474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : sumWts ) {",
            "score": 99.39893863075658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start && i < length ; i ++ ) {",
            "score": 99.36856689453126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start && i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >= length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.70310546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i >= length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length /1; i < weights.length ; i ++ ) {",
            "score": 99.42068481445312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length / 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < start + ; i ++ ) {",
            "score": 99.41867963005515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i |=0; i < weights.length ; i ++ ) {",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i |= 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ==1; i ++ ) {",
            "score": 99.36819458007812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length == 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin double length ; i ++ ) {",
            "score": 99.46996392144098,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin double length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +2; i < begin + length ; i ++ ) {",
            "score": 99.4464599609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +9111962718267217978; i < begin + length ; i ++ ) {",
            "score": 99.4464599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +37; i < begin + length ; i ++ ) {",
            "score": 99.4464599609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +3; i < begin + length ; i ++ ) {",
            "score": 99.4464599609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin +1983; i < begin + length ; i ++ ) {",
            "score": 99.4464599609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= i -1; i ++ ) {",
            "score": 99.42066539417614,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= i - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length - start ; i <= weights.length ; i ++ ) {",
            "score": 99.41860129616477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4039370888158,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -0; i < begin ; i ++ ) {",
            "score": 99.39882405598958,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i -1] ;",
            "score": 99.70272714120371,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i - 1 ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length + mean ; i ++ ) {",
            "score": 99.44629516601563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = this.weights.length -1; i >=0; i -- ) {",
            "score": 99.41819069602273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = this . weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0- length ; i ++ ) {",
            "score": 99.40351019965277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length /1; i ++ )",
            "score": 99.39874588815789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int iterator = weights.length ; iterator < weights.length ; iterator ++ ) {",
            "score": 99.36688842773438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int iterator = weights . length ; iterator < weights . length ; iterator ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.7025734230324,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + values.length ; i ++ ) {",
            "score": 99.44620361328126,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < start / length ; i ++ ) {",
            "score": 99.41800265842014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start / length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- mean ; i <0; i ++ ) {",
            "score": 99.39871554904514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights +1) ; i ++ ) {",
            "score": 99.36671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights + 1 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70249586838942,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i ==0)",
            "score": 99.54437255859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i == 0 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0: weights.length ; i < mean ; i ++ ) {",
            "score": 99.46959228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length + length ; i ++ ) {",
            "score": 99.44594997829861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = value ; i < weights.length ; i ++ ) {",
            "score": 99.42020670572917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = value ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max ; i <= weights.length ; i ++ ) {",
            "score": 99.41799587673611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin + length ; i ++ )",
            "score": 99.39822548314145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ] *dev ; }",
            "score": 99.70217459542411,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ && isBiasCorrected ) {",
            "score": 99.54430135091145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ && is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length + mean ; i < weights.length ; i ++ ) {",
            "score": 99.46908569335938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length + mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i == begin + length ; i ++ ) {",
            "score": 99.44589572482639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i == begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) throws",
            "score": 99.4200772372159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m2; i ++ ) {",
            "score": 99.40327004825367,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m9111962718267217978; i ++ ) {",
            "score": 99.40327004825367,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m37; i ++ ) {",
            "score": 99.40327004825367,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m3; i ++ ) {",
            "score": 99.40327004825367,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < m1983; i ++ ) {",
            "score": 99.40327004825367,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < m $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin !=0; i ++ ) {",
            "score": 99.3978271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin != 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i != length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.70212026742789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i != length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < weights.length ; i ++ ) { double",
            "score": 99.54401961616848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length ; i < weights . length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + -1; i < weights.length ; i ++ ) {",
            "score": 99.44573102678571,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ++ ) {",
            "score": 99.4025650024414,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights1.length ; i ++ ) {",
            "score": 99.36526007401316,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights 1 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.70206351902173,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + length ; i >=0; i ++ ) {",
            "score": 99.54385036892361,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < min : weights.length ; i ++ ) {",
            "score": 99.46881713867188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <2; i ++ ) {",
            "score": 99.46340110085227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <9111962718267217978; i ++ ) {",
            "score": 99.46340110085227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <37; i ++ ) {",
            "score": 99.46340110085227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <3; i ++ ) {",
            "score": 99.46340110085227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <1983; i ++ ) {",
            "score": 99.46340110085227,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int var =0; i < begin + length ; i ++ ) {",
            "score": 99.44570583767361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int var = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length -1; i <=0; i ++ ) {",
            "score": 99.4196444424716,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { ) {",
            "score": 99.40218098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -0; i < weights.length ; i ++ )",
            "score": 99.39737955729167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i >= start ; i ++ ) {",
            "score": 99.36505126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i >= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.70185004340277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( i > begin )",
            "score": 99.54317220052083,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( i > begin )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { throw null ; } }",
            "score": 99.46330460258152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { throw null ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.null ; i ++ ) {",
            "score": 99.41950334821429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length -0; i < n ; i ++ )",
            "score": 99.4169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length - 0 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int while =0; i < weights.length ; i ++ ) {",
            "score": 99.39727783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int while = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.701845703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < evaluate( values , weights , begin , length ) ; i ++ )",
            "score": 99.54090372721355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < evaluate ( values , weights , begin , length ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin / values.length ; i ++ ) {",
            "score": 99.46792602539062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / values . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - weights.length ; i ++ ) { {",
            "score": 99.46316661005434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i + length ; i < weights.length ; i ++ ) {",
            "score": 99.4448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights.length ; i ++ ) {",
            "score": 99.41941139914773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length -1; i ++ ) {",
            "score": 99.41632634943181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i ++ ; i < begin + length ; i ++ ) {",
            "score": 99.39647001378677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >= weights.length ; i ++ ) {",
            "score": 99.36453586154514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.70155552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.70155552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.70155552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.70155552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.70155552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <=0; i ++ ) {",
            "score": 99.46787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} **for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.46261160714286,
            "correctness": "uncompilable",
            "tokenized_patch": "} * * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2*sumWts ; i ++ ) {",
            "score": 99.44475446428571,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978*sumWts ; i ++ ) {",
            "score": 99.44475446428571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37*sumWts ; i ++ ) {",
            "score": 99.44475446428571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3*sumWts ; i ++ ) {",
            "score": 99.44475446428571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983*sumWts ; i ++ ) {",
            "score": 99.44475446428571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i -- ) {",
            "score": 99.41929626464844,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final int i = start +1; i < weights.length ; i ++ ) {",
            "score": 99.4162830171131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1, weights.length ; i ++ ) {",
            "score": 99.40205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 , weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < bitCount ; i ++ ) {",
            "score": 99.36385091145833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < bit CaMeL Count ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] - mean ; }",
            "score": 99.70101492745536,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.iterator( ) ; i ++ ) {",
            "score": 99.54046020507812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . iterator ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i += weights.length ) {",
            "score": 99.40189034598214,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i += weights . length ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < accum2; i ++ )",
            "score": 99.39630889892578,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum9111962718267217978; i ++ )",
            "score": 99.39630889892578,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum37; i ++ )",
            "score": 99.39630889892578,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum3; i ++ )",
            "score": 99.39630889892578,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum1983; i ++ )",
            "score": 99.39630889892578,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights , i ;",
            "score": 99.70081505408653,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights , i ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + NaN ; i ++ ) {",
            "score": 99.46702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + Na CaMeL N ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights ; i < weights.length ; i ++ ) {",
            "score": 99.44407348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i != weights.length ; i ++ ) {",
            "score": 99.41901506696429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i != weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = start + weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.41581798735119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = start + weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / ; i ++ ) {",
            "score": 99.4016049033717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.3961117393092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= min ; i ++ ) {",
            "score": 99.36341094970703,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin + length ; i <0; i ++ ) {",
            "score": 99.46565551757813,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i <0; i ++ )",
            "score": 99.46162553267045,
            "correctness": "wrong",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < 0 ; i ++ )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length && i < max ; i ++ ) {",
            "score": 99.41570490056819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [0] ) {",
            "score": 99.363134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { var = values [ i ] - mean ;",
            "score": 99.70072880497685,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin : begin ) {",
            "score": 99.46534016927083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.1; i < weights.length ; i ++ ) {",
            "score": 99.4185302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= start + length ; i ++ ) {",
            "score": 99.41562721946023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int1=0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.70071976273148,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 1 = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; ++ i ) {",
            "score": 99.46525743272569,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights == length ; i ++ ) {",
            "score": 99.41792436079545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights == length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { break ; }",
            "score": 99.41538783482143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < = weights.length ; i ++ ) {",
            "score": 99.4012451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < = weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = --0; i < weights.length ; i ++ ) {",
            "score": 99.36231753700658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = -- 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { var = values [ i ] - mean ;",
            "score": 99.70067455150463,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { var = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin *length ; i < weights.length ; i ++ ) {",
            "score": 99.53562622070312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin * length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin + begin ; i ++ ) {",
            "score": 99.4645263671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, length = weights.length ; i < n ; i ++ ) {",
            "score": 99.46124822443181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = -1; i < weights.length ; i ++ ) {",
            "score": 99.417724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= i ; i ++ ) {",
            "score": 99.40101928710938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start , weights = start ; i < weights ; i ++ ) {",
            "score": 99.3622802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , weights = start ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] - dev ;",
            "score": 99.7003761574074,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] - dev ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length -1; i ++ ) {",
            "score": 99.46407470703124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + -0; i < weights.length ; i ++ ) {",
            "score": 99.44351050967262,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i != weights.length ; ++ i ) {",
            "score": 99.41759144176136,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i != weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ null ; i < weights.length ; i ++ ) {",
            "score": 99.4009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + null ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum ; i < begin ; i ++ ) {",
            "score": 99.39504665798611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i -- ) { sumWts += weights [ i ] ;",
            "score": 99.69983362268519,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i -- ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0*accum2; i < weights.length ; i ++ ) {",
            "score": 99.44330124627976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.44330124627976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum37; i < weights.length ; i ++ ) {",
            "score": 99.44330124627976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum3; i < weights.length ; i ++ ) {",
            "score": 99.44330124627976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0*accum1983; i < weights.length ; i ++ ) {",
            "score": 99.44330124627976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 * accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i <= n ; i -- ) {",
            "score": 99.4150723544034,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i <= n ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i <0; i ++ )",
            "score": 99.39492958470395,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < trim.length ; i ++ ) {",
            "score": 99.36209445529514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < trim . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( char i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.69953522858796,
            "correctness": "wrong",
            "tokenized_patch": "for ( char i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < begin - length ; i ++ ) {",
            "score": 99.46364339192708,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int n =0; n < weights.length ; i ++ ) {",
            "score": 99.36175537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int n = 0 ; n < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights , i ] ;",
            "score": 99.69912832754629,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights , i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < max ; i ++ ) {",
            "score": 99.4635498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; ++ i ) {",
            "score": 99.41733269942434,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double weights [ ] =",
            "score": 99.41477369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double weights [ ] =",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < isBiasCorrected ; i ++ )",
            "score": 99.39475611636513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < is CaMeL Bias CaMeL Corrected ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin && i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.69885706018519,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin && i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i.length =0; i < weights.length ; i ++ ) {",
            "score": 99.41729125976562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i . length = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { ) {",
            "score": 99.41473388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { i ++ ; } }",
            "score": 99.4001232328869,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { i ++ ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - mean ; i < begin ; i ++ ) {",
            "score": 99.39468204273896,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + weights.length ; i >=0; i -- ) {",
            "score": 99.36151123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + weights . length ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] ; else {",
            "score": 99.69871238425925,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ; else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.463330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [ weights.length ; i ++ ) {",
            "score": 99.4172427528783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length ; i ++ )",
            "score": 99.41473029641544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < i ; i ++ ) {",
            "score": 99.39976196289062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + begin ; i ++ ) { {",
            "score": 99.39442845394737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length -1; i >=0; i -- ) {",
            "score": 99.36046006944444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.6985332782452,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i ++ ;",
            "score": 99.53359840029762,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length1; i ++ ) {",
            "score": 99.46332108347039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.46074829101562,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=1; i < weights.length ; i ++ ) {",
            "score": 99.39419894748264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >0; i ++ ) {",
            "score": 99.36018880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.69841796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i =2; i < weights.length ; i ++ ) {",
            "score": 99.4169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.4169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =37; i < weights.length ; i ++ ) {",
            "score": 99.4169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =3; i < weights.length ; i ++ ) {",
            "score": 99.4169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =1983; i < weights.length ; i ++ ) {",
            "score": 99.4169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) { if( )",
            "score": 99.4143703294837,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) { if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < begin ; i ++ ) {",
            "score": 99.39411477481617,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = name.length -1; i >=0; i -- ) {",
            "score": 99.36000366210938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = name . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) return sumWts ;",
            "score": 99.5334981282552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) return sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max = weights.length ; i < min ; i ++ ) {",
            "score": 99.46010520241477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , max = weights . length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= weights.length ; ++ i ) {",
            "score": 99.4164151278409,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= weights . length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.equals( ) ; i ++ ) {",
            "score": 99.39912719726563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . equals ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i !=0; i ++ ) {",
            "score": 99.39378356933594,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final int i = start ; i < weights.length ; i ++ ) { {",
            "score": 99.35991821289062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.69797188895089,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - length + length ; i ++ ) {",
            "score": 99.46284790039063,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length + weights.length ; i ++ ) { }",
            "score": 99.46009893002717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length : weights.length ; i ++ ) {",
            "score": 99.44181993272569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + ; i <= weights.length ; i ++ ) {",
            "score": 99.4141781455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , i ++ ) {",
            "score": 99.39875139508929,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0.0; i < begin + length ; i ++ )",
            "score": 99.39313065378289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i > weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.69794379340277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "double sumWts =0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.53268432617188,
            "correctness": "uncompilable",
            "tokenized_patch": "double sum CaMeL Wts = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + begin - length ; i ++ ) {",
            "score": 99.46260986328124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + begin - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.length ; i -- ) {",
            "score": 99.4160388764881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length *2; i < weights.length ; i ++ ) {",
            "score": 99.41396262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length * $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length *9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.41396262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length * $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length *37; i < weights.length ; i ++ ) {",
            "score": 99.41396262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length * $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length *3; i < weights.length ; i ++ ) {",
            "score": 99.41396262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length * $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length *1983; i < weights.length ; i ++ ) {",
            "score": 99.41396262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length * $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights ; i ++ ) {",
            "score": 99.39311387803819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.3595034950658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.697890625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "while( i < weights.length ) { sumWts += weights [ i ] *dev ;",
            "score": 99.53185453869048,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( i < weights . length ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.44117373511905,
            "correctness": "uncompilable",
            "tokenized_patch": "int 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Class i =0; i < weights.length ; i ++ ) {",
            "score": 99.41579861111111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Class i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ") { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.39801025390625,
            "correctness": "uncompilable",
            "tokenized_patch": ") { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < dev ; i ++ )",
            "score": 99.39302571614583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < dev ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = read ; i < weights.length ; i ++ ) {",
            "score": 99.35948350694444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = read ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += [ i ] ;",
            "score": 99.69751915564903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin +1; i ++ ) {",
            "score": 99.46239624023437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.45961064877717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length -1; i < weights.length ; i ++ )",
            "score": 99.41579367897727,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i < n ; ++ i ) {",
            "score": 99.41377397017045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i < n ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { else",
            "score": 99.3927863625919,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights == null ; i ++ ) {",
            "score": 99.35925971137152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights == null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts = weights [ i ] ; }",
            "score": 99.69750104631696,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts = weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < accum2; i ++ ) {",
            "score": 99.46225120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < accum9111962718267217978; i ++ ) {",
            "score": 99.46225120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < accum37; i ++ ) {",
            "score": 99.46225120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < accum3; i ++ ) {",
            "score": 99.46225120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < accum1983; i ++ ) {",
            "score": 99.46225120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i >0; i ++ ) {",
            "score": 99.45952758789062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { ) {",
            "score": 99.44075927734374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights != null || i < weights.length ; i ++ ) {",
            "score": 99.41572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights != null || i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , max ++ ) {",
            "score": 99.39783296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , max ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ )",
            "score": 99.39239095052083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , {",
            "score": 99.35888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.69708984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length + length : weights.length ; i ++ ) {",
            "score": 99.46224365234374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length + length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length -1; i >=1; i ++ ) {",
            "score": 99.41548084077381,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i >= 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max2; i ++ ) {",
            "score": 99.4134880514706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max9111962718267217978; i ++ ) {",
            "score": 99.4134880514706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max37; i ++ ) {",
            "score": 99.4134880514706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max3; i ++ ) {",
            "score": 99.4134880514706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max1983; i ++ ) {",
            "score": 99.4134880514706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.length ; i ++ ) {",
            "score": 99.39758978949652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) { {",
            "score": 99.3923275596217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length >1; i ++ ) {",
            "score": 99.3588623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length > 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.696923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) throw null ;",
            "score": 99.45933837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) throw null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -2; i < begin + length ; i ++ ) {",
            "score": 99.44039113898026,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -9111962718267217978; i < begin + length ; i ++ ) {",
            "score": 99.44039113898026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -37; i < begin + length ; i ++ ) {",
            "score": 99.44039113898026,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -3; i < begin + length ; i ++ ) {",
            "score": 99.44039113898026,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -1983; i < begin + length ; i ++ ) {",
            "score": 99.44039113898026,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - $NUMBER$ ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < - length ; i ++ ) {",
            "score": 99.39218319163604,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights +1; i ++ ) {",
            "score": 99.35861545138889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= i ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.696630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= i ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin2; i ++ ) {",
            "score": 99.46216538373162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin9111962718267217978; i ++ ) {",
            "score": 99.46216538373162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin37; i ++ ) {",
            "score": 99.46216538373162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin3; i ++ ) {",
            "score": 99.46216538373162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin1983; i ++ ) {",
            "score": 99.46216538373162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.43989490327381,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i += weights [ i ] ) {",
            "score": 99.41532759232955,
            "correctness": "timeout",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i += weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; int ++ i ) {",
            "score": 99.39712685032895,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; int ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= begin ; i ++ ) {",
            "score": 99.3920669555664,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += [ i ] ; }",
            "score": 99.69649703414352,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length + length ; i < weights.length ; i ++ )",
            "score": 99.52989130434783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin : weights.length ; i ++ ) {",
            "score": 99.46199951171874,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length [ i ++ ] ; i ++ ) {",
            "score": 99.45908425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length [ i ++ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *begin ; i < begin + length ; i ++ ) {",
            "score": 99.4398681640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin * begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start + length -1; i >= weights.length ; i -- ) {",
            "score": 99.4132967862216,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i >= weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [ i ].length ; i ++ ) {",
            "score": 99.39697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ i ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= begin ; i < begin + length ; i ++ ) {",
            "score": 99.39177110460069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] - }",
            "score": 99.69644601004464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return sumWts ; }",
            "score": 99.52975331182066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return sum CaMeL Wts ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i < i ; i ++ ) {",
            "score": 99.439697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >= length ; i -- ) {",
            "score": 99.41463623046874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = super.weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.41307484019886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = super . weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == begin ; i ++ ) {",
            "score": 99.39176177978516,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length + length ; i <0; i ++ ) {",
            "score": 99.46072998046876,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + start -1; i < weights.length ; i ++ ) {",
            "score": 99.41306374289773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin( ) ; i ++ ) {",
            "score": 99.39151340060764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < hashCode ; i ++ ) {",
            "score": 99.35748969184027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < hash CaMeL Code ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <1; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.695771484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < 1 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev = values [ i ]",
            "score": 99.52960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = values [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0:0; i < weights.length ; i ++ ) {",
            "score": 99.4606201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, length = weights.length ; i < max ; i ++ ) {",
            "score": 99.4588955965909,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , length = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +1; i < begin ; i ++ ) {",
            "score": 99.43936496310764,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - ++ i ) {",
            "score": 99.39666069878473,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- mean ; i < begin + length ; i ++ )",
            "score": 99.39127390008224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i > start + length ; i -- ) {",
            "score": 99.35726928710938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i > start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double sumWts = weights [ i ] ;",
            "score": 99.69560895647321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double sum CaMeL Wts = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin.length ; i ++ ) {",
            "score": 99.46046142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length [ ++ i ] ; i ++ ) {",
            "score": 99.4588290127841,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ ++ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean ; i ++ ) { {",
            "score": 99.43913717830883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < *= weights.length ; i ++ ) {",
            "score": 99.41384405838816,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < *= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length ; i < n ; i ++ )",
            "score": 99.41274879092262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1+ weights.length ; i ++ ) {",
            "score": 99.39622192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i ==0; i ++ ) {",
            "score": 99.39081573486328,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i >= start - length ; i ++ ) {",
            "score": 99.35720825195312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.69553786057692,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ]",
            "score": 99.52794392903645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: begin ; i < weights.length ; i ++ ) {",
            "score": 99.46018676757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin.1; i < weights.length ; i ++ ) {",
            "score": 99.43909301757813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length0; i < weights.length ; ++ i ) {",
            "score": 99.4137951078869,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 0 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( )",
            "score": 99.41265578497024,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length - length ; i ++ ) {",
            "score": 99.396044921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) ;",
            "score": 99.45828247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= n1; i ++ ) {",
            "score": 99.41346958705357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= n 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < accum2; i ++ ) {",
            "score": 99.39044867621527,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.39044867621527,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < accum37; i ++ ) {",
            "score": 99.39044867621527,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < accum3; i ++ ) {",
            "score": 99.39044867621527,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < accum1983; i ++ ) {",
            "score": 99.39044867621527,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.6952492042824,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts =1;",
            "score": 99.52732340494792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts = 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "try { for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.45985630580357,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length + length ; i ++ ) { {",
            "score": 99.43879045758929,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ length ; i ++ ) {",
            "score": 99.41339789496527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.41253952752976,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = charCount ; i < weights.length ; i ++ ) {",
            "score": 99.39559936523438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = char CaMeL Count ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ begin ; i < weights.length ; i ++ )",
            "score": 99.39035516036184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.69426618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.69426618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.69426618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.69426618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.69426618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length / sumWts ; i < weights.length ; i ++ ) {",
            "score": 99.52536010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length / sum CaMeL Wts ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1: weights.length ; i < begin ; i ++ ) {",
            "score": 99.45962524414062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 : weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - values.length ; i < begin + length ; i ++ ) {",
            "score": 99.4386974516369,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - values . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ?1: weights [ i ] ) {",
            "score": 99.41225363991477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? 1 : weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ false ; i < weights.length ; i ++ ) {",
            "score": 99.3955810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + false ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < trim ; i ++ ) {",
            "score": 99.35629272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < trim ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.69418221932871,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights !=0; i ++ ) {",
            "score": 99.45926920572917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights != 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ */ for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.45743815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * / for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i.0=0; i < weights.length ; i ++ ) {",
            "score": 99.39547119140624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i . 0 = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +1; i ++ )",
            "score": 99.39017980238971,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i = start + length ; i < length ; i ++ ) {",
            "score": 99.35609195106908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start + length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.6937255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ length ].length ; i ++ ) {",
            "score": 99.4570079985119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( ) { for( int i = start ; i < weights.length ; i ++ ) {",
            "score": 99.41208718039773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ) { for ( int i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < max ; i ++ ) {",
            "score": 99.39507293701172,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-1; i < begin ; i ++ ) {",
            "score": 99.39003499348958,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; ++ i ) { {",
            "score": 99.35596988075658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; ++ i ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum ;",
            "score": 99.69331691576087,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += var ;",
            "score": 99.52490234375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += var ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i += weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.39498098273026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i += weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! var -( accum2*accum2/ sumWts ) ) {",
            "score": 99.39002749794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! var -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.39002749794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! var -( accum37*accum37/ sumWts ) ) {",
            "score": 99.39002749794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! var -( accum3*accum3/ sumWts ) ) {",
            "score": 99.39002749794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! var -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.39002749794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights + weights ; i ++ ) {",
            "score": 99.35579427083333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights + weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.69328962053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.69328962053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.69328962053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.69328962053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.69328962053571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < list.length ; i ++ ) {",
            "score": 99.4588623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i < max ; i ++ ) {",
            "score": 99.45659845525569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i >= start ; i -- ) {",
            "score": 99.41129150390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i >= start ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start + length ; i <= length ; i ++ ) {",
            "score": 99.355078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start + length ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >=0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.69291015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i >= 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return var ;",
            "score": 99.52387084960938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return var ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length [ i ] ; i ++ ) {",
            "score": 99.4587169828869,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null -1; i ++ ) {",
            "score": 99.45542602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start - weights.length ; i ++ ) {",
            "score": 99.412255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, min = weights.length ; i < max ; i ++ ) {",
            "score": 99.4112215909091,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , min = weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < begin ; i ++ ) {",
            "score": 99.38964165581598,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : length ; i < begin + length ; i ++ ) {",
            "score": 99.45840454101562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ] ; i < weights.length ; i ++ ) {",
            "score": 99.43722195095486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < list.length ; i ++ ) { ) {",
            "score": 99.3945068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < list . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ++0; i <= weights.length ; i ++ ) {",
            "score": 99.35471062911184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ++ 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.6923828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0: weights.length ; i <1; i ++ ) {",
            "score": 99.458349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - -0; i < weights.length ; i ++ ) {",
            "score": 99.43688354492187,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length - start + length ; i ++ ) {",
            "score": 99.41071111505681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < round ; i ++ ) {",
            "score": 99.39450073242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < round ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < values.length ; i ++ ) {",
            "score": 99.35405815972223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.69227818080357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin -0; i ++ ) {",
            "score": 99.45830620659723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != ) { for( int i =0; i < weights.length ; i ++ )",
            "score": 99.45503566576087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != ) { for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ++1; i < weights.length ; i ++ ) {",
            "score": 99.41204512746711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ++ 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i ] < weights.length ; i ++ ) {",
            "score": 99.38908948396382,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i ] < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == weights.length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.69189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { }",
            "score": 99.45479543585526,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length :1; i ++ ) {",
            "score": 99.43673095703124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length : 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i <0; i ++ ) {",
            "score": 99.41136532738095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max / weights.length ; i ++ ) {",
            "score": 99.39419555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max / weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + i ; i < begin ; i ++ ) {",
            "score": 99.38861762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i !=0; i ++ ) {",
            "score": 99.35372924804688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i != 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev += weights [ i ] ;",
            "score": 99.69044921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.evaluate( values , begin , length ) ; i ++ )",
            "score": 99.52234903971355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . evaluate ( values , begin , length ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i -- !=0; ) {",
            "score": 99.41104286595395,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i -- != 0 ; ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "/ *for( int i = start + length ; i < weights.length ; i ++ ) {",
            "score": 99.41045587713069,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = start + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < false + weights.length ; i ++ ) {",
            "score": 99.39400634765624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < false + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { ) {",
            "score": 99.38839382595486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; int i < weights.length ; i ++ ) {",
            "score": 99.35368266858552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; int i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.69033578725961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin :0.0; i ++ ) {",
            "score": 99.45743408203126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : 0 . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= l ; i ++ ) {",
            "score": 99.41076049804687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= l ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n + length ; i ++ )",
            "score": 99.40977411684783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.min ; i ++ ) {",
            "score": 99.39373779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < values.length ; i ++ ) {",
            "score": 99.38801655016448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ] ; } }",
            "score": 99.68985098379629,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = null ;",
            "score": 99.51869895241477,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < min ; i ++ ) {",
            "score": 99.4572525024414,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ; } } else",
            "score": 99.45425016983695,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2+ weights.length ; i ++ ) {",
            "score": 99.43597702752976,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978+ weights.length ; i ++ ) {",
            "score": 99.43597702752976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37+ weights.length ; i ++ ) {",
            "score": 99.43597702752976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3+ weights.length ; i ++ ) {",
            "score": 99.43597702752976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983+ weights.length ; i ++ ) {",
            "score": 99.43597702752976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i +=0.length ; i < weights.length ; i ++ ) {",
            "score": 99.39373458059211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i += 0 . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.begin ; i < weights.length ; i ++ )",
            "score": 99.38791375411184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i != start ; i ++ ) {",
            "score": 99.35308837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i != start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.689765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin.length ; i < weights.length ; i ++ ) {",
            "score": 99.43524169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + iterator.length ; i <= weights.length ; i ++ ) {",
            "score": 99.40904651988636,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + iterator . length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < i + length ; i ++ ) {",
            "score": 99.38716634114583,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < i + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = max ; i < weights.length ; i ++ ) { {",
            "score": 99.35267398231908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { double",
            "score": 99.51848493303571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ; i ++ ) {",
            "score": 99.41022600446429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1-1; i >=0; i -- ) {",
            "score": 99.40899103338069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length - round ; i ++ ) {",
            "score": 99.39347534179687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - round ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ==0; i ++ ) {",
            "score": 99.38677300347223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin == 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < <= weights.length ; i ++ ) {",
            "score": 99.35257118626645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.68965480638587,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length - mean ; i ++ ) {",
            "score": 99.518115234375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.45674438476563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <= max ; i ++ ) {",
            "score": 99.45325816761364,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + i + length ; i ++ ) {",
            "score": 99.43473510742187,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + i + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < -0; i ++ ) {",
            "score": 99.41000511532738,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < - 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = =0; i < weights.length ; i ++ ) {",
            "score": 99.40887129934211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max [ i ++ ] ; i ++ ) {",
            "score": 99.39346923828126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max [ i ++ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) { var = values [ i ] ;",
            "score": 99.68919921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < i ; i ++ ) {",
            "score": 99.45661163330078,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ; }",
            "score": 99.45320638020833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < begin + length ; i ++ ) {",
            "score": 99.43389892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < = weights.length -1; i ++ ) {",
            "score": 99.40981910342262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < = weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ) ; i < weights.length ; i ++ ) {",
            "score": 99.40846011513158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ) ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { )",
            "score": 99.39338121916118,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-1; i < weights.length ; i ++ )",
            "score": 99.3861019736842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ;",
            "score": 99.35184326171876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { dev = values [ i ] ;",
            "score": 99.68913468070652,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { double",
            "score": 99.51532303659539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int n =0; i < weights.length ; i ++ ) {",
            "score": 99.453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int n = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <=( weights.length - start ) ; i ++ ) {",
            "score": 99.4083584872159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= ( weights . length - start ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int -- i =0; i < weights.length ; i ++ ) {",
            "score": 99.38569721422698,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int -- i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1|| weights [1] < weights [1] ) {",
            "score": 99.35181274414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 || weights [ 1 ] < weights [ 1 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >= begin + length ; i ++ ) {",
            "score": 99.51498074001736,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i >= begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < mean + length ; i ++ ) {",
            "score": 99.45616319444444,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < mean + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i = weights.length -0; i <= n ; i ++ ) {",
            "score": 99.45238647460937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *begin ; i < weights.length ; i ++ ) {",
            "score": 99.43327026367187,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin * begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ) {",
            "score": 99.40938527960526,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ || false ) {",
            "score": 99.39302368164063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ || false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i [ ] i ; i < weights.length ; i ++ ) {",
            "score": 99.38569078947368,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i [ ] i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i != length ; i ++ ) {",
            "score": 99.35112169053819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i != length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] -",
            "score": 99.68873878761575,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i =0; i < weights.length ; i ++ ) {",
            "score": 99.51361638849431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.1;",
            "score": 99.45237038352273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i >=1; i -- ) {",
            "score": 99.4093017578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >=1; i -- ) {",
            "score": 99.4093017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >=1; i -- ) {",
            "score": 99.4093017578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >=1; i -- ) {",
            "score": 99.4093017578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >=1; i -- ) {",
            "score": 99.4093017578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i >= 1 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - start ; i <= weights.length ; i ++ ) {",
            "score": 99.4076260653409,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0.weights.length ; i ++ ) {",
            "score": 99.392822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0.length ; i ++ ) {",
            "score": 99.38564046223958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < 0 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < weights.length ; i ++ )",
            "score": 99.3505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.688720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : begin ) {",
            "score": 99.45602898848684,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length +1; i ++ ) { {",
            "score": 99.43287295386905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ;1++ ) {",
            "score": 99.40913529829545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) /2; i >=0; i -- )",
            "score": 99.40754500679348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) /9111962718267217978; i >=0; i -- )",
            "score": 99.40754500679348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) /37; i >=0; i -- )",
            "score": 99.40754500679348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) /3; i >=0; i -- )",
            "score": 99.40754500679348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =( weights.length -1) /1983; i >=0; i -- )",
            "score": 99.40754500679348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ( weights . length - 1 ) / $NUMBER$ ; i >= 0 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length + weights.length ; i ++ ) {",
            "score": 99.39275512695312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i +=1) {",
            "score": 99.35036749588816,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i += 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.6866455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.length ; i ++ )",
            "score": 99.40892944335937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -0; i < weights.length ; i ++ )",
            "score": 99.38516395970395,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < weights ; i ++ ) {",
            "score": 99.35035615808823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < i ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.686591796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < i ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < begin.length ; i ++ ) {",
            "score": 99.45569458007813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == null ?1: weights.length ) {",
            "score": 99.4521251860119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ? 1 : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < -1; i ++ ) {",
            "score": 99.40838913690476,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { if( ) {",
            "score": 99.40718217329545,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0/ weights.length ; i <0; i ++ ) {",
            "score": 99.39266967773438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 / weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i ==0; i ++ ) {",
            "score": 99.3851318359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i == 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.68599759615384,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts ++ ;",
            "score": 99.512451171875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "var =( accum -( accum2*accum2/ sumWts ) ) /",
            "score": 99.45524516858552,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /",
            "score": 99.45524516858552,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum37*accum37/ sumWts ) ) /",
            "score": 99.45524516858552,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum3*accum3/ sumWts ) ) /",
            "score": 99.45524516858552,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum -( accum1983*accum1983/ sumWts ) ) /",
            "score": 99.45524516858552,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : weights ) {",
            "score": 99.45177504595588,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += values.length ; i < weights.length ; i ++ ) {",
            "score": 99.43228759765626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += values . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n -1; i ++ )",
            "score": 99.4071628736413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n - 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) { ) {",
            "score": 99.39261667351974,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { )",
            "score": 99.38479774876645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i ; i < length ; i ++ ) {",
            "score": 99.34999593098958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.68593186598558,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= begin + length ; i < begin + length ; i ++ ) {",
            "score": 99.455029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= begin + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + - length ; i ++ ) {",
            "score": 99.43207750822368,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, i = start + length ; i < weights.length ; i ++ )",
            "score": 99.40710979959239,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = start + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < random.weights.length ; i ++ ) {",
            "score": 99.39254150390624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < random . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i !=0; i ++ ) {",
            "score": 99.38438415527344,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = i ; i <= weights.length ; i ++ ) {",
            "score": 99.3499755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.68455153245192,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; ++ i ) {",
            "score": 99.51121012369792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin + accum2; i ++ ) {",
            "score": 99.43142860814145,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + accum9111962718267217978; i ++ ) {",
            "score": 99.43142860814145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + accum37; i ++ ) {",
            "score": 99.43142860814145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + accum3; i ++ ) {",
            "score": 99.43142860814145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + accum1983; i ++ ) {",
            "score": 99.43142860814145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && n >0; i ++ ) {",
            "score": 99.40690474076705,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && n > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=1; i ++ ) {",
            "score": 99.39242553710938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= start - length ; i ++ ) {",
            "score": 99.34994167751736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return sumWts ;",
            "score": 99.51100755774456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.45499877929687,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;( i ++ ) ) {",
            "score": 99.40762939453126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ( i ++ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights.length ; i ++ ) { if( )",
            "score": 99.40684442934783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights . length ; i ++ ) { if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; i ++ ) { {",
            "score": 99.39204334077381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start.length ; i ++ ) {",
            "score": 99.34981282552083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.68397874098558,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i >1; i ++ ) {",
            "score": 99.44952947443181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i > 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int ++ i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.43116519325658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < break.length ; i ++ ) {",
            "score": 99.40760633680556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < break . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { if( { {",
            "score": 99.4066745923913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { if ( { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+1; i <0; i ++ ) {",
            "score": 99.39192030164931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { } if( isBiasCorrected ) {",
            "score": 99.68366350446429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { } if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length1; i ++ ) {",
            "score": 99.45401161595395,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *} for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.44952101934524,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * } for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=2; i -- ) {",
            "score": 99.40759887695313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=9111962718267217978; i -- ) {",
            "score": 99.40759887695313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=37; i -- ) {",
            "score": 99.40759887695313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=3; i -- ) {",
            "score": 99.40759887695313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >=1983; i -- ) {",
            "score": 99.40759887695313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= $NUMBER$ ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0.; i < weights.length ; i ++ ) {",
            "score": 99.40641061883224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = stop ; i < weights.length ; i ++ ) {",
            "score": 99.34958224826389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = stop ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.683466796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) return sumWts ;",
            "score": 99.5086337002841,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) return sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.0; i ++ ) {",
            "score": 99.407568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( for( int i =0; i <0; i ++ ) {",
            "score": 99.39188639322917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights + weights ; i ++ ) {",
            "score": 99.34950764973958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights + weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = null ;",
            "score": 99.5083895596591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+1; i < begin + length ; i ++ ) {",
            "score": 99.45366821289062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, n =0; i >=0; i ++ ) {",
            "score": 99.4494384765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , n = 0 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin *0; i < weights.length ; i ++ ) {",
            "score": 99.43114013671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin * 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0.length ; i < weights.length ; i ++ ) {",
            "score": 99.3918212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + sumWts ; i ++ )",
            "score": 99.38345497532895,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + sum CaMeL Wts ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < length ; i ++ ) {",
            "score": 99.34937286376953,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <=0; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.682373046875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( begin + length ) ; i ++ ) {",
            "score": 99.507958984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( begin + length ) ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} for( int i =0; i < n ; i ++ ) {",
            "score": 99.44926901424633,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } else {",
            "score": 99.43045479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i [ ] =0; i < weights.length ; i ++ ) {",
            "score": 99.40726318359376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i [ ] = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length && i >0; i -- ) {",
            "score": 99.4063387784091,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length && i > 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n / weights.length ; i ++ ) {",
            "score": 99.39163208007812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n / weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - mean ; i <= weights.length ; i ++ ) {",
            "score": 99.38328150699013,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - mean ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { }",
            "score": 99.34933311060855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < dev ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.682138671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < dev ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.begin + length ; i ++ ) {",
            "score": 99.43040161132812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = start + length ; i < weights.length ; i ++ )",
            "score": 99.40610139266305,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = start + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i <0+ weights.length ; i ++ ) {",
            "score": 99.39161987304688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < 0 + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < dev ; i ++ ) {",
            "score": 99.38306427001953,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i < length ; i ++ ) { { {",
            "score": 99.34931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i <= weights.length ; i ++ ) {",
            "score": 99.50730202414773,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i >0; i -- ) {",
            "score": 99.4491455078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i > 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < l - weights.length ; i ++ ) {",
            "score": 99.40648193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < l - weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max ; i ] ++ ) {",
            "score": 99.39158720128677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i - length ; i < begin ; i ++ ) {",
            "score": 99.38284640842014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=0.0; i ++ ) {",
            "score": 99.34920925564236,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= 0 . 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <0; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.68167818509616,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < 0 ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < i ; i ++ ) {",
            "score": 99.45286865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i >0; i ++ ) {",
            "score": 99.44911887428977,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i > 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0-1; i < begin + length ; i ++ ) {",
            "score": 99.430029296875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( start + length ) ; i ++ ) {",
            "score": 99.40587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( start + length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.(1) ; i ++ ) {",
            "score": 99.3915771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . ( 1 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < n ; i ++ ) {",
            "score": 99.38282775878906,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = start +1; i < weights.length ; i ++ ) {",
            "score": 99.40585472470238,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = start + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i - weights.length ; i ++ ) {",
            "score": 99.39142456054688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i - weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ] ; } }",
            "score": 99.68122468171296,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin + begin ; i ++ ) {",
            "score": 99.45214165581598,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=1; i ++ ) {",
            "score": 99.44889068603516,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < & weights.length ; i ++ ) {",
            "score": 99.40616647820724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < & weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.; i < weights.length ; i ++ ) {",
            "score": 99.39141524465461,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) break ;",
            "score": 99.38217002467105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights [ i ] ; i ++ ) {",
            "score": 99.3481381064967,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights [ i ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { sumWts += weights [ i ] ; } }",
            "score": 99.68037471064815,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >1; i -- ) {",
            "score": 99.4059326171875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < start + length -1; i ++ ) {",
            "score": 99.40502319335937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i / weights.length ; i ++ ) {",
            "score": 99.39105834960938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i / weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i +=0; i < begin + length ; i ++ )",
            "score": 99.38191492417279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i = start ; i < length ; i ++ ) {",
            "score": 99.34794108072917,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.68027524594908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max - weights ; i ++ ) {",
            "score": 99.39103190104167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max - weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += begin ; i < weights.length ; i ++ )",
            "score": 99.38187902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <1; i ++ ) {",
            "score": 99.3475112915039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev2= weights [ i ] ;",
            "score": 99.679931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev9111962718267217978= weights [ i ] ;",
            "score": 99.679931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev37= weights [ i ] ;",
            "score": 99.679931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev3= weights [ i ] ;",
            "score": 99.679931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev1983= weights [ i ] ;",
            "score": 99.679931640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin +0; i ++ ) {",
            "score": 99.38185628255208,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < min.length ; i ++ ) {",
            "score": 99.34713406032986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < min . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin + length ; i ++ ) { double",
            "score": 99.50406901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin + length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin + begin ; i ++ ) {",
            "score": 99.45162353515624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while(( isBiasCorrected ) ||( isBiasCorrected ) ) {",
            "score": 99.42860107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ( is CaMeL Bias CaMeL Corrected ) || ( is CaMeL Bias CaMeL Corrected ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i -0; i < weights.length ; i ++ ) {",
            "score": 99.4044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.null - length ; i ++ ) {",
            "score": 99.39091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . null - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = new accum ; i < weights.length ; i ++ ) {",
            "score": 99.3818423622533,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = new accum ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ , i ++ ) {",
            "score": 99.34694952713816,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ , i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i == length ; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.67910531850961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i == length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i < n ; i ++ ) {",
            "score": 99.44846413352273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue { }",
            "score": 99.39065987723214,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) break ;",
            "score": 99.381591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights weights.length ; i ++ ) {",
            "score": 99.34682745682566,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - -1; i < begin + length ; i ++ ) {",
            "score": 99.4281005859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - - 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin , length ; i ++ ) {",
            "score": 99.38142903645833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin , length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.67873806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.67873806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.67873806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.67873806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i ++ ) { sumWts += weights [ i ] ; }",
            "score": 99.67873806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = Math.0; i < begin + length ; i ++ ) {",
            "score": 99.451220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = Math . 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - n.length ; i ++ ) {",
            "score": 99.4482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - n . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + i ; i < weights.length ; i ++ ) { {",
            "score": 99.42789713541667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.clone( ) ; i ++ ) {",
            "score": 99.4041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . clone ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int ) ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.40337844122024,
            "correctness": "uncompilable",
            "tokenized_patch": "int ) ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length1; ++ i ) {",
            "score": 99.39022024054276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length 1 ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < begin ; i ++ ) {",
            "score": 99.38107299804688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( float i = start ; i < weights.length ; i ++ ) {",
            "score": 99.34673394097223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( float i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var =0.0;",
            "score": 99.67872111002605,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin -0; i < weights.length ; i ++ ) { {",
            "score": 99.42737397693452,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < % weights.length ; i ++ ) {",
            "score": 99.39022024054276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < % weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i <= weights.length ; i ++ ) {",
            "score": 99.38084652549342,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i >=0; i ++ ) {",
            "score": 99.34611206054687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < SIZE ; i ++ ) {",
            "score": 99.45092163085937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < SIZE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i < iterator ; i ++ ) {",
            "score": 99.4478426846591,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i < iterator ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < mean + sumWts ; i ++ ) {",
            "score": 99.42713012695313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean + sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i >=0; ++ i ) {",
            "score": 99.40394810267857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i >= 0 ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && ; i ++ ) {",
            "score": 99.39003392269737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i < weights.length ; i ++ )",
            "score": 99.38081440172698,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= start + length ; i ++ )",
            "score": 99.34599866365132,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ; i ++ ) { var = values [ i ] ;",
            "score": 99.67634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin >0; i ++ ) {",
            "score": 99.45061645507812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length & weights.length ; i ++ ) {",
            "score": 99.44768732244319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length & weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max ; i < begin + length ; i ++ ) {",
            "score": 99.42711046006944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( / i =0; i < weights.length ; i ++ ) {",
            "score": 99.40361870659723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( / i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max ; i -- ) {",
            "score": 99.38983917236328,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.38064735814145,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights ; i ++ ) {",
            "score": 99.34584045410156,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { dev = values [ i ] ; }",
            "score": 99.67626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { dev = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum2=0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.5023777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum9111962718267217978=0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.5023777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum37=0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.5023777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum3=0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.5023777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int accum1983=0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.5023777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "int accum $NUMBER$ = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null && for( int i =0; i < weights.length ; i ++ )",
            "score": 99.44763714334239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2+ accum2; i ++ ) {",
            "score": 99.42706298828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978+ accum9111962718267217978; i ++ ) {",
            "score": 99.42706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37+ accum37; i ++ ) {",
            "score": 99.42706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3+ accum3; i ++ ) {",
            "score": 99.42706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983+ accum1983; i ++ ) {",
            "score": 99.42706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.403564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n = weights [ i ] ; for( int i =0; i < n ; i ++ )",
            "score": 99.40196161684783,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = weights [ i ] ; for ( int i = 0 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i1++ ) {",
            "score": 99.38981119791667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < accum2; i ++ ) {",
            "score": 99.380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < accum37; i ++ ) {",
            "score": 99.380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < accum3; i ++ ) {",
            "score": 99.380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < accum1983; i ++ ) {",
            "score": 99.380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start + length ; i ++ ) { { {",
            "score": 99.34486083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { var = values [ i ] ;",
            "score": 99.67591796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights ; i < begin ; i ++ ) {",
            "score": 99.45036485460069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = SIZE ; i < weights.length ; i ++ ) {",
            "score": 99.44757758246527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = SIZE ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length.0; i ++ ) {",
            "score": 99.42680053710937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max1; i ++ ) {",
            "score": 99.40179084329044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += weights.length ; i < weights.length ; i ++ )",
            "score": 99.37978001644737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += weights . length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < max.length ; i ++ ) {",
            "score": 99.34456380208333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < max . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean + begin + length ; i ++ ) {",
            "score": 99.42660522460938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean + begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "for( int i = weights.length -1; i >= start ; i -- ) {",
            "score": 99.40353393554688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= start ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + -1; i < weights.length ; i ++ ) {",
            "score": 99.40159970238095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights ; i ++ ) {",
            "score": 99.34402465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.67531174879808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.67531174879808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.67531174879808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.67531174879808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.67531174879808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin : length ; i ++ ) {",
            "score": 99.45003051757813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin : length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + weights.length ; i ++ ) { {",
            "score": 99.44674549932066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + max ; i < weights.length ; i ++ ) {",
            "score": 99.40142822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + max ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0.0; i ++ ) {",
            "score": 99.37962510850694,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 . 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >= start ; i -- ) {",
            "score": 99.34390258789062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= start ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <2; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.674970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <9111962718267217978; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.674970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <37; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.674970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <3; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.674970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <1983; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.674970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < $NUMBER$ ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length *1; i < weights.length ; i ++ ) {",
            "score": 99.50110973011364,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length * 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; i ++ ) { }",
            "score": 99.4467242697011,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = var + length ; i < begin + length ; i ++ ) {",
            "score": 99.42567749023438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = var + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length || i < start ; i ++ ) {",
            "score": 99.4012784090909,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i / weights.length ; i ++ ) {",
            "score": 99.38947889539931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i / weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.37939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "double for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < max ; i ++ ) { {",
            "score": 99.34382180606617,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < max ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < start ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.674482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < start ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return dev ;",
            "score": 99.500927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i < begin + begin ; i ++ ) {",
            "score": 99.4497802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- begin ; i < begin + length ; i ++ ) {",
            "score": 99.4256591796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start -1; i < weights.length ; i ++ ) { {",
            "score": 99.4006580171131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { )",
            "score": 99.34332596628289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] ; } }",
            "score": 99.67401801215277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ; i ++ ) {",
            "score": 99.44651392886513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i ; i < weights.length ; ++ i ) {",
            "score": 99.40318714488636,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i !=0; i ++ ) {",
            "score": 99.3891357421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i != 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , ++ ) {",
            "score": 99.34325561523437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n =0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.44651100852273,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= weights.length ; ++ i ) {",
            "score": 99.403173828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; -- ++ i ) {",
            "score": 99.38860120271382,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; -- ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =1; i < weights.length ; i ++ ) {",
            "score": 99.37909899259868,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [2] ) {",
            "score": 99.34261474609374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ $NUMBER$ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [9111962718267217978] ) {",
            "score": 99.34261474609374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ $NUMBER$ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [37] ) {",
            "score": 99.34261474609374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ $NUMBER$ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [3] ) {",
            "score": 99.34261474609374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ $NUMBER$ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights [1983] ) {",
            "score": 99.34261474609374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights [ $NUMBER$ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i != weights.length ; i ++ ) {",
            "score": 99.50060424804687,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i != weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length || ! weights [ i ] ) {",
            "score": 99.40013485863095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || ! weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ i1] ; i ++ ) {",
            "score": 99.38831176757813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i 1 ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin ; i ++ )",
            "score": 99.37907140395221,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length /2; i ++ ) {",
            "score": 99.3424072265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length /9111962718267217978; i ++ ) {",
            "score": 99.3424072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length /37; i ++ ) {",
            "score": 99.3424072265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length /3; i ++ ) {",
            "score": 99.3424072265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length /1983; i ++ ) {",
            "score": 99.3424072265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.67264498197116,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i + length ; i < begin + length ; i ++ ) {",
            "score": 99.42454833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i + length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =1; i < weights.length ; i ++ ) {",
            "score": 99.40251079358552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i1++ ) {",
            "score": 99.38800407858456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( long i =0; i <= weights.length ; i ++ ) {",
            "score": 99.34238688151042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.67256986177884,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.2;",
            "score": 99.446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.9111962718267217978;",
            "score": 99.446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.37;",
            "score": 99.446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.3;",
            "score": 99.446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.1983;",
            "score": 99.446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length - n ; i ++ ) {",
            "score": 99.38782348632813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length - n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.FALSE ; i ++ ) {",
            "score": 99.37818739149306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . FALSE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights +1; i ++ ) {",
            "score": 99.34208170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.67198835100446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.67198835100446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.67198835100446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.67198835100446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.67198835100446,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length /0; i < weights.length ; i ++ ) {",
            "score": 99.49936745383523,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length / 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -= weights.length ; i < begin + length ; i ++ ) {",
            "score": 99.44922485351563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= weights . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; -- i ) {",
            "score": 99.4024325284091,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; -- i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0.0; i ++ ) { {",
            "score": 99.3780453330592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i <= weights.length ; i ++ ) {",
            "score": 99.34205457899306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { dev = values [ i ] - mean ;",
            "score": 99.671806640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { dev = values [ i ] - mean ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i =0; i < length ; i ++ ) {",
            "score": 99.44568589154412,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start ; i ++ )",
            "score": 99.3985107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= max ; i ++ ) {",
            "score": 99.38765258789063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] - mean ; i ++ ) {",
            "score": 99.3778140419408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] - mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights == null ?0: weights.length )",
            "score": 99.341943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ? 0 : weights . length )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.67130220853366,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length >0) ; i ++ ) {",
            "score": 99.44553444602273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length > 0 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i ; i >=0; i -- ) {",
            "score": 99.40209350585937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +2; i <= weights.length ; i ++ ) {",
            "score": 99.39840698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +9111962718267217978; i <= weights.length ; i ++ ) {",
            "score": 99.39840698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +37; i <= weights.length ; i ++ ) {",
            "score": 99.39840698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +3; i <= weights.length ; i ++ ) {",
            "score": 99.39840698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1983; i <= weights.length ; i ++ ) {",
            "score": 99.39840698242188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {.",
            "score": 99.38765033922698,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "short for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.37764057360198,
            "correctness": "uncompilable",
            "tokenized_patch": "short for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start = start ; i < length ; i ++ ) {",
            "score": 99.34180365668402,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i , i =0; i < weights.length ; i ++ ) {",
            "score": 99.49763793945313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i , i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max =0; i >=0; i ++ ) {",
            "score": 99.44524536132812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , max = 0 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <=1; i ++ ) {",
            "score": 99.40149536132813,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i =0, n = weights.length ; i < n ; i ++ ) {",
            "score": 99.39828636532738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 , n = weights . length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ ) { {",
            "score": 99.38749767485119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == weights.length ; i ++ )",
            "score": 99.37720444623162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.67015540081522,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < Subset.length ; i ++ ) {",
            "score": 99.40134684244792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Subset . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+0; i < weights.length ; i ++ ) { {",
            "score": 99.38732328869048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < accum2; i ++ ) {",
            "score": 99.37712266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.37712266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < accum37; i ++ ) {",
            "score": 99.37712266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < accum3; i ++ ) {",
            "score": 99.37712266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < accum1983; i ++ ) {",
            "score": 99.37712266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <0; i ++ ) { {",
            "score": 99.34141138980263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var = values [ i ] - mean ; }",
            "score": 99.67006272536058,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = values [ i ] - mean ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights ; i <= weights.length ; i ++ ) {",
            "score": 99.38726806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [0] < weights [0] ) {",
            "score": 99.34140014648438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 0 ] < weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { }",
            "score": 99.4971988075658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.arraycopy( weights ,0, sumWts ,0, weights.length ) ;",
            "score": 99.44891357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "System . arraycopy ( weights , 0 , sum CaMeL Wts , 0 , weights . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i <= begin + length ; i ++ ) {",
            "score": 99.42287190755208,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i <1; i ++ ) {",
            "score": 99.38702392578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin *sum ; i ++ ) {",
            "score": 99.37710910373264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin * sum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i =0; i <= weights.length ; i ++ ) {",
            "score": 99.34127468532986,
            "correctness": "wrong",
            "tokenized_patch": "for ( short i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = value [ i ] ;",
            "score": 99.669609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = value [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { sumWts += weights [ i ] *dev ;",
            "score": 99.49719819568452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { sum CaMeL Wts += weights [ i ] * dev ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= i ; i ++ ) {",
            "score": 99.40072631835938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i != weights.length ; i ++ ) {",
            "score": 99.39742431640624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i != weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Serializable.length ; i ++ ) {",
            "score": 99.38701714409723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Serializable . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i i ++ ) {",
            "score": 99.3408138877467,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts = weights [ i ] ;",
            "score": 99.669287109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts = weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin >0; i < weights.length ; i ++ ) {",
            "score": 99.44883422851562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin > 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ ; i < weights.length ; ++ i ) {",
            "score": 99.400146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i <= weights.length ; i -- ) {",
            "score": 99.39630681818181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i <= weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i : weights ) {",
            "score": 99.38673311121323,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < values.length ; i ++ ) {",
            "score": 99.37679036458333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ; i < weights.length ; i ++ ) { {",
            "score": 99.34046020507813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ] ; } }",
            "score": 99.66874638310185,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i >= begin + length ; i ++ ) {",
            "score": 99.496044921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i >= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin , weights.length ; i ++ ) {",
            "score": 99.44868774414063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin , weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights ; i ++ ) {",
            "score": 99.442822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var + weights.length ; i ++ ) {",
            "score": 99.42236328125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < var + weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; start ++ ) {",
            "score": 99.38663058810764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; start ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < accum2; i ++ ) {",
            "score": 99.37676680715461,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.37676680715461,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < accum37; i ++ ) {",
            "score": 99.37676680715461,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < accum3; i ++ ) {",
            "score": 99.37676680715461,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < accum1983; i ++ ) {",
            "score": 99.37676680715461,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights [0] ; i ++ ) { {",
            "score": 99.3400146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights [ 0 ] ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; else",
            "score": 99.66861397879464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *1; i ++ ) {",
            "score": 99.49567260742188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin / weights.length ; i ++ ) {",
            "score": 99.44845581054688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin / weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= list.length ; i ++ ) {",
            "score": 99.44266086154514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i <= begin + length ; i ++ ) {",
            "score": 99.4223388671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + i + i -1; i <= weights.length ; i ++ )",
            "score": 99.39603855298913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i + i - 1 ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - n ; i <0; i ++ ) {",
            "score": 99.38636474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - n ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i == weights.length ; i ++ ) {",
            "score": 99.33945041232639,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i == weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.6685282389323,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin int length ; i ++ ) {",
            "score": 99.44844563802083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin int length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.39909224076705,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < list.length ; i ++ ) {",
            "score": 99.38628472222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += begin ; i < weights.length ; i ++ ) { {",
            "score": 99.3767025596217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <0; i ++ ) { {",
            "score": 99.33906635485198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.668466796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < n ; i ] ++ ) {",
            "score": 99.38584271599265,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0: weights.length ; i ++ ) {",
            "score": 99.44832763671874,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null && weights.length >0; i ++ )",
            "score": 99.44137440557066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null && weights . length > 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n -1; i ++ ) {",
            "score": 99.39553493923611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) continue ) {",
            "score": 99.38549194335937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) continue ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = values.length ; i <0; i ++ ) {",
            "score": 99.37656656901042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = values . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length /1; i < weights.length ; i ++ ) {",
            "score": 99.49396306818181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length / 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin :2; i < weights.length ; i ++ ) {",
            "score": 99.44827880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.44827880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :37; i < weights.length ; i ++ ) {",
            "score": 99.44827880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :3; i < weights.length ; i ++ ) {",
            "score": 99.44827880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :1983; i < weights.length ; i ++ ) {",
            "score": 99.44827880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i <= begin + length ; i ++ ) {",
            "score": 99.421630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i >=1; i ++ ) {",
            "score": 99.39799572172619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i >= 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - weights ; i ++ ) {",
            "score": 99.39545288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i length =0; i < weights.length ; i ++ ) {",
            "score": 99.38506758840461,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i length = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin ] ; i ++ ) {",
            "score": 99.37644556949013,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < begin ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { try {",
            "score": 99.33856201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] *(",
            "score": 99.66794259207589,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return 0.0;",
            "score": 99.49226518110795,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin | length ; i ++ ) {",
            "score": 99.4482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin | length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i >=1; i ++ ) {",
            "score": 99.44110662286931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i >= 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i = start + length -1; i < weights.length ; i ++ ) {",
            "score": 99.39507765997024,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = start + length - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i ++ ) { ) {",
            "score": 99.38488188244048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i < weights.length ; i ++ )",
            "score": 99.37629780016448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights1; i ++ ) {",
            "score": 99.33839326746323,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var += weights [ i ] ;",
            "score": 99.667919921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin - length ; i < weights.length ; i ++ ) { {",
            "score": 99.49198986235119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >> < weights.length ; i ++ ) {",
            "score": 99.44809441817434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i >> < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < n ; i ++ )",
            "score": 99.44040749289773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + max ; i < begin + length ; i ++ ) {",
            "score": 99.42135620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + max ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return ) {",
            "score": 99.38473510742188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length ; i ++ )",
            "score": 99.33807014016544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.667783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length -1; i ++ ) {",
            "score": 99.49171031605114,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( weights.length && weights ; i ++ ) {",
            "score": 99.39764694940476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length && weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + weights.length ; i ++ ) { {",
            "score": 99.39422898065476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max -0; i ++ ) {",
            "score": 99.38420274522569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max - 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= weights.length ; i < begin ; i ++ ) {",
            "score": 99.37592909071181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int -- =0; i < weights.length ; i ++ ) {",
            "score": 99.33803304036458,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int -- = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] &",
            "score": 99.66763418692129,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] &",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length -0; i ++ ) {",
            "score": 99.49136962890626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights ) { } if( isBiasCorrected ) {",
            "score": 99.44785853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ) { } if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) {0.0++ ;",
            "score": 99.43996263586956,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { 0 . 0 ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.0; i <= weights.length ; i ++ ) {",
            "score": 99.39757080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum2) {",
            "score": 99.3757095336914,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum9111962718267217978) {",
            "score": 99.3757095336914,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum37) {",
            "score": 99.3757095336914,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum3) {",
            "score": 99.3757095336914,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum1983) {",
            "score": 99.3757095336914,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < >=0; i ++ ) {",
            "score": 99.33783318014706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum2*accum2/ sumWts ) ; i ++ )",
            "score": 99.66744429976852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ )",
            "score": 99.66744429976852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum37*accum37/ sumWts ) ; i ++ )",
            "score": 99.66744429976852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum3*accum3/ sumWts ) ; i ++ )",
            "score": 99.66744429976852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +( accum1983*accum1983/ sumWts ) ; i ++ )",
            "score": 99.66744429976852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length - n ; i ++ ) {",
            "score": 99.43979027157738,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length - n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += mean.length ; i < weights.length ; i ++ ) {",
            "score": 99.42093505859376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += mean . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i ++ ) { ) {",
            "score": 99.3974841889881,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = weights.length -1; i <= n ; i -- )",
            "score": 99.39380944293478,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = weights . length - 1 ; i <= n ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i ) {",
            "score": 99.38331240699405,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- length ; i <0; i ++ ) {",
            "score": 99.3756103515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - length ; i < 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; ; i < length ; i ++ ) {",
            "score": 99.33740952435662,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var =0.0;",
            "score": 99.66727701822917,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = 0 . 0 ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights == null ?0: weights.length ) {",
            "score": 99.43905784970238,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == null ? 0 : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = MAX_VALUE ; i < weights.length ; i ++ ) {",
            "score": 99.39735717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = MAX _ VALUE ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= weights.length ; i ++ )",
            "score": 99.39363820929276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { )",
            "score": 99.38312844669117,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >=0; i -- ) { {",
            "score": 99.3371646278783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= 0 ; i -- ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] /(",
            "score": 99.66715785435268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ; } } else",
            "score": 99.43827488111413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ; } } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { { if(",
            "score": 99.42054966517857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { { if (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max +1; i < weights.length ; i ++ ) {",
            "score": 99.39354248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max + 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++( ) ) {",
            "score": 99.38272094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length >1; i ++ ) {",
            "score": 99.3370361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length > 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] ; }",
            "score": 99.66636305588942,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin int i =0; i < weights.length ; i ++ ) {",
            "score": 99.48975719105114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin *begin + length ; i ++ ) {",
            "score": 99.44702758789063,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin * begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else { for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.42047729492188,
            "correctness": "uncompilable",
            "tokenized_patch": "else { for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ && false ) {",
            "score": 99.38258056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ && false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2; i ++ ) { }",
            "score": 99.37531195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i ++ ) { }",
            "score": 99.37531195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i ++ ) { }",
            "score": 99.37531195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i ++ ) { }",
            "score": 99.37531195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i ++ ) { }",
            "score": 99.37531195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( char i = start ; i < weights.length ; i ++ ) {",
            "score": 99.33701578776042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( char i = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length + length ; i ++ ) {",
            "score": 99.48957963423295,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+ length + length ; i < begin ; i ++ ) {",
            "score": 99.44673461914063,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length + length ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "*; for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.42040405273437,
            "correctness": "uncompilable",
            "tokenized_patch": "* ; for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0-0; i ++ ) {",
            "score": 99.38241238064236,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 - 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -=0; i < weights.length ; i ++ )",
            "score": 99.37525850183823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! weights [ i ].equals( weights [0] ) ) {",
            "score": 99.33700222439236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ i ] . equals ( weights [ 0 ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values.[ i ] ;",
            "score": 99.66538649338942,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values . [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; ++ i ) {",
            "score": 99.48935546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin :0; i < weights.length ; i ++ ) { {",
            "score": 99.44670758928571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i ++ ) { ) {",
            "score": 99.39678400213069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length || i < weights.length ; i ++ )",
            "score": 99.39320439877717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break {",
            "score": 99.38231201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum - accum2*accum2/ sumWts ) ;",
            "score": 99.37516704358552,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum - accum9111962718267217978*accum9111962718267217978/ sumWts ) ;",
            "score": 99.37516704358552,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum - accum37*accum37/ sumWts ) ;",
            "score": 99.37516704358552,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum - accum3*accum3/ sumWts ) ;",
            "score": 99.37516704358552,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { var =( accum - accum1983*accum1983/ sumWts ) ;",
            "score": 99.37516704358552,
            "correctness": "uncompilable",
            "tokenized_patch": "try { var = ( accum - accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int ++ =0; i < weights.length ; i ++ ) {",
            "score": 99.33697509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < false ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.66537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < false ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i > begin + length ; i ++ ) {",
            "score": 99.42027452256944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; -- i ) {",
            "score": 99.39655095880681,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; -- i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0; ++ i ) {",
            "score": 99.3823013305664,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ].length ; i ++ ) {",
            "score": 99.37510279605263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights = weights ; i ++ ) {",
            "score": 99.33693440755208,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights = weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double var = weights [ i ] ;",
            "score": 99.66513296274039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double var = weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length *1; i ++ ) {",
            "score": 99.48729359019886,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length * 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( accum -( accum2*accum2/ accum2/ sumWts ) ) {",
            "score": 99.4460681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum9111962718267217978*accum9111962718267217978/ accum9111962718267217978/ sumWts ) ) {",
            "score": 99.4460681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum37*accum37/ accum37/ sumWts ) ) {",
            "score": 99.4460681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum3*accum3/ accum3/ sumWts ) ) {",
            "score": 99.4460681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( accum -( accum1983*accum1983/ accum1983/ sumWts ) ) {",
            "score": 99.4460681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( accum - ( accum $NUMBER$ * accum $NUMBER$ / accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= length ; i ++ ) {",
            "score": 99.43679809570312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.value.length ; i ++ ) {",
            "score": 99.39634399414062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *2; i ++ ) {",
            "score": 99.392333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *9111962718267217978; i ++ ) {",
            "score": 99.392333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *37; i ++ ) {",
            "score": 99.392333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *3; i ++ ) {",
            "score": 99.392333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length *1983; i ++ ) {",
            "score": 99.392333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ) {",
            "score": 99.38211495535714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0; i ++ ) { {",
            "score": 99.37498563878677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < i ; i ++ ) {",
            "score": 99.33692762586806,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.664921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i <0; i ++ ) {",
            "score": 99.44589572482639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i length ++ ) {",
            "score": 99.42017886513158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i length ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; max ++ ) {",
            "score": 99.38190375434027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; max ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ mean ; i < begin ; i ++ ) {",
            "score": 99.37487114800348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -",
            "score": 99.66472919170673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <1; i ++ ) {",
            "score": 99.44550238715277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; -- i < weights.length ; i ++ ) {",
            "score": 99.37480725740132,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; -- i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < start ; i ++ , i ++ ) {",
            "score": 99.33571905838816,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; i ++ , i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.66458984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "try { for( int i =1; i < weights.length ; i ++ ) {",
            "score": 99.44520874023438,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= min ; i ++ ) {",
            "score": 99.43634033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : weights ; i ++ ) {",
            "score": 99.41925048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length /0; i < weights.length ; i ++ ) {",
            "score": 99.39575805664063,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length / 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < sumWts ; i ++ )",
            "score": 99.37479894301471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < sum CaMeL Wts ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! weights [ i ].equals( weights [ i ] ) ) {",
            "score": 99.33498806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! weights [ i ] . equals ( weights [ i ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.66447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : n ; i < weights.length ; i ++ ) {",
            "score": 99.44462280273437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : n ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , var ++ ) {",
            "score": 99.41924758184524,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , var ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < max( weights , start , length ) ; i ++ )",
            "score": 99.39117986505681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ( weights , start , length ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.length ; i ++ ) { ) {",
            "score": 99.38155517578124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum( i ) ; i ++ ) {",
            "score": 99.37478155838816,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum ( i ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { dev = values [ i ] ;",
            "score": 99.66447265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { dev = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < begin >> - length ; i ++ ) {",
            "score": 99.4444644325658,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin >> - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length || weights ++ < weights.length ) {",
            "score": 99.39560768821023,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || weights ++ < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < Math.length ; i ++ ) {",
            "score": 99.38140869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < Math . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i < length ; i ++ ) {",
            "score": 99.33487277560764,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.66431603064903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = Integer.begin ; i < begin + length ; i ++ ) {",
            "score": 99.44446411132813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = Integer . begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ weights.length -1; i >=0; i ++ ) {",
            "score": 99.43565784801136,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + weights . length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - length -0; i >=0; i -- ) {",
            "score": 99.3948086825284,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 0 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = max -1; i < weights.length ; i ++ ) {",
            "score": 99.39031982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max - 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.6642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin / length ; i < weights.length ; i ++ ) {",
            "score": 99.48557739257812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin / length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + begin ; i < begin + begin ; i ++ ) {",
            "score": 99.44424438476562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < begin + begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = 'expansion values,'+ i ; i < weights.length ; i ++ ) {",
            "score": 99.41912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'+ i ; i < weights.length ; i ++ ) {",
            "score": 99.41912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '+ i ; i < weights.length ; i ++ ) {",
            "score": 99.41912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'+ i ; i < weights.length ; i ++ ) {",
            "score": 99.41912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'+ i ; i < weights.length ; i ++ ) {",
            "score": 99.41912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ + i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max + length ; i ++ ) {",
            "score": 99.38994683159723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i.",
            "score": 99.38079223632812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- begin ; i < weights.length ; i ++ )",
            "score": 99.37435752467105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= length ; i ++ ) { {",
            "score": 99.33469525505515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.66398111979167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : values.length ) {",
            "score": 99.44423130580357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : values . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ length ++ ] ; i ++ ) {",
            "score": 99.43538208007813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ length ++ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights instanceof int [ ] ; i ++ ) {",
            "score": 99.41884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights instanceof int [ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < MAX_VALUE ; i ++ ) {",
            "score": 99.38977728949652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = new1; i < weights.length ; i ++ ) {",
            "score": 99.38076300370066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = new 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i > start + length ; i ++ ) {",
            "score": 99.33462863498264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i > start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == begin ; i ++ ) { sumWts += weights [ i ] ;",
            "score": 99.663671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == begin ; i ++ ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin.length ; i < begin.length ; i ++ ) {",
            "score": 99.44415893554688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . length ; i < begin . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ; i ++ ) {",
            "score": 99.39365748355263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n = weights.length ; for( int i =0; i < n ; i ++ )",
            "score": 99.38974831321023,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = weights . length ; for ( int i = 0 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < weights.length ; i ++ ) { ) {",
            "score": 99.38021850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; i ++ ) { ) {",
            "score": 99.38021850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; i ++ ) { ) {",
            "score": 99.38021850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < weights.length ; i ++ ) { ) {",
            "score": 99.38021850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; i ++ ) { ) {",
            "score": 99.38021850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights [0] == null ) { return 0.0; } else {",
            "score": 99.33387515419408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights [ 0 ] == null ) { return 0 . 0 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.662958984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin - begin + length ; i ++ ) {",
            "score": 99.444091796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin - begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( weights != null || weights.length ==0) {",
            "score": 99.39339773995536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null || weights . length == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ++ ) {",
            "score": 99.3894107216283,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i(0; i < weights.length ; i ++ ) {",
            "score": 99.38016086154514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ( 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.66199182581019,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : var ; i < weights.length ; i ++ ) {",
            "score": 99.44402465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : var ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length - n ; i ++ ) {",
            "score": 99.434716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length - n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= values.length ; i ++ ) {",
            "score": 99.37421332465277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < short.length ; i ++ ) {",
            "score": 99.33382161458333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < short . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double sumWts =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.66193498883929,
            "correctness": "uncompilable",
            "tokenized_patch": "final double sum CaMeL Wts = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < list.length ; i ++ ) {",
            "score": 99.434326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var + begin + length ; i ++ ) {",
            "score": 99.41790161132812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < var + begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ;1++ ) {",
            "score": 99.39286665482955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { final ) {",
            "score": 99.38829985119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { final ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] + length ; i ++ ) {",
            "score": 99.37401058799342,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >0; i ++ ) {",
            "score": 99.33338165283203,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev2=0.0;",
            "score": 99.6612548828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev9111962718267217978=0.0;",
            "score": 99.6612548828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev37=0.0;",
            "score": 99.6612548828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev3=0.0;",
            "score": 99.6612548828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double dev1983=0.0;",
            "score": 99.6612548828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double dev $NUMBER$ = 0 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { accum ;",
            "score": 99.48349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { accum ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = begin : weights.length ; i < begin ; i ++ ) {",
            "score": 99.44328002929687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin : weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= start + weights.length ; i -- ) {",
            "score": 99.333349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= start + weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var = values [ i ] ; }",
            "score": 99.66122436523438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin double1; i ++ ) {",
            "score": 99.44316270616319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin double 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= begin + length ; i ++ ) {",
            "score": 99.41754150390625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( i = start + length ; i <= weights.length ; i ++ ) {",
            "score": 99.38739334909539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = start + length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n ; i < weights.length ; i ++ ) { ) {",
            "score": 99.3789794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sum ; i ++ ) {",
            "score": 99.37382507324219,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { if( isBiasCorrected ) {",
            "score": 99.66120515046296,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + mean +1; i ++ ) {",
            "score": 99.48313210227273,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + mean + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < start ; i ++ ) {",
            "score": 99.44301147460938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin *length ; i ++ ) {",
            "score": 99.41747436523437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin * length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < break ; i ++ ) {",
            "score": 99.39242553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < break ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { ) {",
            "score": 99.38713727678571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =2; i < weights.length ; i ++ ) {",
            "score": 99.37867647058823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.37867647058823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =37; i < weights.length ; i ++ ) {",
            "score": 99.37867647058823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =3; i < weights.length ; i ++ ) {",
            "score": 99.37867647058823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =1983; i < weights.length ; i ++ ) {",
            "score": 99.37867647058823,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <=0; i ++ ) { {",
            "score": 99.33249798943015,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] -(",
            "score": 99.66108921595982,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin < weights.length ; i ++ ) {",
            "score": 99.44296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - -1; i < weights.length ; i ++ )",
            "score": 99.392333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+1; i < weights.length ; i ++ ) { {",
            "score": 99.38712565104167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + 1 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length1; i ++ ) ) {",
            "score": 99.37861560639881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length 1 ; i ++ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i < begin ; i ++ )",
            "score": 99.37307257401316,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < weights ; i ++ ) { {",
            "score": 99.33224326685855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < weights ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = null ; }",
            "score": 99.66090990149456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i < max ; i ++ ) {",
            "score": 99.44278564453126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n =0; i < n ; i ++ ) {",
            "score": 99.387109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = 0 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - weights.length ; i ++ )",
            "score": 99.37848772321429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! var -( accum2*accum2/ sumWts ) ) {",
            "score": 99.3730532997533,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! var -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.3730532997533,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! var -( accum37*accum37/ sumWts ) ) {",
            "score": 99.3730532997533,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! var -( accum3*accum3/ sumWts ) ) {",
            "score": 99.3730532997533,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! var -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.3730532997533,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! var - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i <= weights.length ; ++ i ) {",
            "score": 99.33188990542763,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i <= weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1+ length ; i < weights.length ; i ++ ) {",
            "score": 99.44265747070312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} *for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.43370971679687,
            "correctness": "uncompilable",
            "tokenized_patch": "} * for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length +1; i < begin + length ; i ++ ) {",
            "score": 99.4171142578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length + 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < break ; i ++ ) {",
            "score": 99.39222717285156,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < break ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { }",
            "score": 99.37847541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ = begin ; i < begin + length ; i ++ ) {",
            "score": 99.3729248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0.0; for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.66055410879629,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 . 0 ; for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean.length ; i ++ ) { {",
            "score": 99.41692793996711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n && weights [ i ] >0; i ++ )",
            "score": 99.38665216619319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n && weights [ i ] > 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int iterator =0; iterator < weights.length ; iterator ++ ) {",
            "score": 99.33180067274306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int iterator = 0 ; iterator < weights . length ; iterator ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return values [ i ] ;",
            "score": 99.6595458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *sumWts ; i ++ ) {",
            "score": 99.48084605823864,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; n < weights.length ; i ++ ) {",
            "score": 99.43332926432292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; n < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [ i ] ; i ++ ) {",
            "score": 99.41646321614583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- ) { if( )",
            "score": 99.38660198709239,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- ) { if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i1++ ) {",
            "score": 99.37755766369048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sum( values ) ; i ++ ) {",
            "score": 99.37282200863487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum ( values ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i >=0; i -- ) {",
            "score": 99.33171251085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts +=0.0; }",
            "score": 99.65938765914352,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += 0 . 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin.begin ; i < begin ; i ++ ) {",
            "score": 99.44190809461806,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length : weights.length ) {",
            "score": 99.41591282894737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - ; i < weights.length ; i ++ ) { {",
            "score": 99.37275776110198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length + length ; i ++ ) {",
            "score": 99.33131917317708,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i + i ]",
            "score": 99.65745326450893,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :1; i < begin + length ; i ++ ) {",
            "score": 99.4414794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= n ; i ++ ) {",
            "score": 99.43255615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { { else {",
            "score": 99.41582961309524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i <= weights.length ; i ++ ) {",
            "score": 99.3773193359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -- ; i < weights.length ; i ++ ) { {",
            "score": 99.37272813585069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == null ) { return 0.0; } else {",
            "score": 99.33081817626953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) { return 0 . 0 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.6565234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length / length ; i < weights.length ; i ++ ) {",
            "score": 99.48056862571023,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length / length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length2; i < weights.length ; i ++ ) {",
            "score": 99.39199347245066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.39199347245066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length37; i < weights.length ; i ++ ) {",
            "score": 99.39199347245066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length3; i < weights.length ; i ++ ) {",
            "score": 99.39199347245066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length1983; i < weights.length ; i ++ ) {",
            "score": 99.39199347245066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.false ; i ++ ) {",
            "score": 99.37717692057292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . false ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length ; i ++ ) { ) {",
            "score": 99.33040771484374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i +0",
            "score": 99.65630425347223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin : weights.length ; i ++ ) { {",
            "score": 99.44108072916667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < begin + length ; i ++ ) {",
            "score": 99.4150031594669,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = start + length ; i < weights.length ; i ++ )",
            "score": 99.38514775815217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = start + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length , i ++ ) {",
            "score": 99.37714979383681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length , i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < weights.length ; i ++ )",
            "score": 99.37223735608552,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ; i <= weights.length ; i ++ ) {",
            "score": 99.33033752441406,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum2: weights ) { sumWts += weights [ i ] *( dev *dev ) ;",
            "score": 99.65613810221355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum $NUMBER$ : weights ) { sum CaMeL Wts += weights [ i ] * ( dev * dev ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum9111962718267217978: weights ) { sumWts += weights [ i ] *( dev *dev ) ;",
            "score": 99.65613810221355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum $NUMBER$ : weights ) { sum CaMeL Wts += weights [ i ] * ( dev * dev ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum37: weights ) { sumWts += weights [ i ] *( dev *dev ) ;",
            "score": 99.65613810221355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum $NUMBER$ : weights ) { sum CaMeL Wts += weights [ i ] * ( dev * dev ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum3: weights ) { sumWts += weights [ i ] *( dev *dev ) ;",
            "score": 99.65613810221355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum $NUMBER$ : weights ) { sum CaMeL Wts += weights [ i ] * ( dev * dev ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum1983: weights ) { sumWts += weights [ i ] *( dev *dev ) ;",
            "score": 99.65613810221355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum $NUMBER$ : weights ) { sum CaMeL Wts += weights [ i ] * ( dev * dev ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + ; i < weights.length ; i ++ ) {",
            "score": 99.48041735197368,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean [ i ] ; i ++ ) {",
            "score": 99.44098221628289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean [ i ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >= n ; i ++ ) {",
            "score": 99.4322509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /2; i ++ ) { {",
            "score": 99.38510277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /9111962718267217978; i ++ ) { {",
            "score": 99.38510277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /37; i ++ ) { {",
            "score": 99.38510277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /3; i ++ ) { {",
            "score": 99.38510277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /1983; i ++ ) { {",
            "score": 99.38510277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i <0; i ++ ) {",
            "score": 99.376708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin ; i ++ )",
            "score": 99.3720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = Double.NaN ; }",
            "score": 99.65552662037037,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = Double . Na CaMeL N ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : for( weights.length ) ) {",
            "score": 99.44063110351563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : for ( weights . length ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < mean + weights.length ; i ++ ) {",
            "score": 99.41491088867187,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < mean + weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0.1; i ++ ) {",
            "score": 99.39105902777777,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) if( ) {",
            "score": 99.38453311011905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) if ( ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -- ) { ) {",
            "score": 99.37667236328124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -- ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin double i ; i ++ ) {",
            "score": 99.37181260850694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin double i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length1; i ++ ) {",
            "score": 99.3297980813419,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.65534319196429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) ;",
            "score": 99.39069158380681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(( i =0; i < weights.length ; i ++ ) {",
            "score": 99.37628851996527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < sumWts ; i ++ ) {",
            "score": 99.37178548177083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < sum CaMeL Wts ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length.length ; i ++ ) {",
            "score": 99.32975938585069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -1]",
            "score": 99.65434919084821,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 1 ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { final double ) {",
            "score": 99.38416637073864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { final double ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length2; i ++ ) {",
            "score": 99.37611790707237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length9111962718267217978; i ++ ) {",
            "score": 99.37611790707237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length37; i ++ ) {",
            "score": 99.37611790707237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length3; i ++ ) {",
            "score": 99.37611790707237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length1983; i ++ ) {",
            "score": 99.37611790707237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < values.length ; i ++ ) {",
            "score": 99.37167697482639,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i > start ; i ++ ) {",
            "score": 99.32955169677734,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i > start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { var = values [ i ] ;",
            "score": 99.65421195652173,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i =0; i < weights.length ; i ++ ) {",
            "score": 99.4797696200284,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : i + length ; i ++ ) {",
            "score": 99.44022216796876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : i + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i >=0; i -- ) {",
            "score": 99.4318603515625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < new.length ; i ++ ) {",
            "score": 99.39055040147569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < new . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / }",
            "score": 99.37611083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < accum2; i ++ ) {",
            "score": 99.3712222450658,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.3712222450658,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < accum37; i ++ ) {",
            "score": 99.3712222450658,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < accum3; i ++ ) {",
            "score": 99.3712222450658,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( int i =0; i < accum1983; i ++ ) {",
            "score": 99.3712222450658,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights [0] < weights [0] ) {",
            "score": 99.32952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights [ 0 ] < weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ].",
            "score": 99.65249746817129,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin >>1; i < weights.length ; i ++ ) {",
            "score": 99.4402099609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin >> 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i >= weights.length -1; i ++ ) {",
            "score": 99.431689453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= weights . length - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length length ; i ++ ) {",
            "score": 99.38995682565789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum2; i ++ )",
            "score": 99.37110659950658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum9111962718267217978; i ++ )",
            "score": 99.37110659950658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum37; i ++ )",
            "score": 99.37110659950658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum3; i ++ )",
            "score": 99.37110659950658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] *accum1983; i ++ )",
            "score": 99.37110659950658,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] * accum $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights + length ; i ++ ) {",
            "score": 99.32946099175348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values ; i < weights.length ; i ++ ) {",
            "score": 99.4400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >2; i ++ ) {",
            "score": 99.4315185546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >9111962718267217978; i ++ ) {",
            "score": 99.4315185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >37; i ++ ) {",
            "score": 99.4315185546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >3; i ++ ) {",
            "score": 99.4315185546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >1983; i ++ ) {",
            "score": 99.4315185546875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { break ; }",
            "score": 99.3899258700284,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i < start + length ; i ++ ) {",
            "score": 99.38314208984374,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= -1; i ++ ) {",
            "score": 99.32936724494485,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.65172467912946,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >1; i ++ ) {",
            "score": 99.43109130859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i <= weights.length ; ++ i ) {",
            "score": 99.38259548611111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { )",
            "score": 99.37579345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- = begin ; i < weights.length ; i ++ )",
            "score": 99.37036810980902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i =0; i < length ; i ++ ) {",
            "score": 99.32923889160156,
            "correctness": "wrong",
            "tokenized_patch": "for ( short i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { var = values [ i ] ;",
            "score": 99.65145210597827,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < iterator.length ; i ++ ) {",
            "score": 99.47888861762152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin + begin ; i < begin ; i ++ ) {",
            "score": 99.41398315429687,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin + begin ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =2; i <0; i ++ ) {",
            "score": 99.37542724609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i <0; i ++ ) {",
            "score": 99.37542724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i <0; i ++ ) {",
            "score": 99.37542724609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i <0; i ++ ) {",
            "score": 99.37542724609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i <0; i ++ ) {",
            "score": 99.37542724609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i )",
            "score": 99.32915182674633,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] -",
            "score": 99.65064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { dev =0;",
            "score": 99.4784268465909,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { dev = 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin + begin : begin ; i < begin ; i ++ ) {",
            "score": 99.43886108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + begin : begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; i ++ ) { {",
            "score": 99.43088697350544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + begin + length ; i ++ ) {",
            "score": 99.41398111979167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.3815685453869,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - begin ; i < weights.length ; i ++ )",
            "score": 99.3701236122533,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { if( ! isBiasCorrected ) {",
            "score": 99.65062537560097,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int0= begin ; i < begin + length ; i ++ ) {",
            "score": 99.41362847222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 0 = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length /2; i ++ ) {",
            "score": 99.38118896484374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length /9111962718267217978; i ++ ) {",
            "score": 99.38118896484374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length /37; i ++ ) {",
            "score": 99.38118896484374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length /3; i ++ ) {",
            "score": 99.38118896484374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length /1983; i ++ ) {",
            "score": 99.38118896484374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length || weights [ i ++ ] ) {",
            "score": 99.37376767113095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length || weights [ i ++ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ begin ] ; i ++ ) {",
            "score": 99.36973812705592,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ begin ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < weights + length ; i ++ ) {",
            "score": 99.32887098524306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin : length ; i ++ ) {",
            "score": 99.43883666992187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin : length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /1; i >=0; i ++ ) {",
            "score": 99.43071899414062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length < weights.length ; i ++ ) {",
            "score": 99.38907877604167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.38097563244048,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ! weights.length ; i ++ ) { ) {",
            "score": 99.37345377604167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ! weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ , i ++ ) {",
            "score": 99.32854903371711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ , i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i",
            "score": 99.650146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length -1; i ++ ) {",
            "score": 99.4778564453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <0; i ++ ) { {",
            "score": 99.43844168526786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i( i < weights.length ) ; i ++ ) {",
            "score": 99.41334170386905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i ( i < weights . length ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >= weights.length ; i -- ) {",
            "score": 99.3889493075284,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( Object i = weights ; i < weights.length ; i ++ ) {",
            "score": 99.37343343098958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Object i = weights ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean ; i ++ )",
            "score": 99.3695556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min1; i ++ ) {",
            "score": 99.3284912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isBiasCorrected ) { var =( accum -( accum2*accum2/ sumWts ) )",
            "score": 99.65005929129464,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isBiasCorrected ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) )",
            "score": 99.65005929129464,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isBiasCorrected ) { var =( accum -( accum37*accum37/ sumWts ) )",
            "score": 99.65005929129464,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isBiasCorrected ) { var =( accum -( accum3*accum3/ sumWts ) )",
            "score": 99.65005929129464,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isBiasCorrected ) { var =( accum -( accum1983*accum1983/ sumWts ) )",
            "score": 99.65005929129464,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < begin + length ; i ++ )",
            "score": 99.47777157738095,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin :1.0; i ++ ) {",
            "score": 99.43829345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : 1 . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ? weights [ i ] : weights ) )",
            "score": 99.4304729959239,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ? weights [ i ] : weights ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i != weights.length ; i -- ) {",
            "score": 99.3887606534091,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i != weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i <0+ length ; i ++ ) {",
            "score": 99.36953396267361,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < 0 + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i <= start.length ; i ++ ) {",
            "score": 99.3284912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum2*accum2/ sumWts ) ) /",
            "score": 99.64991106305804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /",
            "score": 99.64991106305804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum37*accum37/ sumWts ) ) /",
            "score": 99.64991106305804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum3*accum3/ sumWts ) ) /",
            "score": 99.64991106305804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { var =( accum -( accum1983*accum1983/ sumWts ) ) /",
            "score": 99.64991106305804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin += length ; i ++ ) {",
            "score": 99.43798149956598,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin += length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin.1; i < begin + length ; i ++ ) {",
            "score": 99.413330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ && {",
            "score": 99.3885830965909,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; i ++ ) { )",
            "score": 99.37287248883929,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < out.length ; i ++ ) {",
            "score": 99.36935763888889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < out . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ; i < length ; i ++ ) {",
            "score": 99.32834759880515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isBiasCorrected =0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64986617476852,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Bias CaMeL Corrected = 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : var + length ; i ++ ) {",
            "score": 99.43736572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : var + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights.length ; i ++ ) { }",
            "score": 99.43033500339673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i + start ; i < weights.length ; i ++ ) {",
            "score": 99.380517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i + start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ] ; i <0; i ++ ) {",
            "score": 99.37273848684211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ] ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- ; i < weights.length ; i ++ )",
            "score": 99.36930084228516,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < start + length ; i ++ )",
            "score": 99.32815712376645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -0",
            "score": 99.64945023148148,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: values.length ; i < begin ; i ++ ) {",
            "score": 99.43678588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : values . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i <=0; i ++ ) {",
            "score": 99.43007202148438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i <=0; i ++ ) {",
            "score": 99.43007202148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i <=0; i ++ ) {",
            "score": 99.43007202148438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i <=0; i ++ ) {",
            "score": 99.43007202148438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i <=0; i ++ ) {",
            "score": 99.43007202148438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { { {",
            "score": 99.4126708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i < i ++ ) {",
            "score": 99.3692626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { var = values [ i ] ;",
            "score": 99.64885147758152,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i ++ ) { {",
            "score": 99.42997814360119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + weights.length ; i ++ ) {",
            "score": 99.41248914930556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ ; i >=0; i ++ ) {",
            "score": 99.38851318359374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == weights.length ; i ++ ) { {",
            "score": 99.36898000616776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ) {",
            "score": 99.3279052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.648232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; [ i ] < weights.length ; i ++ ) {",
            "score": 99.47576293945312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; [ i ] < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < begin ; i ++ ) {",
            "score": 99.4360107421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ++ ;",
            "score": 99.38821847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i < weights.length ; i ++ )",
            "score": 99.38004557291667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i i < weights.length ; i ++ ) {",
            "score": 99.37238512541118,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ mean ; i < weights.length ; i ++ )",
            "score": 99.368896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + mean ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; i ++ ) { { {",
            "score": 99.32786865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i = begin ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64805536684783,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = begin ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i ==0; i ++ ) {",
            "score": 99.43582763671876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i == 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null || weights.length >0; i ++ )",
            "score": 99.42947520380434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null || weights . length > 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +1; i >=0; i ++ ) {",
            "score": 99.38806762695313,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, max =0; i < max ; i ++ ) {",
            "score": 99.37977294921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 , max = 0 ; i < max ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + FALSE ; i ++ ) {",
            "score": 99.36872694227431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + FALSE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length ; ++ i ) {",
            "score": 99.32785373263889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var ++ ;",
            "score": 99.47516741071429,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for iterator( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.41207082648026,
            "correctness": "uncompilable",
            "tokenized_patch": "for iterator ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i ++ ) { }",
            "score": 99.3878173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < iterator.length ; i ++ ) {",
            "score": 99.32771809895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *accum2; i ++ ) {",
            "score": 99.4751209077381,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *accum9111962718267217978; i ++ ) {",
            "score": 99.4751209077381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *accum37; i ++ ) {",
            "score": 99.4751209077381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *accum3; i ++ ) {",
            "score": 99.4751209077381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length *accum1983; i ++ ) {",
            "score": 99.4751209077381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length * accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < begin - length ; i ++ ) {",
            "score": 99.43547973632812,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < begin - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i >0; ++ i ) {",
            "score": 99.42946166992188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > 0 ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - length1; i < weights.length ; i ++ )",
            "score": 99.38751775568181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - length 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /2; i >=0; i -- ) {",
            "score": 99.3796630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /9111962718267217978; i >=0; i -- ) {",
            "score": 99.3796630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length /37; i >=0; i -- ) {",
            "score": 99.3796630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /3; i >=0; i -- ) {",
            "score": 99.3796630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length /1983; i >=0; i -- ) {",
            "score": 99.3796630859375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length / $NUMBER$ ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) break ) {",
            "score": 99.37213134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) break ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean.length ; i ++ )",
            "score": 99.3682502297794,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { { {",
            "score": 99.32756958007812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] *",
            "score": 99.64793113425925,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ) {",
            "score": 99.37188430059524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - ; i < weights.length ; i ++ )",
            "score": 99.36814970128677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; ++ i >=0; ) {",
            "score": 99.3274658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; ++ i >= 0 ; ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >= weights.length ; i ++ ) {",
            "score": 99.47441948784723,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i >= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i += weights.length ; i < begin ; i ++ ) {",
            "score": 99.41183132595486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i ; i >=1; i ++ ) {",
            "score": 99.38706665039062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i >= 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { if( {",
            "score": 99.37927827380952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { if ( {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i ++ ) {",
            "score": 99.37181091308594,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin > i ; i ++ ) {",
            "score": 99.36807590060764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin > i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! weights [0].isNaN( ) ) {",
            "score": 99.32715521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ 0 ] . is CaMeL Na CaMeL N ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] !=",
            "score": 99.64643012152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin - begin ; i ++ ) {",
            "score": 99.43521457248264,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin - begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :1.0)",
            "score": 99.42899753736413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 1 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var + length ; i ++ ) { {",
            "score": 99.41145405016448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length -1; i < length ; i -- ) {",
            "score": 99.3870516690341,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 1 ; i < length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < n1; i ++ ) {",
            "score": 99.37890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i ++ ) { ) {",
            "score": 99.37154134114583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start ; i ++ ) { {",
            "score": 99.32650936351104,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int sumWts =0.0; for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.64623119212963,
            "correctness": "uncompilable",
            "tokenized_patch": "int sum CaMeL Wts = 0 . 0 ; for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == null ) { for( i =0; i < weights.length ; i ++ )",
            "score": 99.42878524116848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) { for ( i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) }",
            "score": 99.3867520419034,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-1; i <= weights.length ; i ++ ) {",
            "score": 99.378857421875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < start + length ; i ++ ) { ) {",
            "score": 99.326025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var = values [ i ] ; }",
            "score": 99.6456298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length *mean ; i ++ ) {",
            "score": 99.47373657226562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length * mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( double i =0; i < begin : weights.length ; i ++ ) {",
            "score": 99.43473510742187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < begin : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < begin + length ; i ++ ) { {",
            "score": 99.41128394717262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i < length ; i -- ) {",
            "score": 99.3867431640625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < length ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length -1; i >= start + length ; i -- )",
            "score": 99.37877836681548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i >= start + length ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max1; i < weights.length ; i ++ ) {",
            "score": 99.37137001439145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { else",
            "score": 99.36752158717105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length >1; i ++ ) {",
            "score": 99.32583957248264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length > 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] - mean",
            "score": 99.64537702287946,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] - mean",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < isBiasCorrected ) {",
            "score": 99.43469819568452,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length / max ; i ++ ) {",
            "score": 99.42844848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; i -- ) {",
            "score": 99.37114868164062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin : weights )",
            "score": 99.36751883370536,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : weights )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.length ) {",
            "score": 99.32542724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length : weights.length ; i ++ ) {",
            "score": 99.43436279296876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ==0; i ++ ) {",
            "score": 99.42837524414062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length == 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n + length ; i ++ ) {",
            "score": 99.37864854600694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ] ) {",
            "score": 99.37098524305556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - i ; i < begin ; i ++ ) {",
            "score": 99.36749945746527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - i ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i -- ) {",
            "score": 99.32521565755208,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum -( accum2*accum2/ sumWts ) ; i ++ )",
            "score": 99.6443504050926,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ )",
            "score": 99.6443504050926,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum37*accum37/ sumWts ) ; i ++ )",
            "score": 99.6443504050926,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum3*accum3/ sumWts ) ; i ++ )",
            "score": 99.6443504050926,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -( accum1983*accum1983/ sumWts ) ; i ++ )",
            "score": 99.6443504050926,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin1; i ++ ) {",
            "score": 99.4342105263158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - n ; i >=0; i ++ ) {",
            "score": 99.4279052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - n ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { { break ;",
            "score": 99.41078404017857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i =0; i < start + length ; i ++ ) {",
            "score": 99.37855834960938,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = m2; i < weights.length ; i ++ ) {",
            "score": 99.37044484991776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = m $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = m9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.37044484991776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = m $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = m37; i < weights.length ; i ++ ) {",
            "score": 99.37044484991776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = m $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = m3; i < weights.length ; i ++ ) {",
            "score": 99.37044484991776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = m $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = m1983; i < weights.length ; i ++ ) {",
            "score": 99.37044484991776,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = m $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i >= start ; i -- ) {",
            "score": 99.32511393229167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i >= start ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.644306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin - length ; i ++ ) {",
            "score": 99.43414916992188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.equals(0) ; i ++ ) {",
            "score": 99.42772274925595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . equals ( 0 ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.NaN ; i ++ ) { {",
            "score": 99.41078404017857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . Na CaMeL N ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < gc.length ; i ++ ) {",
            "score": 99.38563368055556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < gc . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i < weights.length ; ; ) {",
            "score": 99.37037489149306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ++ i < weights . length ; ; ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -1; i < begin ; i ++ ) {",
            "score": 99.36737738715277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int l =0; l < weights.length ; l ++ ) {",
            "score": 99.32511393229167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int l = 0 ; l < weights . length ; l ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : values.length ; i < min ; i ++ ) {",
            "score": 99.43402099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / / } }",
            "score": 99.42762340198864,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / / } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < begin + length ; i ++ ) { {",
            "score": 99.41077270507813,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 1 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < start + length ; i ++ ) {",
            "score": 99.37783974095395,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) { }",
            "score": 99.37026832217262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - begin ; i ++ ) {",
            "score": 99.36735026041667,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + length ; i <= min ; i ++ ) {",
            "score": 99.32494439019098,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum2;",
            "score": 99.64401245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum9111962718267217978;",
            "score": 99.64401245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum37;",
            "score": 99.64401245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum3;",
            "score": 99.64401245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum1983;",
            "score": 99.64401245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return accum2;",
            "score": 99.47102864583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return accum9111962718267217978;",
            "score": 99.47102864583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return accum37;",
            "score": 99.47102864583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return accum3;",
            "score": 99.47102864583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) return accum1983;",
            "score": 99.47102864583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) return accum $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <= begin ; i ++ ) {",
            "score": 99.43391927083333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.2)",
            "score": 99.42753269361413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.9111962718267217978)",
            "score": 99.42753269361413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.37)",
            "score": 99.42753269361413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.3)",
            "score": 99.42753269361413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ? weights [ i ] :0.1983)",
            "score": 99.42753269361413,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ? weights [ i ] : 0 . $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length -0; i >=0; i ++ ) {",
            "score": 99.38377796519886,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length - 0 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + i ; i < weights.length ; i ++ )",
            "score": 99.37777549342105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights ; i < weights.length ; i ++ ) { ) {",
            "score": 99.37025146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin +1; i ++ ) { {",
            "score": 99.36703330592105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; ++ i ) {",
            "score": 99.32491048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! isBiasCorrected ) { for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64399937220982,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! is CaMeL Bias CaMeL Corrected ) { for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i < weights.length ; i ++ )",
            "score": 99.46930803571429,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length + length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.42705688476562,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.41067023026316,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i <= weights.length ; i ++ ) {",
            "score": 99.37747192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) break ; }",
            "score": 99.37018432617188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + begin : weights.length ) {",
            "score": 99.36703330592105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + begin : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < length ; i -- ) {",
            "score": 99.32379828559027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { var = values [ i ] ;",
            "score": 99.6437351392663,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i == begin + length ; i ++ ) {",
            "score": 99.46810913085938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i == begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <1: weights.length ; i ++ ) {",
            "score": 99.43326416015626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /1; i ++ ) { {",
            "score": 99.4106677827381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { for( int",
            "score": 99.36998930431548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { for ( int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <= max ; i ++ ) {",
            "score": 99.32375081380208,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) { var = values [ i ] ;",
            "score": 99.64346313476562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin [0] ; i < weights.length ; i ++ ) {",
            "score": 99.46719215029762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin [ 0 ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4259097450658,
            "correctness": "uncompilable",
            "tokenized_patch": "* for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ++ i ; i < weights.length ; i ++ ) {",
            "score": 99.41049033717105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ++ i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = weights.length -1; i >=1; i -- ) {",
            "score": 99.38262648809524,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = weights . length - 1 ; i >= 1 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { continue ; }",
            "score": 99.37724376860119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < begin + length ; i ++ )",
            "score": 99.36687873391544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start *length ; i ++ ) {",
            "score": 99.32332356770833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start * length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = [ i ] ;",
            "score": 99.6432596842448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { i ++ ;",
            "score": 99.46661086309524,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { i ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length + length ; i < mean ; i ++ ) {",
            "score": 99.43304443359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i < mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = var ; i < begin + length ; i ++ ) {",
            "score": 99.41048855251736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = var ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i ++ )",
            "score": 99.38251053659539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i <0; i ++ ) {",
            "score": 99.36652967664931,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= start + length ; i ++ )",
            "score": 99.32325654871323,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "float sumWts =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.64303927951389,
            "correctness": "uncompilable",
            "tokenized_patch": "float sum CaMeL Wts = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i <= weights.length ; i ++ ) {",
            "score": 99.46599731445312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin :1; i < begin ; i ++ ) {",
            "score": 99.43290879991319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 1 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length -2; i < weights.length ; i ++ ) {",
            "score": 99.425341796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length -9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.425341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length -37; i < weights.length ; i ++ ) {",
            "score": 99.425341796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length -3; i < weights.length ; i ++ ) {",
            "score": 99.425341796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = length -1983; i < weights.length ; i ++ ) {",
            "score": 99.425341796875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i >0; i -- ) {",
            "score": 99.37714979383681,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i > 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length , ; i ++ ) {",
            "score": 99.36930124383224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length , ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < accum2; i ++ ) {",
            "score": 99.36650534237133,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < accum9111962718267217978; i ++ ) {",
            "score": 99.36650534237133,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < accum37; i ++ ) {",
            "score": 99.36650534237133,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < accum3; i ++ ) {",
            "score": 99.36650534237133,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < accum1983; i ++ ) {",
            "score": 99.36650534237133,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min - length ; i ++ ) {",
            "score": 99.32319471571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min - length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -",
            "score": 99.64161217730978,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int double i =0; i < weights.length ; i ++ ) {",
            "score": 99.46589740953948,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int double i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin /1; i ++ ) {",
            "score": 99.43254937065973,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i != n ; i ++ ) {",
            "score": 99.42526245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i != n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; Number ++ i ) {",
            "score": 99.36929481907895,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; Number ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < - length ; i ++ ) {",
            "score": 99.36644071691177,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < - length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0.0; i < length ; i ++ ) {",
            "score": 99.32283528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.64125795717592,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + length ; i != begin + length ; i ++ ) {",
            "score": 99.465771484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i != begin + length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) throws Exception {",
            "score": 99.41002197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) throws Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i == weights.length ; i ++ ) {",
            "score": 99.37686767578126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i == weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += begin ; i < begin ; i ++ ) {",
            "score": 99.36634826660156,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < start ; i ++ ) { {",
            "score": 99.32229132401316,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < start ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; /",
            "score": 99.64002336774554,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.length ; i ++ ) { }",
            "score": 99.38093705610795,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n ; i <0; i ++ ) {",
            "score": 99.36872100830078,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i ++ )",
            "score": 99.36622721354166,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= name.length ; i ++ ) {",
            "score": 99.322021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= name . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =0.0; }",
            "score": 99.63970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = 0 . 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : length ; i < begin ; i ++ ) {",
            "score": 99.43227810329861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ;",
            "score": 99.37661597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / false }",
            "score": 99.3686755952381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / false }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: weights.length ; i < begin ) {",
            "score": 99.36553596047794,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i < begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! weights [1].equals( weights [0] ) ) {",
            "score": 99.32108561197917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ 1 ] . equals ( weights [ 0 ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.639658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.iterator( ) ; i ++ ) {",
            "score": 99.4647705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . iterator ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin.0; i < begin ; i ++ ) {",
            "score": 99.43200005425348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin . 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { try {",
            "score": 99.4094005766369,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >= -1; i -- ) {",
            "score": 99.3808361235119,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= - 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "do { for( int i = start ; i <= weights.length ; i ++ ) {",
            "score": 99.37645263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = start ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) { )",
            "score": 99.36859421502976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < min ; i ++ ) { {",
            "score": 99.32082950367646,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < min ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] [0",
            "score": 99.63948277064732,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] [ 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i i ++ ) {",
            "score": 99.38070824032738,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + min ; i ++ )",
            "score": 99.36516256893383,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + min ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = [ i ] ;",
            "score": 99.63938395182292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <= weights.length ; i ++ ) { {",
            "score": 99.46440197172619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = false ; i < begin + length ; i ++ ) {",
            "score": 99.40922715928819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = false ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.38067305715461,
            "correctness": "uncompilable",
            "tokenized_patch": "private for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = increment ; i < weights.length ; i ++ ) {",
            "score": 99.37572564019098,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = increment ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -=0; i < weights.length ; i ++ ) { {",
            "score": 99.36515085320724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < NaN ; i ++ ) {",
            "score": 99.32073974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < Na CaMeL N ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] &1",
            "score": 99.63931710379464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] & 1",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , dev ++ ) {",
            "score": 99.40922619047619,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , dev ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0] ; i < weights.length ; i ++ ) {",
            "score": 99.36830540707237,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ] ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <=0.0; i ++ ) {",
            "score": 99.36500379774306,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= 0 . 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( ! weights [1].equals( weights [1] ) ) {",
            "score": 99.32017008463542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ 1 ] . equals ( weights [ 1 ] ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *dev",
            "score": 99.63848005022321,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * dev",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < iterator.length ; i ++ ) {",
            "score": 99.46381225585938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < iterator . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + var ; i ++ ) {",
            "score": 99.43128797743056,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + var ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 0.0;",
            "score": 99.42440132472827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return 0 . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + weights.length ; i < begin ; i ++ ) {",
            "score": 99.40919189453125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + weights . length ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i =0; i < value.length ; i ++ ) {",
            "score": 99.37980571546052,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i ++ ) {",
            "score": 99.36830357142857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ )",
            "score": 99.3649169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i >= weights.length ; ) {",
            "score": 99.32008990119485,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; ++ i >= weights . length ; ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum2*",
            "score": 99.63814742476852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.63814742476852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum37*",
            "score": 99.63814742476852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum3*",
            "score": 99.63814742476852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.63814742476852,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin >=0; i ++ ) {",
            "score": 99.43126085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*/ for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.40919189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "* / for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < list.length ; i ++ ) { {",
            "score": 99.32004908511513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < list . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { var = values [ i ] ;",
            "score": 99.63784391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights [ i ].length ; i ++ ) {",
            "score": 99.46328590029762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights [ i ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin :( weights.length + length ) ) {",
            "score": 99.4311290922619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : ( weights . length + length ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-2; i < weights.length ; i ++ ) {",
            "score": 99.42344970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0-9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.42344970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0-37; i < weights.length ; i ++ ) {",
            "score": 99.42344970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0-3; i < weights.length ; i ++ ) {",
            "score": 99.42344970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0-1983; i < weights.length ; i ++ ) {",
            "score": 99.42344970703125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin *0; i < begin + length ; i ++ ) {",
            "score": 99.40892333984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin * 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i -- ) {",
            "score": 99.3795166015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0- length ; i < begin + length ; i ++ )",
            "score": 99.36455335115132,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - length ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start + length ; i ++ )",
            "score": 99.31968778722427,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] [",
            "score": 99.63748734085648,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] [",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, iterator = weights.length ; i < weights.length ; i ++ )",
            "score": 99.4232761548913,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , iterator = weights . length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +0; i < begin ; i ++ ) {",
            "score": 99.4086669921875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0, weights < weights.length ; i ++ ) {",
            "score": 99.37944200303819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , weights < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.SIZE ; i ++ ) {",
            "score": 99.36703830295139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . SIZE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] ; i ++ )",
            "score": 99.36454772949219,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < out.length ; i ++ ) {",
            "score": 99.31964789496527,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < out . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.63694545200893,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i <1; i ++ ) {",
            "score": 99.43052164713542,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= weights.length ; i -- ) {",
            "score": 99.37921142578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < weights.length ; i ++ ) { double {",
            "score": 99.3748446377841,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights . length ; i ++ ) { double {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i else {",
            "score": 99.36673409598214,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights [ i ] == null ) { return 0.0; } else {",
            "score": 99.31950298108552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights [ i ] == null ) { return 0 . 0 ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { dev = values [ i ] ; }",
            "score": 99.63656616210938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { dev = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum2*accum2/ sumWts ) ) /(",
            "score": 99.43045043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /(",
            "score": 99.43045043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum37*accum37/ sumWts ) ) /(",
            "score": 99.43045043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum3*accum3/ sumWts ) ) /(",
            "score": 99.43045043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum1983*accum1983/ sumWts ) ) /(",
            "score": 99.43045043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.arraycopy( weights ,0, weights ,0, weights.length ) ; } } else {",
            "score": 99.4230069247159,
            "correctness": "uncompilable",
            "tokenized_patch": "System . arraycopy ( weights , 0 , weights , 0 , weights . length ) ; } } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int ++ i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.40861430921052,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i <= weights.length ; i ++ ) {",
            "score": 99.37883843315973,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i <= weights.length ; i ++ ) {",
            "score": 99.37883843315973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i <= weights.length ; i ++ ) {",
            "score": 99.37883843315973,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i <= weights.length ; i ++ ) {",
            "score": 99.37883843315973,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i <= weights.length ; i ++ ) {",
            "score": 99.37883843315973,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null && weights.length >0) {",
            "score": 99.37481689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights . length > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { *false ;",
            "score": 99.36650158110119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { * false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum2/ sumWts )",
            "score": 99.36443770559211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ / sum CaMeL Wts )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum9111962718267217978/ sumWts )",
            "score": 99.36443770559211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ / sum CaMeL Wts )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum37/ sumWts )",
            "score": 99.36443770559211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ / sum CaMeL Wts )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum3/ sumWts )",
            "score": 99.36443770559211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ / sum CaMeL Wts )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : accum1983/ sumWts )",
            "score": 99.36443770559211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : accum $NUMBER$ / sum CaMeL Wts )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length -1; i ++ ) { {",
            "score": 99.31949655633224,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length - 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.63639613560268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.63639613560268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.63639613560268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.63639613560268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.63639613560268,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = for( i < weights.length ; i ++ ) {",
            "score": 99.37858751085069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = for ( i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < start + length ; i ++ ) {",
            "score": 99.37459309895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) { else",
            "score": 99.36638532366071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ )",
            "score": 99.36424967447917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i <0; i ++ ) {",
            "score": 99.31923421223958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin / length ; i ++ ) {",
            "score": 99.42993842230902,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin / length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -0; i <= max ; i ++ ) {",
            "score": 99.42269897460938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length + length ; i <0; i ++ ) {",
            "score": 99.40801391601562,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) i -- ;",
            "score": 99.37855224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) i -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { */",
            "score": 99.37424926757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) /",
            "score": 99.36598036024306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != begin + length ; i ++ )",
            "score": 99.36359001608456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i != length ; i ++ ) {",
            "score": 99.31907653808594,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i != length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { var = values [ i ] ;",
            "score": 99.6355617357337,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "try { for( int i = begin ; i < begin ; i ++ ) {",
            "score": 99.42981635199652,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( int i = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < length ; i ++ )",
            "score": 99.4226407137784,
            "correctness": "wrong",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < length ; i ++ )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { ) {",
            "score": 99.407861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i >=1; i ++ ) {",
            "score": 99.37841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i >= 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ?1: weights.length ) {",
            "score": 99.37388392857143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? 1 : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length -1; i ++ ) {",
            "score": 99.3657162314967,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < begin + length ; i ++ )",
            "score": 99.36339047080592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i >0; i ++ ) {",
            "score": 99.42976209852431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : weights.length + mean ; i ++ ) {",
            "score": 99.40785047743056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length + mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.arraycopy( weights ,0, weights ,0, weights.length ) ; }",
            "score": 99.37746068050987,
            "correctness": "uncompilable",
            "tokenized_patch": "System . arraycopy ( weights , 0 , weights , 0 , weights . length ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { continue ; }",
            "score": 99.37382368607955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i",
            "score": 99.36557488692434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0+ length ; i ++ ) {",
            "score": 99.31870524088542,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { dev = values [ i ] ; }",
            "score": 99.63516235351562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { dev = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : begin ; i ++ ) {",
            "score": 99.42937554253473,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ; i < weights.length ; i ++ ) {",
            "score": 99.37377211626838,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i >0; i ++ ) {",
            "score": 99.36550564236111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i > 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + start ; i <= length ; i ++ ) {",
            "score": 99.31865776909723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { if( isBiasCorrected )",
            "score": 99.63498159555289,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin ; i < weights.length - mean ; i ++ ) {",
            "score": 99.46206665039062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length - mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ++ ; i < weights.length ; i ++ ) {",
            "score": 99.42878160978618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ++ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int var = begin ; i < weights.length ; i ++ ) {",
            "score": 99.40762668185764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int var = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i < weights.length ; i ++ ) { ) {",
            "score": 99.36531372070313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin : weights ) {",
            "score": 99.362939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= i ; i -- ) {",
            "score": 99.31865098741319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= i ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var = null ;",
            "score": 99.63428844105114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =02; i < weights.length ; i ++ ) {",
            "score": 99.36528577302632,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =09111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.36528577302632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =037; i < weights.length ; i ++ ) {",
            "score": 99.36528577302632,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =03; i < weights.length ; i ++ ) {",
            "score": 99.36528577302632,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =01983; i < weights.length ; i ++ ) {",
            "score": 99.36528577302632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights ; i ++ ) { { {",
            "score": 99.31858317057292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i != length ; i ++ ) { var = values [ i ] ;",
            "score": 99.63424549932066,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i != length ; i ++ ) { var = values [ i ] ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0;1< weights.length ; i ++ ) {",
            "score": 99.37645128038194,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; 1 < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length -0; ++ i ) {",
            "score": 99.36505737304688,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 0 ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i < length /2; i ++ ) {",
            "score": 99.31830512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length /9111962718267217978; i ++ ) {",
            "score": 99.31830512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length /37; i ++ ) {",
            "score": 99.31830512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length /3; i ++ ) {",
            "score": 99.31830512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length /1983; i ++ ) {",
            "score": 99.31830512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.63421630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.63421630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.63421630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.63421630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.63421630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { } }",
            "score": 99.46091918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < begin + length ; i ++ ) {",
            "score": 99.4282290810033,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ || {",
            "score": 99.37603759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ || {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =.0; i < weights.length ; i ++ ) {",
            "score": 99.37283485814145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < weights.length ;1++ ) {",
            "score": 99.3649169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < weights . length ; 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { }",
            "score": 99.3626708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev ++ ;",
            "score": 99.46012369791667,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i += begin + length ; i < begin ; i ++ ) {",
            "score": 99.42820231119792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += begin + length ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >> <= weights.length ; i ++ ) {",
            "score": 99.42177862870066,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >> <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin + length ; i ++ ) {",
            "score": 99.4067611694336,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i >0; i -- ) {",
            "score": 99.31731414794922,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i > 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < values.length ; i ++ ) {",
            "score": 99.40669555664063,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int begin =0; i < weights.length ; i ++ ) {",
            "score": 99.36224365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int begin = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ! ! isBiasCorrected )",
            "score": 99.63323974609375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ! ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.4590076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += mean ; i < weights.length ; i ++ ) {",
            "score": 99.42784288194444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >1; i ++ ) {",
            "score": 99.4215087890625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i > 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length + dev ; i ++ ) { {",
            "score": 99.40665690104167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + dev ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ; ) {",
            "score": 99.36406506990132,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ; ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { for( int i = begin ; i < weights.length ; i ++ )",
            "score": 99.36224043996711,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < length ; i ++ ) { { {",
            "score": 99.31715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.45887974330357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i <=0; i ++ ) {",
            "score": 99.42118530273437,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = max -1; i <= weights.length ; i ++ ) {",
            "score": 99.37274169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max - 1 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( ; i =0; i < weights.length ; i ++ ) {",
            "score": 99.36398654513889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ; i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i < begin + length ; i ++ )",
            "score": 99.36213764391448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + length ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < matches ; i ++ ) {",
            "score": 99.31670379638672,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < matches ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i +0; i < weights.length ; i ++ ) {",
            "score": 99.40615844726562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i + 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = 'expansion values,'; i < weights.length ; i ++ ) {",
            "score": 99.37538548519737,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = 'population'; i < weights.length ; i ++ ) {",
            "score": 99.37538548519737,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = ' or '; i < weights.length ; i ++ ) {",
            "score": 99.37538548519737,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = 'sample'; i < weights.length ; i ++ ) {",
            "score": 99.37538548519737,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = 'population variance'; i < weights.length ; i ++ ) {",
            "score": 99.37538548519737,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = $STRING$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= Math.length ; i ++ ) {",
            "score": 99.36360677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= Math . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin int i ; i ++ ) {",
            "score": 99.36196560329861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin int i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max +1; i ++ ) {",
            "score": 99.316650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max + 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } if( isBiasCorrected )",
            "score": 99.63218858506944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } if ( is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i == weights.length ; i ++ ) {",
            "score": 99.45834350585938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i == weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : begin ; i < mean ; i ++ ) {",
            "score": 99.42608642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i ; i <= weights.length ; i ++ ) { {",
            "score": 99.37234933035714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i i =1; i < weights.length ; i ++ ) {",
            "score": 99.36351254111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i != weights.length ; i ++ ) {",
            "score": 99.36177571614583,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i != weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights [ i ] ; i ++ ) { {",
            "score": 99.316650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ] ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < ; i ++ ) {",
            "score": 99.37222144717262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i <= length ; i ++ ) {",
            "score": 99.31643337673611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i <= length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { if( isBiasCorrected ) {",
            "score": 99.6308203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum =0; accum < weights.length ; weights [ i ] ++ ) {",
            "score": 99.42520751953126,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum = 0 ; accum < weights . length ; weights [ i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ) ; i < begin + length ; i ++ ) {",
            "score": 99.40581311677632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ) ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <.length ; i ++ ) {",
            "score": 99.37500718060662,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { { finally {",
            "score": 99.37176804315476,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { { finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <0; i ++ )",
            "score": 99.36173288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i ++ ) { {",
            "score": 99.40569709329044,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < | weights.length ; i ++ ) {",
            "score": 99.37444747121711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < | weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < super.weights.length ; i ++ ) {",
            "score": 99.37026977539062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < super . weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ ; i < begin ; i ++ ) {",
            "score": 99.36171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.63072713216145,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < weights.length ; i -- ) {",
            "score": 99.45746459960938,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin - length ; i <=0; i ++ ) {",
            "score": 99.36168077256944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i < start ; i ++ ) { {",
            "score": 99.31602718955592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < start ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long sumWts =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.63047055844908,
            "correctness": "uncompilable",
            "tokenized_patch": "long sum CaMeL Wts = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length.length ; i ++ ) {",
            "score": 99.40523071289063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; ++ i ) {",
            "score": 99.36983235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i <= weights.length ; i ++ ) {",
            "score": 99.36161973741319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; i ++ )",
            "score": 99.3157958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var =( accum -( accum2*",
            "score": 99.630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var =( accum -( accum37*",
            "score": 99.630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var =( accum -( accum3*",
            "score": 99.630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { continue ; }",
            "score": 99.40521530877976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.get ; i ++ ) {",
            "score": 99.36229112413194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . get ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double var =0; i < weights.length ; i ++ ) {",
            "score": 99.36146375868056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double var = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length +1; i ++ )",
            "score": 99.31539113898026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { var = values [ i ] ; }",
            "score": 99.62996419270833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { var = values [ i ] ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin2; i < weights.length ; i ++ ) {",
            "score": 99.4219906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.4219906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin37; i < weights.length ; i ++ ) {",
            "score": 99.4219906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin3; i < weights.length ; i ++ ) {",
            "score": 99.4219906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin1983; i < weights.length ; i ++ ) {",
            "score": 99.4219906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ? weights [ i ] : weights )",
            "score": 99.41943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ? weights [ i ] : weights )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights ; i < weights.length ; i ++ ) { {",
            "score": 99.40507579985119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= weights.length ; i ++ ) { {",
            "score": 99.36971028645833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i <= weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++2) {",
            "score": 99.36152729235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++9111962718267217978) {",
            "score": 99.36152729235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++37) {",
            "score": 99.36152729235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++3) {",
            "score": 99.36152729235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++1983) {",
            "score": 99.36152729235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start ; i ++ ) { { {",
            "score": 99.31529405381944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double accum ;",
            "score": 99.45553152901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double accum ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : sumWts ) {",
            "score": 99.42197963169643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + mean ; i ++ ) { {",
            "score": 99.40506784539474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + mean ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ || weights [ i ) {",
            "score": 99.3736239346591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ || weights [ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i <= n ; i ++ )",
            "score": 99.36968703497024,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i <= n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2/ sumWts ) {",
            "score": 99.36098904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978/ sumWts ) {",
            "score": 99.36098904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37/ sumWts ) {",
            "score": 99.36098904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3/ sumWts ) {",
            "score": 99.36098904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983/ sumWts ) {",
            "score": 99.36098904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ / sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= i ; i ++ ) {",
            "score": 99.3149642944336,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin1+ length ; i ++ ) {",
            "score": 99.421630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin 1 + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [1].length ; i ++ ) {",
            "score": 99.41824340820312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ 1 ] . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length ; i ++ ) { ) {",
            "score": 99.36966552734376,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ ) { )",
            "score": 99.361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < weights.length ; i ++ )",
            "score": 99.3609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < weights.length ; i ++ )",
            "score": 99.3609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < weights.length ; i ++ )",
            "score": 99.3609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < weights.length ; i ++ )",
            "score": 99.3609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < weights.length ; i ++ )",
            "score": 99.3609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; ++ i < weights.length ; i ++ ) { {",
            "score": 99.31475219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ++ i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.4551013764881,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum2*sumWts ) {",
            "score": 99.36088053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978*sumWts ) {",
            "score": 99.36088053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37*sumWts ) {",
            "score": 99.36088053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3*sumWts ) {",
            "score": 99.36088053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983*sumWts ) {",
            "score": 99.36088053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ * sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ; i ++ ) ; ) {",
            "score": 99.36085146949405,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ; i ++ ) ; ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ==",
            "score": 99.62764937789352,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < list.length ; i ++ ) {",
            "score": 99.45487060546876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < list . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights [ i ] : weights ) ;",
            "score": 99.41782448508523,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights [ i ] : weights ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = value.length ; i < begin + length ; i ++ ) {",
            "score": 99.40474853515624,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = value . length ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i >=0; i -- ) {",
            "score": 99.37272135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / ) {",
            "score": 99.36083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ] ; i ++ ) { {",
            "score": 99.36077880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ] ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start *length ; i ++ ) {",
            "score": 99.31429714626736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start * length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin >>0; i ++ ) {",
            "score": 99.42041015625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin >> 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i -- )",
            "score": 99.37266322544643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "default : for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.36906127929687,
            "correctness": "uncompilable",
            "tokenized_patch": "default : for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { } else {",
            "score": 99.36053145559211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1; i ++ ) { sumWts += weights [ i ]",
            "score": 99.62618582589286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights ;",
            "score": 99.41768188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=0; ++ i ) {",
            "score": 99.37256469726563,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= 0 ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < !1.length ; i ++ ) {",
            "score": 99.36070492393092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ! 1 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start == length ; i ++ ) {",
            "score": 99.31410047743056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start == length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -1",
            "score": 99.62601273148148,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 1",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { weights i ++ ;",
            "score": 99.41768022017045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { weights i ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int l =0; i < weights.length ; i ++ ) {",
            "score": 99.40445963541667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int l = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < += weights.length ; i ++ ) {",
            "score": 99.37156918174342,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < += weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + l ; i < weights.length ; i ++ ) {",
            "score": 99.36865844726563,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + l ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < ! weights.length ; i ++ ) {",
            "score": 99.36058285361842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < ! weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i < begin ; i ++ )",
            "score": 99.3600715188419,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - length ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min -1; i ++ ) {",
            "score": 99.3140869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i +",
            "score": 99.62578876201923,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin i ; i < weights.length ; i ++ ) {",
            "score": 99.45392166940789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin i ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin >>1; i ++ ) {",
            "score": 99.41997612847223,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin >> 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) throws ] {",
            "score": 99.40410766601562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) throws ] {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= i ; i -- ) {",
            "score": 99.37030639648438,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= i ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "do { for( int i =0; i < begin + length ; i ++ )",
            "score": 99.36004317434211,
            "correctness": "uncompilable",
            "tokenized_patch": "do { for ( int i = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= i ; i ++ ) {",
            "score": 99.31394958496094,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] *mean",
            "score": 99.62486049107143,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] * mean",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i.length >0; i ++ ) {",
            "score": 99.41735161675348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i . length > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < environment.length ; i ++ ) {",
            "score": 99.36856418185764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < environment . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ )",
            "score": 99.35986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < in.length ; i ++ ) {",
            "score": 99.31384955512152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < in . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.4183285361842,
            "correctness": "wrong",
            "tokenized_patch": "; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length -0; i < weights ; i ++ ) {",
            "score": 99.41734619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - length ; i ++ )",
            "score": 99.36031301398026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -0; i < weights.length ; i ++ ) {",
            "score": 99.35981580946181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i - 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min > max ; i ++ ) {",
            "score": 99.31357828776042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min > max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.62411063058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.62411063058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.62411063058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.62411063058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.62411063058036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ || null ) {",
            "score": 99.36016845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ || null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( char i =0; i < weights.length ; i ++ ) { {",
            "score": 99.31334164268092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( char i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.6240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum2*accum2/ sumWts ) )",
            "score": 99.45235188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) )",
            "score": 99.45235188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum37*accum37/ sumWts ) )",
            "score": 99.45235188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum3*accum3/ sumWts ) )",
            "score": 99.45235188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum1983*accum1983/ sumWts ) )",
            "score": 99.45235188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < start + length ; i ++ ) {",
            "score": 99.3680419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max ; i1++ ) {",
            "score": 99.3599494485294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0.begin ; i ++ ) {",
            "score": 99.35975477430556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start ; i ++ ) { {",
            "score": 99.31321806066177,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var = null ;",
            "score": 99.62400124289773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { break ; }",
            "score": 99.40293666294643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( =0; i < weights.length ; i ++ ) {",
            "score": 99.36793518066406,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i1++ ) {",
            "score": 99.35984892003677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i 1 ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin & accum ; i ++ ) {",
            "score": 99.35965983072917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin & accum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= length ; i ++ ) { {",
            "score": 99.31272977941177,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; return",
            "score": 99.62382289341518,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; return",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin + begin + length : weights.length ; i ++ ) {",
            "score": 99.41734619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + begin + length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.get( i ).length ; i ++ )",
            "score": 99.36918501420455,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . get ( i ) . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.2) {",
            "score": 99.35972900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.9111962718267217978) {",
            "score": 99.35972900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.37) {",
            "score": 99.35972900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.3) {",
            "score": 99.35972900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++.1983) {",
            "score": 99.35972900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + length ; i ++ )",
            "score": 99.35944567228618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= start + length ; i ++ )",
            "score": 99.3125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin /0; i ++ ) {",
            "score": 99.41724989149306,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "System.arraycopy( weights ,0, weights ,0, weights.length ) ; } else {",
            "score": 99.415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . arraycopy ( weights , 0 , weights , 0 , weights . length ) ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +( accum2*accum2/ sumWts ) ) {",
            "score": 99.4026111421131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.4026111421131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +( accum37*accum37/ sumWts ) ) {",
            "score": 99.4026111421131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +( accum3*accum3/ sumWts ) ) {",
            "score": 99.4026111421131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.4026111421131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < false.length ; i ++ ) {",
            "score": 99.36916775173611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < false . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { if( )",
            "score": 99.36747814360119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { if ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { *) {",
            "score": 99.35957263764881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { * ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < begin + length ; i ++ )",
            "score": 99.35943244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =9111962718267217978; i < begin + length ; i ++ )",
            "score": 99.35943244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < begin + length ; i ++ )",
            "score": 99.35943244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < begin + length ; i ++ )",
            "score": 99.35943244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < begin + length ; i ++ )",
            "score": 99.35943244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { do {",
            "score": 99.31240844726562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { do {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) return var ;",
            "score": 99.45140380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) return var ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=2; i ++ ) {",
            "score": 99.41545867919922,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=9111962718267217978; i ++ ) {",
            "score": 99.41545867919922,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=37; i ++ ) {",
            "score": 99.41545867919922,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=3; i ++ ) {",
            "score": 99.41545867919922,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >=1983; i ++ ) {",
            "score": 99.41545867919922,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; / ++ i ) {",
            "score": 99.35940712376645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; / ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < begin + length ; i ++ )",
            "score": 99.35934787326389,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] ; else",
            "score": 99.62220110212054,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin % length ; i ++ ) {",
            "score": 99.41706678602431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin % length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i <= max ; i ++ ) {",
            "score": 99.41533745659723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < isBiasCorrected ; i ++ ) {",
            "score": 99.40203857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < is CaMeL Bias CaMeL Corrected ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < l ; i -- ) {",
            "score": 99.36904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < l ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n2; i ++ ) {",
            "score": 99.36692181755515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n9111962718267217978; i ++ ) {",
            "score": 99.36692181755515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n37; i ++ ) {",
            "score": 99.36692181755515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n3; i ++ ) {",
            "score": 99.36692181755515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n1983; i ++ ) {",
            "score": 99.36692181755515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n - weights ; i ++ ) {",
            "score": 99.35925971137152,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n - weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >= weights.length ; i -- ) {",
            "score": 99.31210666232639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i >= weights . length ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum2*accum2/",
            "score": 99.62216073495371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.62216073495371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum37*accum37/",
            "score": 99.62216073495371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum3*accum3/",
            "score": 99.62216073495371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum1983*accum1983/",
            "score": 99.62216073495371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length + length ; i >=0; i ++ ) {",
            "score": 99.4509765625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length + length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + weights.length ; i ++ ) { {",
            "score": 99.40175083705357,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} i =0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.3688631924716,
            "correctness": "uncompilable",
            "tokenized_patch": "} i = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + weights.length ; i ++ )",
            "score": 99.35920153166118,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int0= start ; i < weights.length ; i ++ ) {",
            "score": 99.31208631727431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 0 = start ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] [ mean",
            "score": 99.62184361049107,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] [ mean",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <( begin + length ) ; i ++ ) {",
            "score": 99.4501220703125,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < ( begin + length ) ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < i : weights.length ) {",
            "score": 99.4162365141369,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < i : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= n ; i -- ) {",
            "score": 99.41519775390626,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= n ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + dev ; i ++ ) {",
            "score": 99.40149603949652,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + dev ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length - ++ i ) {",
            "score": 99.36866344105114,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length - ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + i ; i < weights.length ; i ++ )",
            "score": 99.35916940789474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+ i ; i ++ ) {",
            "score": 99.35898844401042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( ! weights [ i ].isNaN( ) ) {",
            "score": 99.31176079644098,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! weights [ i ] . is CaMeL Na CaMeL N ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.62074497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.62074497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.62074497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.62074497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.62074497767857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == weights.length -1; i ++ ) {",
            "score": 99.41513671875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == weights . length - 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < weights.length ; i ++ ) { {",
            "score": 99.35825709292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < weights.length ; i ++ ) { {",
            "score": 99.35825709292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < weights.length ; i ++ ) { {",
            "score": 99.35825709292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < weights.length ; i ++ ) { {",
            "score": 99.35825709292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < weights.length ; i ++ ) { {",
            "score": 99.35825709292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null && weights [0] < weights [0] ) {",
            "score": 99.31173366970486,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights [ 0 ] < weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.62071736653645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0=1; i < weights.length ; i ++ ) {",
            "score": 99.4148193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + mean ; i ++ ) { {",
            "score": 99.40135556175595,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + mean ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Long.MAX_VALUE ; i ++ ) {",
            "score": 99.36599731445312,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < Long . MAX _ VALUE ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++1) {",
            "score": 99.35871325041118,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin ; i ++ ) { {",
            "score": 99.35819927014802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < charCount ; i ++ ) {",
            "score": 99.3116455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < char CaMeL Count ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.62027413504464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.62027413504464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.62027413504464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.62027413504464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.62027413504464,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ] ; i ++ ) {",
            "score": 99.41419741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; ++ i ) {",
            "score": 99.36800537109374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for1int i =0; i < weights.length ; i ++ ) {",
            "score": 99.35819498697917,
            "correctness": "uncompilable",
            "tokenized_patch": "for 1 int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] *(",
            "score": 99.62022181919643,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] * (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum2*accum2/ sumWts ) / sumWts ;",
            "score": 99.44851202713816,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum9111962718267217978*accum9111962718267217978/ sumWts ) / sumWts ;",
            "score": 99.44851202713816,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum37*accum37/ sumWts ) / sumWts ;",
            "score": 99.44851202713816,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum3*accum3/ sumWts ) / sumWts ;",
            "score": 99.44851202713816,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var =( accum1983*accum1983/ sumWts ) / sumWts ;",
            "score": 99.44851202713816,
            "correctness": "uncompilable",
            "tokenized_patch": "var = ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) / sum CaMeL Wts ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < begin1; i ++ ) {",
            "score": 99.41439658717105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < begin 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } {",
            "score": 99.41416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= length ; i ++ ) {",
            "score": 99.36788601345486,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i <= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < this.accum ; i ++ ) {",
            "score": 99.35811360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . accum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= start / length ; i ++ ) {",
            "score": 99.31128607855902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= start / length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i +1]",
            "score": 99.61971609933036,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + 1 ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [0] < weights.length ) {",
            "score": 99.36464329769737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 0 ] < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin , i ++ ) {",
            "score": 99.35769653320312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin , i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < max ; i -- ) {",
            "score": 99.357177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < max ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start *length ; i < length ; i ++ ) {",
            "score": 99.31083848741319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start * length ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i -0]",
            "score": 99.61955043247768,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i - 0 ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < mean ; i ++ ) {",
            "score": 99.40066867404514,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin / sum ; i ++ ) {",
            "score": 99.35767279730902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin / sum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for =0; i < weights.length ; i ++ ) {",
            "score": 99.3571044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < weights.length ; i ++ ) { { {",
            "score": 99.3108154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < weights . length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var =( accum -( accum2*",
            "score": 99.61923104745371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.61923104745371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var =( accum -( accum37*",
            "score": 99.61923104745371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var =( accum -( accum3*",
            "score": 99.61923104745371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.61923104745371,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) ; }",
            "score": 99.41398111979167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( isBiasCorrected ) { { if( isBiasCorrected ) {",
            "score": 99.40032348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( is CaMeL Bias CaMeL Corrected ) { { if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= weights.length ; i ++ )",
            "score": 99.36751302083333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { finally {",
            "score": 99.36295776367187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum - length ; i ++ ) {",
            "score": 99.35755072699652,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < accum - length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+0; i < weights.length ; ++ i ) {",
            "score": 99.35709228515626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = start ; i >= start + length ; i ++ ) { {",
            "score": 99.31074604235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i >= start + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.40028686523438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i += weights [ i ] ) {",
            "score": 99.36735229492187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i += weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i <= weights.length ; i ++ )",
            "score": 99.36294410342262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin -1; i ++ ) {",
            "score": 99.35743543836806,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i <2; i ++ ) {",
            "score": 99.35688612196181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i <9111962718267217978; i ++ ) {",
            "score": 99.35688612196181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <37; i ++ ) {",
            "score": 99.35688612196181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i <3; i ++ ) {",
            "score": 99.35688612196181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i <1983; i ++ ) {",
            "score": 99.35688612196181,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i != start + length ; i ++ ) {",
            "score": 99.31062147352431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { var =( accum -( accum2*accum2/",
            "score": 99.61863490513393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { var =( accum -( accum9111962718267217978*accum9111962718267217978/",
            "score": 99.61863490513393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { var =( accum -( accum37*accum37/",
            "score": 99.61863490513393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { var =( accum -( accum3*accum3/",
            "score": 99.61863490513393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ ) { var =( accum -( accum1983*accum1983/",
            "score": 99.61863490513393,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ ) { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { else {",
            "score": 99.44696655273438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + weights.length ; i ++ )",
            "score": 99.41348121279762,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i != weights.length ; i ++ )",
            "score": 99.36730375744048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i != weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length /2; i ++ ) {",
            "score": 99.36253051757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length /9111962718267217978; i ++ ) {",
            "score": 99.36253051757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length /37; i ++ ) {",
            "score": 99.36253051757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length /3; i ++ ) {",
            "score": 99.36253051757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= weights.length /1983; i ++ ) {",
            "score": 99.36253051757812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= weights . length / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < start + length ; i ++ ) {",
            "score": 99.35738796657986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;",
            "score": 99.35635811941964,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum2*accum2/ sumWts ) ; i ++ )",
            "score": 99.61802842881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ )",
            "score": 99.61802842881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum37*accum37/ sumWts ) ; i ++ )",
            "score": 99.61802842881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum3*accum3/ sumWts ) ; i ++ )",
            "score": 99.61802842881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin +( accum1983*accum1983/ sumWts ) ; i ++ )",
            "score": 99.61802842881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >0; i ++ ) { }",
            "score": 99.41345796130952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i > 0 ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i -= weights [ i ] ) {",
            "score": 99.366943359375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i -= weights [ i ] ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0+0; i < weights.length ; i ++ ) { )",
            "score": 99.3559337797619,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.61771195023148,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < max( ) ; i ++ ) {",
            "score": 99.36688910590277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.begin ; i ++ ) {",
            "score": 99.35712348090277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1; i ] ++ ) {",
            "score": 99.35549029181985,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 1 ; i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) ) {",
            "score": 99.31039268092105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum2*accum2/ sumWts ) ; i ++ )",
            "score": 99.617431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ )",
            "score": 99.617431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum37*accum37/ sumWts ) ; i ++ )",
            "score": 99.617431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum3*accum3/ sumWts ) ; i ++ )",
            "score": 99.617431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n +( accum1983*accum1983/ sumWts ) ; i ++ )",
            "score": 99.617431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; for( i <= weights.length ; i ++ ) {",
            "score": 99.41314697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; for ( i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < length ; i ++ ) { {",
            "score": 99.39937918526786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.null ; i ++ ) {",
            "score": 99.36679559004934,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { for( int i =0; i < weights.length ; i ++ )",
            "score": 99.3570556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length , n ++ ) {",
            "score": 99.35485161675348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length , n ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int n =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.617099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "int n = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - length ; i >=1; i ++ ) {",
            "score": 99.413037109375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - length ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length0; i < weights.length ; i ++ )",
            "score": 99.36665649414063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; -- i ) {",
            "score": 99.36199951171875,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; -- i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights ; i ++ ) { ) {",
            "score": 99.30997721354167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights [ i ] ==",
            "score": 99.61681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights [ i ] ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length0; i < weights.length ; i -- ) {",
            "score": 99.36665271577381,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 0 ; i < weights . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start ; i ++ ) { ) {",
            "score": 99.36194525824652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { else",
            "score": 99.35676655016448,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + length ; i ++ ) { { {",
            "score": 99.30919189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + length ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin , i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.61648559570312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin , i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < weights.length ; i ++ ) { }",
            "score": 99.44405967310855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i =0; i <= weights.length ; i ++ ) {",
            "score": 99.41288034539474,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0: begin ; i < begin ; i ++ ) {",
            "score": 99.41262478298611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= start ; i ++ ) {",
            "score": 99.36182861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum -0; i ++ ) {",
            "score": 99.35675726996527,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / {",
            "score": 99.35404663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i ] -",
            "score": 99.61575882523148,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length -0; i ++ ) {",
            "score": 99.44405517578124,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length - 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( final int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.41231496710526,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ ) )",
            "score": 99.36639959161931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = begin ; i < weights.length ; i ++ ) { {",
            "score": 99.35667017886513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; while( i < weights.length ) {",
            "score": 99.30828450520833,
            "correctness": "timeout",
            "tokenized_patch": "int i = 0 ; while ( i < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] +",
            "score": 99.61559606481481,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.36635520241477,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +0; i < weights.length ; i ++ ) { {",
            "score": 99.36178152901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = new ; i < weights.length ; i ++ ) {",
            "score": 99.35381401909723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = new ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < contains ; i ++ ) {",
            "score": 99.30825805664062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < contains ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i ] *",
            "score": 99.61544234664352,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ i ) { }",
            "score": 99.41251413445724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ i ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin : begin ; i ++ ) {",
            "score": 99.41202121310764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length +1; i >=0; i -- ) {",
            "score": 99.36173706054687,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin : begin ; i < weights.length ; i ++ )",
            "score": 99.35654810855263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i <0; i ++ ) {",
            "score": 99.35371398925781,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < begin + weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.61540876116071,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; [ i ] ++ ) {",
            "score": 99.44324951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; [ i ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { final",
            "score": 99.41195518092105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int ++ i =0; i < weights.length ; i ++ ) { {",
            "score": 99.39627685546876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ++ i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < weights.length ; ++ i ) {",
            "score": 99.36601177014802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i - length ; i < weights.length ; i ++ )",
            "score": 99.35652883429276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - length ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { throw ) {",
            "score": 99.35339936755952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { throw ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start + ; i ++ ) {",
            "score": 99.30801212086396,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum2) /(",
            "score": 99.61465018136161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum9111962718267217978) /(",
            "score": 99.61465018136161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum37) /(",
            "score": 99.61465018136161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum3) /(",
            "score": 99.61465018136161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum1983) /(",
            "score": 99.61465018136161,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ ) / (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin - length ; i ++ )",
            "score": 99.35651711856617,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin - length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length / weights.length ; i ++ ) {",
            "score": 99.35268147786458,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length / weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights == null ?0: weights.length )",
            "score": 99.30784912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights == null ? 0 : weights . length )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if(( isBiasCorrected ) )",
            "score": 99.61463274274554,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ( is CaMeL Bias CaMeL Corrected ) )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { this.{",
            "score": 99.41173735119048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { this . {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length.length ; i -- ) {",
            "score": 99.36580810546874,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length . length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; i ++ )",
            "score": 99.3611572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum ; i < weights.length ; i ++ )",
            "score": 99.35643246299342,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i +",
            "score": 99.61388221153847,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length -1; i <= max ; i ++ ) {",
            "score": 99.36100463867187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length - 1 ; i <= max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights +0; i ++ ) {",
            "score": 99.30742051866319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights + 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int weights =0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.6138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "int weights = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights [ i ] ; i ++ ) {",
            "score": 99.44265265213816,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights [ i ] ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = accum ; i < weights.length ; i ++ ) {",
            "score": 99.41126166449652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = accum ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <1; i ++ ) {",
            "score": 99.365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2; i -- ) {",
            "score": 99.35526769301471,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978; i -- ) {",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37; i -- ) {",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3; i -- ) {",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983; i -- ) {",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max ; i ++ ) { ) {",
            "score": 99.35160997178819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ++0; i < weights.length ; i ++ ) { {",
            "score": 99.30729370117187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ++ 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -( accum -",
            "score": 99.61316856971153,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - ( accum -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin /0; i < weights.length ; i ++ ) {",
            "score": 99.44243774414062,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin / 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) continue ; }",
            "score": 99.41124877929687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! accum -( accum2*accum2/ sumWts ) ) {",
            "score": 99.41110711348684,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.41110711348684,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! accum -( accum37*accum37/ sumWts ) ) {",
            "score": 99.41110711348684,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! accum -( accum3*accum3/ sumWts ) ) {",
            "score": 99.41110711348684,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( ! accum -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.41110711348684,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( ! accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start ; i < weights.length ; i ++ )",
            "score": 99.36080129523026,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -- =0; i < begin + length ; i ++ )",
            "score": 99.35517035590277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = 0 ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.FALSE ; i ++ ) {",
            "score": 99.35153537326389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . FALSE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max -1; i ++ ) {",
            "score": 99.30712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max - 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] ; accum",
            "score": 99.6129150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] ; accum",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.39519942434211,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <= weights.length ; i ++ )",
            "score": 99.36494526110198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ) ; i <= weights.length ; i ++ ) {",
            "score": 99.36033799913194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = ) ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < value.length ; i ++ ) { ) {",
            "score": 99.35145874023438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < value . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum ; }",
            "score": 99.6122334798177,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { continue ; } {",
            "score": 99.41058904474431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { continue ; } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i << < weights.length ; i ++ ) {",
            "score": 99.39509020353618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i << < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ++ i ; i <= weights.length ; i ++ )",
            "score": 99.36476828835227,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ++ i ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? ; i ++ ) {",
            "score": 99.36026804070724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i >=0; i ++ ) {",
            "score": 99.35457356770833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0: weights.length ; i ++ ) {",
            "score": 99.35143280029297,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < start ; i ++ ) {",
            "score": 99.30693901909723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin || i < weights.length ; i ++ ) {",
            "score": 99.41077338324652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin || i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { } } }",
            "score": 99.41043526785714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { } } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) throws Exception {",
            "score": 99.3944091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) throws Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.false ; i ++ ) {",
            "score": 99.36470540364583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . false ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { )",
            "score": 99.35440866570724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && weights [ i ++ ] ) {",
            "score": 99.35136486235119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && weights [ i ++ ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0; i ++ ) { { {",
            "score": 99.30687120225694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i ] /",
            "score": 99.61165364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ] /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( i < weights.length ) { sumWts += weights [ i ] ;",
            "score": 99.44114283511513,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( i < weights . length ) { sum CaMeL Wts += weights [ i ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin *begin ; i ++ ) {",
            "score": 99.41012234157986,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin * begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int max =0; i < weights.length ; i ++ ) {",
            "score": 99.39437527126736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int max = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ ) { ) {",
            "score": 99.36452414772727,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start + length ; ++ i ) {",
            "score": 99.30626085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start + length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = false ; }",
            "score": 99.611572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += weights.length ; i < begin + length ; i ++ ) { {",
            "score": 99.39424060639881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += weights . length ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= weights.length ; i <0; i ++ ) {",
            "score": 99.35372585720486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= weights . length ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < exp ; i ++ ) {",
            "score": 99.35125732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < exp ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights ; i ++ )",
            "score": 99.3062255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=2; i ++ ) {",
            "score": 99.4100570678711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <=9111962718267217978; i ++ ) {",
            "score": 99.4100570678711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=37; i ++ ) {",
            "score": 99.4100570678711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <=3; i ++ ) {",
            "score": 99.4100570678711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <=1983; i ++ ) {",
            "score": 99.4100570678711,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i <= $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < i + mean ; i ++ ) {",
            "score": 99.39365641276042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < weights.length ) {",
            "score": 99.36412464488636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < sumWts ; i ++ ) { }",
            "score": 99.35371479235198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < sum CaMeL Wts ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Direction.length ; i ++ ) {",
            "score": 99.35125054253473,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Direction . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( weights [ i ] < weights [ i ] ) {",
            "score": 99.30582101004464,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( weights [ i ] < weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.61142202524039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = true ; i < begin + length ; i ++ ) {",
            "score": 99.39361572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = true ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i i -- ) {",
            "score": 99.36386590254934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start , n = start ; i < n ; i ++ ) {",
            "score": 99.35850219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start , n = start ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i < start ; i ++ ) {",
            "score": 99.30559624565973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] ; else",
            "score": 99.61139385516827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { for( int i =0; i < max ; i ++ )",
            "score": 99.40971235795455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { for ( int i = 0 ; i < max ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin : weights.length ) {",
            "score": 99.40907197840073,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i ; i <=0; i ++ ) {",
            "score": 99.35843234592014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < signum ; i ++ ) {",
            "score": 99.35086822509766,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < signum ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < min >0; i ++ ) {",
            "score": 99.30548095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.44041532628677,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.40934673108552,
            "correctness": "uncompilable",
            "tokenized_patch": "return for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i < length ; i ++ ) {",
            "score": 99.40899658203125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i =0; i < weights.length - length ; i ++ ) { {",
            "score": 99.39269438244048,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i = begin ; i < weights.length ; i ++ )",
            "score": 99.35342746310764,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -1++ i ) {",
            "score": 99.35078510485198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - 1 ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < null ; i ++ ) {",
            "score": 99.30538940429688,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int0=0.0; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.61033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "int 0 = 0 . 0 ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ) ; i -- ) {",
            "score": 99.36373901367188,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ) ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( { double i =0; i < weights.length ; i ++ ) {",
            "score": 99.35760819284539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( { double i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < name.length ; i ++ ) { {",
            "score": 99.3052914268092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < name . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { throw null ; }",
            "score": 99.40838068181819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { throw null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int int i =0; i < weights.length ; i ++ )",
            "score": 99.35325792100694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ -1) {",
            "score": 99.35036010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = true ; }",
            "score": 99.6099269701087,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = n ; i < begin + length ; i ++ ) {",
            "score": 99.39164225260417,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = n ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < - -2; i ++ ) {",
            "score": 99.36338297526042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < - -9111962718267217978; i ++ ) {",
            "score": 99.36338297526042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < - - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < - -37; i ++ ) {",
            "score": 99.36338297526042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < - -3; i ++ ) {",
            "score": 99.36338297526042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < - -1983; i ++ ) {",
            "score": 99.36338297526042,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < - - $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin ; i < in.length ; i ++ ) {",
            "score": 99.35314263237848,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < in . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Number i =0; i < weights.length ; i ++ ) {",
            "score": 99.34969075520833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Number i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.30489501953124,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum -(",
            "score": 99.6099141438802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( < weights.length ) ?1: weights.length ) {",
            "score": 99.40818093039773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( < weights . length ) ? 1 : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin / i ; i ++ ) {",
            "score": 99.40696207682292,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / i ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < var ; i ++ )",
            "score": 99.35311686197916,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && weights [ i ] < ) {",
            "score": 99.3495861235119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && weights [ i ] < ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= start / length ; i ++ ) {",
            "score": 99.30423312717014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= start / length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.6098124186198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin0; i < weights.length ; i ++ ) {",
            "score": 99.43791118421052,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i <0; i ++ ) {",
            "score": 99.40676540798611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i -- ;",
            "score": 99.36321149553571,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i -- ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = - begin ; i < weights.length ; i ++ )",
            "score": 99.35297987196181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i <0; i ++ ) {",
            "score": 99.34958065257354,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( final int i = start ; i < weights ; i ++ ) {",
            "score": 99.30403406479779,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max + length ; i < weights.length ; i ++ ) {",
            "score": 99.43782958984374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.start ; i ++ ) {",
            "score": 99.40718587239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; ++ i < weights.length ; ) {",
            "score": 99.36317845394737,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; ++ i < weights . length ; ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin -1; i < weights.length ; i ++ )",
            "score": 99.35273822985198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { i }",
            "score": 99.34910888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { i }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i <=0; i ++ ) { {",
            "score": 99.30393580386513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i <= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { } }",
            "score": 99.43779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ] ++ ) {",
            "score": 99.39105224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ] ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < weights.length ; i i ++ ) {",
            "score": 99.36216430664062,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < weights . length ; i i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0- mean ; i < begin ; i ++ )",
            "score": 99.35235954733456,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 - mean ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++0) {",
            "score": 99.34823447779605,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <= length ; i ++ ) { ) {",
            "score": 99.30338745117187,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.60667136863425,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i extends < weights.length ; i ++ ) {",
            "score": 99.4376156455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i extends < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < mean ; i ++ ) {",
            "score": 99.40619659423828,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return 0; }",
            "score": 99.40602805397727,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -0; i < begin ; i ++ ) {",
            "score": 99.39104865579044,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < true.length ; i ++ ) {",
            "score": 99.36213514539931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < true . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int weights =0; weights < weights.length ; i ++ ) {",
            "score": 99.34819878472223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int weights = 0 ; weights < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < i ; i ++ ) {",
            "score": 99.30305989583333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] *",
            "score": 99.60655381944444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ] *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < i ; i ++ ) {",
            "score": 99.40611436631944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i < i ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < iterator != null ; i ++ ) {",
            "score": 99.4058837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < iterator != null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length + length ; i ++ ) {",
            "score": 99.39095730251736,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i <= n ; i -- ) {",
            "score": 99.35538940429687,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= n ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == accum2; i ++ ) {",
            "score": 99.35226619944854,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i == accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i == accum9111962718267217978; i ++ ) {",
            "score": 99.35226619944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == accum37; i ++ ) {",
            "score": 99.35226619944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == accum3; i ++ ) {",
            "score": 99.35226619944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i == accum1983; i ++ ) {",
            "score": 99.35226619944854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i == accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( String weights =0; weights < weights.length ; i ++ ) {",
            "score": 99.34813096788194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( String weights = 0 ; weights < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < length ; i ++ )",
            "score": 99.30258358226104,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i = weights.length ; for( int i =0; i < weights.length ; i ++ ) {",
            "score": 99.605703125,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = weights . length ; for ( int i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i =0; i < weights.length ; i ++ ) {",
            "score": 99.437548828125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = weights.length ?0: weights.length ; i ++ ) {",
            "score": 99.40585327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ? 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) { { double {",
            "score": 99.35535249255952,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) { { double {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i <=0; i ++ ) {",
            "score": 99.35214572482639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i <= 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { i ++ ; }",
            "score": 99.34810180664063,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { i ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights == length ; i ++ ) {",
            "score": 99.30223253038194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights == length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights , i",
            "score": 99.605126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights , i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) else {",
            "score": 99.43674187911184,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; ++ i ) {",
            "score": 99.40603298611111,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = -1; i < values.length ; i ++ ) {",
            "score": 99.39075991981908,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length - ; i < weights.length ; i ++ ) { {",
            "score": 99.3614834872159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - start ; i >=0; i -- ) {",
            "score": 99.35531616210938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - start ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - n ; i ++ )",
            "score": 99.3478939658717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - n ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start.0; i < length ; i ++ ) {",
            "score": 99.30202907986111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start . 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i + i",
            "score": 99.6046730324074,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i >=0; i -- ) {",
            "score": 99.36139879728618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < abs ; i ++ ) {",
            "score": 99.34789276123047,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < abs ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i < weights ; i ++ ) {",
            "score": 99.30191379123264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i +",
            "score": 99.60390218098958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( accum -( accum2*accum2/ sumWts ) ) {",
            "score": 99.39058430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.39058430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( accum -( accum37*accum37/ sumWts ) ) {",
            "score": 99.39058430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( accum -( accum3*accum3/ sumWts ) ) {",
            "score": 99.39058430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( accum -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.39058430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( i =0; i < weights.length ; i ++ ) {",
            "score": 99.36123318142361,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.TRUE ; i ++ ) {",
            "score": 99.34769015842014,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . TRUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) throws Exception {",
            "score": 99.30157470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) throws Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= begin + length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.6036376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i += length ; i < weights.length ; i ++ ) {",
            "score": 99.40589735243056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n < weights.length ; i ++ ) {",
            "score": 99.40508355034723,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != begin + length ; i ++ ) { {",
            "score": 99.35208290501645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i1i ++ ) {",
            "score": 99.34757486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i 1 i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i > start + length ; i -- ) {",
            "score": 99.30141872829861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i > start + length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { sumWts += weights [ i",
            "score": 99.6036328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) ?",
            "score": 99.43555365668402,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < mean.length ; i ++ ) {",
            "score": 99.4058837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < mean . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0.0; i < start ; i ++ ) {",
            "score": 99.35391574435764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . 0 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List( accum -( accum2*accum2/ sumWts ) ) ;",
            "score": 99.35184733072917,
            "correctness": "uncompilable",
            "tokenized_patch": "List ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) ;",
            "score": 99.35184733072917,
            "correctness": "uncompilable",
            "tokenized_patch": "List ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List( accum -( accum37*accum37/ sumWts ) ) ;",
            "score": 99.35184733072917,
            "correctness": "uncompilable",
            "tokenized_patch": "List ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List( accum -( accum3*accum3/ sumWts ) ) ;",
            "score": 99.35184733072917,
            "correctness": "uncompilable",
            "tokenized_patch": "List ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List( accum -( accum1983*accum1983/ sumWts ) ) ;",
            "score": 99.35184733072917,
            "correctness": "uncompilable",
            "tokenized_patch": "List ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < values.length ; i ++ ) { ) {",
            "score": 99.34705810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < length ; ++ i ) {",
            "score": 99.30091688368056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += weights [ i + n",
            "score": 99.60323531539352,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i + n",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i( ) ) {",
            "score": 99.3594906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Iterator for( int i =0; i < weights.length ; i ++ )",
            "score": 99.35173882378473,
            "correctness": "uncompilable",
            "tokenized_patch": "Iterator for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i =0; i < weights.length ; i ++ ) { ) {",
            "score": 99.34681919642857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = 0 ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start ; i ++ )",
            "score": 99.30066731770833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin : begin ) {",
            "score": 99.40492350260416,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin : begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max =0; i < weights.length ; i ++ )",
            "score": 99.40373883928571,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , max = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < weights.length ; i ++ ) { {",
            "score": 99.38956705729167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - i ; i < weights.length ; i ++ )",
            "score": 99.35931687127976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(0= weights.length -1; i >=0; i -- ) {",
            "score": 99.35309801603618,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( 0 = weights . length - 1 ; i >= 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin ; i ++ ) { {",
            "score": 99.35157686121323,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < n ; ++ i ) {",
            "score": 99.34675598144531,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < n ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < length ; i ++ ) {",
            "score": 99.3005730124081,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < var +( accum2*accum2/ sumWts ) ; i ++ )",
            "score": 99.6022316261574,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum9111962718267217978*accum9111962718267217978/ sumWts ) ; i ++ )",
            "score": 99.6022316261574,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum37*accum37/ sumWts ) ; i ++ )",
            "score": 99.6022316261574,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum3*accum3/ sumWts ) ; i ++ )",
            "score": 99.6022316261574,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < var +( accum1983*accum1983/ sumWts ) ; i ++ )",
            "score": 99.6022316261574,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < var + ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1; i ++ ) { ) {",
            "score": 99.35930841619319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 1 ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length < start + length ; i ++ ) {",
            "score": 99.35308837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = start ; i < length ; i ++ ) {",
            "score": 99.29993393841912,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < max ; i ++ ) {",
            "score": 99.40320542279412,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length.length ; i ++ )",
            "score": 99.3591244346217,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start0; i < weights.length ; i ++ ) {",
            "score": 99.3530337685033,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = begin ; i < weights.length ; i ++ )",
            "score": 99.35124655330883,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { System.}",
            "score": 99.34633091517857,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { System . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights ; i ++ ) { { {",
            "score": 99.29934353298611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i +",
            "score": 99.59787222055289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin +1; i ++ ) {",
            "score": 99.40388997395833,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < dev ; i ++ ) { {",
            "score": 99.38864315257354,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < dev ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < n ; i ++ ) {",
            "score": 99.35302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i = begin ; i < begin ; i ++ ) {",
            "score": 99.35115320542279,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0; i ++ )",
            "score": 99.29866536458333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ ) { {",
            "score": 99.38818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for(0= weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.35296952097039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( 0 = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < values.length ; i ++ ) {",
            "score": 99.35114881727431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < values.length ; i ++ ) {",
            "score": 99.35114881727431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < values . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < values.length ; i ++ ) {",
            "score": 99.35114881727431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < values . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i < values.length ; i ++ ) {",
            "score": 99.35114881727431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < values . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i < values.length ; i ++ ) {",
            "score": 99.35114881727431,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < values . length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; ++ ++ i ) { ) {",
            "score": 99.34599376860119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ++ ++ i ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != weights.length ; ++ i ) {",
            "score": 99.29852973090277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i != weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : values.length ; i < begin ; i ++ ) { {",
            "score": 99.4035877046131,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : values . length ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int start =0; i < weights.length ; i ++ ) {",
            "score": 99.38805474175348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int start = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < compare.length ; i ++ ) {",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < compare . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >0&& weights [ i ] < weights.length ) {",
            "score": 99.3525326377467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 0 && weights [ i ] < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i +=0; i < begin + length ; i ++ ) { {",
            "score": 99.35100997121711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i += 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { return ) {",
            "score": 99.34585425967262,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { return ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < hash ; i ++ ) {",
            "score": 99.29827880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < hash ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.5963604266827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.5963604266827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.5963604266827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.5963604266827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -( accum$NUMBER$",
            "score": 99.5963604266827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum - ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin >0: weights.length ; i ++ ) {",
            "score": 99.40349663628473,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin > 0 : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + i ; i ++ ) {",
            "score": 99.35230848524306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum2: sumWts ) {",
            "score": 99.35053846571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum9111962718267217978: sumWts ) {",
            "score": 99.35053846571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum37: sumWts ) {",
            "score": 99.35053846571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum3: sumWts ) {",
            "score": 99.35053846571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum1983: sumWts ) {",
            "score": 99.35053846571181,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum $NUMBER$ : sum CaMeL Wts ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+0; i < length ; i ++ ) {",
            "score": 99.34491644965277,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 + 0 ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int i =0; for( int i =0; i < begin + length ; i ++ ) {",
            "score": 99.59585173233695,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : begin + begin ) {",
            "score": 99.40324850643383,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : begin + begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= ++ i ) {",
            "score": 99.35760498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin - accum ; i ++ ) {",
            "score": 99.35047743055556,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin - accum ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null ) { if( weights.length >1) {",
            "score": 99.29799517463235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { if ( weights . length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i",
            "score": 99.595751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { sum CaMeL Wts += weights [ i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; length ++ i ) {",
            "score": 99.38666092722039,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; length ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ || true ) {",
            "score": 99.35759887695312,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ || true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i < length ; i ++ ) {",
            "score": 99.35045708550348,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i < length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { )",
            "score": 99.3446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.59417724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin && i < begin + length ; i ++ ) {",
            "score": 99.40281168619792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin && i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i >0; i -- ) {",
            "score": 99.40096435546874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i >0; i -- ) {",
            "score": 99.40096435546874,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i >0; i -- ) {",
            "score": 99.40096435546874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -3; i >0; i -- ) {",
            "score": 99.40096435546874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1983; i >0; i -- ) {",
            "score": 99.40096435546874,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i > 0 ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int0=0; i < weights.length ; i ++ ) { {",
            "score": 99.38631399054276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int 0 = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n = weights.length ; i < n ) {",
            "score": 99.35030324835526,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = weights . length ; i < n ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin > begin ; i ++ ) {",
            "score": 99.34995524088542,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin > begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0;( i < weights.length ) ) {",
            "score": 99.2971550436581,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; ( i < weights . length ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + begin ; i <1; i ++ ) {",
            "score": 99.38624403211806,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + begin ; i < 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { else {",
            "score": 99.34988064236111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < start + length ; i ++ )",
            "score": 99.29633532072368,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < start + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i <= weights.length ; i ++ ) {",
            "score": 99.433447265625,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i ++ ) { }",
            "score": 99.35743408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i - mean ; i < begin ; i ++ ) {",
            "score": 99.349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i - mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights.length >1&& weights [1] < weights.length ) {",
            "score": 99.34957082648026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights . length > 1 && weights [ 1 ] < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights [ i ] !=",
            "score": 99.59326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights [ i ] !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -0; i <= weights.length ; i ++ ) {",
            "score": 99.43326416015626,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int var = begin ; i < begin + length ; i ++ ) {",
            "score": 99.38597954644098,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int var = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i -- ) {",
            "score": 99.357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < isBiasCorrected )",
            "score": 99.34947204589844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0&& i < weights.length ; i ++ ) { ) {",
            "score": 99.34414672851562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 && i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i ++ ) continue ;",
            "score": 99.29595626027961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i ++ ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; -- i ) {",
            "score": 99.43307834201389,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; -- i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "this.var =( accum -( accum2*accum2/ sumWts ) ) /",
            "score": 99.40140206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "this . var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /",
            "score": 99.40140206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "this . var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.var =( accum -( accum37*accum37/ sumWts ) ) /",
            "score": 99.40140206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "this . var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.var =( accum -( accum3*accum3/ sumWts ) ) /",
            "score": 99.40140206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "this . var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.var =( accum -( accum1983*accum1983/ sumWts ) ) /",
            "score": 99.40140206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "this . var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length [ i ; i ++ ) {",
            "score": 99.40037841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length [ i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= length ; i ++ ) {",
            "score": 99.3493423461914,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i <= length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) / }",
            "score": 99.34407552083333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [0] ; i ++ )",
            "score": 99.29578993055556,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ 0 ] ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum2*sumWts ) ; i ++ ) {",
            "score": 99.59212593410327,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <( accum9111962718267217978*sumWts ) ; i ++ ) {",
            "score": 99.59212593410327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum37*sumWts ) ; i ++ ) {",
            "score": 99.59212593410327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum3*sumWts ) ; i ++ ) {",
            "score": 99.59212593410327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( accum1983*sumWts ) ; i ++ ) {",
            "score": 99.59212593410327,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( accum $NUMBER$ * sum CaMeL Wts ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length : weights.length ; i ++ ) {",
            "score": 99.40092637803819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - length : weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + i ; i ++ )",
            "score": 99.34884823069854,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + i ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ?1:1) {",
            "score": 99.29559647409539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? 1 : 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= begin + length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.59103628305289,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= begin + length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -2; i < weights.length ; i ++ ) {",
            "score": 99.43245849609374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin -9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.43245849609374,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin -37; i < weights.length ; i ++ ) {",
            "score": 99.43245849609374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin -3; i < weights.length ; i ++ ) {",
            "score": 99.43245849609374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = begin -1983; i < weights.length ; i ++ ) {",
            "score": 99.43245849609374,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( double i =1; i < weights.length ; i ++ ) {",
            "score": 99.40032958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights..1; i ++ ) {",
            "score": 99.40028140419408,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . . 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = accum2; i < weights.length ; i ++ ) {",
            "score": 99.38528603001645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = accum9111962718267217978; i < weights.length ; i ++ ) {",
            "score": 99.38528603001645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = accum37; i < weights.length ; i ++ ) {",
            "score": 99.38528603001645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = accum3; i < weights.length ; i ++ ) {",
            "score": 99.38528603001645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = accum1983; i < weights.length ; i ++ ) {",
            "score": 99.38528603001645,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = accum $NUMBER$ ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;0++ i ) {",
            "score": 99.35663163034539,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; 0 ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max ; i ++ )",
            "score": 99.3487548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) { continue ; }",
            "score": 99.34377569901316,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start.length ; i ++ ) { {",
            "score": 99.29558362458882,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i ] -",
            "score": 99.59078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i ] -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >=0; i ++ ) { {",
            "score": 99.43220789292279,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i >= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin :0; i < mean ; i ++ ) {",
            "score": 99.40011257595486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : 0 ; i < mean ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int for( int i =0; i < weights.length ; i ++ ) { {",
            "score": 99.38526611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "int for ( int i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < out != null ; i ++ ) {",
            "score": 99.35651312934027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < out != null ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { / )",
            "score": 99.34306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { / )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ! weights [ i ]",
            "score": 99.59068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ! weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < min + length ; i ++ ) {",
            "score": 99.40001085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < min + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =01; i < weights.length ; i ++ )",
            "score": 99.34861924913194,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { double )",
            "score": 99.34829711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { double )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights [ i ].length ; i ++ )",
            "score": 99.34296264648438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights [ i ] . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ; i < weights.length ; i ++ ) { {",
            "score": 99.29533116957721,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < begin + mean ; i ++ ) {",
            "score": 99.38510470920139,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin + mean ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i < begin ; i ++ ) { {",
            "score": 99.34856856496711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < begin ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && n ++ ) {",
            "score": 99.34229871961806,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && n ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ) {",
            "score": 99.2946307842548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.58828735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ) {",
            "score": 99.35593133223684,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /2; i ++ )",
            "score": 99.34788754111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /9111962718267217978; i ++ )",
            "score": 99.34788754111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /37; i ++ )",
            "score": 99.34788754111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /3; i ++ )",
            "score": 99.34788754111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length /1983; i ++ )",
            "score": 99.34788754111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length / $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i <0; i ++ ) {",
            "score": 99.34228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights2; i ++ ) {",
            "score": 99.29461310891544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights9111962718267217978; i ++ ) {",
            "score": 99.29461310891544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights37; i ++ ) {",
            "score": 99.29461310891544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights3; i ++ ) {",
            "score": 99.29461310891544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights1983; i ++ ) {",
            "score": 99.29461310891544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { sumWts += weights [ i -",
            "score": 99.58770282451923,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { sum CaMeL Wts += weights [ i -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i >= begin ; i ++ ) {",
            "score": 99.43098449707031,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i >= begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int ] i =0; i < weights.length ; i ++ ) {",
            "score": 99.38421309621711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int ] i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ && weights [ i ) {",
            "score": 99.3552579012784,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ && weights [ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + max ; i ++ )",
            "score": 99.3484748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + max ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null && weights.length >1) {",
            "score": 99.34640938895089,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights . length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length -- i ) {",
            "score": 99.34224207261029,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length -- i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum2/",
            "score": 99.58766526442308,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum9111962718267217978/",
            "score": 99.58766526442308,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum37/",
            "score": 99.58766526442308,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum3/",
            "score": 99.58766526442308,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - accum1983/",
            "score": 99.58766526442308,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - accum $NUMBER$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= value.length ; i ++ ) {",
            "score": 99.35503472222223,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= value . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < in.begin ; i ++ ) {",
            "score": 99.34840223524306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < in . begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = name ; i < weights.length ; i ++ ) {",
            "score": 99.34176296657986,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = name ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <0; i ++ ) { ) {",
            "score": 99.29433865017361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < 0 ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = begin + length ; i < weights.length ; i ++ ) {",
            "score": 99.42783074629934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = begin + length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; } if( isBiasCorrected ) {",
            "score": 99.38411458333333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; } if ( is CaMeL Bias CaMeL Corrected ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [2] ; i ++ ) {",
            "score": 99.35491265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ $NUMBER$ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [9111962718267217978] ; i ++ ) {",
            "score": 99.35491265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ $NUMBER$ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [37] ; i ++ ) {",
            "score": 99.35491265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ $NUMBER$ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [3] ; i ++ ) {",
            "score": 99.35491265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ $NUMBER$ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < [1983] ; i ++ ) {",
            "score": 99.35491265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < [ $NUMBER$ ] ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1.0; i < begin ; i ++ ) {",
            "score": 99.34830050998264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 . 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) /",
            "score": 99.34154663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= start + length ; i -- )",
            "score": 99.29355340254934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= start + length ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <= weights.length ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.58469801682692,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ? weights [ i ] : weights )",
            "score": 99.39733305431548,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ? weights [ i ] : weights )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - i ; i < weights.length ; i ++ )",
            "score": 99.34827945106908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - i ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( boolean i =0; i < weights.length ; i ++ ) {",
            "score": 99.34593370225694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( boolean i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; i -- ) { {",
            "score": 99.29307797080592,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; i -- ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights [ i ] >=",
            "score": 99.5846875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights [ i ] >=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) continue ;",
            "score": 99.4270083778783,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin | i < weights.length ; i ++ ) {",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin | i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = null ; i < weights.length ; i ++ ) { {",
            "score": 99.38349352384868,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = null ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin >0; i ++ )",
            "score": 99.34807272518383,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin > 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <= weights.length ; i ++ )",
            "score": 99.34493215460526,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;2++ ) {",
            "score": 99.3414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;9111962718267217978++ ) {",
            "score": 99.3414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;37++ ) {",
            "score": 99.3414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;3++ ) {",
            "score": 99.3414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;1983++ ) {",
            "score": 99.3414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; $NUMBER$ ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length -1; i ++ ) { {",
            "score": 99.29245476973684,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length - 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] -(",
            "score": 99.58423790564903,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] - (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin2; i ++ ) {",
            "score": 99.3988396139706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin9111962718267217978; i ++ ) {",
            "score": 99.3988396139706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin37; i ++ ) {",
            "score": 99.3988396139706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin3; i ++ ) {",
            "score": 99.3988396139706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin1983; i ++ ) {",
            "score": 99.3988396139706,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { ) { } }",
            "score": 99.35413707386364,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "*; for( int i =0; i < weights.length ; i ++ )",
            "score": 99.3480288856908,
            "correctness": "uncompilable",
            "tokenized_patch": "* ; for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.max( weights : weights ) ) {",
            "score": 99.3411376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . max ( weights : weights ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = max ; i < length ; i ++ ) {",
            "score": 99.29243469238281,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = max ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( ! weights [ i ] )",
            "score": 99.58340219350961,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( ! weights [ i ] )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum -( accum2*accum2/ sumWts ) ) {",
            "score": 99.39876980251736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) {",
            "score": 99.39876980251736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum -( accum37*accum37/ sumWts ) ) {",
            "score": 99.39876980251736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum -( accum3*accum3/ sumWts ) ) {",
            "score": 99.39876980251736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( accum -( accum1983*accum1983/ sumWts ) ) {",
            "score": 99.39876980251736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < round.length ; i ++ ) {",
            "score": 99.35408528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < round . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i = length ; i < weights.length ; i ++ ) {",
            "score": 99.3406982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { continue ; }",
            "score": 99.29228130139802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] [",
            "score": 99.582626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] [",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ==0; i ++ ) {",
            "score": 99.39845106336806,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin == 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ;( ++ i ) ) {",
            "score": 99.39560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; ( ++ i ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length : weights.length ) {",
            "score": 99.34755345394737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < !1; i ++ ) {",
            "score": 99.34053308823529,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ! 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int n =0; n < weights.length ; n ++ ) { {",
            "score": 99.29192151521382,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int n = 0 ; n < weights . length ; n ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( int i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.58175526494566,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( int i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i = n ; i < weights.length ; i ++ ) {",
            "score": 99.39559775904605,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = n ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean + accum2; i ++ ) {",
            "score": 99.38237561677632,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < mean + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < mean + accum9111962718267217978; i ++ ) {",
            "score": 99.38237561677632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean + accum37; i ++ ) {",
            "score": 99.38237561677632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean + accum3; i ++ ) {",
            "score": 99.38237561677632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < mean + accum1983; i ++ ) {",
            "score": 99.38237561677632,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < mean + accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length - weights.length ; i ++ )",
            "score": 99.353759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length - weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum2; i ++ ) { {",
            "score": 99.34724934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum9111962718267217978; i ++ ) { {",
            "score": 99.34724934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum37; i ++ ) { {",
            "score": 99.34724934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum3; i ++ ) { {",
            "score": 99.34724934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < accum1983; i ++ ) { {",
            "score": 99.34724934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < accum $NUMBER$ ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < increment ; i ++ ) {",
            "score": 99.34408569335938,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < increment ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < min ; i ++ ) {",
            "score": 99.34049479166667,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( weights [ i ] <= weights [ i ] ) {",
            "score": 99.29171316964286,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( weights [ i ] <= weights [ i ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin , i = begin ; i < begin + length ; i ++ ) {",
            "score": 99.58103249289773,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin , i = begin ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin /1; i ++ ) {",
            "score": 99.39840359157986,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin / 1 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <2; i ++ )",
            "score": 99.347216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <9111962718267217978; i ++ )",
            "score": 99.347216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <37; i ++ )",
            "score": 99.347216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <3; i ++ )",
            "score": 99.347216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1983; i ++ )",
            "score": 99.347216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i >=0; i ++ ) {",
            "score": 99.29163953993056,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights != null ; i ++ ) { sumWts += weights [ i ]",
            "score": 99.58020958533653,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != null ; i ++ ) { sum CaMeL Wts += weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length - ; i >0; i ++ ) {",
            "score": 99.39542429070724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - ; i > 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { break ; } {",
            "score": 99.35369318181819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { break ; } {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i <=0; i ++ ) { {",
            "score": 99.29143323396382,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = min ; i < begin + length ; i ++ ) {",
            "score": 99.39813232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = min ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i =0; i < begin + length ; i ++ ) { {",
            "score": 99.3468017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = 0 ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i.0; i < weights.length ; i ++ ) {",
            "score": 99.33877902560764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i . 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < value ; i ++ ) {",
            "score": 99.29124450683594,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < value ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <1+ length ; i ++ ) {",
            "score": 99.42413330078125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 1 + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if(( accum -( accum2*accum2/ sumWts ) ) ) {",
            "score": 99.38189086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) ) {",
            "score": 99.38189086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum37*accum37/ sumWts ) ) ) {",
            "score": 99.38189086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum3*accum3/ sumWts ) ) ) {",
            "score": 99.38189086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum1983*accum1983/ sumWts ) ) ) {",
            "score": 99.38189086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < continue ; i ++ ) {",
            "score": 99.35337829589844,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < continue ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin + length ; i ++ ) { ;",
            "score": 99.34659616570724,
            "correctness": "plausible",
            "tokenized_patch": "for ( int i = begin ; i < begin + length ; i ++ ) { ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( weights [0] <= weights [0] ) {",
            "score": 99.29118129185268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights [ 0 ] <= weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0+ length ; i < weights.length ; i ++ ) { {",
            "score": 99.39789109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 + length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = -1; i < weights.length ; i -- ) {",
            "score": 99.35334858141448,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = - 1 ; i < weights . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < values.length ; i -- ) {",
            "score": 99.34636094835069,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < values . length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <01; i ++ ) {",
            "score": 99.33807014016544,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( short i = start ; i < weights.length ; i ++ ) { {",
            "score": 99.29039242393092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( short i = start ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum2*",
            "score": 99.57591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.57591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum37*",
            "score": 99.57591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum3*",
            "score": 99.57591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.57591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = min ; i <= weights.length ; i ++ ) {",
            "score": 99.39389377170139,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = min ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i <0; i ++ ) {",
            "score": 99.38174099392361,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { length ++ ; }",
            "score": 99.3529940518466,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { length ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = - ; i < begin ; i ++ ) {",
            "score": 99.34625244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = - ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < start + length ; i ++ ) {",
            "score": 99.34105160361842,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < start + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i <0.length ; i ++ ) {",
            "score": 99.33790418836806,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < 0 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < weights ; i ++ ) { {",
            "score": 99.29008403577302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < weights ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i ] *",
            "score": 99.57517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i ] *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ) {",
            "score": 99.39763934795673,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, n =0; i < weights.length ; i ++ )",
            "score": 99.3937755766369,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , n = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + min ; i ++ ) { {",
            "score": 99.3461849814967,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + min ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ , ) {",
            "score": 99.29007761101974,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ , ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( values [ i ] ==",
            "score": 99.57275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( values [ i ] ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights ==1; i ++ ) {",
            "score": 99.42282443576389,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights == 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < list.length ; i ++ )",
            "score": 99.39328900505515,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < list . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length + length ; i -- ) {",
            "score": 99.38126220703126,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length + length ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <2; i -- ) {",
            "score": 99.35224151611328,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <9111962718267217978; i -- ) {",
            "score": 99.35224151611328,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <37; i -- ) {",
            "score": 99.35224151611328,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <3; i -- ) {",
            "score": 99.35224151611328,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i <1983; i -- ) {",
            "score": 99.35224151611328,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < $NUMBER$ ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0.begin ; i < begin + length ; i ++ )",
            "score": 99.34605648643092,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 . begin ; i < begin + length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i < n ; i ++ ) {",
            "score": 99.34092203776042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i < n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights [ i ] <=",
            "score": 99.57201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights [ i ] <=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length -1; i >=0; i ++ ) {",
            "score": 99.39312065972223,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = length - 1 ; i >= 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start + i ; i <0; i ++ ) {",
            "score": 99.34063720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start ; i ++ ) { ) {",
            "score": 99.28959825303819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum2*",
            "score": 99.57091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.57091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum37*",
            "score": 99.57091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum3*",
            "score": 99.57091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.57091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=0; i -- ) { }",
            "score": 99.39307803199405,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 0 ; i -- ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null && weights.length ==0) {",
            "score": 99.35181535993304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights . length == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= length ; i < weights.length ; i ++ ) {",
            "score": 99.34597439236111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i = start ; i <0; i ++ ) {",
            "score": 99.28956514246323,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights [ i ]",
            "score": 99.57040405273438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights [ i ]",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < max ; i ++ ) {",
            "score": 99.39674207899306,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >= n ; ++ i ) {",
            "score": 99.3929931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= n ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length0; i < weights.length ; i ++ ) { }",
            "score": 99.35127397017045,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length 0 ; i < weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1.0; i < weights.length ; i ++ )",
            "score": 99.34596011513158,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 . 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start + weights ; i ++ ) {",
            "score": 99.34001329210069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start + weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Math.weights ; i ++ ) {",
            "score": 99.33682590060764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Math . weights ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = length ; i < weights.length ; i ++ ) { {",
            "score": 99.28929379111842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = length ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum ==",
            "score": 99.57039741847827,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin >> length ; i ++ ) {",
            "score": 99.39657931857639,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin >> length ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length ; i >=1; i -- ) {",
            "score": 99.35125054253473,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i >= 1 ; i -- ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin + TRUE ; i ++ ) {",
            "score": 99.34594048394098,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + TRUE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( short i = start ; i < length ; i ++ ) {",
            "score": 99.28923797607422,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( short i = start ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i = begin ; for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.57038680366848,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = begin ; for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0, max < weights.length ; i ++ ) {",
            "score": 99.39236111111111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 , max < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { default ++ ; }",
            "score": 99.35076349431819,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { default ++ ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < accum2; i ++ ) {",
            "score": 99.34589301215277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < accum9111962718267217978; i ++ ) {",
            "score": 99.34589301215277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < accum37; i ++ ) {",
            "score": 99.34589301215277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < accum3; i ++ ) {",
            "score": 99.34589301215277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ++ =0; i < accum1983; i ++ ) {",
            "score": 99.34589301215277,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ++ = 0 ; i < accum $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var = values [ i ] -",
            "score": 99.5701953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = values [ i ] -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i ==0; i ++ ) {",
            "score": 99.421142578125,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i == 0 ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if(( accum -( accum2*accum2/ sumWts ) ) *",
            "score": 99.39633660567434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) *",
            "score": 99.39633660567434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum37*accum37/ sumWts ) ) *",
            "score": 99.39633660567434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum3*accum3/ sumWts ) ) *",
            "score": 99.39633660567434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( accum -( accum1983*accum1983/ sumWts ) ) *",
            "score": 99.39633660567434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i < weights.length ; i ++ )",
            "score": 99.39226973684211,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i < weights.length ; i ++ || {",
            "score": 99.3505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i < weights . length ; i ++ || {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length1; i ++ )",
            "score": 99.34578450520833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length 1 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < start ; ++ i ) {",
            "score": 99.33839416503906,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < start ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0+1; i ++ ) {",
            "score": 99.33572048611111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 + 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =1.0;",
            "score": 99.57014973958333,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = 1 . 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "for( int i = begin : weights , weights.length ; i ++ ) {",
            "score": 99.39537217881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights , weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'expansion values,'; i ++ )",
            "score": 99.33558413856908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'population'; i ++ )",
            "score": 99.33558413856908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - ' or '; i ++ )",
            "score": 99.33558413856908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'sample'; i ++ )",
            "score": 99.33558413856908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - 'population variance'; i ++ )",
            "score": 99.33558413856908,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - $STRING$ ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin | length ; i ++ ) {",
            "score": 99.39444308810764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin | length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i <= weights.length ; i ++ ) throws",
            "score": 99.35015314275569,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i <= weights . length ; i ++ ) throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i <0.0; i ++ )",
            "score": 99.34567440257354,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < 0 . 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i <= n ; i ++ ) {",
            "score": 99.33818817138672,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i <= n ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start +1; i < length ; i -- ) {",
            "score": 99.28806559244792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i < length ; i -- ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { if( weights [ i ] >",
            "score": 99.56896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { if ( weights [ i ] >",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -2; i <= weights.length ; i ++ )",
            "score": 99.35006277901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -9111962718267217978; i <= weights.length ; i ++ )",
            "score": 99.35006277901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -37; i <= weights.length ; i ++ )",
            "score": 99.35006277901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -3; i <= weights.length ; i ++ )",
            "score": 99.35006277901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1983; i <= weights.length ; i ++ )",
            "score": 99.35006277901786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - $NUMBER$ ; i <= weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - length ; i <= begin ; i ++ ) {",
            "score": 99.34558783637152,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin - length ; i <= begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; name ++ ) {",
            "score": 99.33498806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; name ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < true ; i ++ ) {",
            "score": 99.28797149658203,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < true ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.56896484375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "final for( int i = begin ; i < weights.length ; i ++ ) {",
            "score": 99.42035233347039,
            "correctness": "uncompilable",
            "tokenized_patch": "final for ( int i = begin ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < i ; i ++ ) {",
            "score": 99.39331732855902,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - ) {",
            "score": 99.39036560058594,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( long i =0; i < begin + length ; i ++ ) {",
            "score": 99.37822129991319,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.equals( weights ; i ++ ) ) {",
            "score": 99.34952799479167,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . equals ( weights ; i ++ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *for( int i =0; i < start ; i ++ ) {",
            "score": 99.33740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * for ( int i = 0 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) break {",
            "score": 99.33408717105263,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) break {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0=0; i < weights.length ; i ++ )",
            "score": 99.28794459292763,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < begin ; i ++ ) {",
            "score": 99.393310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < begin ; i ++ ) {",
            "score": 99.393310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < begin ; i ++ ) {",
            "score": 99.393310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < begin ; i ++ ) {",
            "score": 99.393310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < begin ; i ++ ) {",
            "score": 99.393310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin / dev ; i ++ ) {",
            "score": 99.37820095486111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin / dev ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < this.weights.length ; i ++ ) { }",
            "score": 99.34940011160714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . weights . length ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin *accum ; i < begin ; i ++ ) {",
            "score": 99.34543863932292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin * accum ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <=0.length ; i ++ ) {",
            "score": 99.33393012152777,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= 0 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i >= i ; i ++ ) {",
            "score": 99.28744167751736,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i >= i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights !=1; i ++ ) {",
            "score": 99.41881646050348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights != 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -0; i >=0; i ++ ) { }",
            "score": 99.38943917410714,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 0 ; i >= 0 ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null || weights.length != weights.length ) {",
            "score": 99.34907531738281,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null || weights . length != weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + SIZE ; i ++ ) {",
            "score": 99.34537082248264,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + SIZE ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length <= weights.length ; i ++ ) {",
            "score": 99.33576795789931,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.567958984375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1; i < begin *length ; i ++ ) {",
            "score": 99.39283582899306,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 1 ; i < begin * length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length -1; i ] < weights.length ; i ++ )",
            "score": 99.34892134232955,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i ] < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin - length ; i ++ ) { {",
            "score": 99.34529836554276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin - length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < length ; i ++ ) {",
            "score": 99.28716278076172,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i",
            "score": 99.56511124320652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i < min ; i ++ ) {",
            "score": 99.392822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin + length ; i < min ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int short i =0; i < weights.length ; i ++ ) {",
            "score": 99.37765342310855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int short i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length : weights.length )",
            "score": 99.34528266059027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length : weights . length )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < weights.length ; ++ ++ i ) {",
            "score": 99.33499948601974,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < weights . length ; ++ ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for = weights.length ; i < weights.length ; i ++ ) {",
            "score": 99.3333740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for = weights . length ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) :",
            "score": 99.28700764973958,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <= weights.length ; i ++ ) { sumWts += weights [ i",
            "score": 99.564326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i <= weights . length ; i ++ ) { sum CaMeL Wts += weights [ i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin : values.length ) {",
            "score": 99.39244169347427,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin : values . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < length ; i ++ ) { {",
            "score": 99.34497788373162,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Integer.length ; i ++ ) {",
            "score": 99.33328586154514,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Integer . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { i ++ ;",
            "score": 99.28619706003289,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { i ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum$NUMBER$",
            "score": 99.56350840692934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum$NUMBER$",
            "score": 99.56350840692934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum$NUMBER$",
            "score": 99.56350840692934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum$NUMBER$",
            "score": 99.56350840692934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum$NUMBER$",
            "score": 99.56350840692934,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum $NUMBER$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { String",
            "score": 99.41647178248355,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { String",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length - n ; i ++ ) { {",
            "score": 99.38848586309524,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length - n ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null && weights.length < weights.length ) {",
            "score": 99.34822082519531,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights . length < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i ; i < weights.length ; i ++ ) { ) {",
            "score": 99.33327907986111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( final int i = start ; i < start ; i ++ ) {",
            "score": 99.28594611672794,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( final int i = start ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { if( ! isBiasCorrected )",
            "score": 99.563427734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { if ( ! is CaMeL Bias CaMeL Corrected )",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} } for( int i =0; i < weights.length ; i ++ )",
            "score": 99.38795230263158,
            "correctness": "uncompilable",
            "tokenized_patch": "} } for ( int i = 0 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) i ++ ;",
            "score": 99.348046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) i ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Exception i =0; i < weights.length ; i ++ ) {",
            "score": 99.33311631944444,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Exception i = 0 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum2*",
            "score": 99.56240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.56240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum37*",
            "score": 99.56240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum3*",
            "score": 99.56240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < length ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.56240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i <0: weights.length ) {",
            "score": 99.39234561011905,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < 0 : weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <( weights.length ) ; i ++ )",
            "score": 99.34794536389802,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ( weights . length ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < accum - sumWts ; i ++ )",
            "score": 99.34462376644737,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < accum - sum CaMeL Wts ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i < start ; i ++ ) {",
            "score": 99.33425723805146,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0.length ; i ++ ) { ) {",
            "score": 99.33262329101562,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( long i =0; i < length ; i ++ ) {",
            "score": 99.28580474853516,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( long i = 0 ; i < length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : weights ) {",
            "score": 99.39228901110198,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : weights ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin +0; i <1; i ++ ) {",
            "score": 99.37595621744792,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + 0 ; i < 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -- = begin ; i < begin ; i ++ ) {",
            "score": 99.34461885340073,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -- = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i <= weights.length ; i ++ ) {",
            "score": 99.33313666449652,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < i ; i -- ) {",
            "score": 99.33257293701172,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i -- ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start ; i < -1; i ++ ) { {",
            "score": 99.28572591145833,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < - 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i -0",
            "score": 99.56126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i - 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <0.length ; i ++ ) {",
            "score": 99.38747044613487,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < 0 . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i =0) {",
            "score": 99.3446109169408,
            "correctness": "timeout",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i = 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0.; i ++ ) {",
            "score": 99.33250517003677,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < 0 . ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = start +1; i <= length ; i ++ ) { {",
            "score": 99.28538111636513,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + 1 ; i <= length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + length ; i ++ ) { double",
            "score": 99.41497481496711,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + length ; i ++ ) { double",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < weights.length ; ++ i ) {",
            "score": 99.34695095486111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =9111962718267217978; i < weights.length ; ++ i ) {",
            "score": 99.34695095486111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < weights.length ; ++ i ) {",
            "score": 99.34695095486111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =3; i < weights.length ; ++ i ) {",
            "score": 99.34695095486111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =1983; i < weights.length ; ++ i ) {",
            "score": 99.34695095486111,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < weights . length ; ++ i ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "else { for( int i =0; i < begin ; i ++ ) {",
            "score": 99.344482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { for ( int i = 0 ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max /2; i ++ ) {",
            "score": 99.33296712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max /9111962718267217978; i ++ ) {",
            "score": 99.33296712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max /37; i ++ ) {",
            "score": 99.33296712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max /3; i ++ ) {",
            "score": 99.33296712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < max /1983; i ++ ) {",
            "score": 99.33296712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < max / $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1&& i < weights.length ; i ++ ) {",
            "score": 99.33243136935764,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 && i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < replace ; i ++ ) {",
            "score": 99.28497314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < replace ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum2*",
            "score": 99.56111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum9111962718267217978*",
            "score": 99.56111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum37*",
            "score": 99.56111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum3*",
            "score": 99.56111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { var =( accum -( accum1983*",
            "score": 99.56111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { var = ( accum - ( accum $NUMBER$ *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : accum ; i < begin ; i ++ ) {",
            "score": 99.39146592881944,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : accum ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =01; i < begin + length ; i ++ ) {",
            "score": 99.37456954152961,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 1 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i -=1; i < weights.length ; i ++ ) {",
            "score": 99.34440782335069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= 1 ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < this.0; i ++ ) {",
            "score": 99.33226182725694,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < this . 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + length ; i <=0; i ++ ) { {",
            "score": 99.28475149054276,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + length ; i <= 0 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i ++ ) { var =( accum -",
            "score": 99.55891219429348,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i ++ ) { var = ( accum -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum2*accum2/ sumWts ) ) /",
            "score": 99.39079846833882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /",
            "score": 99.39079846833882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum37*accum37/ sumWts ) ) /",
            "score": 99.39079846833882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum3*accum3/ sumWts ) ) /",
            "score": 99.39079846833882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( accum -( accum1983*accum1983/ sumWts ) ) /",
            "score": 99.39079846833882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length && weights [ i ] <= ) {",
            "score": 99.3867420014881,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length && weights [ i ] <= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin + [ i ] ; i ++ )",
            "score": 99.34408408717105,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin + [ i ] ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights [0] == weights [0] ) {",
            "score": 99.2843017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights [ 0 ] == weights [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var =( accum - i",
            "score": 99.55393473307292,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = ( accum - i",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ] ; i < begin + length ; i ++ ) {",
            "score": 99.414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ] ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum2*accum2/ sumWts ) ) /",
            "score": 99.39029947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum9111962718267217978*accum9111962718267217978/ sumWts ) ) /",
            "score": 99.39029947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum37*accum37/ sumWts ) ) /",
            "score": 99.39029947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum3*accum3/ sumWts ) ) /",
            "score": 99.39029947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { var =( accum -( accum1983*accum1983/ sumWts ) ) /",
            "score": 99.39029947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { var = ( accum - ( accum $NUMBER$ * accum $NUMBER$ / sum CaMeL Wts ) ) /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { throw new IllegalArgumentException( 'expansion values,') ; }",
            "score": 99.38643188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { throw new IllegalArgumentException( 'population') ; }",
            "score": 99.38643188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { throw new IllegalArgumentException( ' or ') ; }",
            "score": 99.38643188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { throw new IllegalArgumentException( 'sample') ; }",
            "score": 99.38643188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { throw new IllegalArgumentException( 'population variance') ; }",
            "score": 99.38643188476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =2; i < begin + length ; i ++ ) { {",
            "score": 99.37379857113487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =9111962718267217978; i < begin + length ; i ++ ) { {",
            "score": 99.37379857113487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =37; i < begin + length ; i ++ ) { {",
            "score": 99.37379857113487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =3; i < begin + length ; i ++ ) { {",
            "score": 99.37379857113487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1983; i < begin + length ; i ++ ) { {",
            "score": 99.37379857113487,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $NUMBER$ ; i < begin + length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == null || weights.length >0) {",
            "score": 99.33246721540179,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null || weights . length > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = false ;",
            "score": 99.55393288352273,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : begin ; i < max ; i ++ ) {",
            "score": 99.39027913411458,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : begin ; i < max ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >2; i ++ ) {",
            "score": 99.38634490966797,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >9111962718267217978; i ++ ) {",
            "score": 99.38634490966797,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i >37; i ++ ) {",
            "score": 99.38634490966797,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >3; i ++ ) {",
            "score": 99.38634490966797,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i >1983; i ++ ) {",
            "score": 99.38634490966797,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i > $NUMBER$ ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int n =0; i < begin + length ; i ++ ) {",
            "score": 99.37373182508681,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int n = 0 ; i < begin + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i !=0; i ++ ) {",
            "score": 99.34562852647569,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = weights . length ; i != 0 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < length +1; i ++ ) { {",
            "score": 99.283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < length + 1 ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start ; i <0; i ++ ) {",
            "score": 99.33210584852431,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < Comparable.length ; i ++ ) {",
            "score": 99.33182779947917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < Comparable . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < max + length ; i ++ ) {",
            "score": 99.41318766276042,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < max + length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin : weights.length ; i < begin : weights.begin ) {",
            "score": 99.38985770089286,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin : weights . length ; i < begin : weights . begin ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length ; i < begin ; i ++ )",
            "score": 99.34342687270221,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length ; i < begin ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'expansion values,'; i < weights.length ; i ++ ) { ) {",
            "score": 99.33155517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population'; i < weights.length ; i ++ ) { ) {",
            "score": 99.33155517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = ' or '; i < weights.length ; i ++ ) { ) {",
            "score": 99.33155517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'sample'; i < weights.length ; i ++ ) { ) {",
            "score": 99.33155517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = 'population variance'; i < weights.length ; i ++ ) { ) {",
            "score": 99.33155517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = $STRING$ ; i < weights . length ; i ++ ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + start ; i <=0; i ++ ) {",
            "score": 99.33144802517361,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + start ; i <= 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ) { {",
            "score": 99.28284454345703,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( double i = begin ; i < begin ; i ++ ) {",
            "score": 99.38936614990234,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( double i = begin ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { { {",
            "score": 99.34326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i < weights.length ; i ++ ) { {",
            "score": 99.33132595486111,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i < weights . length ; i ++ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i != start ; i ++ ) {",
            "score": 99.2828140258789,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i != start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = true ;",
            "score": 99.5509366122159,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i -= mean ; i < weights.length ; i ++ ) {",
            "score": 99.38922797309027,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i -= mean ; i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { */ }",
            "score": 99.38570731026786,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { * / }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start + i ; i < start ; i ++ ) {",
            "score": 99.33129204644098,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start + i ; i < start ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < length ; i ++ ) { continue ; }",
            "score": 99.28217516447368,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < length ; i ++ ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { dev = values [ i +",
            "score": 99.55042521158855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { dev = values [ i +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i >= begin ; i ++ ) {",
            "score": 99.41246202256944,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i >= begin ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "} for( int i =0; i <2; i ++ ) {",
            "score": 99.38517491957721,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <9111962718267217978; i ++ ) {",
            "score": 99.38517491957721,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <37; i ++ ) {",
            "score": 99.38517491957721,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <3; i ++ ) {",
            "score": 99.38517491957721,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} for( int i =0; i <1983; i ++ ) {",
            "score": 99.38517491957721,
            "correctness": "uncompilable",
            "tokenized_patch": "} for ( int i = 0 ; i < $NUMBER$ ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin / accum ; i ++ ) {",
            "score": 99.34256320529514,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin ; i < begin / accum ; i ++ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < split.length ; i ++ ) {",
            "score": 99.33073594835069,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < split . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts -- ;",
            "score": 99.54976222826087,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts -- ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null || weights.length < weights.length ) {",
            "score": 99.34344482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null || weights . length < weights . length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < begin ; i ++ ) { }",
            "score": 99.34255083869485,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < begin ; i ++ ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; break ++ ) {",
            "score": 99.3289794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; break ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start ; i < start ; ++ i ) {",
            "score": 99.28134155273438,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start ; i < start ; ++ i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < begin int1; i ++ ) {",
            "score": 99.38869222005208,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < begin int 1 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights ; i <0; i ++ ) {",
            "score": 99.32878112792969,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin + length ; i >=1; i ++ ) {",
            "score": 99.41103108723958,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = begin + length ; i >= 1 ; i ++ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i = weights.length +1; i < weights.length ; i ++ )",
            "score": 99.343017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length + 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == null || weights.length >1) {",
            "score": 99.32968575613839,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null || weights . length > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = start -1; i < weights.length ; i ++ )",
            "score": 99.28067819695724,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = start - 1 ; i < weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { var = values [ i -",
            "score": 99.54587809244792,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { var = values [ i -",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < ! weights.length ; i ++ )",
            "score": 99.34299045138889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < ! weights . length ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin ; i < weights.length ; i -- ) { {",
            "score": 99.3421566611842,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin ; i < weights . length ; i -- ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( i =0; i <= weights.length ; i ++ ) {",
            "score": 99.32874253216912,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( i = 0 ; i <= weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights != null ) { if( weights.length >0) {",
            "score": 99.28050321691177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null ) { if ( weights . length > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < weights.length ; i ++ ) { sumWts += i ;",
            "score": 99.54536946614583,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < weights . length ; i ++ ) { sum CaMeL Wts += i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "for( int i =0; i < begin ; ++ i ) {",
            "score": 99.388427734375,
            "correctness": "wrong",
            "tokenized_patch": "for ( int i = 0 ; i < begin ; ++ i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( weights != null && weights != null && weights.length >0) {",
            "score": 99.38466389973958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights != null && weights != null && weights . length > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = begin - mean ; i < begin ; i ++ ) {",
            "score": 99.34201388888889,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = begin - mean ; i < begin ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int i =0; for( i < weights.length ; i ++ ) {",
            "score": 99.32856580946181,
            "correctness": "uncompilable",
            "tokenized_patch": "int i = 0 ; for ( i < weights . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = weights.length -1; i >=1; i -- )",
            "score": 99.32846551192434,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = weights . length - 1 ; i >= 1 ; i -- )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( weights == null ) { return weights [ i ] ; } else {",
            "score": 99.28049603630515,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( weights == null ) { return weights [ i ] ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        }
    ]
}