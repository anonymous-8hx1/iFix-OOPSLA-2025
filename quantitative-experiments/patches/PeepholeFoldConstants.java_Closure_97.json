{
    "src": "result = lval CaMeL Int >> >> rval CaMeL Int ;",
    "patches": [
        {
            "patch": "result = lvalInt >> rvalInt ;",
            "score": 99.89511940696023,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.86553485576923,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ;",
            "score": 99.86166381835938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.72791812294408,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> rvalInt ;",
            "score": 99.8292236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ;",
            "score": 99.73212139423077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.80924769810268,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.77643694196429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ;",
            "score": 99.75038840553977,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.74816080729167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; break ;",
            "score": 99.708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.65839385986328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ;",
            "score": 99.61507161458333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.73475557215073,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.73213195800781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.70849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.73933919270833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ;",
            "score": 99.72350056966145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.71381378173828,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ;",
            "score": 99.71019568810097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ;",
            "score": 99.60370427911931,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.70940692608173,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; default : break ; }",
            "score": 99.70089721679688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.69982147216797,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.6990234375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt ;",
            "score": 99.63815487132354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ rvalInt ;",
            "score": 99.60301795372597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rvalInt ;",
            "score": 99.68396759033203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : break ; }",
            "score": 99.6814029091283,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> >> >> rvalInt ;",
            "score": 99.66444307215073,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ;",
            "score": 99.64955647786458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.63249655330883,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ;",
            "score": 99.60280354817708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rvalInt ;",
            "score": 99.6805191040039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> >> rvalInt ; break ;",
            "score": 99.68050537109374,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.6736083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> - rvalInt ;",
            "score": 99.63725011488971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> rvalInt ;",
            "score": 99.6149543313419,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt ;",
            "score": 99.59581502278645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : throw new ; }",
            "score": 99.68048706054688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : throw new ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ;",
            "score": 99.65895432692308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> rvalInt ;",
            "score": 99.59163411458333,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; }",
            "score": 99.58766526442308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.6800537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == rvalInt ;",
            "score": 99.65282440185547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt ;",
            "score": 99.61105581430289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.60915240119485,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ; }",
            "score": 99.58338838465073,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.6734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; break ;",
            "score": 99.6483513327206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt ;",
            "score": 99.63890491832386,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rvalInt ;",
            "score": 99.57344818115234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt ; }",
            "score": 99.57034640842014,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> >> rvalInt ; break ;",
            "score": 99.6504150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.63193359375,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lvalInt ;",
            "score": 99.60970633370536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.error( 'length') ) ;",
            "score": 99.60450654871323,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . error ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.error( '[].join()') ) ;",
            "score": 99.60450654871323,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . error ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.error( '') ) ;",
            "score": 99.60450654871323,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . error ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.error( 'join') ) ;",
            "score": 99.60450654871323,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . error ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.error( 'a') ) ;",
            "score": 99.60450654871323,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . error ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> >> rvalInt ;",
            "score": 99.56226264105902,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - rvalInt ;",
            "score": 99.62860514322917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> >> >> rvalInt ;",
            "score": 99.60874720982143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rval ; break ;",
            "score": 99.59856770833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return n ;",
            "score": 99.59818267822266,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rvalInt ;",
            "score": 99.56256103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt ; }",
            "score": 99.55962775735294,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new RuntimeException( 'length') ;",
            "score": 99.64364624023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new RuntimeException( '[].join()') ;",
            "score": 99.64364624023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new RuntimeException( '') ;",
            "score": 99.64364624023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new RuntimeException( 'join') ;",
            "score": 99.64364624023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new RuntimeException( 'a') ;",
            "score": 99.64364624023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.62771606445312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; }",
            "score": 99.55405970982143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt / rvalInt ;",
            "score": 99.53314208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt << rvalInt ;",
            "score": 99.63072204589844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; break ;",
            "score": 99.6006088256836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << rvalInt ;",
            "score": 99.59276529947917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( result == null ) result = lvalInt >> >> rvalInt ;",
            "score": 99.5433349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == null ) result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + rvalInt ;",
            "score": 99.53134155273438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt ;",
            "score": 99.51643510298295,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> >> rvalInt ;",
            "score": 99.63856907894737,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << rvalInt ; break ;",
            "score": 99.62383674172794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt ;",
            "score": 99.60020955403645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> rvalInt ;",
            "score": 99.53927791819854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , left ) ;",
            "score": 99.53123474121094,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt ;",
            "score": 99.4938631924716,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : return result ; }",
            "score": 99.6341064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : return result ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.60758209228516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << >> rvalInt ;",
            "score": 99.60597229003906,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> lvalInt ;",
            "score": 99.5961555032169,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> >> rval ;",
            "score": 99.58016967773438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } result = result ;",
            "score": 99.53813620174633,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } result = result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt == >>1) ;",
            "score": 99.59571668836806,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int == >> 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rvalInt ; ;",
            "score": 99.59551642922794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> rvalInt ;",
            "score": 99.53776041666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ) ; return n ;",
            "score": 99.52552795410156,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt >> >> rvalInt ) ;",
            "score": 99.51104329427083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.61971242804276,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> >> >> rvalInt ;",
            "score": 99.59377154181985,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt *rvalInt ;",
            "score": 99.59233856201172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> rvalInt ;",
            "score": 99.5104751586914,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; default : return n ;",
            "score": 99.61785278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; default : return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt - rvalInt ;",
            "score": 99.5916976928711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> lval ) ;",
            "score": 99.5885986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? lval ++ : lval ;",
            "score": 99.53630514705883,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? lval ++ : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.name( 'length') ) ;",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.name( '[].join()') ) ;",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.name( '') ) ;",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.name( 'join') ) ;",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.name( 'a') ) ;",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + rvalInt ;",
            "score": 99.46421712239584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; default : return result ;",
            "score": 99.61743774414063,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; default : return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt != rvalInt ;",
            "score": 99.58995056152344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt ;",
            "score": 99.58456655649039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> rval ;",
            "score": 99.57213541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? lval ++ ++ : lval ;",
            "score": 99.53106011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? lval ++ ++ : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : return n ; }",
            "score": 99.5052490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.RSH : return n ;",
            "score": 99.50159409466912,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . RSH : return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> rvalInt ;",
            "score": 99.45523274739584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> rvalInt ; break ;",
            "score": 99.60844152113971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>1;",
            "score": 99.5795654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> rvalInt ;",
            "score": 99.56092071533203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; }",
            "score": 99.53087615966797,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new ; }",
            "score": 99.5010009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default finally {",
            "score": 99.49048569623162,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> rvalInt ;",
            "score": 99.4523213704427,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.6048583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; break ;",
            "score": 99.58489118303571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt : rvalInt ;",
            "score": 99.582763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <2) ) {",
            "score": 99.5605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <3) ) {",
            "score": 99.5605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <10) ) {",
            "score": 99.5605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <6) ) {",
            "score": 99.5605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <32) ) {",
            "score": 99.5605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> rvalInt ; }",
            "score": 99.52259657118056,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.4837646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> - rvalInt ;",
            "score": 99.44453938802083,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.60465923108552,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : >> rvalInt ;",
            "score": 99.58049460018383,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> lval rvalInt ;",
            "score": 99.56469008501838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> rvalInt ;",
            "score": 99.51798502604167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( lval ) ;",
            "score": 99.49447631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ;",
            "score": 99.43988037109375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; case ;",
            "score": 99.60375258501838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == >> rvalInt ;",
            "score": 99.57429055606617,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default : break ;",
            "score": 99.55956313189338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.55912511488971,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ;",
            "score": 99.49381103515626,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + lvalInt ;",
            "score": 99.42901204427083,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token.lval :",
            "score": 99.600341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : rvalInt ;",
            "score": 99.57316080729167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt << >> rvalInt ;",
            "score": 99.55674833409927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & >> >> >> rvalInt ;",
            "score": 99.55466595818015,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> rvalInt ;",
            "score": 99.55153982979911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> rvalInt >> rvalInt ; break ;",
            "score": 99.52216653262867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result != null ) result = lvalInt >> >> rvalInt ;",
            "score": 99.51190863715277,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result != null ) result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; ;",
            "score": 99.49147385817308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : lvalInt >> rvalInt ;",
            "score": 99.419677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : return n ; }",
            "score": 99.59917602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & rvalInt ;",
            "score": 99.5655517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> & rvalInt ;",
            "score": 99.55350988051471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> >> >> >> rval ;",
            "score": 99.54780578613281,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> rvalInt ; break ;",
            "score": 99.53868910845588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; }",
            "score": 99.50974527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> >> >> >> rvalInt ) ;",
            "score": 99.49115397135417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> >> >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n.getType( ) ,",
            "score": 99.46922392003677,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n.getType( ) ,",
            "score": 99.46922392003677,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n.getType( ) ,",
            "score": 99.46922392003677,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n.getType( ) ,",
            "score": 99.46922392003677,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n.getType( ) ,",
            "score": 99.46922392003677,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != rvalInt >> rvalInt ;",
            "score": 99.4195068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.59867778577302,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt >> >> rvalInt ;",
            "score": 99.56240665211396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> - lvalInt ;",
            "score": 99.55282772288604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> >> >> >> rval ;",
            "score": 99.53942108154297,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+( int ) rvalInt ) ;",
            "score": 99.5381721047794,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+( int ) rvalInt ) ;",
            "score": 99.5381721047794,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+( int ) rvalInt ) ;",
            "score": 99.5381721047794,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+( int ) rvalInt ) ;",
            "score": 99.5381721047794,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+( int ) rvalInt ) ;",
            "score": 99.5381721047794,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> rvalInt ; }",
            "score": 99.50750054253473,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt ;",
            "score": 99.49007474459134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; default :",
            "score": 99.4682976217831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.56186252170139,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.55250651041666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rval ; break ;",
            "score": 99.52793884277344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( rval ) ;",
            "score": 99.48933410644531,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.46597493489584,
            "correctness": "uncompilable",
            "tokenized_patch": "this . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> >> >> rvalInt ;",
            "score": 99.59444387335526,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt >> >>1) ;",
            "score": 99.55855305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int >> >> 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> lval ) ;",
            "score": 99.55144500732422,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt ; break ;",
            "score": 99.5227294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ;  return( int ) lval ;",
            "score": 99.50262451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return ( int ) lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt ;",
            "score": 99.47859700520833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; break ;",
            "score": 99.465673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new Error( 'length') ;",
            "score": 99.59423149956598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new Error( '[].join()') ;",
            "score": 99.59423149956598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new Error( '') ;",
            "score": 99.59423149956598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new Error( 'join') ;",
            "score": 99.59423149956598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new Error( 'a') ;",
            "score": 99.59423149956598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> rvalInt ;",
            "score": 99.55585479736328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt ;",
            "score": 99.54849008413461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << rvalInt ; break ;",
            "score": 99.53356215533088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> >> >> rval ;",
            "score": 99.51189778645833,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> rvalInt ;",
            "score": 99.50260416666667,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( 'length') ; }",
            "score": 99.47754669189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( '[].join()') ; }",
            "score": 99.47754669189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( '') ; }",
            "score": 99.47754669189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( 'join') ; }",
            "score": 99.47754669189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( 'a') ; }",
            "score": 99.47754669189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; break ; }",
            "score": 99.47269933363971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : return -1;",
            "score": 99.593896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : return - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : >> rvalInt ;",
            "score": 99.5540771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ;",
            "score": 99.50908868963069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt / rvalInt ;",
            "score": 99.47455596923828,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> rvalInt >> >> >> rvalInt ;",
            "score": 99.4714714499081,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default return n ;",
            "score": 99.46495863970588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt >> rvalInt ;",
            "score": 99.40436662946429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rvalInt ; break ;",
            "score": 99.59286159939236,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt == rvalInt ;",
            "score": 99.5526123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt - rvalInt ;",
            "score": 99.547119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt >> rvalInt ;",
            "score": 99.49291229248047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt >> >> rvalInt ;",
            "score": 99.47090911865234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default = n ;",
            "score": 99.46018353630515,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? lvalInt >> rvalInt ;",
            "score": 99.40335286458334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : return n ;",
            "score": 99.59206671463816,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt ==0) ;",
            "score": 99.55170036764706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> & >> rvalInt ;",
            "score": 99.54235121783088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> >> >> rval ;",
            "score": 99.502099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result == null ) result = lvalInt >> rvalInt ;",
            "score": 99.49066521139706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == null ) result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt / >> rvalInt ;",
            "score": 99.46907043457031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n.getName( ) ,",
            "score": 99.4627326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n.getName( ) ,",
            "score": 99.4627326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n.getName( ) ,",
            "score": 99.4627326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n.getName( ) ,",
            "score": 99.4627326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n.getName( ) ,",
            "score": 99.4627326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.45399827223558,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : break ;",
            "score": 99.59127468532986,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> rvalInt ;",
            "score": 99.54986165364583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> >> >> rvalInt ;",
            "score": 99.53896915211396,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result ==0) result = lvalInt >> >> rvalInt ;",
            "score": 99.48967827690973,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == 0 ) result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default :",
            "score": 99.44642639160156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; default : break ; }",
            "score": 99.58974880642361,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt >> rval ) ;",
            "score": 99.5488640280331,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; result ++ ;",
            "score": 99.53715963924633,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; result ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ; default : break ;",
            "score": 99.51619226792279,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >>1, 'length'+ lvalInt ) ;",
            "score": 99.48854693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> 1 , $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >>1, '[].join()'+ lvalInt ) ;",
            "score": 99.48854693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> 1 , $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >>1, ''+ lvalInt ) ;",
            "score": 99.48854693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> 1 , $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >>1, 'join'+ lvalInt ) ;",
            "score": 99.48854693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> 1 , $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >>1, 'a'+ lvalInt ) ;",
            "score": 99.48854693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> 1 , $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << >> rvalInt ;",
            "score": 99.48750305175781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; }",
            "score": 99.44166782924107,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + lvalInt ;",
            "score": 99.40150035511364,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : lvalInt ;",
            "score": 99.54637145996094,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt >> rvalInt ;",
            "score": 99.50869750976562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; } result = result ;",
            "score": 99.488037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; } result = result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> rvalInt ;",
            "score": 99.48214518229166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt ;",
            "score": 99.46522105823864,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 99.44615827287946,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getType( ) ) ;",
            "score": 99.43726457868304,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getType( ) ) ;",
            "score": 99.43726457868304,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getType( ) ) ;",
            "score": 99.43726457868304,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getType( ) ) ;",
            "score": 99.43726457868304,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getType( ) ) ;",
            "score": 99.43726457868304,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.39812825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> >> >> >> >> rvalInt ;",
            "score": 99.53561580882354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { result = lvalInt >> >> rvalInt ; }",
            "score": 99.48685709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> >> rvalInt ; break ;",
            "score": 99.44281364889706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt >> >> rvalInt ;",
            "score": 99.39559232271634,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> >> rvalInt ;",
            "score": 99.48426818847656,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.URSH :",
            "score": 99.4761962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( Node.newNumber( result ) ) ;",
            "score": 99.43815343520221,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( Node . new CaMeL Number ( result ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getType( ) ) ; return n ;",
            "score": 99.4253791360294,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getType( ) ) ; return n ;",
            "score": 99.4253791360294,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getType( ) ) ; return n ;",
            "score": 99.4253791360294,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getType( ) ) ; return n ;",
            "score": 99.4253791360294,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getType( ) ) ; return n ;",
            "score": 99.4253791360294,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & rvalInt ;",
            "score": 99.39545084635417,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; break ; default : break ; }",
            "score": 99.58744506835937,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt == lval ) ;",
            "score": 99.54097254136029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int == lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt << rvalInt ;",
            "score": 99.5052261352539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rval ;",
            "score": 99.4759051983173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt | rvalInt ;",
            "score": 99.45970916748047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; }",
            "score": 99.4320068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default :",
            "score": 99.42518717447916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1;",
            "score": 99.38979763454861,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : return result ;",
            "score": 99.58675986842105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt > rval ) ;",
            "score": 99.5409294577206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int > rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.5291976928711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> rval ; break ;",
            "score": 99.47277018229167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt ;",
            "score": 99.38530883789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.58571263363487,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt >0) ;",
            "score": 99.54052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> lval ;",
            "score": 99.52621256510416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt << rvalInt ;",
            "score": 99.50206801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <1) ) {",
            "score": 99.471435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < 1 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; return n ;",
            "score": 99.4305060891544,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'length') ;",
            "score": 99.42287034254808,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '[].join()') ;",
            "score": 99.42287034254808,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '') ;",
            "score": 99.42287034254808,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'join') ;",
            "score": 99.42287034254808,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'a') ;",
            "score": 99.42287034254808,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.38525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.5854736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt rvalInt ;",
            "score": 99.53843587239584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lvalInt ;",
            "score": 99.52603352864584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( this ) { result = lvalInt >> >> rvalInt ; }",
            "score": 99.4793701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( this ) { result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> >> >> >> rval ;",
            "score": 99.46996307373047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( 'length') ;",
            "score": 99.458349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( '[].join()') ;",
            "score": 99.458349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( '') ;",
            "score": 99.458349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( 'join') ;",
            "score": 99.458349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : throw new RuntimeException( 'a') ;",
            "score": 99.458349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int )(( int ) rval ) ;",
            "score": 99.42950846354167,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) ( ( int ) rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = Node.newNumber( result ) ;",
            "score": 99.38485514322916,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; default : break ;",
            "score": 99.58519222861842,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - >> rvalInt ;",
            "score": 99.5366439819336,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rvalInt ; }",
            "score": 99.5257927389706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt >> rvalInt ;",
            "score": 99.47877332899306,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> rvalInt ; break ;",
            "score": 99.46884155273438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; case Token.rval : result = lval ;",
            "score": 99.45792388916016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; case Token . rval : result = lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right ;",
            "score": 99.41748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> rvalInt ;",
            "score": 99.3839111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - >> rvalInt ;",
            "score": 99.53575942095588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> >>1;",
            "score": 99.52466583251953,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt << >> rvalInt ; break ;",
            "score": 99.49492331112133,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? rval ++ ++ : rval ;",
            "score": 99.4776611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? rval ++ ++ : rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rval ;",
            "score": 99.4677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != rvalInt ;",
            "score": 99.38065962357955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rval : rvalInt >> >> rvalInt ;",
            "score": 99.58511352539062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval : rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> >> rvalInt ;",
            "score": 99.53534698486328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt >> >> rvalInt ; break ;",
            "score": 99.48749856387867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> >> >> >> >> >> rval ;",
            "score": 99.45950317382812,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( 'length') ;",
            "score": 99.45576477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( '[].join()') ;",
            "score": 99.45576477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( '') ;",
            "score": 99.45576477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( 'join') ;",
            "score": 99.45576477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new Error( 'a') ;",
            "score": 99.45576477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , 'length') ;",
            "score": 99.4151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , '[].join()') ;",
            "score": 99.4151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , '') ;",
            "score": 99.4151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , 'join') ;",
            "score": 99.4151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , 'a') ;",
            "score": 99.4151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt *rvalInt ;",
            "score": 99.378125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> >> rvalInt ; break ;",
            "score": 99.58505088404605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt > rvalInt ;",
            "score": 99.53453826904297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lval >> >> rvalInt ;",
            "score": 99.52406939338235,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> rvalInt ;",
            "score": 99.47248186383929,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt / >> rvalInt ;",
            "score": 99.45494079589844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; } int rvalInt =( int ) rval ;",
            "score": 99.450927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; } int rval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result >> rvalInt ; break ;",
            "score": 99.42344755284927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - rvalInt ;",
            "score": 99.37754469651442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ; default : break ; }",
            "score": 99.58490953947368,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt >1) ;",
            "score": 99.53335391773896,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int > 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << >> >> rvalInt ;",
            "score": 99.48334099264706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> rvalInt ;",
            "score": 99.4692626953125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt / rvalInt ;",
            "score": 99.45332845052083,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =( int ) rval ; break ; case Token.URSH :",
            "score": 99.44891357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> >> >> >> rvalInt ;",
            "score": 99.4232177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : throw",
            "score": 99.41138413373162,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : throw",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> rvalInt ;",
            "score": 99.37648228236607,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ; default : throw new ; }",
            "score": 99.582080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ; default : throw new ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt == rval ) ;",
            "score": 99.53272920496323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int == rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> lvalInt ;",
            "score": 99.46612548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ^ rvalInt ;",
            "score": 99.45220477764423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> >> >> rval ;",
            "score": 99.44838053385416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) ) ;",
            "score": 99.41021728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt ;",
            "score": 99.37357954545455,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> & rvalInt ; break ;",
            "score": 99.58094546669408,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt rvalInt ;",
            "score": 99.52702501085069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> - >> rvalInt ;",
            "score": 99.52305692784927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt / >> rvalInt ;",
            "score": 99.44892883300781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> >> rvalInt ;",
            "score": 99.44689178466797,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n.getName( ) ;",
            "score": 99.41730095358456,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n.getName( ) ;",
            "score": 99.41730095358456,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n.getName( ) ;",
            "score": 99.41730095358456,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n.getName( ) ;",
            "score": 99.41730095358456,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n.getName( ) ;",
            "score": 99.41730095358456,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Name ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new AssertionError( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.40955307904412,
            "correctness": "uncompilable",
            "tokenized_patch": "return new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt ;",
            "score": 99.3700838955966,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval( lvalInt >> >> >> rvalInt ) ;",
            "score": 99.44609832763672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ; break ;",
            "score": 99.4456035907452,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.40631510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt - rvalInt ;",
            "score": 99.36937662760417,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; case Token.lval :",
            "score": 99.58059692382812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> rvalInt ;",
            "score": 99.46311598557692,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt : rvalInt ;",
            "score": 99.46016199448529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> >> >> & rvalInt ) ;",
            "score": 99.445751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> >> >> & rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> >> >> >> >> >> >> rval ;",
            "score": 99.44034576416016,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1; break ; case Token.RSH :",
            "score": 99.40481387867646,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.36834309895833,
            "correctness": "uncompilable",
            "tokenized_patch": "try { error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default : break ; }",
            "score": 99.57933892144098,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt >> >> rvalInt ;",
            "score": 99.5230484008789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval >> rvalInt ;",
            "score": 99.52131922104779,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.46173454733456,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) { result = lvalInt >> >> rvalInt ; }",
            "score": 99.45962863498264,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false ) { result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> rvalInt ;",
            "score": 99.4431381225586,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ; break ;",
            "score": 99.40517752511161,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt ;",
            "score": 99.36628861860795,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> rvalInt ;",
            "score": 99.57916618795956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & >> rvalInt ;",
            "score": 99.52048627068015,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return n ;",
            "score": 99.45902506510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> >> rvalInt ;",
            "score": 99.45804595947266,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <0) ) {",
            "score": 99.439990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> rvalInt ; break ;",
            "score": 99.4046989889706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ; }",
            "score": 99.39663516773896,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : rvalInt >> rvalInt ;",
            "score": 99.36529947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; break ; default : break ;",
            "score": 99.57867431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt >> >> rvalInt ;",
            "score": 99.4583381204044,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.45688205295139,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> rvalInt ;",
            "score": 99.4412372295673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( n , newNumber ) ;",
            "score": 99.40097481863839,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.name( ) ) ;",
            "score": 99.3943862915039,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.name( ) ) ;",
            "score": 99.3943862915039,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.name( ) ) ;",
            "score": 99.3943862915039,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.name( ) ) ;",
            "score": 99.3943862915039,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.name( ) ) ;",
            "score": 99.3943862915039,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ; break ; }",
            "score": 99.57736687911184,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> >> lval ;",
            "score": 99.52010345458984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt - rvalInt ;",
            "score": 99.51686197916666,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval >> rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.45815860523896,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ^ rvalInt ;",
            "score": 99.43862915039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber =( int ) rvalInt >> rvalInt ;",
            "score": 99.39362649356617,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = ( int ) rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + lvalInt >> rvalInt ;",
            "score": 99.36314290364584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> rval ; break ;",
            "score": 99.57469267003677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return n ;",
            "score": 99.45590645926339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? rval ++ : rval ;",
            "score": 99.45247156479779,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? rval ++ : rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( 'length') ; }",
            "score": 99.43553161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( '[].join()') ; }",
            "score": 99.43553161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( '') ; }",
            "score": 99.43553161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( 'join') ; }",
            "score": 99.43553161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( 'a') ; }",
            "score": 99.43553161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> rvalInt ;",
            "score": 99.43002554086539,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt >> rvalInt ;",
            "score": 99.3585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.57393606085526,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval - rvalInt ;",
            "score": 99.5169677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } else { result = lvalInt >> >> rvalInt ;",
            "score": 99.45191865808823,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } else { result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> ~ rvalInt ;",
            "score": 99.43252328725961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.42936488560268,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.35564778645833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.57094212582237,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & rvalInt ;",
            "score": 99.51610456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt ; break ;",
            "score": 99.50910101996527,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt ; break ; case Token.RSH :",
            "score": 99.45233513327206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rvalInt ; }",
            "score": 99.45114315257354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw result ; }",
            "score": 99.43048502604167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw result ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.42252022879464,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> >> rvalInt >> >> rvalInt ;",
            "score": 99.39483283547794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt + rvalInt ;",
            "score": 99.35555826822916,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; result -- ;",
            "score": 99.51584759880515,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; result -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt >> rvalInt ;",
            "score": 99.45025993795956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & rvalInt ;",
            "score": 99.43046569824219,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt >> >> rvalInt ;",
            "score": 99.42123209635416,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> rvalInt ;",
            "score": 99.38741048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt ;",
            "score": 99.35398559570312,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; break ; case ;",
            "score": 99.56924099392361,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> >> >> >> >> >> rvalInt ;",
            "score": 99.5145263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt > rvalInt ;",
            "score": 99.50602213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result == null ) { result = lvalInt >> rvalInt ;",
            "score": 99.44942220052083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == null ) { result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ~ rvalInt ;",
            "score": 99.42964680989583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( n.getType( ) == Token.URSH )",
            "score": 99.41796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . UR@@ SH )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( SHIFT_AMOUNT_OUT_OF_BOUNDS ,",
            "score": 99.38699161305146,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> lvalInt ;",
            "score": 99.35318196614584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt ; result = lvalInt >> >> >> rvalInt ;",
            "score": 99.56912392064145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt - lvalInt ;",
            "score": 99.5136359719669,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt == rvalInt ;",
            "score": 99.5059814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt << rvalInt ;",
            "score": 99.445556640625,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rval ; break ; }",
            "score": 99.4177017211914,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.38661545973558,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rvalInt >> rvalInt ) ;",
            "score": 99.38488051470588,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.35194614955357,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rvalInt ; break ;",
            "score": 99.56901719835069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt == lval ) ;",
            "score": 99.5133056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int == lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> rvalInt ;",
            "score": 99.50453287760416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.4478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; break ;",
            "score": 99.44097541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt >> >> rvalInt ;",
            "score": 99.42585972377232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.41708170572916,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> >> >> rvalInt ; break ;",
            "score": 99.38297526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.35016741071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; break ; default : break ; }",
            "score": 99.56788394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval == rvalInt ;",
            "score": 99.51122328814338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt >> >> rvalInt ;",
            "score": 99.44709329044117,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> rvalInt ;",
            "score": 99.42256986177884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; } else if( rvalInt != rval ) {",
            "score": 99.41593424479167,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; } else if ( rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> rvalInt ; break ;",
            "score": 99.382568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt >> rvalInt ;",
            "score": 99.3468526204427,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default : throw new ; }",
            "score": 99.56636770148026,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default : throw new ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt & rvalInt ;",
            "score": 99.44668399586396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt << >> rvalInt ;",
            "score": 99.43623621323529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt >> >> rvalInt ;",
            "score": 99.42046247209821,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> rval ; break ;",
            "score": 99.4156982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rvalInt != rval ) ) return n ;",
            "score": 99.38251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval CaMeL Int != rval ) ) return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1;",
            "score": 99.34495849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; default : throw new ; }",
            "score": 99.56587299547698,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; default : throw new ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt + rvalInt ;",
            "score": 99.50316619873047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; }",
            "score": 99.4452392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt << rvalInt ;",
            "score": 99.43158428485577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> >> rval ; }",
            "score": 99.41544596354167,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , null ) ;",
            "score": 99.38116096047794,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> >> >> rvalInt ; break ;",
            "score": 99.37693158318015,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> rvalInt ;",
            "score": 99.34356134588069,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rvalInt ; break ; }",
            "score": 99.56180612664474,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt == rvalInt ;",
            "score": 99.50629021139706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt != >> rvalInt ;",
            "score": 99.50150792738971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int != >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> >> rvalInt ;",
            "score": 99.44521077473958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new result ; }",
            "score": 99.4186019897461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new result ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt << rvalInt ;",
            "score": 99.41326904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , 'length') ;",
            "score": 99.38086700439453,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , '[].join()') ;",
            "score": 99.38086700439453,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , '') ;",
            "score": 99.38086700439453,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , 'join') ;",
            "score": 99.38086700439453,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , 'a') ;",
            "score": 99.38086700439453,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) lvalInt >> rvalInt ;",
            "score": 99.37660217285156,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> rvalInt ;",
            "score": 99.3430684407552,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> >> rvalInt ; }",
            "score": 99.56013569078948,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ?1:1;",
            "score": 99.50466021369485,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ? 1 : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt *rvalInt ;",
            "score": 99.50067138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.412646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + lvalInt ;",
            "score": 99.3763656616211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt >> >> rvalInt ;",
            "score": 99.34068196614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.44129774305556,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ rvalInt ) ;",
            "score": 99.4241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ rvalInt ) ;",
            "score": 99.4241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ rvalInt ) ;",
            "score": 99.4241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ rvalInt ) ;",
            "score": 99.4241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ rvalInt ) ;",
            "score": 99.4241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt / rvalInt ;",
            "score": 99.41785430908203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt >> >> >> rvalInt ;",
            "score": 99.41210174560547,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return n ; }",
            "score": 99.37795840992646,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = rvalInt >> rvalInt ;",
            "score": 99.33873572716347,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> >> rvalInt ;",
            "score": 99.42071533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & ~ rvalInt ;",
            "score": 99.41722693810097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rval ; break ; }",
            "score": 99.41189778645834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = lvalInt >> >> rvalInt ;",
            "score": 99.33700125558036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> rvalInt ; }",
            "score": 99.55728952508224,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.- rvalInt ;",
            "score": 99.49921731387867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> rvalInt ; break ;",
            "score": 99.41895345052083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt / rvalInt ;",
            "score": 99.41720377604166,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt << >> >> >> >> >> >> >> rval ;",
            "score": 99.4111572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result >> >> >> rvalInt ;",
            "score": 99.37461224724265,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , null ) ;",
            "score": 99.36883075420673,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : lvalInt ;",
            "score": 99.33678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> & rvalInt ; break ;",
            "score": 99.5545718544408,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> >> rvalInt ;",
            "score": 99.436767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ;",
            "score": 99.41671048677884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> >> rvalInt ;",
            "score": 99.41608743106617,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = lvalInt >> rvalInt ;",
            "score": 99.33643517127403,
            "correctness": "wrong",
            "tokenized_patch": "result = lval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.55071700246711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - >> >> >> >> rvalInt ;",
            "score": 99.49609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( 'length') ;",
            "score": 99.4159423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( '[].join()') ;",
            "score": 99.4159423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( '') ;",
            "score": 99.4159423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( 'join') ;",
            "score": 99.4159423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; default : throw new RuntimeException( 'a') ;",
            "score": 99.4159423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ) ; return n ;",
            "score": 99.3360087076823,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> & rvalInt ; break ;",
            "score": 99.54914936266448,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt == >> rvalInt ;",
            "score": 99.49411010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> & rvalInt ;",
            "score": 99.43327780330883,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt *rvalInt ;",
            "score": 99.41561889648438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) lvalInt >> >> rvalInt ;",
            "score": 99.37368594898896,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> rvalInt ;",
            "score": 99.3337735262784,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ; return result ;",
            "score": 99.54792865953948,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> >> rvalInt ; }",
            "score": 99.43301212086396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt ; break ; case Token.RSH :",
            "score": 99.41513959099265,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> & rvalInt ;",
            "score": 99.41454315185547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rval ;",
            "score": 99.40801130022321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = rvalInt << rvalInt ;",
            "score": 99.33285086495536,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> rvalInt ; break ;",
            "score": 99.54642526726974,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt == >> rvalInt ;",
            "score": 99.4914909811581,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval : rvalInt ;",
            "score": 99.49088781020221,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> >> rvalInt ; }",
            "score": 99.42868221507354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new ; }",
            "score": 99.41266338641827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getType( ) == Token.URSH :",
            "score": 99.4073257446289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , n ) ;",
            "score": 99.36298370361328,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << lvalInt ;",
            "score": 99.33280806107955,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : assert false ;",
            "score": 99.54620040090461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : assert false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt != rvalInt ;",
            "score": 99.49146270751953,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt + rvalInt ;",
            "score": 99.48921472886029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & >> rvalInt ;",
            "score": 99.42724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; result = lvalInt >> >> rvalInt ;",
            "score": 99.41217041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; return n ;",
            "score": 99.4097900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt >> rvalInt ;",
            "score": 99.40549142020089,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.replaceChild( n , newNumber ) ;",
            "score": 99.36268833705357,
            "correctness": "uncompilable",
            "tokenized_patch": "result . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt + lvalInt ;",
            "score": 99.332373046875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt : >> rvalInt ;",
            "score": 99.49067957261029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - lvalInt ;",
            "score": 99.48905181884766,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ~ rvalInt ;",
            "score": 99.41180419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <=2) ) {",
            "score": 99.40526529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval <= $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <=3) ) {",
            "score": 99.40526529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval <= $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <=10) ) {",
            "score": 99.40526529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval <= $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <=6) ) {",
            "score": 99.40526529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval <= $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <=32) ) {",
            "score": 99.40526529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval <= $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt << rvalInt ;",
            "score": 99.40062662760417,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval - rvalInt >> >> rvalInt ;",
            "score": 99.33059256417411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> rval ; break ;",
            "score": 99.5453239889706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt ;",
            "score": 99.4906005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; lval ++ ;",
            "score": 99.48731186810662,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; lval ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt *>> rvalInt ;",
            "score": 99.41091918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> >> rval ; }",
            "score": 99.40198567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ) ; break ;",
            "score": 99.357958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n.getType( ) ;",
            "score": 99.35783835018383,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n.getType( ) ;",
            "score": 99.35783835018383,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n.getType( ) ;",
            "score": 99.35783835018383,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n.getType( ) ;",
            "score": 99.35783835018383,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n.getType( ) ;",
            "score": 99.35783835018383,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt >> rvalInt ;",
            "score": 99.32968374399039,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; return result ;",
            "score": 99.4869743795956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> lvalInt ;",
            "score": 99.42343139648438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ;",
            "score": 99.4098369891827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> rval ; break ;",
            "score": 99.4017333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << n.getDouble( ) ;",
            "score": 99.396435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt >> rvalInt ;",
            "score": 99.32962239583334,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt *rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.54296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> >> lval ) ;",
            "score": 99.4867805032169,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rvalInt ; }",
            "score": 99.42194680606617,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt / rvalInt ;",
            "score": 99.4091796875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "println( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.35260479266827,
            "correctness": "uncompilable",
            "tokenized_patch": "println ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval , result = lvalInt >> rvalInt ;",
            "score": 99.32892252604167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval , result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.54249331825658,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> >> >>1;",
            "score": 99.48377182904412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) ;",
            "score": 99.4819668856534,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + >> rvalInt ;",
            "score": 99.40762329101562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rval ; break ;",
            "score": 99.39958844866071,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; }",
            "score": 99.35333251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) rvalInt >> rvalInt ;",
            "score": 99.35090637207031,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt ; break ;",
            "score": 99.328857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt : lvalInt ;",
            "score": 99.48181870404412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? rvalInt ;",
            "score": 99.48003387451172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> rvalInt ;",
            "score": 99.40728352864583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "{ result = lvalInt >> >> rvalInt ;",
            "score": 99.39625901442308,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt << rvalInt ; break ;",
            "score": 99.39205169677734,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> >> >> >> rvalInt ; break ;",
            "score": 99.35270690917969,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rvalInt : rvalInt ; break ;",
            "score": 99.54200503700658,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; ;",
            "score": 99.48060709635416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt >> rvalInt ;",
            "score": 99.47743326822916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt >> rvalInt ) ;",
            "score": 99.40593610491071,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) {",
            "score": 99.3958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt << rvalInt ; break ;",
            "score": 99.39090169270834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "log( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.34842623197116,
            "correctness": "uncompilable",
            "tokenized_patch": "log ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int )(( int ) result ) ;",
            "score": 99.3478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) ( ( int ) result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt >> rvalInt ;",
            "score": 99.327978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> rvalInt ;",
            "score": 99.47997174944196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rvalInt ;",
            "score": 99.40468343098958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt >> >> rvalInt ;",
            "score": 99.39395345052084,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << rvalInt ;",
            "score": 99.38932661576705,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "{ error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.34820556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; break ; }",
            "score": 99.53702121310764,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> -1;",
            "score": 99.47950846354166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> rvalInt ;",
            "score": 99.41765594482422,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> >> rvalInt ;",
            "score": 99.393798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt << rvalInt ;",
            "score": 99.38721575055804,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "log( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.34400177001953,
            "correctness": "uncompilable",
            "tokenized_patch": "log ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.32674153645833,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rvalInt ; return result ;",
            "score": 99.53579872532895,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> - rvalInt ;",
            "score": 99.47917938232422,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt - rvalInt ) ;",
            "score": 99.47427029079861,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int - rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt >> ;",
            "score": 99.41726505055146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rvalInt ; break ;",
            "score": 99.40396554129464,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rvalInt = rvalInt << rvalInt ;",
            "score": 99.38617302389706,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ) ;",
            "score": 99.34532335069444,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> >> rvalInt ;",
            "score": 99.34328206380208,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> - rvalInt ; break ;",
            "score": 99.32551792689732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> - rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> & >> rvalInt ; break ;",
            "score": 99.53452019942434,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> & >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> - rvalInt ;",
            "score": 99.47845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : >> >> rvalInt ;",
            "score": 99.47403971354167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> rvalInt ;",
            "score": 99.41647338867188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left , right ) ;",
            "score": 99.38505045572917,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportError( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.3446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt >> rvalInt ;",
            "score": 99.32512555803571,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; break ; case ;",
            "score": 99.53301680715461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval ;",
            "score": 99.4781024639423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt -1;",
            "score": 99.47400580512152,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>1;",
            "score": 99.41485595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt *>> rvalInt ;",
            "score": 99.40049743652344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> >> rvalInt ;",
            "score": 99.3900146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { Node newNumber = Node.newNumber( result ) ;",
            "score": 99.3849235983456,
            "correctness": "uncompilable",
            "tokenized_patch": "try { Node new CaMeL Number = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n ) ;",
            "score": 99.34290568033855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n ) ;",
            "score": 99.34290568033855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n ) ;",
            "score": 99.34290568033855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n ) ;",
            "score": 99.34290568033855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n ) ;",
            "score": 99.34290568033855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> : rvalInt >> >> >> rvalInt ;",
            "score": 99.53231650904605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> : rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt + lvalInt ;",
            "score": 99.475830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt >> rvalInt ; }",
            "score": 99.41343060661765,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt ;",
            "score": 99.40001424153645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = rvalInt << rvalInt ;",
            "score": 99.38761683872768,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , right ) ;",
            "score": 99.38335774739583,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 99.34363664899554,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = rvalInt >> rvalInt ;",
            "score": 99.34218924386161,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt << rvalInt ;",
            "score": 99.32132161458334,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt | rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.53227796052632,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> >> lval ;",
            "score": 99.47519100413604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt *>> rvalInt ;",
            "score": 99.47161506204044,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt >> >> rvalInt ; }",
            "score": 99.41173638237848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt >> rvalInt ;",
            "score": 99.39961242675781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; } switch( n.getType( ) ) {",
            "score": 99.38742065429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; } switch ( n . get CaMeL Type ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n + 'length') ;",
            "score": 99.34194510323661,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n + '[].join()') ;",
            "score": 99.34194510323661,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n + '') ;",
            "score": 99.34194510323661,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n + 'join') ;",
            "score": 99.34194510323661,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n + 'a') ;",
            "score": 99.34194510323661,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> lvalInt ;",
            "score": 99.47486877441406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.46886528862848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt + rvalInt ;",
            "score": 99.39956665039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt << rvalInt ;",
            "score": 99.38630022321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.38224029541016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; rval = lvalInt >> rvalInt ;",
            "score": 99.33894617417279,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ; rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & lvalInt ;",
            "score": 99.47183990478516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> rvalInt >> ;",
            "score": 99.41118706597223,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ >> rvalInt ;",
            "score": 99.39787946428571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt >> >> >> rvalInt ;",
            "score": 99.38587951660156,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << >> >> rvalInt ;",
            "score": 99.38210880055146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.34097493489584,
            "correctness": "uncompilable",
            "tokenized_patch": "this . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> rvalInt ; break ;",
            "score": 99.53025416324013,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt | lvalInt ;",
            "score": 99.47032255284927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int | lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt : rvalInt ;",
            "score": 99.468017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> lvalInt ;",
            "score": 99.41103228400735,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rvalInt ;",
            "score": 99.39580829326923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.38064395680146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getType( ) == Token.LSH ) {",
            "score": 99.3404541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . LSH ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> >> >> >> rvalInt ;",
            "score": 99.52947676809211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt & lvalInt ;",
            "score": 99.4700066061581,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt : rvalInt ;",
            "score": 99.46658664279514,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> >> rvalInt ;",
            "score": 99.41060384114583,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt >> >> rvalInt ;",
            "score": 99.39381408691406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> rvalInt >> >> rvalInt ;",
            "score": 99.3343505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> >> rvalInt ;",
            "score": 99.31707356770833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt > >> rvalInt ;",
            "score": 99.46646881103516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int > >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >> ;",
            "score": 99.40957641601562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> >> rvalInt ;",
            "score": 99.39198521205357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = rvalInt >> rvalInt ;",
            "score": 99.38363211495536,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt >> rvalInt ;",
            "score": 99.37943761488971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.this + 'length') ;",
            "score": 99.33491516113281,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.this + '[].join()') ;",
            "score": 99.33491516113281,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.this + '') ;",
            "score": 99.33491516113281,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.this + 'join') ;",
            "score": 99.33491516113281,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.this + 'a') ;",
            "score": 99.33491516113281,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.332470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> -1;",
            "score": 99.46769714355469,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == >> >> rvalInt ;",
            "score": 99.46550835503473,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt ) ;",
            "score": 99.40948486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt >> >> rvalInt ;",
            "score": 99.38809204101562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> >> rvalInt ;",
            "score": 99.38119506835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt << rvalInt ;",
            "score": 99.37939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.33323317307692,
            "correctness": "uncompilable",
            "tokenized_patch": "report ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( lvalInt >> rvalInt ) ;",
            "score": 99.33193790211396,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int rvalInt =( int ) rvalInt ;",
            "score": 99.3126971905048,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> >> rval ; break ;",
            "score": 99.52677408854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; ;",
            "score": 99.46724155970982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt & rvalInt ;",
            "score": 99.46548461914062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> >> rvalInt ;",
            "score": 99.40938074448529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : result = lval ;",
            "score": 99.38749186197917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : result = lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } return n ;",
            "score": 99.38079071044922,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> rvalInt << rvalInt ;",
            "score": 99.37831744025735,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , false ) ;",
            "score": 99.33172248391544,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != lvalInt >> rvalInt ;",
            "score": 99.31171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval ;",
            "score": 99.4664306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result ==0) { result = lvalInt >> rvalInt ;",
            "score": 99.40829128689236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == 0 ) { result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.37828153722427,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; }",
            "score": 99.33158656529018,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt : result = lvalInt >> rvalInt ;",
            "score": 99.3265625,
            "correctness": "wrong",
            "tokenized_patch": "rval CaMeL Int : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new println( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.3116455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new println ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - rvalInt >> >> rvalInt ;",
            "score": 99.46404266357422,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int - rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> rvalInt ;",
            "score": 99.38553873697917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.3730224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Node.newNumber( result ) ;",
            "score": 99.3251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + >> rvalInt ;",
            "score": 99.46403234145221,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << rvalInt ; }",
            "score": 99.37750244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = rvalInt >> >> rvalInt ;",
            "score": 99.31147112165179,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt ;",
            "score": 99.46384684244792,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result != null ) { result = lvalInt >> rvalInt ;",
            "score": 99.40696885850694,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result != null ) { result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rvalInt + rvalInt ;",
            "score": 99.38386535644531,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ; break ; default :",
            "score": 99.3720947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Throwable( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.32230631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Throwable ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.52091899671052,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lval ;",
            "score": 99.46336873372395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt == rvalInt ;",
            "score": 99.46232096354167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : throw new RuntimeException( ;",
            "score": 99.38189697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : throw new Runtime CaMeL Exception ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) rvalInt << rvalInt ;",
            "score": 99.37708237591912,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt >> rvalInt ;",
            "score": 99.37115478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , newNumber ) ;",
            "score": 99.320361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt : >> rvalInt ;",
            "score": 99.46219635009766,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : return n ; }",
            "score": 99.38070913461539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + rvalInt ; break ;",
            "score": 99.37594784007354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt << rvalInt ) ;",
            "score": 99.32167053222656,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.class + 'length') ;",
            "score": 99.3184585571289,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.class + '[].join()') ;",
            "score": 99.3184585571289,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.class + '') ;",
            "score": 99.3184585571289,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.class + 'join') ;",
            "score": 99.3184585571289,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.class + 'a') ;",
            "score": 99.3184585571289,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> >> rvalInt ; }",
            "score": 99.52019942434211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> rvalInt >> >> rvalInt ;",
            "score": 99.46079799107143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ==1;",
            "score": 99.45974551930146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int == 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt >> >> rvalInt ;",
            "score": 99.4051513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.3688720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Token( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.3174819946289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Token ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.getDouble( ) ;",
            "score": 99.31026517427884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> : rvalInt >> >> rvalInt ; break ;",
            "score": 99.51961477179276,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> : rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? >> rvalInt ;",
            "score": 99.46017635569854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt : rvalInt ; }",
            "score": 99.40509711371527,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> >> rvalInt ;",
            "score": 99.37942940848214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rvalInt = rvalInt >> rvalInt ;",
            "score": 99.37526568244485,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt ; case Token.URSH :",
            "score": 99.36614227294922,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n.getType( )",
            "score": 99.31721496582031,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n.getType( )",
            "score": 99.31721496582031,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n.getType( )",
            "score": 99.31721496582031,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n.getType( )",
            "score": 99.31721496582031,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n.getType( )",
            "score": 99.31721496582031,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n . get CaMeL Type ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> >> >> >> rvalInt ;",
            "score": 99.51935135690789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> lvalInt ;",
            "score": 99.40425379136029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt >> >> rvalInt ;",
            "score": 99.37882995605469,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; return n ;",
            "score": 99.37344360351562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : result = lvalInt >> rvalInt ;",
            "score": 99.36564636230469,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt = lvalInt >> rvalInt ;",
            "score": 99.306640625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt - >> rvalInt ;",
            "score": 99.45799345128677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> >> rvalInt ;",
            "score": 99.45341222426471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.40282524956598,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> ~ rvalInt ;",
            "score": 99.3787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.365283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ right ) ;",
            "score": 99.31436157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ right ) ;",
            "score": 99.31436157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ right ) ;",
            "score": 99.31436157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ right ) ;",
            "score": 99.31436157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ right ) ;",
            "score": 99.31436157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt << rvalInt ;",
            "score": 99.30662184495192,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rval : rvalInt >> rvalInt ;",
            "score": 99.51898514597039,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval : rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt : rvalInt >> >> rvalInt ;",
            "score": 99.45789337158203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval || rvalInt ;",
            "score": 99.4508415670956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval || rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> rvalInt ;",
            "score": 99.40280386117789,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt >> & rvalInt ) ;",
            "score": 99.37781575520833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> & rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.36163736979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int )( lvalInt >> rvalInt ;",
            "score": 99.31826602711396,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) ( lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt >> >> >> rvalInt ;",
            "score": 99.30573381696429,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> | rvalInt >> >> >> rvalInt ;",
            "score": 99.5181884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> | rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == lvalInt ;",
            "score": 99.45738220214844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & lvalInt ;",
            "score": 99.40265299479167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "try { result = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.37135943244485,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) { return n ; } else {",
            "score": 99.36143493652344,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) { return n ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; break ; }",
            "score": 99.31377410888672,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; } return result ;",
            "score": 99.5144401999081,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; } return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt1;",
            "score": 99.45724666819854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ? rvalInt ;",
            "score": 99.44908949908088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.36051432291667,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.30415852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt - rvalInt ;",
            "score": 99.45694308810764,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt ;",
            "score": 99.40020197088069,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt / rvalInt + >> rvalInt ;",
            "score": 99.37660217285156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : result = lvalInt << rvalInt ;",
            "score": 99.3600082397461,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 99.31478881835938,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt : result = lvalInt >> >> rvalInt ;",
            "score": 99.31285858154297,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int : result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >=1; break ;",
            "score": 99.51156795726104,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt -1;",
            "score": 99.45643525965073,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; ;",
            "score": 99.44867706298828,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt ; ;",
            "score": 99.40017361111111,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt + rvalInt ;",
            "score": 99.37631022135416,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> rvalInt ; break ;",
            "score": 99.37018899356617,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt >> >> >> rvalInt ;",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case Token.RSH : result = lvalInt >> rvalInt ;",
            "score": 99.31195068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "case Token . RSH : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.51093493009868,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ) ;",
            "score": 99.45319680606617,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : lvalInt ; }",
            "score": 99.40011776194854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt & rvalInt ;",
            "score": 99.37630208333333,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> n.getDouble( ) ;",
            "score": 99.3686767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> rvalInt ;",
            "score": 99.35653686523438,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.rvalInt ;",
            "score": 99.30086263020833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & >> rvalInt ; break ;",
            "score": 99.51071648848684,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; break ; }",
            "score": 99.45062934027777,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> rvalInt ;",
            "score": 99.44767543247768,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.39934624565973,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ rvalInt ; break ;",
            "score": 99.37477213541666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.tokenToName(",
            "score": 99.30868709788604,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . token CaMeL To CaMeL Name (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.tokenToName(",
            "score": 99.30868709788604,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . token CaMeL To CaMeL Name (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.tokenToName(",
            "score": 99.30868709788604,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . token CaMeL To CaMeL Name (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.tokenToName(",
            "score": 99.30868709788604,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . token CaMeL To CaMeL Name (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.tokenToName(",
            "score": 99.30868709788604,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . token CaMeL To CaMeL Name (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt += lvalInt >> rvalInt ;",
            "score": 99.30021158854167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int += lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >= rvalInt ; break ;",
            "score": 99.51011898643092,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> - rvalInt ;",
            "score": 99.44737141927084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ; ;",
            "score": 99.39916274126838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt << >> rvalInt ;",
            "score": 99.36708286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = lvalInt >> rvalInt ;",
            "score": 99.35484095982143,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.30436197916667,
            "correctness": "uncompilable",
            "tokenized_patch": "result . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - rvalInt >> rvalInt ;",
            "score": 99.29959810697116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? lvalInt : rvalInt ; break ;",
            "score": 99.50981702302632,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? lval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt - >> rvalInt ;",
            "score": 99.44991048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> >> rvalInt ;",
            "score": 99.44483184814453,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt + >> rvalInt ;",
            "score": 99.37371826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt << rvalInt ;",
            "score": 99.35401204427083,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , n ) ;",
            "score": 99.3037841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> *rvalInt ;",
            "score": 99.29825846354167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> >> rvalInt ;",
            "score": 99.50929768880208,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt : >> rvalInt ;",
            "score": 99.44982231987848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> >> >> rvalInt ;",
            "score": 99.4444221047794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt >> rvalInt ;",
            "score": 99.39641256893383,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt & >> rvalInt ;",
            "score": 99.37303924560547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rvalInt << rvalInt ) ;",
            "score": 99.36315199908088,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = new Node( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.30628204345703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.RSH :",
            "score": 99.30308314732143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.29255894252232,
            "correctness": "uncompilable",
            "tokenized_patch": "else error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt >> >> >> rvalInt ;",
            "score": 99.50916812294408,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt / rvalInt ;",
            "score": 99.44979095458984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>2;",
            "score": 99.44409993489583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>3;",
            "score": 99.44409993489583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>10;",
            "score": 99.44409993489583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>6;",
            "score": 99.44409993489583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>32;",
            "score": 99.44409993489583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt << rvalInt ;",
            "score": 99.36289760044643,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int rvalInt = lvalInt << rvalInt ;",
            "score": 99.35329764229911,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getType( ) == Token.RSH ) {",
            "score": 99.30264282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . RSH ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2rvalInt >> rvalInt ;",
            "score": 99.2904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3rvalInt >> rvalInt ;",
            "score": 99.2904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10rvalInt >> rvalInt ;",
            "score": 99.2904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6rvalInt >> rvalInt ;",
            "score": 99.2904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32rvalInt >> rvalInt ;",
            "score": 99.2904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & rvalInt >> >> rvalInt ; break ;",
            "score": 99.50849352384868,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt : lvalInt ;",
            "score": 99.4496841430664,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval || lvalInt ;",
            "score": 99.44246179917279,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >>1;",
            "score": 99.39575913373162,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?0: lvalInt ;",
            "score": 99.37223307291667,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =( int ) rvalInt << >> rvalInt ;",
            "score": 99.36223958333333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.29015299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ;",
            "score": 99.37185232979911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left , rvalInt ) ;",
            "score": 99.3618523092831,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left , rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt << rvalInt ;",
            "score": 99.35205950055804,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : break ;",
            "score": 99.30518450055804,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.replaceChild( n , newNumber ) ;",
            "score": 99.30147879464286,
            "correctness": "uncompilable",
            "tokenized_patch": "this . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : break ;",
            "score": 99.28993577223558,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; break ; default :",
            "score": 99.50703938802083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt > rvalInt ;",
            "score": 99.44885932074652,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> ~ rvalInt ;",
            "score": 99.37178861177884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt >> rvalInt ;",
            "score": 99.36116245814732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rval ;",
            "score": 99.35185102982955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "switch( n.getType( ) ) {",
            "score": 99.30133056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( n . get CaMeL Type ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = lvalInt << rvalInt ;",
            "score": 99.28927176339286,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : throw new ;",
            "score": 99.50686163651316,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : throw new ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt - rvalInt ;",
            "score": 99.44802676930146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : lvalInt >> >> rvalInt ;",
            "score": 99.43598937988281,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - rvalInt ; break ;",
            "score": 99.30251177619485,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "println( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.30118560791016,
            "correctness": "uncompilable",
            "tokenized_patch": "println ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt & rvalInt ; break ;",
            "score": 99.50674599095395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> >> rvalInt ;",
            "score": 99.44651884191177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> >> >> rvalInt ;",
            "score": 99.39327799479166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt >> >> >> rvalInt ;",
            "score": 99.371435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; } return n ;",
            "score": 99.3514404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; } return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber =( int ) rvalInt ;",
            "score": 99.30096905048077,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> + rvalInt ;",
            "score": 99.2886962890625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt >> >> rvalInt ;",
            "score": 99.5049984580592,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt >>1;",
            "score": 99.39292399088542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt2;",
            "score": 99.37005145733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt3;",
            "score": 99.37005145733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt10;",
            "score": 99.37005145733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt6;",
            "score": 99.37005145733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt32;",
            "score": 99.37005145733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt << rvalInt ;",
            "score": 99.35872977120536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt ;",
            "score": 99.34854125976562,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> rvalInt >> >> rvalInt ;",
            "score": 99.30008370535714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt > rvalInt ; break ;",
            "score": 99.50465794613487,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int > rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt *>> rvalInt ;",
            "score": 99.36941528320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << lvalInt ;",
            "score": 99.35847981770833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt << >> >> >> >> >> rvalInt ;",
            "score": 99.34599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( n.getType( ) ) ;",
            "score": 99.29853820800781,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.28800455729167,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt || rvalInt ;",
            "score": 99.44403076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int || rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rvalInt ; }",
            "score": 99.39067526424633,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; return n ;",
            "score": 99.35829264322916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> >> rvalInt ;",
            "score": 99.3459942157452,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.class ) ;",
            "score": 99.29840959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.class ) ;",
            "score": 99.29840959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.class ) ;",
            "score": 99.29840959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.class ) ;",
            "score": 99.29840959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.class ) ;",
            "score": 99.29840959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.28763834635417,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ? rvalInt : rvalInt ; break ;",
            "score": 99.50404759457237,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt > rvalInt >> >> rvalInt ;",
            "score": 99.44374084472656,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int > rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lval rvalInt ;",
            "score": 99.43133138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt << rvalInt ; break ;",
            "score": 99.35597857306985,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt << rvalInt ;",
            "score": 99.3445068359375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>( rvalInt ) ;",
            "score": 99.29926614200367,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> ( rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.2978271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.size( ) ;",
            "score": 99.28738606770834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . size ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> | rvalInt >> >> rvalInt ; break ;",
            "score": 99.50360428659539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> | rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt >> >> rvalInt ;",
            "score": 99.4434585571289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - lvalInt ;",
            "score": 99.43069223257211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; break ;",
            "score": 99.36721365792411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = Node.newNumber( rvalInt ) ;",
            "score": 99.35345818014706,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = Node . new CaMeL Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default finally {",
            "score": 99.29774475097656,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; case ; case ;",
            "score": 99.50299393503289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; case ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt == rvalInt ;",
            "score": 99.44335259331598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ? lvalInt ;",
            "score": 99.42957261029412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ? lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.3899658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0/ rvalInt >> >> rvalInt ;",
            "score": 99.367138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; } return n ;",
            "score": 99.3416748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; } return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.29728190104167,
            "correctness": "uncompilable",
            "tokenized_patch": "report . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( n.getType( ) ) ;",
            "score": 99.29686063878677,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt & rvalInt ;",
            "score": 99.28597819010416,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt != rvalInt >> >> rvalInt ;",
            "score": 99.4425048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - lvalInt ;",
            "score": 99.42945149739583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval ;",
            "score": 99.36607142857143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> >> rvalInt ;",
            "score": 99.3405049641927,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( Node.newNumber( result ) ) ;",
            "score": 99.29673138786765,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( Node . new CaMeL Number ( result ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getType( ) == Token.NUMBER ) {",
            "score": 99.29621124267578,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . NUMBER ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> rvalInt ; break ;",
            "score": 99.5023552389706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - rvalInt >> rvalInt ;",
            "score": 99.442333984375,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int - rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> lval ;",
            "score": 99.42891148158482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt *rvalInt ;",
            "score": 99.3659896850586,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << rvalInt >> rvalInt ;",
            "score": 99.35125325520833,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return rvalInt >> >> >> >> rvalInt ; break ;",
            "score": 99.33880208333333,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "warn( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.29623647836539,
            "correctness": "uncompilable",
            "tokenized_patch": "warn ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.28519381009616,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; break ; default : break ; }",
            "score": 99.50214979383681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> rvalInt ;",
            "score": 99.42838541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> rvalInt ; }",
            "score": 99.38739776611328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? >> rvalInt : rvalInt ;",
            "score": 99.36495208740234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( n ) ) ;",
            "score": 99.29296875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( n ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) rvalInt ;",
            "score": 99.28499348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> >> rvalInt ; break ;",
            "score": 99.50170220269098,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt > >> rvalInt ;",
            "score": 99.44096105238971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int > >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt | lvalInt ;",
            "score": 99.42807006835938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int | lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt >> >> >> rvalInt ;",
            "score": 99.362744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ rvalInt + 'length') ;",
            "score": 99.34857940673828,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ rvalInt + '[].join()') ;",
            "score": 99.34857940673828,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ rvalInt + '') ;",
            "score": 99.34857940673828,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ rvalInt + 'join') ;",
            "score": 99.34857940673828,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ rvalInt + 'a') ;",
            "score": 99.34857940673828,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.33809988839286,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> >> >> rvalInt ; break ;",
            "score": 99.49987074908088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt < rvalInt ;",
            "score": 99.44037628173828,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.3861083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt ; break ;",
            "score": 99.3485107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> >> rvalInt ;",
            "score": 99.33780343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = rvalInt << rvalInt ;",
            "score": 99.284423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval ; break ;",
            "score": 99.49937528722427,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval , rvalInt >> >> rvalInt ;",
            "score": 99.43973117404514,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval , rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : lvalInt >> >> >> rvalInt ;",
            "score": 99.42445283777573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt + rvalInt ;",
            "score": 99.36244201660156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> rvalInt ; break ;",
            "score": 99.34693908691406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.28359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; default : return n ;",
            "score": 99.499267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; default : return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt != lvalInt ;",
            "score": 99.43856048583984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int != lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> lvalInt ; }",
            "score": 99.3842414407169,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> rvalInt ; break ;",
            "score": 99.34681611902573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result , error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.2901123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result , error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> || rvalInt >> >> >> rvalInt ;",
            "score": 99.49923545435855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> || rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & lvalInt ;",
            "score": 99.42387172154018,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & ~ rvalInt ;",
            "score": 99.35990397135417,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt << rvalInt << rvalInt ;",
            "score": 99.34581705729167,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ; default :",
            "score": 99.3355224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , true ) ;",
            "score": 99.29206399356617,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt : result = lvalInt >> rvalInt ;",
            "score": 99.29002278645834,
            "correctness": "wrong",
            "tokenized_patch": "lval CaMeL Int : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt *rvalInt ;",
            "score": 99.28279252485795,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt < rval ? rvalInt : >> >> rvalInt ;",
            "score": 99.49908768503289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval CaMeL Int : >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval ) ;",
            "score": 99.43819986979166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt rvalInt ;",
            "score": 99.42379940257354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> lvalInt ;",
            "score": 99.38254801432292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ? lval : lval ? lval : lval ;",
            "score": 99.35683030348558,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ? lval : lval ? lval : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << rvalInt ; break ;",
            "score": 99.34539325420673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt >> >> >> rvalInt ;",
            "score": 99.33466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + >> >> rvalInt ;",
            "score": 99.29048426011029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = lvalInt >> rvalInt ;",
            "score": 99.28949846540179,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt ;",
            "score": 99.28212668678977,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> rval ; break ;",
            "score": 99.49780951605902,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt - >> rvalInt ;",
            "score": 99.43707275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval : lval ;",
            "score": 99.42249348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt ; }",
            "score": 99.38248384915866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt / >> rval ;",
            "score": 99.35582624162946,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber >> rvalInt >> rvalInt ;",
            "score": 99.3427978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + lvalInt ; break ;",
            "score": 99.29029756433823,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.newNumber( result ) ) ;",
            "score": 99.2894287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . new CaMeL Number ( result ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.49679744944854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt >> rvalInt ;",
            "score": 99.43703884548611,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >>0;",
            "score": 99.42130533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt / rvalInt ;",
            "score": 99.38233139935662,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; break ;",
            "score": 99.34247589111328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ; break ;",
            "score": 99.33449300130208,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - rvalInt ; break ;",
            "score": 99.27836100260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.49660130550987,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval ) ;",
            "score": 99.43674142020089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt > rvalInt ;",
            "score": 99.38192928538604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt >> >> rvalInt ;",
            "score": 99.28982747395834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt >> rvalInt ;",
            "score": 99.43671417236328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> rvalInt >> rvalInt ; }",
            "score": 99.38186984592014,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt / >> rvalInt ;",
            "score": 99.35545349121094,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> rvalInt ;",
            "score": 99.3402850811298,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> >> >> rvalInt ;",
            "score": 99.3331768329327,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "msg( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.28868689903847,
            "correctness": "uncompilable",
            "tokenized_patch": "msg ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt *rvalInt ;",
            "score": 99.27752278645833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> << rvalInt ; break ;",
            "score": 99.4947445518092,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> rvalInt >> rvalInt ;",
            "score": 99.43500225360577,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt / rvalInt + rvalInt ;",
            "score": 99.3554443359375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & n.getDouble( ) ;",
            "score": 99.3329833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int )( rvalInt >> rvalInt ;",
            "score": 99.28893324908088,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) ( rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ; case Token.lval :",
            "score": 99.49423699629934,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt / >> rvalInt ;",
            "score": 99.43469956341912,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.41679382324219,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> >> lvalInt ;",
            "score": 99.38048638237848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> >> rvalInt ) ; break ;",
            "score": 99.35496419270834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> >> rval CaMeL Int ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return null ;",
            "score": 99.34005737304688,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> lvalInt ; break ;",
            "score": 99.28858139935662,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result result = lvalInt >> >> rvalInt ;",
            "score": 99.27569110576923,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rval : lvalInt >> >> >> rvalInt ;",
            "score": 99.4934146278783,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval : lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt - rvalInt ;",
            "score": 99.43379720052083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> rvalInt ; else",
            "score": 99.41649672564338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> lvalInt ; }",
            "score": 99.38034955193015,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new result ;",
            "score": 99.35476888020834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS ,",
            "score": 99.28786996694711,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> << rvalInt ; break ;",
            "score": 99.49270148026316,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt >> >> >> rvalInt ;",
            "score": 99.43323432074652,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> & rvalInt ;",
            "score": 99.41629791259766,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt ++ ;",
            "score": 99.38031684027777,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == -1?0: lvalInt ;",
            "score": 99.35377502441406,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == - 1 ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "info( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.28751314603366,
            "correctness": "uncompilable",
            "tokenized_patch": "info ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ? lvalInt ;",
            "score": 99.274951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ? lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> >> rval ; break ;",
            "score": 99.49249267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt : rvalInt ;",
            "score": 99.43272569444444,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & >> rvalInt ;",
            "score": 99.41546223958333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || lvalInt >> >> rvalInt ;",
            "score": 99.3537368774414,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( rvalInt ) ;",
            "score": 99.28648158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1; break ;",
            "score": 99.27413940429688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rval : rvalInt >> >> >> rvalInt ;",
            "score": 99.49239951685855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval : rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt -1;",
            "score": 99.43256971571181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt >> rvalInt ; }",
            "score": 99.37755669487848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt >> rvalInt ; break ;",
            "score": 99.3377685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> rval ;",
            "score": 99.32931753305289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; return result ;",
            "score": 99.49239095052083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt >> rvalInt ;",
            "score": 99.43219672309027,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> rvalInt ; }",
            "score": 99.37518310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt ; break ;",
            "score": 99.35331508091518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<( int ) rvalInt ;",
            "score": 99.33767264229911,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> >> rvalInt ; case Token.RSH :",
            "score": 99.28691101074219,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> rvalInt ; break ;",
            "score": 99.2830581665039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ; default : break ;",
            "score": 99.49058024088542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= rvalInt >> >> rvalInt ;",
            "score": 99.4320068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> ~ rvalInt ;",
            "score": 99.35317758413461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt >> >> rvalInt ;",
            "score": 99.32774135044643,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ) ; }",
            "score": 99.28690011160714,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? lvalInt ;",
            "score": 99.2822494506836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? lvalInt << rvalInt ;",
            "score": 99.2712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt rvalInt ;",
            "score": 99.431689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> lvalInt ;",
            "score": 99.41332289751838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.37489149305556,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) { return n ; }",
            "score": 99.32764543805804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) { return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , null ) ;",
            "score": 99.28583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> rvalInt ;",
            "score": 99.27066744290866,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> >> >> rvalInt ; break ;",
            "score": 99.48997587316177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rvalInt ; break ;",
            "score": 99.43110487196181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.3748779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ^ rvalInt ;",
            "score": 99.35245513916016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : throw new Error( ) ;",
            "score": 99.4892219094669,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : throw new Error ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> rvalInt rvalInt ;",
            "score": 99.43067762586806,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result == null ) { result = lvalInt ; }",
            "score": 99.37301432291666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == null ) { result = lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> >> rvalInt ;",
            "score": 99.3523418719952,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case Token.URSH : result = lvalInt >> rvalInt ;",
            "score": 99.3357292624081,
            "correctness": "uncompilable",
            "tokenized_patch": "case Token . UR@@ SH : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS + right ) ;",
            "score": 99.28540802001953,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( int ) rvalInt ;",
            "score": 99.26741245814732,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> & rvalInt ; break ;",
            "score": 99.48727898848684,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt >> rvalInt ;",
            "score": 99.43053436279297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & >> rvalInt ; }",
            "score": 99.37080652573529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval ;",
            "score": 99.35116577148438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> >> >> rvalInt ;",
            "score": 99.32469831194196,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; default : break ;",
            "score": 99.48726160386029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; result = lvalInt ;",
            "score": 99.43052842881944,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >> ; }",
            "score": 99.37055520450367,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt << >> rvalInt ; break ;",
            "score": 99.3355712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) rval ;",
            "score": 99.32445179332386,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.2843017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rvalInt ) ;",
            "score": 99.27932504507211,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt + lvalInt << rvalInt ;",
            "score": 99.2671630859375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; break ; case ;",
            "score": 99.48712479440789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt > rvalInt ;",
            "score": 99.43022155761719,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.40957641601562,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt >> ; }",
            "score": 99.36981201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt *rvalInt ;",
            "score": 99.34811197916666,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "rval = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.33349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ; }",
            "score": 99.32429722377232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report.replaceChild( n , newNumber ) ;",
            "score": 99.28363909040179,
            "correctness": "uncompilable",
            "tokenized_patch": "report . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt / rvalInt ;",
            "score": 99.26507975260417,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case ; case ;",
            "score": 99.48701307508681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt != rvalInt ;",
            "score": 99.42991536458334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt | rvalInt ;",
            "score": 99.346826171875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval >> rvalInt << rvalInt << rvalInt ;",
            "score": 99.33312270220588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> >> >> >> rvalInt ;",
            "score": 99.324267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt >> >> rvalInt ;",
            "score": 99.28329031808036,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : result >> >> rvalInt ;",
            "score": 99.26316615513393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : result >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; result = lvalInt ;",
            "score": 99.48654014185855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt >> rvalInt ) ;",
            "score": 99.42990451388889,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval rvalInt ;",
            "score": 99.40872192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt >> >> rvalInt ;",
            "score": 99.36949920654297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; System.",
            "score": 99.33282111672794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.32416643415179,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt >> rvalInt ;",
            "score": 99.26251690204327,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >= rvalInt ; break ;",
            "score": 99.48524876644737,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) >> rvalInt ;",
            "score": 99.4297119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> ;",
            "score": 99.36741129557292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt =( int ) rvalInt << rvalInt ;",
            "score": 99.33214613970588,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> >> rval ;",
            "score": 99.32142857142857,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1>> rvalInt ;",
            "score": 99.26246134440105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ? lvalInt : rvalInt ; break ;",
            "score": 99.48499820106908,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval ? lval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt :1;",
            "score": 99.42961290147569,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & lvalInt ;",
            "score": 99.407958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> rval ;",
            "score": 99.34535217285156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt << rvalInt ;",
            "score": 99.33210754394531,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> >> rvalInt ;",
            "score": 99.27660193810097,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( result , newNumber ) ;",
            "score": 99.26236397879464,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.48442639802632,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; result else",
            "score": 99.40763585707721,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; result else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> rvalInt ; }",
            "score": 99.36605072021484,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> >> rvalInt ) ;",
            "score": 99.34390024038461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : rvalInt ; break ;",
            "score": 99.33183737362133,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt : result = lvalInt >> >> rvalInt ;",
            "score": 99.27914428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int : result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; } }",
            "score": 99.27527618408203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1; break ;",
            "score": 99.26171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : >> rvalInt ; }",
            "score": 99.36543782552083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( n.getDouble( ) ) ;",
            "score": 99.2743278952206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( n . get CaMeL Double ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << lvalInt >> rvalInt ;",
            "score": 99.2615478515625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> && rvalInt >> >> rvalInt ; break ;",
            "score": 99.48350765830592,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> && rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> rvalInt ;",
            "score": 99.36485877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval */ rvalInt >> >> rvalInt ;",
            "score": 99.34378255208334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; throw n ;",
            "score": 99.27642059326172,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; throw n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.48231265419408,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt1;",
            "score": 99.42782931857639,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> >> >> rvalInt ;",
            "score": 99.36476763556985,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= >> rvalInt ;",
            "score": 99.34280395507812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return newNumber ;",
            "score": 99.33031508501838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return new CaMeL Number ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt << rvalInt ; break ;",
            "score": 99.31729561941964,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ; ; break ;",
            "score": 99.48143246299342,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt rval ) ;",
            "score": 99.42778862847223,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> >> rvalInt ;",
            "score": 99.40445149739584,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt | rvalInt ;",
            "score": 99.34181315104166,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "try { error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.27615559895834,
            "correctness": "uncompilable",
            "tokenized_patch": "try { error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt += rvalInt >> rvalInt ;",
            "score": 99.26063639322916,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int += rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & lval rvalInt ;",
            "score": 99.40367934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> rvalInt ; }",
            "score": 99.36433410644531,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rval ;",
            "score": 99.34171840122768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt << >> rvalInt ;",
            "score": 99.32994842529297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'length', left ) ;",
            "score": 99.2761474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '[].join()', left ) ;",
            "score": 99.2761474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '', left ) ;",
            "score": 99.2761474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'join', left ) ;",
            "score": 99.2761474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'a', left ) ;",
            "score": 99.2761474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.27080829326923,
            "correctness": "uncompilable",
            "tokenized_patch": "Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> >> rvalInt ;",
            "score": 99.26055438701923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.48098273026316,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> rvalInt ; break ;",
            "score": 99.32981770833334,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = rvalInt << rvalInt ;",
            "score": 99.31659807477679,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> rvalInt ;",
            "score": 99.2705547626202,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( int ) lvalInt ;",
            "score": 99.26000104631696,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & ( int ) lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt & >> >> rvalInt ; break ;",
            "score": 99.48079641241776,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int & >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt | rvalInt ;",
            "score": 99.40304744944854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.31537737165179,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) lvalInt << rvalInt ;",
            "score": 99.27445220947266,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "new AssertionError( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.26937866210938,
            "correctness": "uncompilable",
            "tokenized_patch": "new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; break ;",
            "score": 99.48011067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt rval ) ;",
            "score": 99.42422305836396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt >> >> rvalInt ;",
            "score": 99.36234537760417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?0: lvalInt ;",
            "score": 99.33758138020833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt ; result = lvalInt >> rvalInt ;",
            "score": 99.3290153952206,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ; result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> >> >> >> rvalInt ; break ;",
            "score": 99.31502278645833,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.27374737079327,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : result >> rvalInt ;",
            "score": 99.25978440504808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : result >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ? rval : rvalInt >> rvalInt ;",
            "score": 99.47909385279605,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == rval ? rval : rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return result ;",
            "score": 99.36210123697917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lvalInt >> >> rvalInt ;",
            "score": 99.33702741350446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rvalInt = lvalInt >> rvalInt ;",
            "score": 99.3286491842831,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; case Token.URSH :",
            "score": 99.31443481445312,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> rvalInt >> rvalInt ;",
            "score": 99.26978478064903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> >> >> rvalInt ;",
            "score": 99.26789855957031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt << rvalInt ;",
            "score": 99.2594463641827,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> << >> rvalInt ; break ;",
            "score": 99.47881116365132,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt || >> rvalInt ;",
            "score": 99.42356962316177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int || >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval rvalInt ;",
            "score": 99.4007339477539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> & rvalInt ; }",
            "score": 99.36170111762152,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ ~ rvalInt ;",
            "score": 99.33553641183036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt << rvalInt ; break ;",
            "score": 99.32855224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> rvalInt ;",
            "score": 99.31380521334134,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) rvalInt << rvalInt ;",
            "score": 99.26964569091797,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; }",
            "score": 99.2583516438802,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> lvalInt ;",
            "score": 99.40046909877232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt >> ;",
            "score": 99.36159939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ >> rvalInt ;",
            "score": 99.33528645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt << rvalInt ; }",
            "score": 99.32762235753677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << rvalInt ;",
            "score": 99.31271362304688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'length') ; return n ;",
            "score": 99.26892852783203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '[].join()') ; return n ;",
            "score": 99.26892852783203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '') ; return n ;",
            "score": 99.26892852783203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'join') ; return n ;",
            "score": 99.26892852783203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'a') ; return n ;",
            "score": 99.26892852783203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> rvalInt ++ ;",
            "score": 99.361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> rval ;",
            "score": 99.33416748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> rval ;",
            "score": 99.31250939002403,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getType( ) , left ) ;",
            "score": 99.26860809326172,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getType( ) , left ) ;",
            "score": 99.26860809326172,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getType( ) , left ) ;",
            "score": 99.26860809326172,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getType( ) , left ) ;",
            "score": 99.26860809326172,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getType( ) , left ) ;",
            "score": 99.26860809326172,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt , right ) ;",
            "score": 99.26656668526786,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1rvalInt >> rvalInt ;",
            "score": 99.25721842447916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> : rvalInt >> >> >> >> rvalInt ;",
            "score": 99.476318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> : rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt && rvalInt ;",
            "score": 99.42167663574219,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int && rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt >>1;",
            "score": 99.36113823784723,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> >> rvalInt ;",
            "score": 99.33368791852679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt << rvalInt ;",
            "score": 99.31210327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> rvalInt ; break ;",
            "score": 99.26619175502232,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "check( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.2571551983173,
            "correctness": "uncompilable",
            "tokenized_patch": "check ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt <= rvalInt ;",
            "score": 99.42131805419922,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval rvalInt ;",
            "score": 99.39630998883929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & rvalInt ; }",
            "score": 99.36110552619485,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> rvalInt >> >> rvalInt ;",
            "score": 99.33306477864583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt << rvalInt ;",
            "score": 99.31140950520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "match( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "match ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt , rvalInt = lvalInt ;",
            "score": 99.2565185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int , rval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } if( result ==0)",
            "score": 99.47629266036184,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } if ( result == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt != >> rvalInt ;",
            "score": 99.4212417602539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int != >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> >> >> rvalInt ; }",
            "score": 99.3962761374081,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt >> >> rvalInt ;",
            "score": 99.36098225911458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt >> rvalInt ; break ;",
            "score": 99.32512664794922,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> >> rval ;",
            "score": 99.31097412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> << rvalInt ;",
            "score": 99.26326810396634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt ;",
            "score": 99.25636985085227,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1>> rvalInt >> rvalInt ;",
            "score": 99.41920471191406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; } else {",
            "score": 99.39604635799633,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt *rvalInt ;",
            "score": 99.33187662760416,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return lvalInt ;",
            "score": 99.32464958639706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rval ; break ;",
            "score": 99.3108379657452,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -- rvalInt >> rvalInt ;",
            "score": 99.25613606770834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int -- rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; if( result ==0)",
            "score": 99.47625411184211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; if ( result == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rvalInt -1;",
            "score": 99.41916232638889,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & rvalInt >> >> rvalInt ;",
            "score": 99.39569854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> & rvalInt ;",
            "score": 99.33108723958334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt << rvalInt >> rvalInt ;",
            "score": 99.32390280330883,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> >> rvalInt ;",
            "score": 99.31039428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt ; case Token.RSH :",
            "score": 99.2659423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; ; break ;",
            "score": 99.47600241268383,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >= rvalInt ;",
            "score": 99.41901397705078,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.39549255371094,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> >> >> >> rvalInt ;",
            "score": 99.35877990722656,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> rvalInt ; break ; }",
            "score": 99.32360121783088,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportError( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.26181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.2558837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval += FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> | rvalInt ; break ;",
            "score": 99.47584292763158,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rvalInt ; break ;",
            "score": 99.41864691840277,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt != rvalInt ;",
            "score": 99.39537138097427,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> << rvalInt ;",
            "score": 99.35845588235294,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt & rvalInt ) ;",
            "score": 99.32993861607143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int & rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rvalInt =( int ) rvalInt ;",
            "score": 99.32345581054688,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'length', right ) ;",
            "score": 99.26422526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '[].join()', right ) ;",
            "score": 99.26422526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '', right ) ;",
            "score": 99.26422526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'join', right ) ;",
            "score": 99.26422526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'a', right ) ;",
            "score": 99.26422526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> | rvalInt ; break ;",
            "score": 99.4750912314967,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt , rvalInt ;",
            "score": 99.41773986816406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int , rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; }",
            "score": 99.39488983154297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> >> >> rvalInt ; }",
            "score": 99.35769992404514,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt % >> rvalInt ;",
            "score": 99.32911173502605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int % >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt << rvalInt ; break ;",
            "score": 99.32330322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & left.getDouble( ) ;",
            "score": 99.30811360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & left . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( n.getCode( ) ) ;",
            "score": 99.2637710571289,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( n . get CaMeL Code ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval rvalInt ;",
            "score": 99.25808715820312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> | rvalInt ; break ;",
            "score": 99.47490491365132,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt != >> rvalInt ;",
            "score": 99.41761690027573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int != >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + lvalInt >> >> rvalInt ;",
            "score": 99.39371490478516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - >> rvalInt ; }",
            "score": 99.35736762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & ~ rvalInt ;",
            "score": 99.32907540457589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , null ) ;",
            "score": 99.26339721679688,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> >> rvalInt ; break ;",
            "score": 99.25788225446429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.25390625,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.1;",
            "score": 99.41635567801339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - lvalInt >> >> rvalInt ;",
            "score": 99.39341735839844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> rvalInt >> rvalInt ;",
            "score": 99.35678100585938,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> rvalInt ;",
            "score": 99.32713826497395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber =( int ) rvalInt << rvalInt ;",
            "score": 99.32184196920956,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && rvalInt >> rvalInt ;",
            "score": 99.2537841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt == rvalInt >> >> rvalInt ;",
            "score": 99.4162826538086,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int == rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt ; break ;",
            "score": 99.32637241908482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt << >> rvalInt ;",
            "score": 99.32108561197917,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.30767415364583,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "msg( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.26306915283203,
            "correctness": "uncompilable",
            "tokenized_patch": "msg ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) rval ;",
            "score": 99.25767211914062,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; break ; case Token.lval :",
            "score": 99.47403114720395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == rvalInt ; break ;",
            "score": 99.41612413194444,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> rvalInt >> >> rvalInt ;",
            "score": 99.35588522518383,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt != rvalInt ;",
            "score": 99.25147298177083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> >> rvalInt ;",
            "score": 99.47402056525735,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rvalInt :1;",
            "score": 99.41609022352431,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> lvalInt ; }",
            "score": 99.35537719726562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt ; break ;",
            "score": 99.32357352120536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> >> rvalInt ;",
            "score": 99.30597393329327,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> | rvalInt ;",
            "score": 99.47353946461396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt >> >> rvalInt ;",
            "score": 99.41466567095588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : rvalInt >> >> >> rvalInt ;",
            "score": 99.39015107996323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> <= rvalInt ;",
            "score": 99.32279146634616,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt << rvalInt ; break ;",
            "score": 99.32003580729166,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.30581868489584,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rvalInt >> rvalInt ;",
            "score": 99.26203918457031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt , newNumber ) ;",
            "score": 99.25489044189453,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += lvalInt >> rvalInt ;",
            "score": 99.25100473257211,
            "correctness": "wrong",
            "tokenized_patch": "result = lval += lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; break ; default : break ;",
            "score": 99.47343614366319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>1- rvalInt ;",
            "score": 99.41465928819444,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> 1 - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1/ rvalInt >> >> rvalInt ;",
            "score": 99.3223876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt << rvalInt ;",
            "score": 99.3057373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> >> rvalInt ; break ;",
            "score": 99.26198904854911,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.25439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << rvalInt >> >> rvalInt ; break ;",
            "score": 99.47335654810855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt >> rvalInt ; break ;",
            "score": 99.41395399305556,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> rvalInt ;",
            "score": 99.3220966045673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << lvalInt ; break ;",
            "score": 99.3199821920956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.26079852764423,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> << rvalInt ; break ;",
            "score": 99.47308670847039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt >> >> rvalInt ;",
            "score": 99.41383272058823,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval rvalInt >> >> rvalInt ;",
            "score": 99.38887293198529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt >> rvalInt ;",
            "score": 99.35452473958334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval ;",
            "score": 99.32144368489584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , this ) ;",
            "score": 99.26046987680289,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & >> >> rvalInt ; break ;",
            "score": 99.47208898207721,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>1;",
            "score": 99.38770470252403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> >> >> rvalInt ; }",
            "score": 99.35418023003473,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; break ;",
            "score": 99.31974283854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = rvalInt >> rvalInt ;",
            "score": 99.30423409598214,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt1;",
            "score": 99.25307992788461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt +( int ) rvalInt ;",
            "score": 99.24933733258929,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >1? rvalInt : rvalInt ; break ;",
            "score": 99.47190455386513,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > 1 ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ==1;",
            "score": 99.413330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int == 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.38734654017857,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ) result = lvalInt ;",
            "score": 99.35406853170956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ) result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getType( ) + 'length') ;",
            "score": 99.25897216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getType( ) + '[].join()') ;",
            "score": 99.25897216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getType( ) + '') ;",
            "score": 99.25897216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getType( ) + 'join') ;",
            "score": 99.25897216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getType( ) + 'a') ;",
            "score": 99.25897216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( left , newNumber ) ;",
            "score": 99.25151715959821,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( left , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || lvalInt >> rvalInt ;",
            "score": 99.24899088541666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> >> rvalInt ;",
            "score": 99.47186638327206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt - rvalInt ;",
            "score": 99.41317545572916,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : result ;",
            "score": 99.38675362723214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & lvalInt >> rvalInt ;",
            "score": 99.3530502319336,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return newNumber ;",
            "score": 99.31917572021484,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return new CaMeL Number ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt + rvalInt ;",
            "score": 99.31722005208333,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt rvalInt >> >> >> rvalInt ;",
            "score": 99.25032806396484,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.24872233072917,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> >> rval ; break ;",
            "score": 99.47144272748162,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt ;",
            "score": 99.3187744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt ; break ;",
            "score": 99.30279541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default ;",
            "score": 99.25823211669922,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) n.getDouble( ) ;",
            "score": 99.25019073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt ; break ;",
            "score": 99.24825345552884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; break ; default : break ;",
            "score": 99.47140984786184,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval , rvalInt >> rvalInt ;",
            "score": 99.41278754340277,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval , rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> lvalInt ; }",
            "score": 99.35251193576389,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?1: lvalInt ;",
            "score": 99.31464029947917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 1 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> rval ;",
            "score": 99.30187049278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ;",
            "score": 99.24806906960227,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> >> rvalInt ;",
            "score": 99.4713996438419,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.rvalInt ;",
            "score": 99.41238403320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt < rvalInt ;",
            "score": 99.38423426011029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.35184054904514,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "warn( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.25701141357422,
            "correctness": "uncompilable",
            "tokenized_patch": "warn ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new Token( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.24806315104166,
            "correctness": "uncompilable",
            "tokenized_patch": "return new Token ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt ; break ;",
            "score": 99.41232299804688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & >> >> rvalInt ;",
            "score": 99.3839340209961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt ; ;",
            "score": 99.3514763327206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt >> >> >> rvalInt ;",
            "score": 99.31787923177083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; default :",
            "score": 99.312255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt ;",
            "score": 99.301708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default",
            "score": 99.25602213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval << rvalInt ;",
            "score": 99.24800931490384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >> >> rval ; break ;",
            "score": 99.47067440257354,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - >> >> rvalInt ;",
            "score": 99.4119873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> rvalInt ; break ;",
            "score": 99.31189836774554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> >> >> rvalInt ;",
            "score": 99.30147611177884,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt ; break ;",
            "score": 99.24732317243304,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> & rvalInt ; break ;",
            "score": 99.4704654091283,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt , rvalInt >> >> rvalInt ;",
            "score": 99.41162872314453,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int , rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>1;",
            "score": 99.3169696514423,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> ^= rvalInt ;",
            "score": 99.31081918569711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ^= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt << >> rvalInt ;",
            "score": 99.3013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) ) ; return n ;",
            "score": 99.25530598958333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = lvalInt << rvalInt ;",
            "score": 99.24784029447116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rvalInt ; break ; default :",
            "score": 99.46973941200658,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lvalInt >> >> rvalInt ;",
            "score": 99.41130828857422,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return lvalInt ;",
            "score": 99.31600952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt ; ;",
            "score": 99.31029334435097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.25372314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "report ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> << >> rvalInt ; break ;",
            "score": 99.4693539268092,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt >> >> rvalInt ; }",
            "score": 99.35056559244792,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt >> >> rvalInt ;",
            "score": 99.31575520833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> >> >> rvalInt ;",
            "score": 99.30973597935268,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.30078125,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = rvalInt >> >> rvalInt ;",
            "score": 99.25323893229167,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + rvalInt >> >> rvalInt ;",
            "score": 99.24699183872768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt >> rvalInt ; break ;",
            "score": 99.24600219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt >> >> ;",
            "score": 99.35038926866319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?0: lvalInt ;",
            "score": 99.30911458333334,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & n.getLong( ) ;",
            "score": 99.29990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & n . get CaMeL Long ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( n.getName( ) ) ;",
            "score": 99.25225067138672,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> >> >> rvalInt ;",
            "score": 99.24667794363839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt >> >> rvalInt ; break ;",
            "score": 99.46763851768092,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt [ rvalInt ] ;",
            "score": 99.35019100413604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int [ rval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt << rvalInt ;",
            "score": 99.31552734375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> ~ >> >> rvalInt ;",
            "score": 99.30869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = right.getDouble( ) << rvalInt ;",
            "score": 99.2992431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = right . get CaMeL Double ( ) << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt =( int ) rvalInt ;",
            "score": 99.2522442157452,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt >> >> rvalInt ;",
            "score": 99.41084120008681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt ; }",
            "score": 99.35016741071429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> rvalInt ;",
            "score": 99.30833082932692,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt ;",
            "score": 99.29911295572917,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt : lvalInt ;",
            "score": 99.24490559895834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break",
            "score": 99.24375563401442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> rvalInt ; break ;",
            "score": 99.46682739257812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && rvalInt >> >> rvalInt ;",
            "score": 99.41071319580078,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> - rvalInt ;",
            "score": 99.3812614889706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt ;",
            "score": 99.31287841796875,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt + rvalInt ;",
            "score": 99.308251953125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return( int ) rvalInt << rvalInt ;",
            "score": 99.29909104567308,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw( SHIFT_AMOUNT_OUT_OF_BOUNDS , right ) ;",
            "score": 99.25215148925781,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; ;",
            "score": 99.24209798177084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> & rvalInt ; break ;",
            "score": 99.46649528952206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rvalInt ) ;",
            "score": 99.41065131293402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt / >> rval ;",
            "score": 99.30813162667411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> >> rvalInt ; break ;",
            "score": 99.29885428292411,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getType( ) , right ) ;",
            "score": 99.25167083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getType( ) , right ) ;",
            "score": 99.25167083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getType( ) , right ) ;",
            "score": 99.25167083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getType( ) , right ) ;",
            "score": 99.25167083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getType( ) , right ) ;",
            "score": 99.25167083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ?1:1; break ;",
            "score": 99.46617024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval ) ;",
            "score": 99.40901947021484,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - >> >> rvalInt ;",
            "score": 99.38035673253677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return lval ;",
            "score": 99.3117446899414,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + lvalInt >> >> rvalInt ;",
            "score": 99.30734688895089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( error( FRACTIONAL_BITWISE_OPERAND , right ) )",
            "score": 99.25148111979166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt +( int ) lvalInt ;",
            "score": 99.24413190569196,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + ( int ) lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval ) - rvalInt ;",
            "score": 99.40900065104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ) result = lvalInt ;",
            "score": 99.34867589613971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ) result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> rvalInt ;",
            "score": 99.30912642045455,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> >> >> rvalInt ;",
            "score": 99.30695452008929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> rvalInt ; break ;",
            "score": 99.29776436941964,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ this + 'length') ;",
            "score": 99.25056675502232,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ this + '[].join()') ;",
            "score": 99.25056675502232,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ this + '') ;",
            "score": 99.25056675502232,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ this + 'join') ;",
            "score": 99.25056675502232,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ this + 'a') ;",
            "score": 99.25056675502232,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; if( result ==0)",
            "score": 99.46560329861111,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; if ( result == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> - lvalInt ;",
            "score": 99.37936401367188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt *rvalInt ;",
            "score": 99.34788602941177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = = lvalInt >> >> rvalInt ;",
            "score": 99.30684720552884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = lvalInt << rvalInt ;",
            "score": 99.29731968470982,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> rvalInt ;",
            "score": 99.25021023220486,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> rvalInt >> rvalInt ;",
            "score": 99.242529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ result ) ;",
            "score": 99.23975626627605,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ result ) ;",
            "score": 99.23975626627605,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ result ) ;",
            "score": 99.23975626627605,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ result ) ;",
            "score": 99.23975626627605,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ result ) ;",
            "score": 99.23975626627605,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt : rvalInt ;",
            "score": 99.4077507467831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> lvalInt ; }",
            "score": 99.34746636284723,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( int ) rvalInt ;",
            "score": 99.30836704799107,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt | >> rvalInt ;",
            "score": 99.3062744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; break ; }",
            "score": 99.29693196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default ;",
            "score": 99.24911295572916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt :1;",
            "score": 99.40768771701389,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.37916475183823,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt / >> rval ;",
            "score": 99.305859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.46371799045139,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt & >> rvalInt ;",
            "score": 99.3472900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> >> >> rvalInt ) ;",
            "score": 99.30575997488839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> rval ;",
            "score": 99.29430213341347,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.error( 'length'+ n.getType( ) ) ;",
            "score": 99.24870300292969,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.error( '[].join()'+ n.getType( ) ) ;",
            "score": 99.24870300292969,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.error( ''+ n.getType( ) ) ;",
            "score": 99.24870300292969,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.error( 'join'+ n.getType( ) ) ;",
            "score": 99.24870300292969,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.error( 'a'+ n.getType( ) ) ;",
            "score": 99.24870300292969,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . error ( $STRING$ + n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt << rvalInt ;",
            "score": 99.2418212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break.",
            "score": 99.23917061941964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.46341281467014,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.37758501838235,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.34698127297794,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ) ;",
            "score": 99.30255596454327,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = lvalInt >> rvalInt ;",
            "score": 99.29413713727679,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt ; case Token.RSH :",
            "score": 99.24864959716797,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt << rvalInt ;",
            "score": 99.24179909446023,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> >> rvalInt ;",
            "score": 99.23790631975446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> & rvalInt ; break ;",
            "score": 99.46322292751736,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ; break ; }",
            "score": 99.40686848958333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - >> rvalInt ; }",
            "score": 99.34689510569854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt : rvalInt ;",
            "score": 99.30359700520833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; count ++ ;",
            "score": 99.3021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; count ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> rval ;",
            "score": 99.2938944498698,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.24860026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt >> rvalInt ;",
            "score": 99.40686753216912,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & rvalInt ; }",
            "score": 99.34671020507812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) ; break ; case Token.rval :",
            "score": 99.30148111979166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) ; break ; case Token . rval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right + right ) ;",
            "score": 99.24851888020834,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : result ;",
            "score": 99.2410137469952,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> rvalInt ; break ; case ;",
            "score": 99.46267218338816,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> >> rvalInt ; }",
            "score": 99.34651692708333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << n.getLong( ) ;",
            "score": 99.30298665364583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << n . get CaMeL Long ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt & >> rvalInt ) ;",
            "score": 99.30015462239584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int & >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt ;",
            "score": 99.24839274088542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt >> rvalInt ; break ;",
            "score": 99.236962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> rvalInt ; }",
            "score": 99.34650065104167,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> == rvalInt ;",
            "score": 99.29988919771634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt :1;",
            "score": 99.40648696001838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & lvalInt >> >> rvalInt ;",
            "score": 99.37282427619485,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int )( rvalInt << rvalInt ) ;",
            "score": 99.30225372314453,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) ( rval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >= >> >> rvalInt ;",
            "score": 99.29976712740384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.replaceChild( n , newNumber ) ;",
            "score": 99.29210553850446,
            "correctness": "uncompilable",
            "tokenized_patch": "state . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.24763706752232,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> rvalInt ; break ;",
            "score": 99.23496907552084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; break ; default :",
            "score": 99.46129086143092,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt + rvalInt ;",
            "score": 99.40641954210069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> lvalInt ;",
            "score": 99.37232462565105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt( lvalInt ) ) ;",
            "score": 99.34339096966912,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int ( lval CaMeL Int ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.30194091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ^ rvalInt ;",
            "score": 99.298388671875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ^ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "logger.Error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.24690755208333,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return tryFoldShift( n , newNumber ) ;",
            "score": 99.23414713541666,
            "correctness": "uncompilable",
            "tokenized_patch": "return try CaMeL Fold CaMeL Shift ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt : >> >> rvalInt ; break ;",
            "score": 99.46075760690789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int : >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt.) ;",
            "score": 99.40616861979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> >> rvalInt ;",
            "score": 99.37105887276786,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?0:0; break ;",
            "score": 99.2982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 0 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt ; break ;",
            "score": 99.29195462740384,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + rvalInt >> rvalInt ;",
            "score": 99.23695725661058,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int( lvalInt >> rvalInt ) ;",
            "score": 99.233984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ? lvalInt : rvalInt ; break ;",
            "score": 99.46046849300987,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval ? lval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> | rvalInt ;",
            "score": 99.2962646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , this ) ;",
            "score": 99.24606323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.236865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> >> rvalInt ; break ;",
            "score": 99.2332763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt / rvalInt ;",
            "score": 99.29625651041667,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "rvalInt = lvalInt >> rvalInt ;",
            "score": 99.24520169771634,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=0? lvalInt : rvalInt ; break ;",
            "score": 99.45778937088816,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != 0 ? lval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval2>> rvalInt ;",
            "score": 99.40570475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval3>> rvalInt ;",
            "score": 99.40570475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval10>> rvalInt ;",
            "score": 99.40570475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval6>> rvalInt ;",
            "score": 99.40570475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval32>> rvalInt ;",
            "score": 99.40570475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & lvalInt >> >> rvalInt ;",
            "score": 99.36935424804688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?1: lvalInt ;",
            "score": 99.2959228515625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 1 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval ;",
            "score": 99.2917010967548,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.23257446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> >> >> rvalInt ;",
            "score": 99.45618393841912,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.36917114257812,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >= rvalInt ;",
            "score": 99.34311810661765,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << lvalInt << rvalInt ;",
            "score": 99.29947102864584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >= rvalInt ;",
            "score": 99.2958272298177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.29153645833334,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , left ;",
            "score": 99.24430338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , left ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt1;",
            "score": 99.2320048014323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt ; break ; default : break ;",
            "score": 99.45607396175987,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval rvalInt >> >> rvalInt ;",
            "score": 99.3680778952206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0*rvalInt >> >> rvalInt ;",
            "score": 99.29571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 * rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> | rvalInt ;",
            "score": 99.2914569561298,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.RSH : result = lvalInt ;",
            "score": 99.24412318638393,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . RSH : result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ;",
            "score": 99.23166910807292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval - rvalInt ;",
            "score": 99.4031982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left , n ) ;",
            "score": 99.24375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + lvalInt ; break ;",
            "score": 99.2361309344952,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.4553158408717,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> rvalInt ;",
            "score": 99.36769612630208,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber >> rvalInt << rvalInt ;",
            "score": 99.298681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt / >> rval ;",
            "score": 99.29511369977679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j : result = lvalInt >> >> rvalInt ;",
            "score": 99.23521205357143,
            "correctness": "uncompilable",
            "tokenized_patch": "j : result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = rvalInt >> rvalInt ; break ;",
            "score": 99.23124186197917,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt > rvalInt >> rvalInt ;",
            "score": 99.40185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int > rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & >> >> rvalInt ;",
            "score": 99.36738855698529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.34086339613971,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ rvalInt , right ) ;",
            "score": 99.29852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ rvalInt , right ) ;",
            "score": 99.29852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ rvalInt , right ) ;",
            "score": 99.29852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ rvalInt , right ) ;",
            "score": 99.29852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ rvalInt , right ) ;",
            "score": 99.29852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt >> >> rvalInt ;",
            "score": 99.29461669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right ) ; break ;",
            "score": 99.2427001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> ; break ;",
            "score": 99.2298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >= rvalInt ;",
            "score": 99.34018841911765,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt >> rvalInt ;",
            "score": 99.29412372295673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.newNumber = lvalInt >> rvalInt ;",
            "score": 99.24239908854166,
            "correctness": "uncompilable",
            "tokenized_patch": "this . new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result >> >> rvalInt ;",
            "score": 99.22899627685547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> : rvalInt >> rvalInt ; break ;",
            "score": 99.45377390008224,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> : rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> >> >> rvalInt ;",
            "score": 99.36647135416666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ lvalInt ) ;",
            "score": 99.29811314174107,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ lvalInt ) ;",
            "score": 99.29811314174107,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ lvalInt ) ;",
            "score": 99.29811314174107,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ lvalInt ) ;",
            "score": 99.29811314174107,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ lvalInt ) ;",
            "score": 99.29811314174107,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *>> rvalInt >> >> rvalInt ;",
            "score": 99.29407552083333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Node.newNumber( result ) ;",
            "score": 99.28840775923295,
            "correctness": "uncompilable",
            "tokenized_patch": "return Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length') ;",
            "score": 99.24132690429687,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()') ;",
            "score": 99.24132690429687,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '') ;",
            "score": 99.24132690429687,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join') ;",
            "score": 99.24132690429687,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a') ;",
            "score": 99.24132690429687,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt ;",
            "score": 99.23389781605114,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> -- rvalInt ; break ;",
            "score": 99.45343338815789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> -- rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - lvalInt >> >> >> rvalInt ;",
            "score": 99.36614631204044,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; System.",
            "score": 99.29791259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt ; break ;",
            "score": 99.2933819110577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = rvalInt << >> rvalInt ;",
            "score": 99.28811848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> << rvalInt ; break ;",
            "score": 99.22823079427083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt ; break ;",
            "score": 99.4529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt ) ;",
            "score": 99.40024701286765,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> - lvalInt ;",
            "score": 99.36607142857143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber(( int ) rvalInt ) ;",
            "score": 99.29676106770833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0? rval : lvalInt ;",
            "score": 99.29276529947917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? rval : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( !( rval >=0&& rvalInt != rval ) )",
            "score": 99.24073791503906,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval CaMeL Int != rval ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.45221268503289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( rvalInt >> >> rvalInt ) ;",
            "score": 99.4002326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( rval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.36551920572917,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ; return result ;",
            "score": 99.33785574776786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , left ) ;",
            "score": 99.29658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ] ;",
            "score": 99.292236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1; break ; case Token.RSH :",
            "score": 99.24072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 1 ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> rvalInt ; break ; default :",
            "score": 99.45035593133224,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt = lvalInt >> >> >> rvalInt ;",
            "score": 99.36493997012867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt << rvalInt ;",
            "score": 99.2955078125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt < >> >> >> rvalInt ;",
            "score": 99.29173060825893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right + lvalInt ;",
            "score": 99.24059295654297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; break ; case ;",
            "score": 99.44993681066177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt || >> rvalInt ;",
            "score": 99.39881896972656,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int || >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default",
            "score": 99.29478236607143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ?0: lvalInt ;",
            "score": 99.2916015625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right == rvalInt ;",
            "score": 99.22647094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> && rvalInt & rvalInt ; break ;",
            "score": 99.44924444901316,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> && rval CaMeL Int & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt - rvalInt ;",
            "score": 99.39816463694854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.36363983154297,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> >> rvalInt ; }",
            "score": 99.33735926011029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt << >> rvalInt ;",
            "score": 99.29454752604167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> rvalInt >> >> rvalInt ;",
            "score": 99.29156901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.28656005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.replaceChild( n , newNumber ) ;",
            "score": 99.23811558314732,
            "correctness": "uncompilable",
            "tokenized_patch": "super . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? lvalInt >> >> rvalInt ;",
            "score": 99.22593688964844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> rvalInt ; break ; case ;",
            "score": 99.44887966579861,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : >> >> rvalInt ;",
            "score": 99.39639102711396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | lvalInt >> >> rvalInt ;",
            "score": 99.36285400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >>2;",
            "score": 99.3360236672794,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >>3;",
            "score": 99.3360236672794,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >>10;",
            "score": 99.3360236672794,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >>6;",
            "score": 99.3360236672794,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >>32;",
            "score": 99.3360236672794,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval( lvalInt *rvalInt ) ;",
            "score": 99.29094587053571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int * rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> rval ;",
            "score": 99.28616536458334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right ; break ;",
            "score": 99.23618861607143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - rvalInt >> >> >> rvalInt ;",
            "score": 99.2322021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , left ,",
            "score": 99.22586822509766,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> >> >> rvalInt ; break ;",
            "score": 99.44867302389706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt == >> rvalInt ;",
            "score": 99.39634704589844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> >> rvalInt ;",
            "score": 99.36249248798077,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) { result = lvalInt >> >> rvalInt ;",
            "score": 99.33559283088235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false ) { result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> rvalInt ; }",
            "score": 99.29342651367188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?0:0; break ;",
            "score": 99.29093424479167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 0 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rvalInt ) {",
            "score": 99.28598022460938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , false ) ;",
            "score": 99.23574594350961,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.44723992598684,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> >> >> >> rvalInt ;",
            "score": 99.36202239990234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> *rvalInt ;",
            "score": 99.29322052001953,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; ;",
            "score": 99.2903301532452,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt >> >> rvalInt ;",
            "score": 99.28550211588542,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> Math.rvalInt ;",
            "score": 99.23121861049107,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> Math . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> >> >> rvalInt ; break ;",
            "score": 99.44679888556985,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt >> rvalInt ;",
            "score": 99.39595540364583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> rvalInt ; break ;",
            "score": 99.29317533052884,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> >> >> rvalInt ;",
            "score": 99.28929850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? lvalInt & rvalInt ;",
            "score": 99.23050944010417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> rvalInt ; break ;",
            "score": 99.44644504123264,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1>> rvalInt >> >> rvalInt ;",
            "score": 99.3956298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt rvalInt ;",
            "score": 99.33499145507812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.284228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt ; case Token.URSH :",
            "score": 99.23438262939453,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = lvalInt >> rvalInt ; break ;",
            "score": 99.2302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval - rvalInt ;",
            "score": 99.22458120492789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > lval ? rvalInt : rvalInt ; break ;",
            "score": 99.44441303453948,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > lval ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.- rvalInt ;",
            "score": 99.39541446461396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> rvalInt ; }",
            "score": 99.33415004185268,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt / >> rvalInt ) ;",
            "score": 99.28866373697916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int / >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , lval ) ;",
            "score": 99.23429870605469,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ? rvalInt ;",
            "score": 99.22982584635416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , right ,",
            "score": 99.22443389892578,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & rvalInt ; break ;",
            "score": 99.44424777560764,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt || lvalInt ;",
            "score": 99.39474487304688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << rvalInt >> >> rvalInt ;",
            "score": 99.29095458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ^ >> rvalInt ;",
            "score": 99.28850446428571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ^ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = lvalInt << >> rvalInt ;",
            "score": 99.28369954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.replaceChild( result , newNumber ) ;",
            "score": 99.23412214006696,
            "correctness": "uncompilable",
            "tokenized_patch": "this . replace CaMeL Child ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt >> rvalInt ; break ;",
            "score": 99.22902134486607,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> <=1; break ;",
            "score": 99.4439338235294,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> <= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( rvalInt >> rvalInt ) ;",
            "score": 99.3940200805664,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> rvalInt >> rvalInt ;",
            "score": 99.33295754825367,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) n.getDouble( ) ;",
            "score": 99.29078020368304,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) n . get CaMeL Double ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> & >> rvalInt ;",
            "score": 99.28801618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt << rvalInt ;",
            "score": 99.28363444010417,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'length', n ) ;",
            "score": 99.23274739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '[].join()', n ) ;",
            "score": 99.23274739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , '', n ) ;",
            "score": 99.23274739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'join', n ) ;",
            "score": 99.23274739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , 'a', n ) ;",
            "score": 99.23274739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( int ) rvalInt ;",
            "score": 99.22893880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> >> rval ; break ;",
            "score": 99.4429069967831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ) ;",
            "score": 99.39347076416016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int lvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.35904693603516,
            "correctness": "uncompilable",
            "tokenized_patch": "final int lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt << rvalInt ;",
            "score": 99.2828857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case Token.LSH : result = lvalInt >> rvalInt ;",
            "score": 99.2326431274414,
            "correctness": "uncompilable",
            "tokenized_patch": "case Token . LSH : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> | rvalInt ; break ;",
            "score": 99.44281005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt + >> rvalInt ;",
            "score": 99.39231962316177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; System.",
            "score": 99.28965407151442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt & rvalInt >> >> rvalInt ;",
            "score": 99.28545735677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lvalInt >> rvalInt ;",
            "score": 99.22822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> rval ; break ;",
            "score": 99.44266764322917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt == rvalInt ;",
            "score": 99.39182942708334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & rvalInt >> >> >> rvalInt ;",
            "score": 99.35800350413604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt >> >> >> rvalInt ;",
            "score": 99.33098602294922,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; return newNumber ;",
            "score": 99.28929138183594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; return new CaMeL Number ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; default :",
            "score": 99.28463309151786,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt << rvalInt ; break ; }",
            "score": 99.28221028645834,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int << rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> *rvalInt ;",
            "score": 99.2277362530048,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "init( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.21950120192308,
            "correctness": "uncompilable",
            "tokenized_patch": "init ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; break ;",
            "score": 99.44223257211539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt / >> rvalInt ;",
            "score": 99.2838134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt >> >> >> rvalInt ;",
            "score": 99.28199869791666,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) lvalInt ;",
            "score": 99.22757662259616,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + rvalInt >> >> >> rvalInt ; break ;",
            "score": 99.44220329733456,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + rval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt ++ ;",
            "score": 99.32968319163604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> - rvalInt ;",
            "score": 99.28852844238281,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval *lvalInt >> >> >> rvalInt ;",
            "score": 99.2828369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.23112487792969,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( lvalInt >> rval ) ;",
            "score": 99.22594401041667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( lval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result ;",
            "score": 99.21934925426136,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> rvalInt ; }",
            "score": 99.39131433823529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>1;",
            "score": 99.35743297230114,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ) { return result ; } else",
            "score": 99.3293098000919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ) { return result ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; }",
            "score": 99.28827373798077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.280517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , true ) ;",
            "score": 99.23047637939453,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> >> rval ; break ;",
            "score": 99.44119083180146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( >> rvalInt ) ;",
            "score": 99.391162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> : rvalInt ;",
            "score": 99.35723005022321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >=0? lvalInt : rvalInt ;",
            "score": 99.32920927159927,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >= 0 ? lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?1:0; break ;",
            "score": 99.2822998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt << >> rvalInt ;",
            "score": 99.28037923177084,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ lvalInt + 'length') ;",
            "score": 99.23046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ lvalInt + '[].join()') ;",
            "score": 99.23046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ lvalInt + '') ;",
            "score": 99.23046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ lvalInt + 'join') ;",
            "score": 99.23046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ lvalInt + 'a') ;",
            "score": 99.23046875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1<< rvalInt ;",
            "score": 99.22548421223958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ? rvalInt : rvalInt ; break ;",
            "score": 99.44040398848684,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt *>> rvalInt ;",
            "score": 99.3911491842831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.35714901194854,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - rvalInt ; }",
            "score": 99.3291244506836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'length'+ rvalInt ) ;",
            "score": 99.28696986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '[].join()'+ rvalInt ) ;",
            "score": 99.28696986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ''+ rvalInt ) ;",
            "score": 99.28696986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'join'+ rvalInt ) ;",
            "score": 99.28696986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'a'+ rvalInt ) ;",
            "score": 99.28696986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> ~ rvalInt ;",
            "score": 99.28208571213942,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt >> rvalInt ;",
            "score": 99.28026404747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert newNumber( n.getType( ) ) ;",
            "score": 99.22996419270834,
            "correctness": "uncompilable",
            "tokenized_patch": "assert new CaMeL Number ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> >> >> rvalInt ;",
            "score": 99.21868896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1>> rvalInt >> >> rvalInt ;",
            "score": 99.3909912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 1 >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval >> >> rvalInt ;",
            "score": 99.35650634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return 0;",
            "score": 99.32798665364584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt / >> rval ;",
            "score": 99.28155924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ) ; throw n ;",
            "score": 99.2295150756836,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ; throw n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != lvalInt ;",
            "score": 99.22455388849431,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt >> rvalInt ;",
            "score": 99.38986385569854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - lvalInt >> rvalInt ;",
            "score": 99.32794596354167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <<( int ) rvalInt ; break ;",
            "score": 99.28661346435547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << ( int ) rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rvalInt ; ;",
            "score": 99.28138146033653,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << >> rvalInt ;",
            "score": 99.27960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Throwable( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.22855631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Throwable ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , break ;",
            "score": 99.21795654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt : >> rvalInt ;",
            "score": 99.38984680175781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>1;",
            "score": 99.35476248604911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt , lvalInt ) ;",
            "score": 99.3279037475586,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int , lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return ;",
            "score": 99.28628743489584,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = left.getDouble( ) << rvalInt ;",
            "score": 99.27904459635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = left . get CaMeL Double ( ) << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , null ) ; return n ;",
            "score": 99.22836303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , null ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != rvalInt << rvalInt ;",
            "score": 99.22285970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.21678161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >1? lvalInt : rvalInt ; break ;",
            "score": 99.43889417146382,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > 1 ? lval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.35440063476562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt >> >> rvalInt ) ;",
            "score": 99.32770134420956,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> >> >> rvalInt ;",
            "score": 99.28046526227679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> rvalInt ;",
            "score": 99.2788418856534,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> rvalInt ; break ; case Token.RSH :",
            "score": 99.22793579101562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> rval CaMeL Int ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) lvalInt ;",
            "score": 99.21591186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : >> rvalInt ; }",
            "score": 99.32514504825367,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt + >> rvalInt ) ;",
            "score": 99.28038736979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int + >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ; break ;",
            "score": 99.27875162760417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> lvalInt ;",
            "score": 99.222265625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >>( rvalInt ) ; break ;",
            "score": 99.21514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( rval CaMeL Int ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> ==1; break ;",
            "score": 99.43671013327206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> == 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rvalInt.",
            "score": 99.38893127441406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt / rvalInt ;",
            "score": 99.27999674479166,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "{ result = lvalInt << >> rvalInt ;",
            "score": 99.27862079326923,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new Exception( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.22698567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Exception ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> | rvalInt ; break ;",
            "score": 99.43670295266544,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + lvalInt >> >> >> rvalInt ;",
            "score": 99.35244571461396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getType( ) == Token.RSH )",
            "score": 99.27840169270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . RSH )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "err( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.2269756610577,
            "correctness": "uncompilable",
            "tokenized_patch": "err ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.38770249310662,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> - lvalInt ;",
            "score": 99.3523681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> >> rvalInt ; }",
            "score": 99.32453155517578,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber >> rvalInt >> >> rvalInt ;",
            "score": 99.28282165527344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt , lvalInt ) ;",
            "score": 99.27941022600446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int , lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt ; case Token.URSH :",
            "score": 99.27650960286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? lvalInt + rvalInt ;",
            "score": 99.2192626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? lval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >0? rvalInt : rvalInt ; break ;",
            "score": 99.43610582853618,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > 0 ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt ;",
            "score": 99.38722534179688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - lvalInt ;",
            "score": 99.35178444602273,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( lvalInt == lvalInt ) { return result ; } else",
            "score": 99.32413976332721,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ) { return result ; } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt =( int ) rvalInt << rvalInt ;",
            "score": 99.28237915039062,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = ( int ) rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) ; break ; case Token.lval :",
            "score": 99.2790283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.getDouble( ) << rvalInt ;",
            "score": 99.27582194010417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . get CaMeL Double ( ) << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left , left ) ;",
            "score": 99.2268310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) n ? lvalInt >> >> rvalInt ;",
            "score": 99.21089935302734,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) n ? lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> << rvalInt ; break ;",
            "score": 99.43574075137867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>0rvalInt ;",
            "score": 99.38690185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> 0 rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt << >> rvalInt ;",
            "score": 99.2821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2/ rvalInt >> >> rvalInt ;",
            "score": 99.27887369791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3/ rvalInt >> >> rvalInt ;",
            "score": 99.27887369791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10/ rvalInt >> >> rvalInt ;",
            "score": 99.27887369791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6/ rvalInt >> >> rvalInt ;",
            "score": 99.27887369791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32/ rvalInt >> >> rvalInt ;",
            "score": 99.27887369791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & n.getType( ) ;",
            "score": 99.2756591796875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & n . get CaMeL Type ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.class , n ) ;",
            "score": 99.22547149658203,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.class , n ) ;",
            "score": 99.22547149658203,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.class , n ) ;",
            "score": 99.22547149658203,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.class , n ) ;",
            "score": 99.22547149658203,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.class , n ) ;",
            "score": 99.22547149658203,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . class , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : lvalInt << rvalInt ;",
            "score": 99.2184326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt >> rvalInt ; break ;",
            "score": 99.43502004523026,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt - lvalInt ;",
            "score": 99.38666534423828,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt + rvalInt ) ;",
            "score": 99.27869524274554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt >> rvalInt ;",
            "score": 99.27534993489583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = right.getDouble( ) >> rvalInt ;",
            "score": 99.22447916666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = right . get CaMeL Double ( ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rvalInt ) { return n ;",
            "score": 99.218115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval CaMeL Int ) { return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval rvalInt >> rvalInt ;",
            "score": 99.2105484008789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt ; break ; case ;",
            "score": 99.43492934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt - rvalInt ;",
            "score": 99.3864974975586,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt - lvalInt ;",
            "score": 99.35107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << right.getDouble( ) ;",
            "score": 99.2814697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << right . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> rvalInt ; break ;",
            "score": 99.27790178571429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , true ) ;",
            "score": 99.22438401442308,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> || rvalInt & rvalInt ; break ;",
            "score": 99.4344546669408,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> || rval CaMeL Int & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= rvalInt >> rvalInt ;",
            "score": 99.38631184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> rvalInt ; } else {",
            "score": 99.35038488051471,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> rval CaMeL Int ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >= rvalInt ;",
            "score": 99.32212727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int >> rvalInt >> rvalInt ;",
            "score": 99.28144182477679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber = Node.newNumber( result ) ;",
            "score": 99.22435709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && rvalInt != rvalInt ;",
            "score": 99.217724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>1;",
            "score": 99.38602992466518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt : lvalInt ;",
            "score": 99.34913635253906,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> rvalInt ; } finally {",
            "score": 99.32158346737133,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> rval CaMeL Int ; } finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << rvalInt ; }",
            "score": 99.28121185302734,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt rvalInt ;",
            "score": 99.27640206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getName( ) ) ;",
            "score": 99.22321428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getName( ) ) ;",
            "score": 99.22321428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getName( ) ) ;",
            "score": 99.22321428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getName( ) ) ;",
            "score": 99.22321428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getName( ) ) ;",
            "score": 99.22321428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> rvalInt ;",
            "score": 99.21767171223958,
            "correctness": "wrong",
            "tokenized_patch": "result = - rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> rvalInt ; break ;",
            "score": 99.43416341145833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ? >> rvalInt ;",
            "score": 99.38556985294117,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ? >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt == lval ) ;",
            "score": 99.34868621826172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int == lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt << lvalInt ;",
            "score": 99.28009796142578,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int << lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rvalInt ; }",
            "score": 99.27605731670673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.27366420200893,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt ; break ; case Token.RSH :",
            "score": 99.22314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int ; break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( int ) lvalInt ;",
            "score": 99.21715494791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Token( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.20824432373047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Token ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ? rvalInt : rvalInt ;",
            "score": 99.43413342927632,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ? rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt.- rvalInt ;",
            "score": 99.38548278808594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'length'+ lvalInt ) ;",
            "score": 99.32018280029297,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '[].join()'+ lvalInt ) ;",
            "score": 99.32018280029297,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( ''+ lvalInt ) ;",
            "score": 99.32018280029297,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'join'+ lvalInt ) ;",
            "score": 99.32018280029297,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'a'+ lvalInt ) ;",
            "score": 99.32018280029297,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt ; break ;",
            "score": 99.28000895182292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> >> rvalInt ;",
            "score": 99.27596341646634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.newNumber = lvalInt << rvalInt ;",
            "score": 99.22306315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "this . new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result result = lvalInt >> >> >> rvalInt ;",
            "score": 99.21673583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.20794270833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> >> rvalInt ; break ;",
            "score": 99.43372938368056,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt & >> rvalInt ;",
            "score": 99.34853228400735,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw println( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.22275216238839,
            "correctness": "uncompilable",
            "tokenized_patch": "throw println ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> rvalInt ; break ; case ;",
            "score": 99.4336001747533,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1- rvalInt ;",
            "score": 99.38516671316964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> >> rvalInt ;",
            "score": 99.27964274088542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt *>> rvalInt ) ;",
            "score": 99.27565104166666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int * >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> >> rval ;",
            "score": 99.2732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lval , newNumber ) ;",
            "score": 99.20741489955357,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=0? rvalInt : rvalInt ; break ;",
            "score": 99.43357447574013,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != 0 ? rval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> lvalInt ;",
            "score": 99.3848388671875,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? rvalInt ; }",
            "score": 99.31880457261029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> ^ rvalInt ;",
            "score": 99.27547513521634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; continue ;",
            "score": 99.27311197916667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = rvalInt >> rvalInt ; break ;",
            "score": 99.2222900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval , rvalInt = lvalInt ;",
            "score": 99.21507850060097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval , rval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval >> >> >> rvalInt ; break ;",
            "score": 99.43350040211396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> rvalInt >> rvalInt ;",
            "score": 99.31877136230469,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ rvalInt ; ;",
            "score": 99.27537318638393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt | rvalInt ;",
            "score": 99.27303873697916,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> rvalInt ; break ;",
            "score": 99.43251546223958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt > rvalInt ;",
            "score": 99.3845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> : rvalInt >> >> rvalInt ;",
            "score": 99.3451789407169,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> : rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt >> >> >> rvalInt ;",
            "score": 99.31817267922794,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >> rvalInt >> rvalInt ;",
            "score": 99.27827671595982,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> ~ >> rvalInt ;",
            "score": 99.27512032645089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> ~ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> >> >> rval ;",
            "score": 99.27293178013393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right ) ; return n ;",
            "score": 99.22168731689453,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt [ n.getDouble( ) ;",
            "score": 99.21481119791666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int [ n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt >> >> >> rvalInt ;",
            "score": 99.20639038085938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ; }",
            "score": 99.38353553185097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ; ;",
            "score": 99.27726745605469,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "buf = lvalInt >> >> >> rvalInt ;",
            "score": 99.2725360576923,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.38318684895833,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> lval rvalInt ;",
            "score": 99.34471938189338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; else return n ;",
            "score": 99.27701568603516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; else return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> rvalInt ;",
            "score": 99.27180989583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.22095540364583,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt + lvalInt ;",
            "score": 99.21449381510416,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "newNumber = lvalInt >> >> rvalInt ; break ;",
            "score": 99.20533752441406,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >=1; break ;",
            "score": 99.43004557291667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rval ) ;",
            "score": 99.38255208333334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> & rvalInt ;",
            "score": 99.27439528245192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; break ; default :",
            "score": 99.2208251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) { break ;",
            "score": 99.21343994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >1; break ;",
            "score": 99.4294792624081,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> > 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt1>> rvalInt ;",
            "score": 99.381591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - >> rvalInt ;",
            "score": 99.34419468470982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'length'+ lvalInt ) ;",
            "score": 99.31744384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '[].join()'+ lvalInt ) ;",
            "score": 99.31744384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ''+ lvalInt ) ;",
            "score": 99.31744384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'join'+ lvalInt ) ;",
            "score": 99.31744384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'a'+ lvalInt ) ;",
            "score": 99.31744384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( lvalInt << rvalInt ) ;",
            "score": 99.27619171142578,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( lval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return this ;",
            "score": 99.22068786621094,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return this ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt - rvalInt ;",
            "score": 99.2131591796875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt > >> rvalInt : rvalInt ;",
            "score": 99.38095092773438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt == rvalInt ;",
            "score": 99.34405158547794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval >> rvalInt >> rvalInt ;",
            "score": 99.31740435431985,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,( int ) rval ) ;",
            "score": 99.27598571777344,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , ( int ) rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> >> rvalInt ;",
            "score": 99.2740009014423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "log( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.22059044471153,
            "correctness": "uncompilable",
            "tokenized_patch": "log ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += lvalInt >> >> rvalInt ;",
            "score": 99.21315220424107,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval += lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getRuntime( ) ) ;",
            "score": 99.203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Runtime ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> <1; break ;",
            "score": 99.42878992417279,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> < 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( >> rvalInt ) ;",
            "score": 99.38093566894531,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int rvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.34396362304688,
            "correctness": "uncompilable",
            "tokenized_patch": "final int rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> rvalInt >> >> rvalInt ;",
            "score": 99.31714585248162,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ? rvalInt ;",
            "score": 99.26961263020833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = lvalInt >> rvalInt ;",
            "score": 99.21293501420455,
            "correctness": "uncompilable",
            "tokenized_patch": "i = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getRuntime( ) , 'length') ;",
            "score": 99.20286560058594,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Runtime ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getRuntime( ) , '[].join()') ;",
            "score": 99.20286560058594,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Runtime ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getRuntime( ) , '') ;",
            "score": 99.20286560058594,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Runtime ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getRuntime( ) , 'join') ;",
            "score": 99.20286560058594,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Runtime ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getRuntime( ) , 'a') ;",
            "score": 99.20286560058594,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Runtime ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || >> rvalInt >> rvalInt ;",
            "score": 99.3808822631836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt - rvalInt ;",
            "score": 99.34354894301471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ) ; return null ;",
            "score": 99.27547454833984,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ; return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ n.getType( ) , n ) ;",
            "score": 99.22010040283203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ n.getType( ) , n ) ;",
            "score": 99.22010040283203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ n.getType( ) , n ) ;",
            "score": 99.22010040283203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ n.getType( ) , n ) ;",
            "score": 99.22010040283203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ n.getType( ) , n ) ;",
            "score": 99.22010040283203,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + n . get CaMeL Type ( ) , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j : result = lvalInt >> rvalInt ;",
            "score": 99.21249624399039,
            "correctness": "wrong",
            "tokenized_patch": "j : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt +( int ) rval ;",
            "score": 99.202392578125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + ( int ) rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt == rval ?1:1; break ;",
            "score": 99.428076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> : lvalInt ;",
            "score": 99.34329659598214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> ;",
            "score": 99.3164813701923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt ; break ;",
            "score": 99.2738037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.22000122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rvalInt ) { break ;",
            "score": 99.21244594029018,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval CaMeL Int ) { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( n.getType( ) ) ;",
            "score": 99.2750015258789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rval ; case Token.URSH :",
            "score": 99.26890211838942,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt = rvalInt >> rvalInt ;",
            "score": 99.21990966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.21100323016827,
            "correctness": "uncompilable",
            "tokenized_patch": "result += FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , 'length',",
            "score": 99.20162963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , '[].join()',",
            "score": 99.20162963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , '',",
            "score": 99.20162963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , 'join',",
            "score": 99.20162963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , 'a',",
            "score": 99.20162963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; if( result == -1)",
            "score": 99.426513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; if ( result == - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >>1;",
            "score": 99.34292602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt *rvalInt ;",
            "score": 99.27180989583333,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> rval ;",
            "score": 99.26798793247768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abort( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.21962327223558,
            "correctness": "uncompilable",
            "tokenized_patch": "abort ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> || rvalInt > rvalInt ; break ;",
            "score": 99.42558208264802,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> || rval CaMeL Int > rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.>> rvalInt ;",
            "score": 99.3796027688419,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> >> >> rvalInt ;",
            "score": 99.34258161272321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> ;",
            "score": 99.31534249441964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & ~ rvalInt ;",
            "score": 99.27180989583333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; continue ;",
            "score": 99.26780482700893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = Node.newNumber( result ) ;",
            "score": 99.21036202566964,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; break ; case Token.lval :",
            "score": 99.42546643708882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - rvalInt - rvalInt ;",
            "score": 99.34236414292279,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt : rvalInt ;",
            "score": 99.31468200683594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= >> >> >> rvalInt ;",
            "score": 99.27081298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.26775716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt << rvalInt ;",
            "score": 99.20738874162946,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND ,",
            "score": 99.20048217773437,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt , rvalInt >> rvalInt ;",
            "score": 99.37906901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int , rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.34172506893383,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> rvalInt ; break ;",
            "score": 99.27422626201923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; ;",
            "score": 99.27072378305289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt << >> >> rvalInt ;",
            "score": 99.26769147600446,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt >> >> rvalInt ;",
            "score": 99.21881103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> rvalInt ;",
            "score": 99.20591042258523,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> >> >> >> rvalInt ; break ;",
            "score": 99.42277257582721,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt - rvalInt ;",
            "score": 99.37901306152344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - lvalInt >> >> rvalInt ; }",
            "score": 99.3139289407169,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0/ rvalInt / >> rvalInt ;",
            "score": 99.27040201822916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> rvalInt ;",
            "score": 99.26756795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; ;",
            "score": 99.21796526227679,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; break ; default :",
            "score": 99.42275821461396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval >> >> >> >> rvalInt ;",
            "score": 99.34139251708984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> >> rvalInt >> rvalInt ;",
            "score": 99.31359145220588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>1; break ;",
            "score": 99.27412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = rvalInt << rvalInt ;",
            "score": 99.26665387834821,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt ; case Token.RSH :",
            "score": 99.217919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( FRACTIONAL_BITWISE_OPERAND , left ,",
            "score": 99.19918060302734,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ?1:0; break ;",
            "score": 99.42107747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt2;",
            "score": 99.37892061121323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt3;",
            "score": 99.37892061121323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt10;",
            "score": 99.37892061121323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt6;",
            "score": 99.37892061121323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt32;",
            "score": 99.37892061121323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>2;",
            "score": 99.31290980747768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>3;",
            "score": 99.31290980747768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>10;",
            "score": 99.31290980747768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>6;",
            "score": 99.31290980747768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>32;",
            "score": 99.31290980747768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return rval ;",
            "score": 99.27396647135417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= >> >> rvalInt ;",
            "score": 99.27019794170673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt << >> rvalInt ; break ;",
            "score": 99.26658528645834,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS , false ) ;",
            "score": 99.2175064086914,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt >> rvalInt ;",
            "score": 99.2055331143466,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token.DEFAULT :",
            "score": 99.42070569490132,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . DEFAULT :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rvalInt - rvalInt ;",
            "score": 99.37882995605469,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt / lvalInt ;",
            "score": 99.3125228881836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int / lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt / rval ;",
            "score": 99.27005440848214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int / rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << rvalInt ; break ;",
            "score": 99.26610456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.replaceChild( result , newNumber ) ;",
            "score": 99.21742466517857,
            "correctness": "uncompilable",
            "tokenized_patch": "result . replace CaMeL Child ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ] rvalInt >> rvalInt ;",
            "score": 99.20521647135416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ] rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt : break ;",
            "score": 99.19820963541666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ++ >> rvalInt ;",
            "score": 99.37870788574219,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ++ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt < >> rvalInt ;",
            "score": 99.34010225183823,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int < >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> rvalInt >> rvalInt ;",
            "score": 99.31250718060662,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return false ;",
            "score": 99.27336120605469,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt ; break ; default :",
            "score": 99.26939290364584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object newNumber = Node.newNumber( result ) ;",
            "score": 99.26571451822916,
            "correctness": "uncompilable",
            "tokenized_patch": "Object new CaMeL Number = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber =( int ) lvalInt ;",
            "score": 99.2162616436298,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>2rvalInt ;",
            "score": 99.20506795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>3rvalInt ;",
            "score": 99.20506795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>10rvalInt ;",
            "score": 99.20506795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>6rvalInt ;",
            "score": 99.20506795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>32rvalInt ;",
            "score": 99.20506795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int( lvalInt << rvalInt ) ;",
            "score": 99.19777018229166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ( lval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> << >> >> rvalInt ; break ;",
            "score": 99.42029526654412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> << >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt2>> rvalInt ;",
            "score": 99.3784538717831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt3>> rvalInt ;",
            "score": 99.3784538717831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt10>> rvalInt ;",
            "score": 99.3784538717831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt6>> rvalInt ;",
            "score": 99.3784538717831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt32>> rvalInt ;",
            "score": 99.3784538717831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - >> >> >> rvalInt ;",
            "score": 99.340087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.3119125366211,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.27297973632812,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rvalInt ; break ;",
            "score": 99.26808384486607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt << rvalInt >> rvalInt ;",
            "score": 99.26499837239584,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( error( FRACTIONAL_BITWISE_OPERAND , right ) ) {",
            "score": 99.21559143066406,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt ; break ;",
            "score": 99.20479642427884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & >> >> >> rvalInt ; break ;",
            "score": 99.42027372472427,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> >> rvalInt ;",
            "score": 99.37842735877403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> rvalInt ; }",
            "score": 99.31178911994485,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; return lvalInt ;",
            "score": 99.27293395996094,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; return lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> >> >> rvalInt ;",
            "score": 99.26768391927084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> >> rvalInt ;",
            "score": 99.26466878255208,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; continue ;",
            "score": 99.21399739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.19744466145833,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> >> >> rvalInt ;",
            "score": 99.41880289713542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != >> rvalInt ;",
            "score": 99.37802124023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; result ++ ;",
            "score": 99.33961486816406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; result ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt ++ ;",
            "score": 99.31140899658203,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << >> rvalInt + rvalInt ;",
            "score": 99.2718734741211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt / rval ;",
            "score": 99.26729038783482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int / rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << >> >> rvalInt ;",
            "score": 99.26455453725961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt ;",
            "score": 99.21287706163194,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != left.getDouble( ) ;",
            "score": 99.204638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != left . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << >> >> >> rvalInt ; break ;",
            "score": 99.41853601792279,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt *lvalInt ;",
            "score": 99.37798309326172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int * lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; ;",
            "score": 99.31137084960938,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default : }",
            "score": 99.27139282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default : }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt << >> rvalInt ) ;",
            "score": 99.26695149739584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int << >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> | rvalInt ; break ;",
            "score": 99.2642822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; default : throw new ;",
            "score": 99.41830105251736,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; default : throw new ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ? rvalInt ;",
            "score": 99.3776626586914,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = lvalInt >> >> >> rvalInt ;",
            "score": 99.3393325805664,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> ;",
            "score": 99.31130545479911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; return true ;",
            "score": 99.27127075195312,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> >> rvalInt ; break ;",
            "score": 99.26418631417411,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.getDouble( ) >> rvalInt ;",
            "score": 99.21255696614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . get CaMeL Double ( ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >= rvalInt ; break ;",
            "score": 99.4178107766544,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ) >> rvalInt ;",
            "score": 99.37763528262867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt >> rvalInt ; }",
            "score": 99.31047506893383,
            "correctness": "wrong",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "retval = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.26385091145833,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ right + 'length') ;",
            "score": 99.21222795758929,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ right + '[].join()') ;",
            "score": 99.21222795758929,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ right + '') ;",
            "score": 99.21222795758929,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ right + 'join') ;",
            "score": 99.21222795758929,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ right + 'a') ;",
            "score": 99.21222795758929,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + right + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j : error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.20375162760416,
            "correctness": "uncompilable",
            "tokenized_patch": "j : error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt ; break ;",
            "score": 99.19600677490234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt : rvalInt >> >> rvalInt ;",
            "score": 99.37724304199219,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int : rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> >> >> rvalInt ;",
            "score": 99.265185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = Node.newNumber( result ) ;",
            "score": 99.2631103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> >> >> >> rvalInt ;",
            "score": 99.19585418701172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rvalInt ; break ;",
            "score": 99.41666666666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.37718098958334,
            "correctness": "uncompilable",
            "tokenized_patch": "if = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rval = lvalInt >> rvalInt ;",
            "score": 99.26995442708333,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> >> >> rvalInt ;",
            "score": 99.2624042217548,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ result + 'length') ;",
            "score": 99.21170479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ result + '[].join()') ;",
            "score": 99.21170479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ result + '') ;",
            "score": 99.21170479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ result + 'join') ;",
            "score": 99.21170479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ result + 'a') ;",
            "score": 99.21170479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + result + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { newNumber = rvalInt << rvalInt ;",
            "score": 99.2036865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { new CaMeL Number = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( n , new Integer( result ) ) ;",
            "score": 99.19573974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( n , new Integer ( result ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> & >> >> rvalInt ; break ;",
            "score": 99.415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> & >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt > rvalInt ;",
            "score": 99.37688131893383,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval >> >> >> rvalInt ;",
            "score": 99.33805338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt : rvalInt ;",
            "score": 99.30995088465073,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt >> rvalInt ;",
            "score": 99.264794921875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval >> rvalInt ;",
            "score": 99.261962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AssertionError( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.21153971354167,
            "correctness": "uncompilable",
            "tokenized_patch": "Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.20363943917411,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt << rvalInt ;",
            "score": 99.19514973958333,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> >> >> rvalInt ;",
            "score": 99.41536458333333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) >> >> rvalInt ;",
            "score": 99.37639617919922,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lval rvalInt ;",
            "score": 99.33731783353366,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> rvalInt ; }",
            "score": 99.30978573069854,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << rvalInt << >> rvalInt ;",
            "score": 99.2689437866211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + rval ;",
            "score": 99.26247732979911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval ; break ;",
            "score": 99.26123860677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + lvalInt >> rvalInt ;",
            "score": 99.20297475961539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval >> >> >> rvalInt ;",
            "score": 99.19471842447916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> >> rvalInt ; break ;",
            "score": 99.41376410590277,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt - rvalInt ;",
            "score": 99.3096694946289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; else return n ;",
            "score": 99.2685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; else return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> rvalInt / >> rvalInt ;",
            "score": 99.26236979166667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.26123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ; break ;",
            "score": 99.19450239701705,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> >> >> rvalInt ;",
            "score": 99.41329616970486,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt && >> rvalInt ;",
            "score": 99.37623506433823,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int && >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int >> rvalInt << rvalInt ;",
            "score": 99.26853724888393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <2) )",
            "score": 99.26105608258929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <3) )",
            "score": 99.26105608258929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <10) )",
            "score": 99.26105608258929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <6) )",
            "score": 99.26105608258929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >=0&& rval <32) )",
            "score": 99.26105608258929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= 0 && rval < $NUMBER$ ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n << rvalInt >> >> rvalInt ;",
            "score": 99.21055385044643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ? >> rvalInt ;",
            "score": 99.3761978149414,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ? >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0? lval : lvalInt ;",
            "score": 99.2615234375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? lval : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "b = lvalInt << rvalInt << rvalInt ;",
            "score": 99.26070149739583,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stack.replaceChild( n , newNumber ) ;",
            "score": 99.20999581473214,
            "correctness": "uncompilable",
            "tokenized_patch": "stack . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rvalInt >> rvalInt ;",
            "score": 99.37618255615234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt ++ ;",
            "score": 99.30877326516544,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / & rvalInt ;",
            "score": 99.26068115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> rval ; break ;",
            "score": 99.2603271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.20997837611607,
            "correctness": "uncompilable",
            "tokenized_patch": "{ error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt *lvalInt ;",
            "score": 99.2018310546875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int * lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; default : ;",
            "score": 99.40997673483456,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; default : ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt >> >> >> >> rvalInt ;",
            "score": 99.33479578354779,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt << rvalInt ;",
            "score": 99.26004231770834,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt *>> ~ rvalInt ;",
            "score": 99.25995342548077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.newNumber = rvalInt >> rvalInt ;",
            "score": 99.20914713541667,
            "correctness": "uncompilable",
            "tokenized_patch": "this . new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = tryFoldShift( n , newNumber ) ;",
            "score": 99.19207763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = try CaMeL Fold CaMeL Shift ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> >> >> >> rvalInt ;",
            "score": 99.40974256727431,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lval >> rvalInt ;",
            "score": 99.33427429199219,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt rvalInt ; }",
            "score": 99.30765533447266,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; else break ;",
            "score": 99.266796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << rval ;",
            "score": 99.25969989483173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) result = lvalInt ;",
            "score": 99.20858561197916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> rvalInt ; break ;",
            "score": 99.19154710036058,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case ;",
            "score": 99.40960693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt.) ;",
            "score": 99.37598374310662,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt & rvalInt ;",
            "score": 99.33395385742188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & rvalInt ; }",
            "score": 99.30743049172794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> & rvalInt ;",
            "score": 99.25957782451923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt << rvalInt ;",
            "score": 99.25956587357955,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( n.getType( ) == Token.LSH )",
            "score": 99.20845540364583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( n . get CaMeL Type ( ) == Token . LSH )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt ?1:1; break ;",
            "score": 99.40955307904412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt : rvalInt ;",
            "score": 99.37543801700367,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt << rvalInt ;",
            "score": 99.26551055908203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt << rvalInt ;",
            "score": 99.25951038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - lvalInt >> >> rvalInt ;",
            "score": 99.25937325613839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval *rvalInt ;",
            "score": 99.20029860276442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ 'length') ;",
            "score": 99.19024658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ '[].join()') ;",
            "score": 99.19024658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ '') ;",
            "score": 99.19024658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ 'join') ;",
            "score": 99.19024658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ 'a') ;",
            "score": 99.19024658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >>1;",
            "score": 99.37483723958333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval >> >> rvalInt ;",
            "score": 99.3326416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ rvalInt , left ) ;",
            "score": 99.26518249511719,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ rvalInt , left ) ;",
            "score": 99.26518249511719,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ rvalInt , left ) ;",
            "score": 99.26518249511719,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ rvalInt , left ) ;",
            "score": 99.26518249511719,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ rvalInt , left ) ;",
            "score": 99.26518249511719,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + rval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt << rvalInt << rvalInt ;",
            "score": 99.25919596354167,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?1: lvalInt ;",
            "score": 99.25870768229167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 1 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "super.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.20790201822916,
            "correctness": "uncompilable",
            "tokenized_patch": "super . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : lvalInt >> >> rvalInt ;",
            "score": 99.19996861049107,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> & >> rvalInt ;",
            "score": 99.40951717601104,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt :1;",
            "score": 99.37416294642857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt *lvalInt ;",
            "score": 99.33216768152573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int * lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt >> >> >> rvalInt ;",
            "score": 99.30610207950367,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; n = lval ;",
            "score": 99.26415252685547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; n = lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.25880533854166,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >=0?0: lvalInt ;",
            "score": 99.258349609375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >= 0 ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "println( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.20774489182692,
            "correctness": "uncompilable",
            "tokenized_patch": "println ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { newNumber = lvalInt << rvalInt ;",
            "score": 99.19959309895833,
            "correctness": "uncompilable",
            "tokenized_patch": "try { new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> & rvalInt ; break ;",
            "score": 99.40948845358456,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == rvalInt ; }",
            "score": 99.37401625689338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt >> >> >> rvalInt ;",
            "score": 99.33209587545956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( this ) { result = lvalInt >> >> rvalInt ;",
            "score": 99.30605181525735,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( this ) { result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; else break ;",
            "score": 99.2640380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) Node.newNumber( result ) ;",
            "score": 99.25818743024554,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ? rval : lvalInt ;",
            "score": 99.25809733072917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? rval : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "rvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.20732770647321,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << lvalInt ; break ;",
            "score": 99.19913423978366,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> >> rvalInt ; break ;",
            "score": 99.18816266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ; default : throw new ;",
            "score": 99.40898694490132,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ; default : throw new ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rval ) ;",
            "score": 99.373974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >> >> ;",
            "score": 99.3052116842831,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt ; break ; }",
            "score": 99.2576416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,0) ;",
            "score": 99.20643967848558,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; default : throw new ;",
            "score": 99.40831163194444,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; default : throw new ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt | >> rvalInt ;",
            "score": 99.33193072150735,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int | >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt >> >> rval ;",
            "score": 99.25738525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt ; break ;",
            "score": 99.25670447716347,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length', right ) ;",
            "score": 99.20620727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()', right ) ;",
            "score": 99.20620727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '', right ) ;",
            "score": 99.20620727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join', right ) ;",
            "score": 99.20620727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a', right ) ;",
            "score": 99.20620727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += lvalInt << rvalInt ;",
            "score": 99.19812950721153,
            "correctness": "wrong",
            "tokenized_patch": "result = lval += lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return n ? n : lvalInt >> >> rvalInt ;",
            "score": 99.18727213541666,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ? n : lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt ; break ; default :",
            "score": 99.40814568014706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1>> >> rvalInt ;",
            "score": 99.37269810267857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt + lvalInt ;",
            "score": 99.33131408691406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.30394789751838,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << lvalInt >> >> rvalInt ;",
            "score": 99.26338958740234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt / rval ;",
            "score": 99.25689227764423,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int / rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "retval = lvalInt >> rvalInt ;",
            "score": 99.25665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt ) ;",
            "score": 99.18685913085938,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt >> >> >> rvalInt ;",
            "score": 99.40688189338235,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.37213897705078,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt & rvalInt ;",
            "score": 99.33065975413604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.30343807444854,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == ~ rvalInt ;",
            "score": 99.25640399639423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt != lvalInt ;",
            "score": 99.1947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int != lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( right , newNumber ) ;",
            "score": 99.18644496372768,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( right , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt - >> rvalInt ;",
            "score": 99.37212371826172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval rvalInt >> rvalInt ;",
            "score": 99.33050537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> rvalInt >> rvalInt ;",
            "score": 99.3033806295956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << >> rvalInt ; break ;",
            "score": 99.26318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt << rvalInt << rvalInt ;",
            "score": 99.254736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "replaceChild( n , newNumber ) ;",
            "score": 99.2050272623698,
            "correctness": "uncompilable",
            "tokenized_patch": "replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.1947021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "String error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , false ) ;",
            "score": 99.18622233072917,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt >> >> rvalInt ; break ;",
            "score": 99.40481228298611,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt || lvalInt ;",
            "score": 99.32963292738971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> >> rvalInt >> rvalInt ;",
            "score": 99.30293543198529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.longValue( ) ;",
            "score": 99.25563401442308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . long CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n << rvalInt ;",
            "score": 99.20480007595486,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final result = lvalInt >> >> rvalInt ;",
            "score": 99.19446739783653,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt rvalInt ;",
            "score": 99.37124197823661,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( rvalInt >> >> rvalInt ) ;",
            "score": 99.2555419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( rval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = lvalInt >> >> rvalInt ;",
            "score": 99.25408528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Token.RSH : result = lvalInt >> rvalInt ;",
            "score": 99.20475260416667,
            "correctness": "uncompilable",
            "tokenized_patch": "Token . RSH : result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { newNumber = rvalInt >> rvalInt ;",
            "score": 99.19414876302083,
            "correctness": "uncompilable",
            "tokenized_patch": "try { new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> <=1; break ;",
            "score": 99.404443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> <= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> lvalInt >> rvalInt ;",
            "score": 99.37071940104167,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =( int )( lvalInt << rvalInt ) ;",
            "score": 99.26136779785156,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) ( lval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> ^ rvalInt ;",
            "score": 99.25547572544643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , this ) ;",
            "score": 99.20467936197916,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ) - rvalInt ;",
            "score": 99.37054802389706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ) - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt >> >> rvalInt ;",
            "score": 99.32819366455078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ; return result ;",
            "score": 99.30203683035714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; case Token.RSH : result = lvalInt ;",
            "score": 99.2045654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; case Token . RSH : result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2>> rvalInt ;",
            "score": 99.19383748372395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3>> rvalInt ;",
            "score": 99.19383748372395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10>> rvalInt ;",
            "score": 99.19383748372395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6>> rvalInt ;",
            "score": 99.19383748372395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32>> rvalInt ;",
            "score": 99.19383748372395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>1; break ;",
            "score": 99.4039794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = rvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.37051391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "if = rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt << rvalInt ;",
            "score": 99.26002086292614,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rval ; break ; default :",
            "score": 99.25338541666666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "peer.replaceChild( n , newNumber ) ;",
            "score": 99.20445033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "peer . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; reportCodeChange( ) ;",
            "score": 99.18280436197917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ; report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> & rvalInt ;",
            "score": 99.40395220588235,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( lvalInt >> >> rvalInt ) ;",
            "score": 99.36907599954044,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( lval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> | lvalInt ;",
            "score": 99.32795061383929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> | lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt >> >> rvalInt ; }",
            "score": 99.30126235064338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt << lvalInt ;",
            "score": 99.25994466145833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval0/ rvalInt >> rvalInt ;",
            "score": 99.25422014508929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.2037841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1>> >> rvalInt ;",
            "score": 99.193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt >> lvalInt ;",
            "score": 99.36898040771484,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> >> rvalInt ; break ;",
            "score": 99.25959123883929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval [0] >> >> >> rvalInt ;",
            "score": 99.25301688058036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval [ 0 ] >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt << >> rvalInt ;",
            "score": 99.2515380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> Math.rvalInt ;",
            "score": 99.19146259014423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> Math . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt && >> rvalInt ;",
            "score": 99.36835479736328,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int && >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.32763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.3009392233456,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt << >> >> rvalInt ;",
            "score": 99.25882161458334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt / rvalInt ) ;",
            "score": 99.25263323102679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int / rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt << rvalInt >> rvalInt ;",
            "score": 99.25150553385417,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left + right ) ;",
            "score": 99.2024169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.18142903645834,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> rvalInt >> rvalInt - rvalInt ;",
            "score": 99.36826459099265,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 >> rval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> lval >> >> rvalInt ;",
            "score": 99.32728576660156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt ; }",
            "score": 99.30081176757812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( rvalInt ) ;",
            "score": 99.25838216145833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ?0: lvalInt ;",
            "score": 99.252490234375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == rval ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result result = lvalInt >> rvalInt ;",
            "score": 99.19138590494792,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rvalInt ; break ; case ;",
            "score": 99.40270278033088,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1>> rvalInt ;",
            "score": 99.36807016225961,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> 1 >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "Node newNumber = Node.newNumber( n ) ;",
            "score": 99.2578125,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = Node . new CaMeL Number ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt >> >> >> rvalInt ;",
            "score": 99.2517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval ;",
            "score": 99.2510986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report.replaceChild( result , newNumber ) ;",
            "score": 99.20186941964286,
            "correctness": "uncompilable",
            "tokenized_patch": "report . replace CaMeL Child ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt << rvalInt ;",
            "score": 99.19068196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rval : rvalInt ; break ;",
            "score": 99.402587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval2;",
            "score": 99.36802571614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval3;",
            "score": 99.36802571614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval10;",
            "score": 99.36802571614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval6;",
            "score": 99.36802571614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval32;",
            "score": 99.36802571614584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + lvalInt >> >> >> rvalInt ;",
            "score": 99.25159505208333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt << rvalInt ;",
            "score": 99.2510986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> rvalInt ; break ; default :",
            "score": 99.40224880642361,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> >> >> >> >> rvalInt ;",
            "score": 99.32462310791016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt & rvalInt >> rvalInt ;",
            "score": 99.30040067784927,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> n.getLong( ) ;",
            "score": 99.25625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> n . get CaMeL Long ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rval ;",
            "score": 99.25150146484376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt << rvalInt >> rvalInt ;",
            "score": 99.25100911458334,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert rvalInt != rvalInt >> >> rvalInt ;",
            "score": 99.20120442708334,
            "correctness": "uncompilable",
            "tokenized_patch": "assert rval CaMeL Int != rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += FRACTIONAL_BITWISE_OPERAND , right ;",
            "score": 99.17699178059895,
            "correctness": "uncompilable",
            "tokenized_patch": "result += FR@@ ACTIONAL _ BITWISE _ OPERAND , right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token.EOF :",
            "score": 99.40199681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . EOF :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.36784811580883,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> >> rvalInt ;",
            "score": 99.32451923076923,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> - rvalInt ;",
            "score": 99.29973288143383,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &(( int ) rval ) ;",
            "score": 99.25098528180804,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & ( ( int ) rval ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "Node newNumber = lvalInt >> >> rvalInt ;",
            "score": 99.200390625,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new println( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.190283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new println ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2>> rvalInt >> rvalInt ;",
            "score": 99.36780548095703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3>> rvalInt >> rvalInt ;",
            "score": 99.36780548095703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10>> rvalInt >> rvalInt ;",
            "score": 99.36780548095703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6>> rvalInt >> rvalInt ;",
            "score": 99.36780548095703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32>> rvalInt >> rvalInt ;",
            "score": 99.36780548095703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> >> rvalInt >> rvalInt ;",
            "score": 99.29953900505515,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt / >> rvalInt ;",
            "score": 99.25103759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> >> rval ; break ;",
            "score": 99.25066266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.replace( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.19991048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "result . replace ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( int ) rval ;",
            "score": 99.1902364095052,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & ( int ) rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ; break ; case ;",
            "score": 99.40143229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval2>> >> rvalInt ;",
            "score": 99.36776733398438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval3>> >> rvalInt ;",
            "score": 99.36776733398438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval10>> >> rvalInt ;",
            "score": 99.36776733398438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval6>> >> rvalInt ;",
            "score": 99.36776733398438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval32>> >> rvalInt ;",
            "score": 99.36776733398438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; result -- ;",
            "score": 99.3242416381836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; result -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & rvalInt >> ;",
            "score": 99.29946899414062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> | rvalInt ; break ;",
            "score": 99.24998372395834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt = lvalInt >> rvalInt ;",
            "score": 99.19941929408482,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> + rvalInt ; break ;",
            "score": 99.18979317801339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> + rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt1; break ;",
            "score": 99.17566731770833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval rvalInt & rvalInt ;",
            "score": 99.32417297363281,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & rvalInt >> ;",
            "score": 99.29927332261029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt <<1;",
            "score": 99.25461050180289,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "retval = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.2499755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.log( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.19844563802083,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . log ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> *rvalInt ; break ;",
            "score": 99.18736049107143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> * rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - rvalInt ;",
            "score": 99.36774236505681,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt : rvalInt ; }",
            "score": 99.29923248291016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : rvalInt << rvalInt ;",
            "score": 99.2534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rvalInt != rvalInt ) ) {",
            "score": 99.1980712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval CaMeL Int != rval CaMeL Int ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt ?1:0; break ;",
            "score": 99.39904067095588,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Integer.valueOf( lvalInt >> rvalInt ) ;",
            "score": 99.29856962316177,
            "correctness": "uncompilable",
            "tokenized_patch": "return Integer . value CaMeL Of ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> ^ rvalInt ;",
            "score": 99.24993489583333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , lval ) ;",
            "score": 99.19763997395833,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + lvalInt << rvalInt ;",
            "score": 99.18577223557692,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ,",
            "score": 99.1734619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt -1;",
            "score": 99.36604527064732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> & rvalInt ;",
            "score": 99.32144165039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & rvalInt >>1;",
            "score": 99.29847627527573,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "rval = lvalInt << rvalInt ; break ;",
            "score": 99.25307053786058,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt >> >> rval ;",
            "score": 99.24990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt ; break ;",
            "score": 99.24879807692308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += rvalInt >> rvalInt ;",
            "score": 99.1847393329327,
            "correctness": "wrong",
            "tokenized_patch": "result = lval += rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt *rvalInt >> >> >> rvalInt ;",
            "score": 99.3977409811581,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> - rvalInt ;",
            "score": 99.32120455228366,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >= rvalInt >> >> rvalInt ;",
            "score": 99.29844037224265,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >= rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= >> rvalInt ; break ;",
            "score": 99.24960763113839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; } if( rvalInt != rval ) {",
            "score": 99.24851771763393,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; } if ( rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object newNumber = rvalInt >> rvalInt ;",
            "score": 99.18417794363839,
            "correctness": "uncompilable",
            "tokenized_patch": "Object new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval , rvalInt >> rvalInt ;",
            "score": 99.36572983685662,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval , rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval ) ;",
            "score": 99.32105364118304,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rvalInt >> ;",
            "score": 99.2982536764706,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >> rvalInt << rvalInt ;",
            "score": 99.25217982700893,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> rvalInt ; break ;",
            "score": 99.24896647135417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.replace( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.19698893229166,
            "correctness": "uncompilable",
            "tokenized_patch": "this . replace ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> + lvalInt ;",
            "score": 99.18365478515625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> + lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt > rvalInt ?1:0; break ;",
            "score": 99.39687930836396,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt + rvalInt ;",
            "score": 99.365576171875,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt [1] ;",
            "score": 99.29803059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int [ 1 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = rvalInt << rvalInt ;",
            "score": 99.25043194110577,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> >> >> rvalInt ; break ;",
            "score": 99.247998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; }",
            "score": 99.24767127403847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - rvalInt << rvalInt ;",
            "score": 99.18297400841347,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break ; case ; default :",
            "score": 99.39569413034539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break ; case ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1>> rvalInt >> rvalInt ;",
            "score": 99.36538461538461,
            "correctness": "wrong",
            "tokenized_patch": "result = 1 >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + rvalInt ; }",
            "score": 99.29760024126838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} switch( n.getType( ) ) {",
            "score": 99.24761493389423,
            "correctness": "uncompilable",
            "tokenized_patch": "} switch ( n . get CaMeL Type ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> rvalInt ;",
            "score": 99.18226207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb = lvalInt >> >> rvalInt ; break ;",
            "score": 99.17146519252232,
            "correctness": "uncompilable",
            "tokenized_patch": "sb = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt >> >> >> rvalInt ;",
            "score": 99.39546034071181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rvalInt ) ;",
            "score": 99.36511948529412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = lvalInt >> >> >> rvalInt ;",
            "score": 99.31975555419922,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.29718780517578,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ; default ;",
            "score": 99.25013020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ; default ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.24730631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.1958740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "do { error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.this ) ;",
            "score": 99.17132568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.this ) ;",
            "score": 99.17132568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.this ) ;",
            "score": 99.17132568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.this ) ;",
            "score": 99.17132568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.this ) ;",
            "score": 99.17132568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; break ; default : break ;",
            "score": 99.39467486213235,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; break ; default : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ==1;",
            "score": 99.31938171386719,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int == 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt / rvalInt ; }",
            "score": 99.29662367876838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int / rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new String( n.getType( ) ) ;",
            "score": 99.2496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new String ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.rval :",
            "score": 99.24589320591518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . rval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ right.getType( ) ) ;",
            "score": 99.19515555245536,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + right . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ right.getType( ) ) ;",
            "score": 99.19515555245536,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + right . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ right.getType( ) ) ;",
            "score": 99.19515555245536,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + right . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ right.getType( ) ) ;",
            "score": 99.19515555245536,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + right . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ right.getType( ) ) ;",
            "score": 99.19515555245536,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + right . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; break ; default : throw new ;",
            "score": 99.3944027549342,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; break ; default : throw new ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt || rvalInt ;",
            "score": 99.36408996582031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int || rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> *rvalInt ;",
            "score": 99.29621438419117,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = rvalInt >> rvalInt ;",
            "score": 99.24714878627232,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> ^ rvalInt ;",
            "score": 99.2456805889423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object newNumber = rvalInt << rvalInt ;",
            "score": 99.18065534319196,
            "correctness": "uncompilable",
            "tokenized_patch": "Object new CaMeL Number = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt >> >> rvalInt ; break ;",
            "score": 99.39421251085069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt == rvalInt >> rvalInt ;",
            "score": 99.3640869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int == rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rvalInt1;",
            "score": 99.2960564108456,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; break ; default",
            "score": 99.24942452566964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; break ; default",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval << rvalInt ;",
            "score": 99.24644368489584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> >> & rvalInt ) ;",
            "score": 99.24516950334821,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> >> & rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.1947772686298,
            "correctness": "uncompilable",
            "tokenized_patch": "report ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + rvalInt << rvalInt ;",
            "score": 99.18064528245192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case ; default :",
            "score": 99.39354790581598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt : lvalInt ;",
            "score": 99.36399739583334,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> >> >> >> rvalInt ;",
            "score": 99.3179931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt >> rvalInt ;",
            "score": 99.29555376838235,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + n.getDouble( ) ;",
            "score": 99.24623209635416,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + n . get CaMeL Double ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> ~ rvalInt ; break ;",
            "score": 99.24492536272321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ~ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( 'length') ) ;",
            "score": 99.19436848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( '[].join()') ) ;",
            "score": 99.19436848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( '') ) ;",
            "score": 99.19436848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( 'join') ) ;",
            "score": 99.19436848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( 'a') ) ;",
            "score": 99.19436848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right , true ) ;",
            "score": 99.1684326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt.1;",
            "score": 99.36387005974265,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> ; }",
            "score": 99.29554966517857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt ; }",
            "score": 99.24477914663461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.tokenToName( result ) ) ;",
            "score": 99.19305013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . token CaMeL To CaMeL Name ( result ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> rvalInt ; break ;",
            "score": 99.16767229352679,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ?1:1; break ;",
            "score": 99.39256376378677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rvalInt : rvalInt ;",
            "score": 99.36355590820312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> lvalInt ;",
            "score": 99.3169696514423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt >> rvalInt ;",
            "score": 99.24700458233173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> rvalInt ; }",
            "score": 99.245849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rval ;",
            "score": 99.2439697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1<< rvalInt ;",
            "score": 99.17949969951923,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> 1 << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt != lvalInt >> >> rvalInt ;",
            "score": 99.36351013183594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt << rvalInt << rvalInt ;",
            "score": 99.24689127604167,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != lvalInt << rvalInt ;",
            "score": 99.24540201822917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt : rvalInt ;",
            "score": 99.24342447916666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ this ) ;",
            "score": 99.19160970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ this ) ;",
            "score": 99.19160970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ this ) ;",
            "score": 99.19160970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ this ) ;",
            "score": 99.19160970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ this ) ;",
            "score": 99.19160970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rvalInt ) ; break ;",
            "score": 99.16643880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval CaMeL Int ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval >> rvalInt ;",
            "score": 99.31681315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> rvalInt ; }",
            "score": 99.29442641314338,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ reportCodeChange( ) ; return n ; }",
            "score": 99.24520438058036,
            "correctness": "uncompilable",
            "tokenized_patch": "{ report CaMeL Code CaMeL Change ( ) ; return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = lvalInt >> >> rvalInt ;",
            "score": 99.17852783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "i = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.29409610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ rvalInt ; }",
            "score": 99.24285016741071,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.19003092447916,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt lvalInt >> rvalInt ;",
            "score": 99.17744663783482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> ; break ;",
            "score": 99.16510881696429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ? rval : rval ; break ;",
            "score": 99.3902228860294,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ? rval : rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> & rvalInt ;",
            "score": 99.31574358258929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> >> rvalInt ; }",
            "score": 99.29361165364584,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = lvalInt >> rvalInt ; break ;",
            "score": 99.24554036458333,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & n.getValue( ) ;",
            "score": 99.244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & n . get CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval >> rvalInt ;",
            "score": 99.24188701923077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==( int ) rvalInt ;",
            "score": 99.17671421595982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break.",
            "score": 99.16500651041666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ?1:0; break ;",
            "score": 99.3902099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> & lvalInt ;",
            "score": 99.31568145751953,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt - rvalInt ;",
            "score": 99.293408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result !=0&& rvalInt != rval ) {",
            "score": 99.24390520368304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result != 0 && rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval % rvalInt >> >> rvalInt ;",
            "score": 99.24174281529018,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval % rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = left.getDouble( ) >> rvalInt ;",
            "score": 99.18949381510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = left . get CaMeL Double ( ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.17624337332589,
            "correctness": "uncompilable",
            "tokenized_patch": "return error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; case ; case ;",
            "score": 99.38987821691177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; case ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt == lvalInt ;",
            "score": 99.36164855957031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int == lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.31513977050781,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return rval ;",
            "score": 99.24468994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?2: lvalInt ;",
            "score": 99.241650390625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?3: lvalInt ;",
            "score": 99.241650390625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?10: lvalInt ;",
            "score": 99.241650390625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?6: lvalInt ;",
            "score": 99.241650390625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?32: lvalInt ;",
            "score": 99.241650390625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( n.getName( ) ) ;",
            "score": 99.18902587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt > rvalInt ;",
            "score": 99.38931094898896,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt >> rvalInt ) ;",
            "score": 99.293212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> rvalInt << rvalInt ;",
            "score": 99.24463704427083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lvalInt << rvalInt ;",
            "score": 99.2428466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> == ~ rvalInt ;",
            "score": 99.24081856863839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> == ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "replaceChild( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.18878580729167,
            "correctness": "uncompilable",
            "tokenized_patch": "replace CaMeL Child ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt ; break ; case ;",
            "score": 99.38918887867646,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>1- rvalInt ;",
            "score": 99.36070341222427,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> 1 - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> - rvalInt ;",
            "score": 99.31437683105469,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval || lvalInt >> >> rvalInt ;",
            "score": 99.24069649832589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval || lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "exception( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.1758282001202,
            "correctness": "uncompilable",
            "tokenized_patch": "exception ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token.YES :",
            "score": 99.38905736019737,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . YES :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> >> >> rvalInt ;",
            "score": 99.3142822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> right.getDouble( ) ;",
            "score": 99.2427490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> right . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> rvalInt ; break ;",
            "score": 99.24159592848558,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ^ rvalInt ; break ;",
            "score": 99.24065290178571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ^ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt >> >> >> rvalInt ;",
            "score": 99.3890380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & >> >> >> rvalInt ;",
            "score": 99.31387765066964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> rvalInt ; }",
            "score": 99.241552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ? lval : lvalInt ;",
            "score": 99.24061686197916,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? lval : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , lvalInt ) ;",
            "score": 99.162646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ++ >> rvalInt ;",
            "score": 99.35862103630515,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ++ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> & rvalInt ;",
            "score": 99.31373596191406,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *rvalInt >> >> rvalInt >> >> rvalInt ;",
            "score": 99.29240866268383,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt << >> >> rvalInt ;",
            "score": 99.24153645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?0:0;",
            "score": 99.23995267427884,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 0 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "double rvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.18721516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & >> rvalInt ;",
            "score": 99.31151326497395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>1; }",
            "score": 99.29217936197917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; System.",
            "score": 99.24155836838942,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> rvalInt ; }",
            "score": 99.24142020089286,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; result = lvalInt >> >> rvalInt ;",
            "score": 99.38768174913194,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> rvalInt1;",
            "score": 99.35821174172794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - >> >> rvalInt ;",
            "score": 99.31150716145834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : lvalInt >> >> rvalInt ; }",
            "score": 99.29072840073529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> rvalInt ; break ;",
            "score": 99.2413330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.compareTo( lval ) ;",
            "score": 99.23873465401786,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . compare CaMeL To ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new right ) ;",
            "score": 99.18686349051339,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt =( int ) rvalInt ;",
            "score": 99.17261681189903,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) : rvalInt ;",
            "score": 99.35808919270833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt = lvalInt ;",
            "score": 99.31040954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.24117024739583,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt << >> rvalInt ;",
            "score": 99.23956298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.println( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.18626302083334,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . println ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final result = lvalInt >> rvalInt ;",
            "score": 99.17188517252605,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ; break ; case Token.lval :",
            "score": 99.38703748914931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt & lvalInt ;",
            "score": 99.30966186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt << rvalInt ;",
            "score": 99.24093424479166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> << >> rvalInt ;",
            "score": 99.16013009207589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ; break ; case Token.lval :",
            "score": 99.38700786389802,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval rvalInt >> rvalInt ;",
            "score": 99.30956268310547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval ; break ;",
            "score": 99.24005681818181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.intValue( ) ;",
            "score": 99.2368915264423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . int CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "report.error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "report . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.35789489746094,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval rvalInt ;",
            "score": 99.30946858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> rvalInt ; break ;",
            "score": 99.28987121582031,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval >> rvalInt ;",
            "score": 99.24000651041666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> ^ rvalInt ;",
            "score": 99.2366192157452,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "LOG.error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.18516438802084,
            "correctness": "uncompilable",
            "tokenized_patch": "LOG . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += rvalInt >> >> rvalInt ;",
            "score": 99.17097691127232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval += rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( rval -1) ; break ;",
            "score": 99.385791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & ( rval - 1 ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : rvalInt ) ;",
            "score": 99.35748650045956,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> & rvalInt ;",
            "score": 99.30908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt >> >> rvalInt ; }",
            "score": 99.28985954733456,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rval = lvalInt << rvalInt ;",
            "score": 99.23860677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt % rvalInt ;",
            "score": 99.23622824928977,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int % rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "tmp = lvalInt >> rvalInt ;",
            "score": 99.1851473721591,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rvalInt : rvalInt ;",
            "score": 99.38542624080883,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt1>> rvalInt ;",
            "score": 99.35699462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt / rvalInt ;",
            "score": 99.28898620605469,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt << rvalInt ;",
            "score": 99.23951009114583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> |= rvalInt ;",
            "score": 99.23539225260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> |= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> rvalInt ; break ; default :",
            "score": 99.18497721354167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt ? rvalInt : rvalInt ;",
            "score": 99.3850033408717,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int ? rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt && rvalInt ;",
            "score": 99.3568115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int && rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lval >> >> rvalInt ;",
            "score": 99.30865885416667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt << rvalInt ;",
            "score": 99.239501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = rvalInt >> rvalInt ;",
            "score": 99.1839599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> rvalInt ; break ;",
            "score": 99.16970590444711,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = format( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.15736490885416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = format ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt > >> rvalInt ;",
            "score": 99.35671997070312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int > >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval >> rvalInt ;",
            "score": 99.30865009014423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.23922293526786,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>.rvalInt ;",
            "score": 99.2344258626302,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> >> >> >> rvalInt ;",
            "score": 99.38383653428819,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.28844451904297,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; n = lval ;",
            "score": 99.23734537760417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; n = lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; result = lvalInt >> rvalInt ;",
            "score": 99.2336181640625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval ; result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "newNumber( n.getType( ) ) ;",
            "score": 99.1693115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> ==1; break ;",
            "score": 99.383740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> == 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt || >> rvalInt ;",
            "score": 99.35591394761029,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int || >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt += lvalInt >> >> rvalInt ;",
            "score": 99.30815124511719,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int += lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | n.getDouble( ) ;",
            "score": 99.23841145833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt / rval ;",
            "score": 99.23290076622597,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int / rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval2;",
            "score": 99.3555575284091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval3;",
            "score": 99.3555575284091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval10;",
            "score": 99.3555575284091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval6;",
            "score": 99.3555575284091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval32;",
            "score": 99.3555575284091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & >> >> >> >> >> rvalInt ;",
            "score": 99.30782318115234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.23829868861607,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0/ rvalInt / rvalInt ;",
            "score": 99.23280552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt || rvalInt > rvalInt ;",
            "score": 99.38362201891448,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int || rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt + rvalInt ;",
            "score": 99.30775451660156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> >> rvalInt ; }",
            "score": 99.2857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "switch( rvalInt ) { case Token.URSH :",
            "score": 99.23810686383929,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( rval CaMeL Int ) { case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = rvalInt << rvalInt ; break ;",
            "score": 99.23546549479167,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( FRACTIONAL_BITWISE_OPERAND , new",
            "score": 99.18338216145834,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } if( result !=0)",
            "score": 99.38275467722039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } if ( result != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval2>> rvalInt ;",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval3>> rvalInt ;",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval10>> rvalInt ;",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval6>> rvalInt ;",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval32>> rvalInt ;",
            "score": 99.35526769301471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; result -- ;",
            "score": 99.30747884114584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; result -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt << >> rvalInt ;",
            "score": 99.23807779947917,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ?1: lvalInt ;",
            "score": 99.23118489583334,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 1 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else newNumber = lvalInt >> rvalInt ;",
            "score": 99.18305315290179,
            "correctness": "uncompilable",
            "tokenized_patch": "else new CaMeL Number = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lvalInt ;",
            "score": 99.16740278764205,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result >> rvalInt ;",
            "score": 99.15590006510416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1>> rvalInt - rvalInt ;",
            "score": 99.3552605124081,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> 1 >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << left.getDouble( ) ;",
            "score": 99.23528645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << left . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt *rvalInt ;",
            "score": 99.23102213541667,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> + rvalInt ;",
            "score": 99.16684194711539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> rvalInt ; break ; default :",
            "score": 99.382568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt >> >> >> rvalInt ;",
            "score": 99.35524615119485,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt1;",
            "score": 99.28358459472656,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) return n ;",
            "score": 99.23714192708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> rvalInt >> >> rvalInt ;",
            "score": 99.23097581129808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - lvalInt >> rvalInt ;",
            "score": 99.16616586538461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; } if( result ==0)",
            "score": 99.38255479600694,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; } if ( result == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2>> rvalInt >> >> rvalInt ;",
            "score": 99.3547004250919,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3>> rvalInt >> >> rvalInt ;",
            "score": 99.3547004250919,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10>> rvalInt >> >> rvalInt ;",
            "score": 99.3547004250919,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6>> rvalInt >> >> rvalInt ;",
            "score": 99.3547004250919,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32>> rvalInt >> >> rvalInt ;",
            "score": 99.3547004250919,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> lvalInt ;",
            "score": 99.28311360677084,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval0; break ; default :",
            "score": 99.23059895833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval 0 ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.18120930989583,
            "correctness": "uncompilable",
            "tokenized_patch": "result . error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> >> >> >> rvalInt ;",
            "score": 99.30469563802083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - n.getType( ) ;",
            "score": 99.2369140625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - n . get CaMeL Type ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "rval = lvalInt << rvalInt >> rvalInt ;",
            "score": 99.23384602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length', n ) ;",
            "score": 99.1657206217448,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()', n ) ;",
            "score": 99.1657206217448,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '', n ) ;",
            "score": 99.1657206217448,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join', n ) ;",
            "score": 99.1657206217448,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a', n ) ;",
            "score": 99.1657206217448,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> >> rvalInt ; break ;",
            "score": 99.15445963541667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( result >> rvalInt >> >> rvalInt ; {",
            "score": 99.30423736572266,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( result >> rval CaMeL Int >> >> rval CaMeL Int ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt >> lvalInt ;",
            "score": 99.28296661376953,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.23682454427083,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt << rvalInt ;",
            "score": 99.23290076622597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; result = lvalInt & rvalInt ;",
            "score": 99.22896321614583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval ; result = lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "= lvalInt >> >> rvalInt ;",
            "score": 99.1651611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval : result ;",
            "score": 99.1539306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> & rvalInt ;",
            "score": 99.38038545496323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.35395050048828,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >= rvalInt >> rvalInt ;",
            "score": 99.2827377319336,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >= rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> rval ;",
            "score": 99.23626154119319,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> rvalInt >> rvalInt ;",
            "score": 99.232666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt ;",
            "score": 99.22887073863636,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "Assert.Error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.1800537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "Assert . Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> rvalInt ;",
            "score": 99.1651278409091,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> rvalInt ; break ;",
            "score": 99.15391438802084,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; return result ;",
            "score": 99.38003540039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt = rvalInt >> rvalInt ;",
            "score": 99.3537353515625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> << rvalInt ;",
            "score": 99.282470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= >> rvalInt ;",
            "score": 99.22832380022321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result , error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.17904459635416,
            "correctness": "uncompilable",
            "tokenized_patch": "result , error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - lvalInt >> >> rvalInt ;",
            "score": 99.16500150240384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.2;",
            "score": 99.35372488839286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.3;",
            "score": 99.35372488839286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.10;",
            "score": 99.35372488839286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.6;",
            "score": 99.35372488839286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.32;",
            "score": 99.35372488839286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> lvalInt ;",
            "score": 99.303515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt << rvalInt << rvalInt ;",
            "score": 99.23579915364583,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int << rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt << rvalInt ; break ;",
            "score": 99.23235677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<( int ) lvalInt ;",
            "score": 99.16484723772321,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << ( int ) lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return tryFoldShift( result , newNumber ) ;",
            "score": 99.15362141927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return try CaMeL Fold CaMeL Shift ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & rvalInt ; break ; case Token.lval :",
            "score": 99.37836657072368,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt - rvalInt ;",
            "score": 99.35365397135416,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> - >> rvalInt ;",
            "score": 99.30345153808594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = rvalInt >> >> >> rvalInt ;",
            "score": 99.2354248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> rvalInt ; break ;",
            "score": 99.23165189302884,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> LT( rvalInt ) ;",
            "score": 99.22816569010416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> LT ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt << >> rvalInt ;",
            "score": 99.17697579520089,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> > rvalInt ;",
            "score": 99.37791090745192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval2>> rvalInt ;",
            "score": 99.35360281808036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval3>> rvalInt ;",
            "score": 99.35360281808036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval10>> rvalInt ;",
            "score": 99.35360281808036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval6>> rvalInt ;",
            "score": 99.35360281808036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval32>> rvalInt ;",
            "score": 99.35360281808036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : >> >> >> >> >> rvalInt ;",
            "score": 99.3033218383789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ^ rvalInt ; break ;",
            "score": 99.2280029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ^ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) rvalInt ; break ;",
            "score": 99.15281459263393,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt / >> rvalInt ;",
            "score": 99.35332174862133,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ; ;",
            "score": 99.30319448617789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > lvalInt >> >> rvalInt ;",
            "score": 99.281494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt ; break ; case Token.URSH :",
            "score": 99.23495047433036,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?0:0;",
            "score": 99.22780198317308,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 0 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new AssertionError( 'length') ; case Token.RSH :",
            "score": 99.17655436197917,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()') ; case Token.RSH :",
            "score": 99.17655436197917,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '') ; case Token.RSH :",
            "score": 99.17655436197917,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join') ; case Token.RSH :",
            "score": 99.17655436197917,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a') ; case Token.RSH :",
            "score": 99.17655436197917,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( lvalInt >> rvalInt ) ;",
            "score": 99.35305786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt & rvalInt ;",
            "score": 99.30270385742188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( rval ) << rvalInt ;",
            "score": 99.2345458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & ( rval ) << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << n.getInteger( ) ;",
            "score": 99.23072102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << n . get CaMeL Integer ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default : break ; }",
            "score": 99.22688511439732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt : result = lvalInt << rvalInt ;",
            "score": 99.17648111979166,
            "correctness": "wrong",
            "tokenized_patch": "rval CaMeL Int : result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt1>> rvalInt ; break ;",
            "score": 99.16375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && lvalInt >> >> rvalInt ;",
            "score": 99.35289764404297,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt >> >> rvalInt ;",
            "score": 99.30203247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << rvalInt >> rvalInt ;",
            "score": 99.2807388305664,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.23064778645833,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> & rvalInt ;",
            "score": 99.22674560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; } }",
            "score": 99.1758544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( int ) lvalInt ;",
            "score": 99.16292898995536,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( int ) lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; break",
            "score": 99.15229143415179,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; break",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; if( result !=0)",
            "score": 99.37677323190789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; if ( result != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> rvalInt -1;",
            "score": 99.35253188189338,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & lval >> >> >> rvalInt ;",
            "score": 99.30159505208333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; System.",
            "score": 99.23048502604166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & ~ rvalInt ; break ;",
            "score": 99.22661946614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & ~ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "text( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.17572490985577,
            "correctness": "uncompilable",
            "tokenized_patch": "text ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >> >> >> >> rvalInt ;",
            "score": 99.37594265407986,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : >> rvalInt >> rvalInt ;",
            "score": 99.35227966308594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt << >> >> >> rvalInt ;",
            "score": 99.23377336774554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int << >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt >> rvalInt ; break ;",
            "score": 99.229443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rval : lvalInt ;",
            "score": 99.22588704427083,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( FRACTIONAL_BITWISE_OPERAND , right ) {",
            "score": 99.17508638822116,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.3751284950658,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt : rvalInt ; }",
            "score": 99.35218721277573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt & rvalInt >> >> rvalInt ;",
            "score": 99.29894256591797,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> rvalInt >> >> rvalInt ;",
            "score": 99.28019496372768,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> rvalInt << rvalInt ;",
            "score": 99.23367513020834,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >> rvalInt >> >> rvalInt ;",
            "score": 99.2284423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= ~ rvalInt ;",
            "score": 99.22572544642857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.replaceChild( n , newNumber ) ;",
            "score": 99.1749267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : lvalInt >> rvalInt ;",
            "score": 99.16143329326923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "replace( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.15047513521634,
            "correctness": "uncompilable",
            "tokenized_patch": "replace ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >= rvalInt ;",
            "score": 99.37429630055146,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt == rvalInt ;",
            "score": 99.35186004638672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> lvalInt ;",
            "score": 99.29889678955078,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt & rvalInt ;",
            "score": 99.27974446614583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> rval ;",
            "score": 99.23350016276042,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?1:0;",
            "score": 99.22567983774039,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( rvalInt != lval ) result = lvalInt ;",
            "score": 99.17333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != lval ) result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt : break ;",
            "score": 99.160888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt >> >> rvalInt ;",
            "score": 99.29733276367188,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( result >> >> rvalInt ) ;",
            "score": 99.22544508713942,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( result >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n << rvalInt >> rvalInt ;",
            "score": 99.17282339242789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt , left ) ;",
            "score": 99.15019008091518,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt >> >> rvalInt ; break ;",
            "score": 99.37397596571181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lval >> rvalInt ;",
            "score": 99.29730224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << >> rvalInt ;",
            "score": 99.2331073467548,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> rvalInt >> rvalInt ;",
            "score": 99.22540283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ? n : lvalInt >> rvalInt ;",
            "score": 99.14989362444196,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ? n : lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.0;",
            "score": 99.35112653459821,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt << >> rvalInt ;",
            "score": 99.23290143694196,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> ~ rvalInt ;",
            "score": 99.22439340444711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt =( int ) lvalInt ; break ;",
            "score": 99.14982096354167,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = ( int ) lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt || lvalInt ;",
            "score": 99.35104166666666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *rvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.27841186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; lval = lval ;",
            "score": 99.22788899739584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; lval = lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "lvalInt = rvalInt >> rvalInt ;",
            "score": 99.1582500751202,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt ; break ; case Token.lval :",
            "score": 99.37175549958882,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>0rvalInt >> rvalInt ;",
            "score": 99.35099029541016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 0 rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt.1;",
            "score": 99.2956771850586,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >= >> rvalInt ;",
            "score": 99.27813720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >= >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rvalInt ) {",
            "score": 99.23166910807292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *result = lvalInt >> >> rvalInt ;",
            "score": 99.2236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) + 'length') ;",
            "score": 99.17145647321429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) + '[].join()') ;",
            "score": 99.17145647321429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) + '') ;",
            "score": 99.17145647321429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) + 'join') ;",
            "score": 99.17145647321429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) + 'a') ;",
            "score": 99.17145647321429,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; default :",
            "score": 99.15707632211539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.14902169363839,
            "correctness": "uncompilable",
            "tokenized_patch": "throw error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> rvalInt ; break ;",
            "score": 99.37119547526042,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt || rvalInt ;",
            "score": 99.350634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int || rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; } result = result ;",
            "score": 99.2762680053711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; } result = result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = lvalInt >> >> rvalInt ;",
            "score": 99.23142496744792,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; else return n ;",
            "score": 99.22753092447917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; else return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt >> rvalInt ; break ;",
            "score": 99.2234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> ;",
            "score": 99.14842810997597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token.LINE :",
            "score": 99.37093313116776,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . LINE :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0; result = lvalInt >> >> rvalInt ;",
            "score": 99.34925079345703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 ; result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> lval rvalInt ;",
            "score": 99.29489135742188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= lvalInt >> >> rvalInt ;",
            "score": 99.2758560180664,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval ;",
            "score": 99.23130967881944,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt ; break ;",
            "score": 99.22698974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> rval ;",
            "score": 99.22333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.17102922712054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : result << rvalInt ;",
            "score": 99.15642841045673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : result << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ?",
            "score": 99.14775739397321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt != lvalInt ;",
            "score": 99.34922790527344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int != lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ;",
            "score": 99.29481090198864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt - >> rvalInt ;",
            "score": 99.27549743652344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> rvalInt << rvalInt ;",
            "score": 99.23116048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt / >> rvalInt ;",
            "score": 99.22323172433036,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; } }",
            "score": 99.1477294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token.UNKNOWN :",
            "score": 99.37063116776316,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token . UNKNOWN :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } return result ;",
            "score": 99.34916687011719,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & lvalInt ;",
            "score": 99.29473114013672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> - rvalInt >> rvalInt ;",
            "score": 99.27522277832031,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> - rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt ; else break ;",
            "score": 99.22397286551339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; else break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> & rvalInt ;",
            "score": 99.22313514122597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> - lvalInt ;",
            "score": 99.15409342447917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; case ; case ;",
            "score": 99.37031106387867,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; case ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> >> >> >> >> rvalInt ;",
            "score": 99.29467010498047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : lvalInt ; }",
            "score": 99.2745361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt >> rvalInt ; }",
            "score": 99.23046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & rvalInt ;",
            "score": 99.22264607747395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rvalInt != rval ) ) {",
            "score": 99.1703632061298,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval CaMeL Int != rval ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & >> rvalInt ;",
            "score": 99.36992331112133,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = rvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.3474349975586,
            "correctness": "uncompilable",
            "tokenized_patch": "if = rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> rvalInt ; ;",
            "score": 99.29425455729167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ?1:0;",
            "score": 99.27450561523438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? 1 : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ switch( n.getType( ) ) {",
            "score": 99.23028094951923,
            "correctness": "uncompilable",
            "tokenized_patch": "{ switch ( n . get CaMeL Type ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = rvalInt >> rvalInt ; break ;",
            "score": 99.22371419270833,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ left ) ;",
            "score": 99.1702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ left ) ;",
            "score": 99.1702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ left ) ;",
            "score": 99.1702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ left ) ;",
            "score": 99.1702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ left ) ;",
            "score": 99.1702880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> >> >> rvalInt ;",
            "score": 99.15223106971153,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt <= rvalInt ;",
            "score": 99.34742024739583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> | rvalInt ;",
            "score": 99.29393659319196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & lvalInt ; }",
            "score": 99.27446746826172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = lvalInt >> >> >> rvalInt ;",
            "score": 99.23025277944711,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> ~ rvalInt ;",
            "score": 99.2219989483173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) { return n ;",
            "score": 99.16910494290866,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) { return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lvalInt >> rvalInt ;",
            "score": 99.15183668870192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt : result ;",
            "score": 99.29371744791666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > lvalInt >> rvalInt ;",
            "score": 99.27381998697916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> ~ rvalInt ;",
            "score": 99.22182992788461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length', left ) ;",
            "score": 99.1689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()', left ) ;",
            "score": 99.1689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '', left ) ;",
            "score": 99.1689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join', left ) ;",
            "score": 99.1689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a', left ) ;",
            "score": 99.1689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >=( int ) rvalInt ;",
            "score": 99.15165492466518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result - lvalInt ;",
            "score": 99.14696451822917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ? rval : rvalInt ; break ;",
            "score": 99.36902573529412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval ? rval : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt = rvalInt ;",
            "score": 99.2936782836914,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >> +1) ;",
            "score": 99.2733866373698,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt > rvalInt ;",
            "score": 99.22932942708333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; result = n ;",
            "score": 99.22328287760416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; result = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >=0?1: lvalInt ;",
            "score": 99.221630859375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >= 0 ? 1 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt +( int ) rval ;",
            "score": 99.15152994791667,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + ( int ) rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; if( result ==0)",
            "score": 99.36896110983456,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; if ( result == 0 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return( int ) lvalInt >> >> >> rvalInt ; }",
            "score": 99.27227783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt >> >> rvalInt ;",
            "score": 99.22926839192708,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> ~ >> rvalInt ;",
            "score": 99.22152273995536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> ~ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>(( int ) rval ) ;",
            "score": 99.15019880022321,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( ( int ) rval ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt < rvalInt >> >> rvalInt ;",
            "score": 99.34683990478516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int < rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'length') ;",
            "score": 99.272216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '[].join()') ;",
            "score": 99.272216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '') ;",
            "score": 99.272216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'join') ;",
            "score": 99.272216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'a') ;",
            "score": 99.272216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << n.getValue( ) ;",
            "score": 99.2228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << n . get CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt << rvalInt ) ;",
            "score": 99.22059849330357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ? rval : rval ; break ;",
            "score": 99.367822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval ? rval : rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt2>> rvalInt ;",
            "score": 99.3467025756836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt3>> rvalInt ;",
            "score": 99.3467025756836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt10>> rvalInt ;",
            "score": 99.3467025756836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt6>> rvalInt ;",
            "score": 99.3467025756836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt32>> rvalInt ;",
            "score": 99.3467025756836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= rvalInt ?1:0;",
            "score": 99.21998697916666,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int <= rval CaMeL Int ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "DEBUG( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.1676494891827,
            "correctness": "uncompilable",
            "tokenized_patch": "DEBUG ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << rvalInt ; break ; case Token.lval :",
            "score": 99.36691123560855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt : rvalInt ;",
            "score": 99.3458251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> = lvalInt >> rvalInt ;",
            "score": 99.27114868164062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval << rvalInt ;",
            "score": 99.22920445033482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = rvalInt << rvalInt ;",
            "score": 99.2221210186298,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval / rvalInt ;",
            "score": 99.21954345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber = n.getDouble( ) ;",
            "score": 99.16748918805804,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.14971923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "Node error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> rvalInt ; }",
            "score": 99.3453598022461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ) { return result ; }",
            "score": 99.27063751220703,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ) { return result ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<( rvalInt >> rval ) ;",
            "score": 99.22919108072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << ( rval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return n ; }",
            "score": 99.2220947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> >> >> rvalInt ;",
            "score": 99.2193094889323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( SHIFT_AMOUNT_OUT_OF_BOUNDS ) ;",
            "score": 99.16741943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( SHIFT _ AMOUNT _ OUT _ OF _ BOUNDS ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & rvalInt >> >> rvalInt ;",
            "score": 99.36603860294117,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1rvalInt >> rvalInt ;",
            "score": 99.34526062011719,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 1 rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.27050018310547,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Node.newNumber( rvalInt ) ;",
            "score": 99.22188895089286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Node . new CaMeL Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt ; ;",
            "score": 99.218994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "replaceChild( result , newNumber ) ;",
            "score": 99.16652425130208,
            "correctness": "uncompilable",
            "tokenized_patch": "replace CaMeL Child ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( n.getType( ) ) ;",
            "score": 99.1447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ++ ;",
            "score": 99.26997593470982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = lvalInt << rvalInt ;",
            "score": 99.22895159040179,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt >> >> rvalInt ;",
            "score": 99.14892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( rvalInt ; break ;",
            "score": 99.144482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> rvalInt ; break ;",
            "score": 99.36522001378677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && lvalInt >> rvalInt ;",
            "score": 99.3448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt ; break ;",
            "score": 99.22885131835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - lvalInt >> >> >> >> rvalInt ;",
            "score": 99.29060872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ; break ; }",
            "score": 99.22868129185268,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = lvalInt << rvalInt ;",
            "score": 99.22068434495192,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt [ >> rvalInt ] ;",
            "score": 99.21890963040866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int [ >> rval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval1;",
            "score": 99.143798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt ; break ; case ;",
            "score": 99.36430089613971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt - rvalInt ;",
            "score": 99.29044596354167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> ; }",
            "score": 99.26861979166667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> n ;",
            "score": 99.2198016826923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; ; ;",
            "score": 99.21856689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> rvalInt ; break ;",
            "score": 99.3642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.29039764404297,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> rvalInt ; }",
            "score": 99.26856407752403,
            "correctness": "wrong",
            "tokenized_patch": "{ result = lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt + >> ~ rvalInt ; break ;",
            "score": 99.21846516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> ~ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>1; break ;",
            "score": 99.14797738882211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> >> rvalInt ;",
            "score": 99.14319864908855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval(0- rvalInt ) ;",
            "score": 99.34346008300781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( 0 - rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval rvalInt - rvalInt ;",
            "score": 99.29007720947266,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt >> rvalInt >> >> rvalInt ;",
            "score": 99.26799774169922,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "setName( n.getType( ) ) ;",
            "score": 99.16364397321429,
            "correctness": "uncompilable",
            "tokenized_patch": "set CaMeL Name ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ] << rvalInt ;",
            "score": 99.14757283528645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ] << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - lvalInt >> >> rvalInt ; break ;",
            "score": 99.1431884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt < rvalInt ;",
            "score": 99.34281158447266,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.28994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ) { return result ; }",
            "score": 99.26764678955078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ) { return result ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p.replaceChild( n , newNumber ) ;",
            "score": 99.22679792131696,
            "correctness": "uncompilable",
            "tokenized_patch": "p . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt << rvalInt ) ;",
            "score": 99.16298421223958,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int << rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> / rvalInt ;",
            "score": 99.1474100748698,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt && rvalInt ;",
            "score": 99.34229278564453,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int && rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> >> lvalInt ;",
            "score": 99.28985595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *rvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.2672119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt << >> rvalInt ;",
            "score": 99.22664388020833,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval >> >> rvalInt ;",
            "score": 99.21804373604911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ] >> rvalInt ;",
            "score": 99.14687093098958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ] >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new lvalInt >> >> rvalInt ; break ;",
            "score": 99.14178059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rvalInt ; break ; default :",
            "score": 99.36268525965073,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> lvalInt >> >> rvalInt ;",
            "score": 99.34197998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt += rvalInt ;",
            "score": 99.2671127319336,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int += rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt ; break ;",
            "score": 99.21867231889205,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rval ?0: lvalInt ;",
            "score": 99.2177978515625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >= rval ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw( FRACTIONAL_BITWISE_OPERAND , right ) ; }",
            "score": 99.16228376116071,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { reportCodeChange( ) ; return n ;",
            "score": 99.14682442801339,
            "correctness": "uncompilable",
            "tokenized_patch": "try { report CaMeL Code CaMeL Change ( ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( lvalInt ) ;",
            "score": 99.14176119290866,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( lval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; if( result ==0)",
            "score": 99.36260986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; if ( result == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - >> rvalInt ;",
            "score": 99.34157307942708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> >> >> rvalInt ;",
            "score": 99.28928920200893,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; }",
            "score": 99.26709856305804,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> rvalInt / rvalInt ;",
            "score": 99.21761648995536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.LSH :",
            "score": 99.16189139229911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . LSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt : rvalInt ;",
            "score": 99.34156087239583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> - rvalInt ;",
            "score": 99.28916713169643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { result = lvalInt >> >> rvalInt ; }",
            "score": 99.26665496826172,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { result = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt <<1;",
            "score": 99.21760777064732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int << 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ^= rvalInt ;",
            "score": 99.21710205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ^= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; /",
            "score": 99.16173444475446,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ? lvalInt >> >> rvalInt ;",
            "score": 99.14083158052884,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ? lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ? rval : rval ; break ;",
            "score": 99.36200358072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval ? rval : rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.3415298461914,
            "correctness": "wrong",
            "tokenized_patch": "result = - rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt ++ >> rvalInt >> rvalInt ;",
            "score": 99.26663970947266,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ++ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "retval = lvalInt << rvalInt ; break ;",
            "score": 99.2245342548077,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.lval :",
            "score": 99.21682303292411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new null ) ;",
            "score": 99.16107177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> & >> >> rvalInt ;",
            "score": 99.36161973741319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt == >> rvalInt ;",
            "score": 99.34084065755208,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ^ lvalInt ;",
            "score": 99.28894805908203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ^ lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt << >> >> rvalInt ;",
            "score": 99.22403658353366,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt ?1:0;",
            "score": 99.2168212890625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND + right ) ;",
            "score": 99.1608417217548,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) { break ; }",
            "score": 99.14540452223558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> rvalInt ;",
            "score": 99.13838334517045,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && >> rvalInt >> rvalInt ;",
            "score": 99.34072875976562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval >> >> >> >> rvalInt ;",
            "score": 99.28890228271484,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >>1;",
            "score": 99.2654541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; try {",
            "score": 99.22382463727679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt / rval ;",
            "score": 99.21672712053571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int / rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << - rvalInt ;",
            "score": 99.14516194661458,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt > rvalInt >> rvalInt ; break ;",
            "score": 99.36147173713235,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rvalInt == rvalInt ;",
            "score": 99.34040069580078,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt & lval ;",
            "score": 99.28868756975446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval0;",
            "score": 99.2167080965909,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> rval ; break ;",
            "score": 99.3614501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt == rvalInt ;",
            "score": 99.34016418457031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> rvalInt ;",
            "score": 99.22316672585227,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> >> >> rvalInt ;",
            "score": 99.2166748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else newNumber = rvalInt >> rvalInt ;",
            "score": 99.15943254743304,
            "correctness": "uncompilable",
            "tokenized_patch": "else new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2>> >> rvalInt ;",
            "score": 99.14431527944711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3>> >> rvalInt ;",
            "score": 99.14431527944711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10>> >> rvalInt ;",
            "score": 99.14431527944711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6>> >> rvalInt ;",
            "score": 99.14431527944711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32>> >> rvalInt ;",
            "score": 99.14431527944711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> & >> rvalInt ;",
            "score": 99.28791809082031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt << rvalInt ;",
            "score": 99.22236772017045,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( n.getType( ) , right ) ;",
            "score": 99.15923200334821,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( n . get CaMeL Type ( ) , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + right ;",
            "score": 99.1431884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> ; break ;",
            "score": 99.13721642127403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> >> lval ;",
            "score": 99.28790283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; */",
            "score": 99.26493013822116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt *>> rvalInt ;",
            "score": 99.21608189174107,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.getDouble( ) ;",
            "score": 99.21356756036931,
            "correctness": "wrong",
            "tokenized_patch": "result = n . get CaMeL Double ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "newNumber =( int ) lvalInt ; break ;",
            "score": 99.1365966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt >> >> >> rvalInt ;",
            "score": 99.22166090745192,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt / rval ;",
            "score": 99.2151348407452,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int / rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt << rvalInt ;",
            "score": 99.1428973858173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt & >> >> rvalInt ;",
            "score": 99.358642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ++ rvalInt ;",
            "score": 99.33882904052734,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ++ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= lvalInt >> rvalInt ;",
            "score": 99.26458333333333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> rvalInt ; }",
            "score": 99.22151402064732,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> ~ rvalInt ; break ;",
            "score": 99.21486002604166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> ~ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt >> rvalInt ;",
            "score": 99.14281116832386,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> rvalInt >> >> rvalInt ;",
            "score": 99.13584681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?1:1; break ;",
            "score": 99.3585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != >> rvalInt >> rvalInt ;",
            "score": 99.33824157714844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> >> >> >> rvalInt ;",
            "score": 99.28655598958333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> >> lvalInt ;",
            "score": 99.26420375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt >> >> >> rvalInt ;",
            "score": 99.22150127704327,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ++ ;",
            "score": 99.21470289963942,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n , n ) ;",
            "score": 99.15721784319196,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n , n ) ;",
            "score": 99.15721784319196,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n , n ) ;",
            "score": 99.15721784319196,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n , n ) ;",
            "score": 99.15721784319196,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n , n ) ;",
            "score": 99.15721784319196,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.length ) ;",
            "score": 99.13584681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.length ) ;",
            "score": 99.13584681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.length ) ;",
            "score": 99.13584681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.length ) ;",
            "score": 99.13584681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.length ) ;",
            "score": 99.13584681919643,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt == rvalInt ;",
            "score": 99.28610229492188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt << rvalInt ;",
            "score": 99.22121360085227,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; }",
            "score": 99.21413167317708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "msg( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.15714205228366,
            "correctness": "uncompilable",
            "tokenized_patch": "msg ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rvalInt ;",
            "score": 99.14098103841145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ; break ; case Token.lval :",
            "score": 99.35811121323529,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : >> >> >> rvalInt ;",
            "score": 99.28557477678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> lvalInt ;",
            "score": 99.26359049479167,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "val = lvalInt >> >> rvalInt ;",
            "score": 99.21919759114583,
            "correctness": "uncompilable",
            "tokenized_patch": "val = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt / rvalInt ;",
            "score": 99.21353853665866,
            "correctness": "wrong",
            "tokenized_patch": "result = lval * rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new Throwable( n.getType( ) ) ;",
            "score": 99.14051164899554,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Throwable ( n . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval rvalInt ; break ;",
            "score": 99.13453020368304,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt >> >> rvalInt ; break ;",
            "score": 99.35656060112848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval2;",
            "score": 99.33672332763672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval3;",
            "score": 99.33672332763672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval10;",
            "score": 99.33672332763672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval6;",
            "score": 99.33672332763672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> rval32;",
            "score": 99.33672332763672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.",
            "score": 99.28514607747395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = lvalInt >> rvalInt ;",
            "score": 99.21835763113839,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= rval ?0: lvalInt ;",
            "score": 99.2135009765625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int <= rval ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new 'length') ;",
            "score": 99.15659877232143,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new '[].join()') ;",
            "score": 99.15659877232143,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new '') ;",
            "score": 99.15659877232143,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new 'join') ;",
            "score": 99.15659877232143,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new 'a') ;",
            "score": 99.15659877232143,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval : lvalInt ;",
            "score": 99.13433837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> | rvalInt >> >> rvalInt ;",
            "score": 99.35618681066177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> | rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>1;",
            "score": 99.2850850423177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> rval ;",
            "score": 99.21809525923295,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?0:0;",
            "score": 99.21340707632211,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 0 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result += lvalInt << rvalInt ; break ;",
            "score": 99.20920973557692,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buffer.replaceChild( n , newNumber ) ;",
            "score": 99.15590122767857,
            "correctness": "uncompilable",
            "tokenized_patch": "buffer . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt << rvalInt ;",
            "score": 99.13858736478366,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt & rvalInt ;",
            "score": 99.35614372702206,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rval ) ;",
            "score": 99.33636881510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> lvalInt ;",
            "score": 99.26278483072916,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "retval = lvalInt << >> >> rvalInt ;",
            "score": 99.21804574819711,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ^ ~ rvalInt ;",
            "score": 99.21339768629808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ^ ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber >> rvalInt ;",
            "score": 99.20869584517045,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt =( int ) lvalInt ;",
            "score": 99.1546630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( lvalInt ;",
            "score": 99.13844807942708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rval -1) ; break ;",
            "score": 99.35555826822916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval - 1 ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt <= rvalInt >> >> rvalInt ;",
            "score": 99.33589172363281,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int <= rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval rvalInt & rvalInt ;",
            "score": 99.28417205810547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return false ;",
            "score": 99.26263834635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> rvalInt ; }",
            "score": 99.21703162560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = Node.newNumber( result ) ;",
            "score": 99.1522216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = Node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt1;",
            "score": 99.13299560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ? rvalInt : rvalInt ;",
            "score": 99.35491584329044,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int > rval ? rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> ^ ~ rvalInt ;",
            "score": 99.21167864118304,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ^ ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.; break ;",
            "score": 99.13588169642857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt1; break ;",
            "score": 99.13207135881696,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ==0;",
            "score": 99.28175354003906,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << rval ;",
            "score": 99.21659029447116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.toString( ) ;",
            "score": 99.21166053185097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?1:0; break ;",
            "score": 99.35457356770833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval ) ;",
            "score": 99.33519398082386,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.lval = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.28144073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "this . lval = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "val = lvalInt >> >> >> rvalInt ;",
            "score": 99.21617713341347,
            "correctness": "uncompilable",
            "tokenized_patch": "val = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> ~ >> rvalInt ;",
            "score": 99.21162632533482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> ~ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , left ; break ;",
            "score": 99.14954485212054,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , left ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return = lvalInt >> rvalInt ;",
            "score": 99.13505415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "return = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , lvalInt ;",
            "score": 99.13039725167411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> -- rvalInt ;",
            "score": 99.3543701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> -- rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> rvalInt >> rvalInt ;",
            "score": 99.26066080729167,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=0?0: lvalInt ;",
            "score": 99.21101888020833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int != 0 ? 0 : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt -( int ) rvalInt ;",
            "score": 99.13483537946429,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "reportCodeChange( 'length'+ n ) ;",
            "score": 99.1300760904948,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '[].join()'+ n ) ;",
            "score": 99.1300760904948,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ''+ n ) ;",
            "score": 99.1300760904948,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'join'+ n ) ;",
            "score": 99.1300760904948,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'a'+ n ) ;",
            "score": 99.1300760904948,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return rval ) ;",
            "score": 99.33366394042969,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt ; ;",
            "score": 99.28126743861607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> rval ;",
            "score": 99.21494547526042,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt ; break ;",
            "score": 99.21001727764423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( n , right ) ;",
            "score": 99.20688883463542,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( n , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval , lvalInt = lvalInt ;",
            "score": 99.13428673377403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval , lval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ; break ;",
            "score": 99.12972005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ?1:1;",
            "score": 99.26020050048828,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? 1 : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt / >> rval ;",
            "score": 99.20983072916667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber =( int ) rvalInt ;",
            "score": 99.14882249098558,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j : result = lvalInt << rvalInt ;",
            "score": 99.13417405348558,
            "correctness": "wrong",
            "tokenized_patch": "j : result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> && rvalInt >> >> rvalInt ;",
            "score": 99.35367838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> && rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt || lvalInt ;",
            "score": 99.33208465576172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.26011657714844,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1; break ; case Token.URSH :",
            "score": 99.2125995342548,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 1 ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt ) & rvalInt ;",
            "score": 99.20976039341518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int ) & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n + right ) ;",
            "score": 99.14856828962054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n + right ) ;",
            "score": 99.14856828962054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n + right ) ;",
            "score": 99.14856828962054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n + right ) ;",
            "score": 99.14856828962054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n + right ) ;",
            "score": 99.14856828962054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return = lvalInt >> >> rvalInt ;",
            "score": 99.13388061523438,
            "correctness": "uncompilable",
            "tokenized_patch": "return = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( lvalInt ) ;",
            "score": 99.12803431919643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; if( result !=0)",
            "score": 99.35335964626736,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; if ( result != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt : rvalInt >> rvalInt ;",
            "score": 99.331982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int : rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> >> >> >> rvalInt ;",
            "score": 99.28080749511719,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -- rvalInt >> >> rvalInt ;",
            "score": 99.2600326538086,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int -- rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rvalInt ; break ; }",
            "score": 99.20958658854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> Number >> rvalInt ;",
            "score": 99.2051532451923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> Number >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.replaceChild( result , newNumber ) ;",
            "score": 99.14754813058036,
            "correctness": "uncompilable",
            "tokenized_patch": "super . replace CaMeL Child ( result , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : break ;",
            "score": 99.13347710503473,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + break ;",
            "score": 99.12595040457589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==1?1:0; break ;",
            "score": 99.35260416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == 1 ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( result >> rvalInt >> >> rvalInt ;",
            "score": 99.27998860677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( result >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> lvalInt >> >> rvalInt ;",
            "score": 99.25997721354166,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt >> >> rvalInt ; break ;",
            "score": 99.21173095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lvalInt / >> rvalInt ;",
            "score": 99.20930698939732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : lvalInt ;",
            "score": 99.13160289417614,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + n ;",
            "score": 99.12550571986607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1/ rvalInt ;",
            "score": 99.33156040736607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer lvalInt = rvalInt << rvalInt ;",
            "score": 99.21161760602679,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer lval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rvalInt ; }",
            "score": 99.20897498497597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result else result = lvalInt >> >> rvalInt ;",
            "score": 99.33150809151786,
            "correctness": "uncompilable",
            "tokenized_patch": "result else result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval ; break ;",
            "score": 99.21140358664773,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt >> rvalInt ;",
            "score": 99.20882474459134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.newNumber =( int ) rvalInt ;",
            "score": 99.14682442801339,
            "correctness": "uncompilable",
            "tokenized_patch": "this . new CaMeL Number = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> rvalInt ; break ; case ;",
            "score": 99.3514404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt - rvalInt ;",
            "score": 99.33121744791667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt == rvalInt ;",
            "score": 99.27914428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> << rvalInt ;",
            "score": 99.21107700892857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>2;",
            "score": 99.13147650824652,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>3;",
            "score": 99.13147650824652,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>10;",
            "score": 99.13147650824652,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>6;",
            "score": 99.13147650824652,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>32;",
            "score": 99.13147650824652,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result result = lvalInt >> rvalInt ; break ;",
            "score": 99.12451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> & >> rvalInt ;",
            "score": 99.35089789496527,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = rvalInt >> >> rvalInt ;",
            "score": 99.33109537760417,
            "correctness": "uncompilable",
            "tokenized_patch": "if = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> / rvalInt ;",
            "score": 99.27888706752232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? lval ++ ;",
            "score": 99.25826822916666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? lval ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt ; break ;",
            "score": 99.21102905273438,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> >> rval ;",
            "score": 99.20829554966518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>2;",
            "score": 99.20145357572116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>3;",
            "score": 99.20145357572116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>10;",
            "score": 99.20145357572116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>6;",
            "score": 99.20145357572116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>32;",
            "score": 99.20145357572116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( rvalInt >= rvalInt ) { break ;",
            "score": 99.13144356863839,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int >= rval CaMeL Int ) { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt == rvalInt ;",
            "score": 99.2784652709961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt >> rvalInt ; break ;",
            "score": 99.21097506009616,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; }",
            "score": 99.20804537259616,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt << rvalInt ; break ;",
            "score": 99.20091834435097,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "end( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.145751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "end ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; if( result ==0)",
            "score": 99.35017903645833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; if ( result == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt , rvalInt ;",
            "score": 99.3306884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int , rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : >> >> >> >> rvalInt ;",
            "score": 99.278271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt &1;",
            "score": 99.25711495535714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int & 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt ; }",
            "score": 99.21058872767857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; case Token.;",
            "score": 99.20797025240384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; case Token . ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> << rvalInt ; break ;",
            "score": 99.34942626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>1; break ;",
            "score": 99.33027648925781,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> *rvalInt ;",
            "score": 99.27783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> >> >> rval ; }",
            "score": 99.21056256975446,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?1:0;",
            "score": 99.20791391225961,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n , left ) ;",
            "score": 99.14474051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n , left ) ;",
            "score": 99.14474051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n , left ) ;",
            "score": 99.14474051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n , left ) ;",
            "score": 99.14474051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n , left ) ;",
            "score": 99.14474051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rvalInt ; return result ;",
            "score": 99.25700160435268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; ;",
            "score": 99.20758056640625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cx.replaceChild( n , newNumber ) ;",
            "score": 99.14333670479911,
            "correctness": "uncompilable",
            "tokenized_patch": "cx . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt :",
            "score": 99.12033913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==1?1:1; break ;",
            "score": 99.34891764322917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == 1 ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return true ;",
            "score": 99.25652669270833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval.intValue( ) ;",
            "score": 99.20745294744319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval . int CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt << >> rvalInt ; break ;",
            "score": 99.19930594308036,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> - rvalInt ;",
            "score": 99.12861772017045,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt :",
            "score": 99.11976114908855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rval : rval ; break ;",
            "score": 99.3486083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval : rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> - >> rvalInt ;",
            "score": 99.27722981770833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> - >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.21019635881696,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>0;",
            "score": 99.12794799804688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber =( int ) rval ;",
            "score": 99.11843039772727,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt & rvalInt ;",
            "score": 99.25570475260416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt ) >> rvalInt ;",
            "score": 99.20707484654018,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> rvalInt << rvalInt ;",
            "score": 99.1409912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>2;",
            "score": 99.12783813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>3;",
            "score": 99.12783813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>10;",
            "score": 99.12783813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>6;",
            "score": 99.12783813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>32;",
            "score": 99.12783813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right ) ; {",
            "score": 99.11526053292411,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ; {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> < rvalInt ;",
            "score": 99.34853891225961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt ;",
            "score": 99.32909284319196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt - rvalInt ;",
            "score": 99.27642059326172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != lvalInt ; return result ;",
            "score": 99.25550188337054,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != lval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.20982142857143,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt >> & rvalInt ;",
            "score": 99.20628138950893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "bind( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.14052170973558,
            "correctness": "uncompilable",
            "tokenized_patch": "bind ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt >> rvalInt ; break ;",
            "score": 99.12775530133929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt | rvalInt ;",
            "score": 99.32893371582031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >>1;",
            "score": 99.276123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt % rvalInt ;",
            "score": 99.25537109375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int % rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "b = lvalInt << rvalInt ; break ;",
            "score": 99.20947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ^= rvalInt ;",
            "score": 99.20595005580357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ^= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt ; break ;",
            "score": 99.1971435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber = n.getType( ) ;",
            "score": 99.14032854352679,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = n . get CaMeL Type ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Error( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.11397611177884,
            "correctness": "uncompilable",
            "tokenized_patch": "Error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; ; break ;",
            "score": 99.348095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += rvalInt >> >> rvalInt >> rvalInt ;",
            "score": 99.32882690429688,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt - lvalInt ;",
            "score": 99.27611541748047,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt >>1) ;",
            "score": 99.25495256696429,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int >> 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rval ;",
            "score": 99.20505099826389,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt ; return rval ;",
            "score": 99.19670758928571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; return rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , left ,",
            "score": 99.11339314778645,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> rvalInt ; ;",
            "score": 99.34772406684027,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt !=1;",
            "score": 99.27600860595703,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int != 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.lval = lvalInt >> >> rvalInt ;",
            "score": 99.25323486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "this . lval = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval ; break ;",
            "score": 99.20923868815105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break n ;",
            "score": 99.19628034319196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt > >> rvalInt ;",
            "score": 99.3277079264323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int > >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & >> >> >> >> rvalInt ;",
            "score": 99.27578938802084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval ;",
            "score": 99.20902506510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1/ rvalInt >> rvalInt ;",
            "score": 99.20465959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 / rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; finally {",
            "score": 99.19619315011161,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,2) ;",
            "score": 99.1377704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,3) ;",
            "score": 99.1377704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,10) ;",
            "score": 99.1377704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,6) ;",
            "score": 99.1377704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,32) ;",
            "score": 99.1377704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> rvalInt ; break ;",
            "score": 99.3475341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt - lvalInt ;",
            "score": 99.32684733072917,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt < rvalInt ;",
            "score": 99.27577903053977,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & ~ >> rvalInt ;",
            "score": 99.20331682477679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & ~ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else newNumber = lvalInt << rvalInt ;",
            "score": 99.13656180245536,
            "correctness": "uncompilable",
            "tokenized_patch": "else new CaMeL Number = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt =( int ) rval ;",
            "score": 99.11183860085227,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >> rvalInt ; break ; default :",
            "score": 99.34746237362133,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt.) ;",
            "score": 99.32652064732143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt + lvalInt ;",
            "score": 99.27547454833984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt ; } return n ;",
            "score": 99.20798165457589,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int ; } return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "warn( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.1362774188702,
            "correctness": "uncompilable",
            "tokenized_patch": "warn ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; if( result ==0)",
            "score": 99.34718951056985,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; if ( result == 0 )",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "final result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.27491861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt < rvalInt ;",
            "score": 99.2519287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / lvalInt >> >> rvalInt ;",
            "score": 99.20204380580357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rvalInt = rvalInt << rvalInt ;",
            "score": 99.19536481584821,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "append( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.1226337139423,
            "correctness": "uncompilable",
            "tokenized_patch": "append ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & rvalInt ; break ;",
            "score": 99.34659576416016,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> >> rvalInt ;",
            "score": 99.27477088341347,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> ; }",
            "score": 99.25185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt << >> rvalInt ;",
            "score": 99.20571463448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt *>> rvalInt ;",
            "score": 99.20186070033482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; ;",
            "score": 99.11140659877232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >= rvalInt ;",
            "score": 99.34636374080883,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rval ; case Token.URSH :",
            "score": 99.2049560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> rvalInt ;",
            "score": 99.20184936523438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "info( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.1346435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "info ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=( int ) rvalInt ;",
            "score": 99.12254115513393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> > rvalInt ; break ;",
            "score": 99.34598795572917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> > rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ==1;",
            "score": 99.27435709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int == 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.result = lvalInt >> >> rvalInt ;",
            "score": 99.25030517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "super . result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result -= lvalInt >> >> rvalInt ;",
            "score": 99.13404337565105,
            "correctness": "uncompilable",
            "tokenized_patch": "result -= lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> | rvalInt >> >> rvalInt ;",
            "score": 99.34598795572917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> | rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt - rvalInt ;",
            "score": 99.3240966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = rvalInt >> >> >> >> rvalInt ;",
            "score": 99.27393450055804,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; / /",
            "score": 99.24939836774554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt & >> rvalInt ;",
            "score": 99.201416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ? right ;",
            "score": 99.1213848407452,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ? right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval : result ; break ;",
            "score": 99.10973182091347,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : result ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt - rvalInt ;",
            "score": 99.3231201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ++ ;",
            "score": 99.24851481119792,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "long rvalInt = rvalInt << rvalInt ;",
            "score": 99.20382254464286,
            "correctness": "uncompilable",
            "tokenized_patch": "long rval CaMeL Int = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> rvalInt >> rvalInt ;",
            "score": 99.20132882254464,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rvalInt ) { break ;",
            "score": 99.12125941685268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval CaMeL Int ) { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> << rvalInt ; break ;",
            "score": 99.34594048394098,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval1>> rvalInt ;",
            "score": 99.3218017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.27376302083333,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> / rvalInt ;",
            "score": 99.2036884014423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==( int ) lvalInt ;",
            "score": 99.12088448660714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> rvalInt >> rvalInt ;",
            "score": 99.10837965745192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? lvalInt : rvalInt ;",
            "score": 99.34532973345588,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval( rvalInt ) ;",
            "score": 99.32176920572917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> rvalInt ; ;",
            "score": 99.27330017089844,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> >> ;",
            "score": 99.24754231770834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> >> >> >> rval ;",
            "score": 99.20240129743304,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> == >> rvalInt ;",
            "score": 99.20106724330357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else newNumber =( int ) rvalInt ;",
            "score": 99.13323505108173,
            "correctness": "uncompilable",
            "tokenized_patch": "else new CaMeL Number = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> + rvalInt ;",
            "score": 99.1207608309659,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result |= lvalInt >> >> rvalInt ;",
            "score": 99.1082051595052,
            "correctness": "uncompilable",
            "tokenized_patch": "result |= lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> << rvalInt ;",
            "score": 99.3451789407169,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt.1;",
            "score": 99.27305501302084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> ; break ;",
            "score": 99.247119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer lvalInt = lvalInt << rvalInt ;",
            "score": 99.20177350725446,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer lval CaMeL Int = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> ~ rvalInt ;",
            "score": 99.20028250558036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; System.",
            "score": 99.19111851283482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -( int ) lvalInt ;",
            "score": 99.12046595982143,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - ( int ) lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt - rvalInt >> rvalInt ; break ;",
            "score": 99.34428854549633,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >> rval ) ;",
            "score": 99.32080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> - rvalInt ;",
            "score": 99.27298990885417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long rvalInt = rvalInt >> rvalInt ;",
            "score": 99.20052664620536,
            "correctness": "uncompilable",
            "tokenized_patch": "long rval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt & rvalInt ;",
            "score": 99.20000348772321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt << n ;",
            "score": 99.19090857872597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.result = lvalInt >> >> rvalInt ;",
            "score": 99.13119942801339,
            "correctness": "uncompilable",
            "tokenized_patch": "result . result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> - rvalInt ;",
            "score": 99.12030029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> rval ;",
            "score": 99.10811070033482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.1;",
            "score": 99.3206787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; result ++ ;",
            "score": 99.27269694010417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; result ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? rval ;",
            "score": 99.24468122209821,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != lvalInt ) {",
            "score": 99.20006306966145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != lval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt >> & rvalInt ;",
            "score": 99.19977678571429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt << >> rvalInt ;",
            "score": 99.19057210286458,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt << rvalInt ; break ;",
            "score": 99.12030029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final result = lvalInt >> rvalInt ; break ;",
            "score": 99.10798863002232,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> & rvalInt ; break ;",
            "score": 99.34365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> lvalInt ;",
            "score": 99.27260335286458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << >> >> rvalInt ;",
            "score": 99.19989885602679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return result ;",
            "score": 99.19049072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval << rvalInt ;",
            "score": 99.12018291766827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt >> >> rvalInt ; break ;",
            "score": 99.10738699776786,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> << rvalInt ;",
            "score": 99.34306335449219,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ==1;",
            "score": 99.31948416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> lval ;",
            "score": 99.27222442626953,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return 1;",
            "score": 99.24404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt2;",
            "score": 99.19930594308036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt3;",
            "score": 99.19930594308036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt10;",
            "score": 99.19930594308036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt6;",
            "score": 99.19930594308036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt32;",
            "score": 99.19930594308036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> rvalInt ; break ;",
            "score": 99.19922746930804,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break.",
            "score": 99.10628568209134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> >> rvalInt ; break ;",
            "score": 99.34276580810547,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> rval ; }",
            "score": 99.1990966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt [ rvalInt ] ;",
            "score": 99.19876098632812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int [ rval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt =( int ) rvalInt ;",
            "score": 99.1898905436198,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt >> >> >> >> rvalInt ;",
            "score": 99.34246148003473,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt == lval ;",
            "score": 99.27177429199219,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int == lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt ; }",
            "score": 99.24332682291667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt >>1;",
            "score": 99.18909630408653,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> rvalInt - rvalInt ;",
            "score": 99.31821986607143,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >= rvalInt ;",
            "score": 99.27078683035714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == -1?0:0;",
            "score": 99.19861711774554,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == - 1 ? 0 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = n.newNumber( rvalInt ) ;",
            "score": 99.18864222935268,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . new CaMeL Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.;",
            "score": 99.11922200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> | rvalInt >> >> >> rvalInt ;",
            "score": 99.34120008680556,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> | rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : result ) ;",
            "score": 99.31800944010416,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << & rvalInt ;",
            "score": 99.1984151204427,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rvalInt ) return n ;",
            "score": 99.19746616908482,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval CaMeL Int ) return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt << >> rvalInt ;",
            "score": 99.18843587239583,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double lvalInt =( int ) rvalInt ;",
            "score": 99.129150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "double lval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ?( int ) rval ;",
            "score": 99.11661783854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , n ) ;",
            "score": 99.10489595853366,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> || rvalInt >> >> rvalInt ;",
            "score": 99.34095594618056,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> || rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final String result = lvalInt >> >> rvalInt ;",
            "score": 99.27035958426339,
            "correctness": "uncompilable",
            "tokenized_patch": "final String result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> rvalInt ; break ;",
            "score": 99.24139811197917,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt << >> rvalInt ;",
            "score": 99.19720458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int = lvalInt >> rvalInt ;",
            "score": 99.18828473772321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber = n.getName( ) ;",
            "score": 99.12869698660714,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = n . get CaMeL Name ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result n = lvalInt >> >> rvalInt ;",
            "score": 99.11658653846153,
            "correctness": "uncompilable",
            "tokenized_patch": "result n = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : >> rvalInt ;",
            "score": 99.31793212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt rvalInt ;",
            "score": 99.26991373697916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == rvalInt ? ;",
            "score": 99.19800743689903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == rval CaMeL Int ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ; }",
            "score": 99.19617716471355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval << >> rvalInt ;",
            "score": 99.10428292410714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> >> rvalInt ; break ;",
            "score": 99.34082794189453,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { switch( n.getType( ) ) {",
            "score": 99.19617571149554,
            "correctness": "uncompilable",
            "tokenized_patch": "try { switch ( n . get CaMeL Type ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt << rvalInt ;",
            "score": 99.18764426491477,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( right.getType( ) ) ;",
            "score": 99.12710571289062,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( right . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | lvalInt ;",
            "score": 99.11553400213069,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int | lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & & rvalInt >> >> >> rvalInt ;",
            "score": 99.34054904513889,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt != rvalInt ;",
            "score": 99.3169677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( String ) lvalInt >> >> rvalInt ;",
            "score": 99.24045235770089,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( String ) lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt [0] & rvalInt ;",
            "score": 99.19671630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int [ 0 ] & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & Node.URSH ;",
            "score": 99.1954854329427,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & Node . UR@@ SH ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return lval ;",
            "score": 99.18760463169643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + n ;",
            "score": 99.11551607572116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.26837158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?1:0;",
            "score": 99.19625150240384,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval >> >> >> >> >> rvalInt ;",
            "score": 99.18759390024039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> << rvalInt ;",
            "score": 99.33969295726104,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt | lvalInt ;",
            "score": 99.26792805989584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int | lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new IllegalStateException( 'length') ;",
            "score": 99.24012247721355,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '[].join()') ;",
            "score": 99.24012247721355,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '') ;",
            "score": 99.24012247721355,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'join') ;",
            "score": 99.24012247721355,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'a') ;",
            "score": 99.24012247721355,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt *>> rval ;",
            "score": 99.19602748325893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int * >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( n , left ) ;",
            "score": 99.18735758463542,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( n , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ,1) ;",
            "score": 99.12595778245192,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result.getDouble( ) ;",
            "score": 99.11499962439903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb = lvalInt >> >> rvalInt ;",
            "score": 99.10000610351562,
            "correctness": "uncompilable",
            "tokenized_patch": "sb = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rvalInt ; ;",
            "score": 99.33958524816177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt !=1;",
            "score": 99.31475830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int != 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.26787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lval >> >> rvalInt ;",
            "score": 99.19546508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = lvalInt >> >> rvalInt ; break ;",
            "score": 99.19317626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "post( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.12485914963942,
            "correctness": "uncompilable",
            "tokenized_patch": "post ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval + rvalInt ;",
            "score": 99.11488694411058,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>0rvalInt ;",
            "score": 99.314697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> 0 rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( result >> rvalInt >> >> >> rvalInt ;",
            "score": 99.26778411865234,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( result >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> lvalInt >> rvalInt ;",
            "score": 99.23939732142857,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.hashCode( ) ;",
            "score": 99.19512469951923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . hash CaMeL Code ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> >> rval ; }",
            "score": 99.19312395368304,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node(( int ) rvalInt ) ;",
            "score": 99.18581717354911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Jump newNumber = rvalInt >> rvalInt ;",
            "score": 99.12319510323661,
            "correctness": "uncompilable",
            "tokenized_patch": "Jump new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt >> & rvalInt ;",
            "score": 99.33934190538194,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval ) >> rvalInt ;",
            "score": 99.31460774739584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> >> >> >> >> >> rvalInt ;",
            "score": 99.26688385009766,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lvalInt ) ;",
            "score": 99.23907470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt - rvalInt ) ;",
            "score": 99.19387381417411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int - rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try newNumber = rvalInt >> rvalInt ;",
            "score": 99.123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "try new CaMeL Number = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt : result ;",
            "score": 99.11437049278847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; case Token.lval :",
            "score": 99.33932834201389,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; case Token . lval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if lvalInt = rvalInt >> >> rvalInt ;",
            "score": 99.3141357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if lval CaMeL Int = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt :0;",
            "score": 99.26654924665179,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer lvalInt = rvalInt >> rvalInt ;",
            "score": 99.19231305803571,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rval >> rvalInt ;",
            "score": 99.11330159505208,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> >> rvalInt ; ;",
            "score": 99.33896213107639,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt : rvalInt ;",
            "score": 99.3139892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt &1;",
            "score": 99.2664794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int & 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0>> >> rvalInt >> >> rvalInt ;",
            "score": 99.23601422991071,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt + >> rval ;",
            "score": 99.19376918247768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int + >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b = lvalInt << >> >> >> rvalInt ;",
            "score": 99.19103131975446,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int << >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( rval , newNumber ) ;",
            "score": 99.09911237444196,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( rval , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> rvalInt ; break ; }",
            "score": 99.33858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt & rvalInt ;",
            "score": 99.23599446614584,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rval ;",
            "score": 99.19322374131944,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> rvalInt ; break ;",
            "score": 99.19089181082589,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? lvalInt ;",
            "score": 99.11237127130681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + right ;",
            "score": 99.09898158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt : >> >> >> rvalInt ;",
            "score": 99.33846028645833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int : >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt & lvalInt ;",
            "score": 99.26629638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> rvalInt ; }",
            "score": 99.23586600167411,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >= rvalInt ;",
            "score": 99.1929180438702,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt >> >> >> rvalInt ;",
            "score": 99.33842198988971,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - rvalInt - rvalInt ;",
            "score": 99.312060546875,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int - rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return *rvalInt >> >> rvalInt ;",
            "score": 99.23557535807292,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >= rvalInt ; break ;",
            "score": 99.19276646205357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber >> rvalInt ; break ;",
            "score": 99.17975323016827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ Node.[ ) ;",
            "score": 99.12099783761161,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . [ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ Node.[ ) ;",
            "score": 99.12099783761161,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . [ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ Node.[ ) ;",
            "score": 99.12099783761161,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . [ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ Node.[ ) ;",
            "score": 99.12099783761161,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . [ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ Node.[ ) ;",
            "score": 99.12099783761161,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + Node . [ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt =( int ) lvalInt ;",
            "score": 99.10997596153847,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval , rvalInt ;",
            "score": 99.31169782366071,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval , rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval */ rvalInt >> rvalInt ;",
            "score": 99.19267054966518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * / rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt =( int ) rval ;",
            "score": 99.19010786576705,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.max ;",
            "score": 99.1097412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . max ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break",
            "score": 99.09776814778645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt >> >> >> >> rvalInt ;",
            "score": 99.33816867404514,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ) { break ; }",
            "score": 99.23538411458334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> % rvalInt ;",
            "score": 99.1922098795573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> % rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Node.newNumber( result ) ; break ;",
            "score": 99.18978445870536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Node . new CaMeL Number ( result ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; finally {",
            "score": 99.179443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> >> rvalInt ;",
            "score": 99.11996459960938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( getCause( ) ) ;",
            "score": 99.09632219587054,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( get CaMeL Cause ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval - rvalInt ;",
            "score": 99.31097412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> >> >> >> rvalInt ;",
            "score": 99.263330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *>> rvalInt >> rvalInt ;",
            "score": 99.19207763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s = lvalInt >> >> rvalInt ;",
            "score": 99.1895751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "s = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return null ;",
            "score": 99.17929513113839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : right ;",
            "score": 99.1078632061298,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n >> rvalInt >> >> rvalInt ;",
            "score": 99.09595665564903,
            "correctness": "uncompilable",
            "tokenized_patch": "return n >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if lvalInt = rvalInt >> rvalInt ;",
            "score": 99.31037248883929,
            "correctness": "uncompilable",
            "tokenized_patch": "if lval CaMeL Int = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lvalInt ; }",
            "score": 99.262939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long rvalInt = lvalInt >> rvalInt ;",
            "score": 99.18944440569196,
            "correctness": "uncompilable",
            "tokenized_patch": "long rval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "count = lvalInt >> rvalInt ;",
            "score": 99.1075439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "count = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt rvalInt ;",
            "score": 99.2620849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0/ >> >> rvalInt ;",
            "score": 99.19155883789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s = lvalInt >> >> >> rvalInt ;",
            "score": 99.1893310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "s = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( rvalInt ;",
            "score": 99.09569373497597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; / ;",
            "score": 99.30984933035714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; / ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lval ? lval : lvalInt ;",
            "score": 99.23349609375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == lval ? lval : lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "Object result = lvalInt >> >> rvalInt ;",
            "score": 99.19131234975961,
            "correctness": "uncompilable",
            "tokenized_patch": "Object result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt << >> rvalInt ; break ;",
            "score": 99.18909563337054,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.LSH : result = lvalInt ;",
            "score": 99.11669049944196,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . LSH : result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval >> rvalInt ;",
            "score": 99.10708383413461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new lvalInt >> rvalInt ; break ;",
            "score": 99.09456089564732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> lvalInt ;",
            "score": 99.30847981770833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >= lvalInt ;",
            "score": 99.23283247514205,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ^ >> rvalInt ;",
            "score": 99.1903827373798,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ^ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval2>> rvalInt ;",
            "score": 99.30703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval3>> rvalInt ;",
            "score": 99.30703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval10>> rvalInt ;",
            "score": 99.30703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval6>> rvalInt ;",
            "score": 99.30703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval32>> rvalInt ;",
            "score": 99.30703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ) return 0;",
            "score": 99.23277936662946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ) return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ~ ~ rvalInt ;",
            "score": 99.18980994591347,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ~ ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "head = lvalInt >> >> rvalInt ;",
            "score": 99.18863932291667,
            "correctness": "uncompilable",
            "tokenized_patch": "head = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result -= lvalInt >> rvalInt ;",
            "score": 99.11561168323864,
            "correctness": "uncompilable",
            "tokenized_patch": "result -= lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lvalInt << rval ) ;",
            "score": 99.09398542131696,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval CaMeL Int << rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval ) ;",
            "score": 99.30670166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> lval ;",
            "score": 99.25936185396634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.replaceChild( n , newNumber ) ;",
            "score": 99.18845040457589,
            "correctness": "uncompilable",
            "tokenized_patch": "node . replace CaMeL Child ( n , new CaMeL Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= lvalInt >> >> rvalInt ; break ;",
            "score": 99.09327110877403,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> <= rvalInt ; break ;",
            "score": 99.33301595052083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> <= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>1- rvalInt ;",
            "score": 99.30636393229166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> 1 - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> lvalInt ;",
            "score": 99.25931222098214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt / rvalInt ;",
            "score": 99.18907819475446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int(( int ) rvalInt ) ;",
            "score": 99.17485700334821,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ( ( int ) rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = value >> rvalInt >> rvalInt ;",
            "score": 99.10555326021634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = value >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> break ;",
            "score": 99.0923321063702,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> rvalInt ; break ;",
            "score": 99.3329719094669,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> >> rvalInt ;",
            "score": 99.30543009440105,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> >> >> ;",
            "score": 99.23116861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval *rvalInt ;",
            "score": 99.18885149274554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; continue ;",
            "score": 99.18836388221153,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt << >> rvalInt ;",
            "score": 99.1748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.result = lvalInt >> rvalInt ;",
            "score": 99.11294320913461,
            "correctness": "uncompilable",
            "tokenized_patch": "result . result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != rvalInt ; break ;",
            "score": 99.1053466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval : result ; break ;",
            "score": 99.09230259486607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval : result ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & rvalInt ; break ;",
            "score": 99.33295549665179,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt - rvalInt ;",
            "score": 99.3050048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *rvalInt >> rvalInt >> rvalInt ;",
            "score": 99.23030598958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt / rvalInt ;",
            "score": 99.1885986328125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval / rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "tmp = lvalInt << >> >> rvalInt ;",
            "score": 99.18832632211539,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pre( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.10943134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "pre ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double error( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.09197998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "double error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == rval ) ;",
            "score": 99.30467122395834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = rvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.25762532552083,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = rval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ~ rval ;",
            "score": 99.18840997869319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ~ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt << >> rvalInt ;",
            "score": 99.18760172526042,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fail( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.1079571063702,
            "correctness": "uncompilable",
            "tokenized_patch": "fail ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> += lvalInt ;",
            "score": 99.10342407226562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> += lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt ; break ;",
            "score": 99.18628946940105,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt << >> rvalInt ) ;",
            "score": 99.10763784555289,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int << >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>1rvalInt ;",
            "score": 99.10324096679688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 1 rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt *rvalInt ;",
            "score": 99.30291341145833,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? rval ++ ;",
            "score": 99.22940266927084,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? rval ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == >> rvalInt ;",
            "score": 99.1874248798077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> >> >> rval ;",
            "score": 99.18624173677884,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "bad( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.10704627403847,
            "correctness": "uncompilable",
            "tokenized_patch": "bad ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( >> rvalInt ) ;",
            "score": 99.09068080357143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt / rvalInt ;",
            "score": 99.33170572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt && rvalInt >> rvalInt ;",
            "score": 99.3025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int && rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> rvalInt >> >> >> >> rvalInt ;",
            "score": 99.2564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> rval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ >> >> rvalInt ;",
            "score": 99.18724646935097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t = lvalInt >> >> rvalInt ;",
            "score": 99.10630289713542,
            "correctness": "uncompilable",
            "tokenized_patch": "t = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += rvalInt << rvalInt ;",
            "score": 99.1010272686298,
            "correctness": "wrong",
            "tokenized_patch": "result = lval += rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt & rvalInt ; break ;",
            "score": 99.3311408547794,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lvalInt >> rvalInt ;",
            "score": 99.2290771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> % rvalInt ;",
            "score": 99.186279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> % rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = rvalInt << >> rvalInt ;",
            "score": 99.17136056082589,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) || lvalInt ;",
            "score": 99.30232747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & lvalInt >> rvalInt ;",
            "score": 99.25315755208334,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int & lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return result >> >> rvalInt >> rvalInt ;",
            "score": 99.22860952524039,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt ? ;",
            "score": 99.18604454627403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> += rvalInt ;",
            "score": 99.1007080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> += rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval1;",
            "score": 99.08689186789773,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval ) ;",
            "score": 99.30209585336539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> - lval ;",
            "score": 99.25315638950893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> - lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt & rvalInt ;",
            "score": 99.22855631510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0*rvalInt / rvalInt ;",
            "score": 99.185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 * rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber << rvalInt >> rvalInt ;",
            "score": 99.17033168247768,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - lvalInt >> rvalInt ;",
            "score": 99.10012817382812,
            "correctness": "wrong",
            "tokenized_patch": "result = - lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> rval ) - rvalInt ;",
            "score": 99.30113118489584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval ) - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return break ;",
            "score": 99.16969517299107,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long rvalInt =( int ) rvalInt ;",
            "score": 99.10360013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "long rval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>0; break ;",
            "score": 99.10010782877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1+ rvalInt ;",
            "score": 99.30100795200893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ++ >> rvalInt ;",
            "score": 99.22796630859375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ++ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> & rval ;",
            "score": 99.1851806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> & rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> rvalInt ; }",
            "score": 99.1817157451923,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> >> rvalInt = rvalInt ;",
            "score": 99.16893659319196,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> >> rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval - rvalInt ;",
            "score": 99.09987229567308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , lval ) ;",
            "score": 99.0848388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> rval ; break ;",
            "score": 99.33009338378906,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - rval ) ;",
            "score": 99.30094691685268,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ? rvalInt ;",
            "score": 99.252685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt - rvalInt ;",
            "score": 99.22772623697917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> *= rvalInt ;",
            "score": 99.18494591346153,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> *= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; ; break ;",
            "score": 99.16884940011161,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e = lvalInt >> >> rvalInt ;",
            "score": 99.10301717122395,
            "correctness": "uncompilable",
            "tokenized_patch": "e = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lval , right ) ;",
            "score": 99.08438110351562,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rvalInt >> rvalInt ; break ;",
            "score": 99.32990579044117,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * rval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & rvalInt >> rvalInt ;",
            "score": 99.30091959635416,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int & rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> >> >> lval ;",
            "score": 99.25264485677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> ; }",
            "score": 99.22769869290866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> rval ;",
            "score": 99.1848876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t = lvalInt >> rvalInt ;",
            "score": 99.1023837002841,
            "correctness": "uncompilable",
            "tokenized_patch": "t = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= rvalInt ;",
            "score": 99.0996981534091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb = lvalInt >> rvalInt ;",
            "score": 99.08393998579545,
            "correctness": "uncompilable",
            "tokenized_patch": "sb = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & >> rvalInt ; break ;",
            "score": 99.32975769042969,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> == rvalInt ;",
            "score": 99.25253731863839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt >> >> rvalInt ; }",
            "score": 99.22769368489584,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *>> rvalInt / rvalInt ;",
            "score": 99.18484061104911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , rval ) ;",
            "score": 99.16854154146634,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.10162353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = lvalInt >> rvalInt ; break ;",
            "score": 99.09836050180289,
            "correctness": "uncompilable",
            "tokenized_patch": "i = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?1:1; break ;",
            "score": 99.3297119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt rval ) ;",
            "score": 99.29994419642857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>0;",
            "score": 99.25179349459134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? >> rvalInt : rval ;",
            "score": 99.18457903180804,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? >> rval CaMeL Int : rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp = lvalInt << rvalInt ; break ;",
            "score": 99.17954664963942,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error = FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.10116811899039,
            "correctness": "uncompilable",
            "tokenized_patch": "error = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>2>> rvalInt ;",
            "score": 99.0979755108173,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>3>> rvalInt ;",
            "score": 99.0979755108173,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>10>> rvalInt ;",
            "score": 99.0979755108173,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>6>> rvalInt ;",
            "score": 99.0979755108173,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >>32>> rvalInt ;",
            "score": 99.0979755108173,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; ; break ;",
            "score": 99.3296890258789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> rval ) ;",
            "score": 99.29989188058036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == lval ;",
            "score": 99.25140380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; return value ;",
            "score": 99.225927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return value ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "res = lvalInt >> >> >> rvalInt ;",
            "score": 99.1795184795673,
            "correctness": "uncompilable",
            "tokenized_patch": "res = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "match( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.09998497596153,
            "correctness": "uncompilable",
            "tokenized_patch": "match ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >>1- rvalInt ;",
            "score": 99.29865373883929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> 1 - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval - rvalInt ;",
            "score": 99.25130208333333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>1; }",
            "score": 99.2255615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> *= rvalInt ;",
            "score": 99.18348185221355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> *= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; continue ;",
            "score": 99.1777813251202,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "consume( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "consume ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> -- rvalInt ;",
            "score": 99.09609985351562,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> -- rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rval : break ;",
            "score": 99.0802889737216,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ? lvalInt : rvalInt ;",
            "score": 99.32902975643383,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int > rval ? lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval( rval ) ;",
            "score": 99.29803936298077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lvalInt ; ;",
            "score": 99.25118001302083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= >> ~ rvalInt ;",
            "score": 99.18238243689903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double result = lvalInt >> >> rvalInt ;",
            "score": 99.17758413461539,
            "correctness": "uncompilable",
            "tokenized_patch": "double result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : lval ;",
            "score": 99.09435096153847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >1?1:0; break ;",
            "score": 99.32898763020833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > 1 ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt + rval ;",
            "score": 99.18226841517857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int + rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "res = lvalInt >> >> rvalInt ;",
            "score": 99.17706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "res = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.RSH : return n ;",
            "score": 99.096923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . RSH : return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; */",
            "score": 99.22489711216518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( >> >> >> rvalInt ) ;",
            "score": 99.18203500600961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( >> >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "head = lvalInt >> >> >> rvalInt ;",
            "score": 99.1769268329327,
            "correctness": "uncompilable",
            "tokenized_patch": "head = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & right ;",
            "score": 99.09351524939903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <1?1:0; break ;",
            "score": 99.32893880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < 1 ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval.) ;",
            "score": 99.296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + lval ;",
            "score": 99.25070626395089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ;  return(",
            "score": 99.22487967354911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; return (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> [ rvalInt ] ;",
            "score": 99.18187537560097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> [ rval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber >> >> rvalInt ;",
            "score": 99.16330973307292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pos = lvalInt >> >> rvalInt ;",
            "score": 99.09605916341145,
            "correctness": "uncompilable",
            "tokenized_patch": "pos = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( lvalInt ;",
            "score": 99.09325232872597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> && rvalInt >> >> rvalInt ;",
            "score": 99.32870662913604,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> && rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; / /",
            "score": 99.22460123697917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; default :",
            "score": 99.18168501420455,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rval ) {",
            "score": 99.17440185546874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <1?1:1; break ;",
            "score": 99.32848307291667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < 1 ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt >> rvalInt ;",
            "score": 99.29622977120536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> lval rvalInt ;",
            "score": 99.2503173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ) { break ; }",
            "score": 99.2242431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >= ~ rvalInt ;",
            "score": 99.18160306490384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >= ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt << rvalInt ; }",
            "score": 99.17374361478366,
            "correctness": "wrong",
            "tokenized_patch": "{ result = lval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = this.lvalInt >> rvalInt ;",
            "score": 99.16292630709134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = this . lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rval >= rvalInt ) ) {",
            "score": 99.0942852313702,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= rval CaMeL Int ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval == rvalInt >> rvalInt ;",
            "score": 99.0921161358173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval == rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; break ; case Token ;",
            "score": 99.32743566176471,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; break ; case Token ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( result >> >> rvalInt >> >> rvalInt ;",
            "score": 99.2502197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( result >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval , lval ) ;",
            "score": 99.18135986328124,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rvalInt ; }",
            "score": 99.17349243164062,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; else",
            "score": 99.1626727764423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pos = lvalInt >> rvalInt ;",
            "score": 99.09416060014205,
            "correctness": "uncompilable",
            "tokenized_patch": "pos = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> - rvalInt ;",
            "score": 99.09200345552884,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rvalInt >> >> rvalInt ;",
            "score": 99.32738539751838,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =2>> rvalInt >> >> rvalInt ;",
            "score": 99.29538399832589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =3>> rvalInt >> >> rvalInt ;",
            "score": 99.29538399832589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =10>> rvalInt >> >> rvalInt ;",
            "score": 99.29538399832589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =6>> rvalInt >> >> rvalInt ;",
            "score": 99.29538399832589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =32>> rvalInt >> >> rvalInt ;",
            "score": 99.29538399832589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt & lvalInt ;",
            "score": 99.22368977864583,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "this.result = lvalInt & rvalInt ;",
            "score": 99.18105844350961,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> rvalInt ; break ;",
            "score": 99.16250375600961,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> >> >> >> rvalInt ;",
            "score": 99.0933125813802,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result >> >> >> rvalInt ;",
            "score": 99.0911395733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt ) + rvalInt ;",
            "score": 99.1805419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int ) + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "inst = lvalInt >> >> >> rvalInt ;",
            "score": 99.17288912259616,
            "correctness": "uncompilable",
            "tokenized_patch": "inst = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber =( int ) lvalInt ;",
            "score": 99.09328049879808,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = rvalInt << rvalInt ;",
            "score": 99.09091421274039,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb = lvalInt >> rvalInt ; break ;",
            "score": 99.07349571814903,
            "correctness": "uncompilable",
            "tokenized_patch": "sb = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1: rvalInt ;",
            "score": 99.29474748883929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.24945940290179,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & Node.rvalInt ;",
            "score": 99.17232572115384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & Node . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e = lvalInt >> rvalInt ;",
            "score": 99.09300648082386,
            "correctness": "uncompilable",
            "tokenized_patch": "e = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt >> >> >> rvalInt ;",
            "score": 99.32622213924633,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Math.rvalInt >> >> rvalInt ;",
            "score": 99.294677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Math . rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rvalInt ) return 0;",
            "score": 99.22188895089286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ) return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> >> >> rval ;",
            "score": 99.17225060096153,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sql( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.0926044170673,
            "correctness": "uncompilable",
            "tokenized_patch": "sql ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Node.lvalInt >> >> rvalInt ;",
            "score": 99.07235013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "return Node . lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> rvalInt ; break ; default :",
            "score": 99.32574103860294,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> rval CaMeL Int ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( >> rvalInt ) ;",
            "score": 99.29466834435097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> rvalInt >> >> >> rvalInt ;",
            "score": 99.24864850725446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rval ; }",
            "score": 99.17083270733173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "warning( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.0925762469952,
            "correctness": "uncompilable",
            "tokenized_patch": "warning ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval *rvalInt ;",
            "score": 99.09036020132211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt >> & rvalInt ;",
            "score": 99.32570513556985,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( rvalInt >> rvalInt ;",
            "score": 99.2942626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt :1;",
            "score": 99.24842122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND + left ) ;",
            "score": 99.09237905649039,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> Math.lvalInt ;",
            "score": 99.090087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> Math . lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval rvalInt ;",
            "score": 99.06984299879808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval >> rvalInt ;",
            "score": 99.2483661358173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) ;",
            "score": 99.1781234741211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fine( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.0921161358173,
            "correctness": "uncompilable",
            "tokenized_patch": "fine ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : result ;",
            "score": 99.08991834852431,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt < rvalInt >> rvalInt ;",
            "score": 99.2937744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int < rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>2;",
            "score": 99.2481219951923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>3;",
            "score": 99.2481219951923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>10;",
            "score": 99.2481219951923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>6;",
            "score": 99.2481219951923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >>32;",
            "score": 99.2481219951923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rvalInt ; }",
            "score": 99.22107747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( ) >> >> rvalInt ;",
            "score": 99.17794799804688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( ) >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt << >> >> rvalInt ;",
            "score": 99.16820350060097,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt << >> rvalInt ;",
            "score": 99.08942119891827,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.lval = lvalInt >> >> >> rvalInt ;",
            "score": 99.24756673177083,
            "correctness": "uncompilable",
            "tokenized_patch": "this . lval = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> == rvalInt ;",
            "score": 99.17734938401442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : rvalInt ; break ;",
            "score": 99.15793081430289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Math.rvalInt >> rvalInt ;",
            "score": 99.0908954326923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Math . rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "++ result = lvalInt >> >> rvalInt ;",
            "score": 99.0892803485577,
            "correctness": "uncompilable",
            "tokenized_patch": "++ result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval += lvalInt ;",
            "score": 99.0677490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval += lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & ~ rvalInt >> >> rvalInt ;",
            "score": 99.32508042279412,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & ~ rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rvalInt - rvalInt ;",
            "score": 99.29237467447916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { result = lvalInt >> >> rvalInt ;",
            "score": 99.22071126302083,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = = lvalInt >> rvalInt ;",
            "score": 99.17706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> >> >> >> rval ;",
            "score": 99.1661846454327,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "action( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.09019118088942,
            "correctness": "uncompilable",
            "tokenized_patch": "action ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt & rvalInt ;",
            "score": 99.2923095703125,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - rval ;",
            "score": 99.17648751395089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "type = FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.09005972055289,
            "correctness": "uncompilable",
            "tokenized_patch": "type = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= lvalInt >> rvalInt ;",
            "score": 99.0888916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n + lvalInt >> >> rvalInt ;",
            "score": 99.0670917217548,
            "correctness": "uncompilable",
            "tokenized_patch": "return n + lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt + rvalInt ;",
            "score": 99.32271321614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt :1;",
            "score": 99.29230205829327,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = lvalInt >> >> >> rvalInt ;",
            "score": 99.245751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt & rvalInt ;",
            "score": 99.220458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "inst = lvalInt >> >> rvalInt ;",
            "score": 99.16563924153645,
            "correctness": "uncompilable",
            "tokenized_patch": "inst = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; true :",
            "score": 99.08916766826923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; true :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + break ;",
            "score": 99.06494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } break ;",
            "score": 99.2920654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt >> rvalInt ;",
            "score": 99.2203369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2>> >> >> rvalInt ;",
            "score": 99.17513020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3>> >> >> rvalInt ;",
            "score": 99.17513020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10>> >> >> rvalInt ;",
            "score": 99.17513020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6>> >> >> rvalInt ;",
            "score": 99.17513020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32>> >> >> rvalInt ;",
            "score": 99.17513020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "end = lvalInt >> >> rvalInt ;",
            "score": 99.08910115559895,
            "correctness": "uncompilable",
            "tokenized_patch": "end = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?1:1; break ;",
            "score": 99.32158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt == lval ) ;",
            "score": 99.29189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt rvalInt ;",
            "score": 99.24497767857143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> rvalInt ;",
            "score": 99.22015380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( rval ) ;",
            "score": 99.16478382457386,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "send( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.0887920673077,
            "correctness": "uncompilable",
            "tokenized_patch": "send ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt >> & rvalInt ;",
            "score": 99.32150268554688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt1;",
            "score": 99.29186072716347,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval >> & rvalInt ;",
            "score": 99.24474225725446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> >> >> rvalInt ;",
            "score": 99.08856756036931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > lvalInt ;",
            "score": 99.0857821377841,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> << >> rvalInt ;",
            "score": 99.32105210248162,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt ; else",
            "score": 99.24457194010417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt % >> >> rvalInt ;",
            "score": 99.17405348557692,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int % >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> | rvalInt ;",
            "score": 99.16355543870192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += rvalInt << rvalInt ;",
            "score": 99.15324263139205,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt / rvalInt ;",
            "score": 99.2914794921875,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.24418131510417,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> >> lvalInt ;",
            "score": 99.21875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *>> >> >> rvalInt ;",
            "score": 99.17348225911458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt ; }",
            "score": 99.08497111002605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; }",
            "score": 99.32071358816964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) ? rvalInt ;",
            "score": 99.29132486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> -1;",
            "score": 99.24398367745536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> >> rvalInt >> rvalInt ;",
            "score": 99.21853841145834,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / ~ rvalInt ;",
            "score": 99.17238362630208,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "node = lvalInt >> >> >> rvalInt ;",
            "score": 99.16222205528847,
            "correctness": "uncompilable",
            "tokenized_patch": "node = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , 'length';",
            "score": 99.0865987141927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , '[].join()';",
            "score": 99.0865987141927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , '';",
            "score": 99.0865987141927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , 'join';",
            "score": 99.0865987141927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , 'a';",
            "score": 99.0865987141927,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt >> rvalInt ; break ;",
            "score": 99.08452899639423,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt : rval ) ;",
            "score": 99.29121616908482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> >> >> >> rvalInt ;",
            "score": 99.24327799479167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt lvalInt ;",
            "score": 99.218505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.lvalInt >> rvalInt ;",
            "score": 99.15062537560097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> ;",
            "score": 99.06238902698864,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt && lvalInt ;",
            "score": 99.29090983072916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int && lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt & lvalInt >> >> rvalInt ;",
            "score": 99.21846516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int & lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt += lvalInt ;",
            "score": 99.08344060724431,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int += lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >> -- rvalInt ;",
            "score": 99.32039148667279,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> -- rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt >> >> lvalInt ;",
            "score": 99.24295479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> rvalInt ; break ;",
            "score": 99.08484996448864,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( this + 'length') ;",
            "score": 99.06017049153645,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( this + '[].join()') ;",
            "score": 99.06017049153645,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( this + '') ;",
            "score": 99.06017049153645,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( this + 'join') ;",
            "score": 99.06017049153645,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( this + 'a') ;",
            "score": 99.06017049153645,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( this + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lval ?1:1; break ;",
            "score": 99.32029622395834,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt : rvalInt ;",
            "score": 99.29034830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = rvalInt >> >> >> rvalInt ;",
            "score": 99.24293870192308,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> |= rvalInt ;",
            "score": 99.17027869591347,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> |= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ reportCodeChange( ) ; return n ;",
            "score": 99.1593487079327,
            "correctness": "uncompilable",
            "tokenized_patch": "{ report CaMeL Code CaMeL Change ( ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( result , rvalInt ) ;",
            "score": 99.148681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( result , rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result |= lvalInt >> rvalInt ;",
            "score": 99.0848388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result |= lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> += rvalInt ;",
            "score": 99.08294208233173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> += rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( lvalInt >> >> rvalInt ) ;",
            "score": 99.0601337139423,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( lval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ) || rvalInt ;",
            "score": 99.2902099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ) || rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'length'+1) ;",
            "score": 99.21747698102679,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '[].join()'+1) ;",
            "score": 99.21747698102679,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( ''+1) ;",
            "score": 99.21747698102679,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'join'+1) ;",
            "score": 99.21747698102679,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'a'+1) ;",
            "score": 99.21747698102679,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> & rvalInt ;",
            "score": 99.16970590444711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> > rvalInt ;",
            "score": 99.15909830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt : rvalInt ;",
            "score": 99.14858176491477,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt >> & rvalInt ;",
            "score": 99.3197250366211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval( >> rvalInt ) ;",
            "score": 99.28998209635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval ( >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result result = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.24147135416666,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt +( int ) lval ;",
            "score": 99.16957600911458,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + ( int ) lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "int rval = lvalInt >> >> rvalInt ;",
            "score": 99.1575927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval >> rvalInt >> rvalInt ;",
            "score": 99.1475830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n ) ; }",
            "score": 99.08360877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n ) ; }",
            "score": 99.08360877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n ) ; }",
            "score": 99.08360877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n ) ; }",
            "score": 99.08360877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n ) ; }",
            "score": 99.08360877403847,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += rvalInt >> >> rvalInt ;",
            "score": 99.28843180338542,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ?0:0;",
            "score": 99.16949932391827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 0 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( lvalInt != rval ) {",
            "score": 99.15748291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt <<1;",
            "score": 99.14580829326923,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int << 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "format( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.08348670372597,
            "correctness": "uncompilable",
            "tokenized_patch": "format ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = lvalInt << rvalInt ;",
            "score": 99.08223100142045,
            "correctness": "uncompilable",
            "tokenized_patch": "i = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt , right ) ;",
            "score": 99.16937255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; case Token.URSH :",
            "score": 99.15731107271634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; else",
            "score": 99.14422607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> : rvalInt ;",
            "score": 99.08343505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new",
            "score": 99.05568625710227,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> && rvalInt > rvalInt ;",
            "score": 99.31914520263672,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> && rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt - rvalInt ;",
            "score": 99.28693498883929,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | rvalInt ; break ;",
            "score": 99.08096078725961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >>1>> >> rvalInt ;",
            "score": 99.28675188337054,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> & lvalInt ;",
            "score": 99.23983328683036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'length'+ result ) ;",
            "score": 99.21360560825893,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '[].join()'+ result ) ;",
            "score": 99.21360560825893,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( ''+ result ) ;",
            "score": 99.21360560825893,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'join'+ result ) ;",
            "score": 99.21360560825893,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'a'+ result ) ;",
            "score": 99.21360560825893,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / >> >> rvalInt ;",
            "score": 99.16780229048295,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rval ) { return n ;",
            "score": 99.142333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval ) { return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt =( int ) rvalInt ;",
            "score": 99.08095296223958,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval1; break ;",
            "score": 99.05426025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lval ?1:0; break ;",
            "score": 99.3183349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval2;",
            "score": 99.28664725167411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval3;",
            "score": 99.28664725167411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval10;",
            "score": 99.28664725167411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval6;",
            "score": 99.28664725167411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> rval32;",
            "score": 99.28664725167411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final result = lvalInt >> >> >> rvalInt ;",
            "score": 99.23965890066964,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rvalInt ; }",
            "score": 99.21308244977679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt0;",
            "score": 99.1677997295673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ++ >> rvalInt ;",
            "score": 99.14171424278847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ++ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "start = lvalInt >> rvalInt ;",
            "score": 99.08125443892045,
            "correctness": "uncompilable",
            "tokenized_patch": "start = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval , rvalInt = rvalInt ;",
            "score": 99.0807635967548,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval , rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ?1:1; break ;",
            "score": 99.31788736979166,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval ? 1 : 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.23912702287946,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rvalInt ; ;",
            "score": 99.16751802884616,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = lvalInt >> >> rvalInt ;",
            "score": 99.15572102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "node = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt <<2;",
            "score": 99.14166729266827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt <<3;",
            "score": 99.14166729266827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt <<10;",
            "score": 99.14166729266827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt <<6;",
            "score": 99.14166729266827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt <<32;",
            "score": 99.14166729266827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "start = lvalInt >> >> rvalInt ;",
            "score": 99.0808817545573,
            "correctness": "uncompilable",
            "tokenized_patch": "start = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> < rvalInt ; break ;",
            "score": 99.3162841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> < rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> lval ) ;",
            "score": 99.28480747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> >> rvalInt >> rvalInt ;",
            "score": 99.21187046595982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt *rvalInt ;",
            "score": 99.1670391376202,
            "correctness": "wrong",
            "tokenized_patch": "result = lval * rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt ; case Token.URSH :",
            "score": 99.15501912434895,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>2; break ;",
            "score": 99.0789286295573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>3; break ;",
            "score": 99.0789286295573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>10; break ;",
            "score": 99.0789286295573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>6; break ;",
            "score": 99.0789286295573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>32; break ;",
            "score": 99.0789286295573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt -- ;",
            "score": 99.21158541165866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> ^ rvalInt ;",
            "score": 99.16593111478366,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << >> >> >> rvalInt ;",
            "score": 99.08067830403645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != >> >> rvalInt ;",
            "score": 99.28182279146634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( ) ;",
            "score": 99.1652499112216,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt =( int ) rvalInt ;",
            "score": 99.1538837139423,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = right.getDouble( ) ;",
            "score": 99.08000044389205,
            "correctness": "wrong",
            "tokenized_patch": "result = right . get CaMeL Double ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt ; ;",
            "score": 99.07834879557292,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt -1;",
            "score": 99.2806865985577,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( lvalInt == rvalInt ; break ;",
            "score": 99.21144456129808,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1>> >> >> rvalInt ;",
            "score": 99.16461181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >> rvalInt ;",
            "score": 99.13743286132812,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.newNumber( result ) ;",
            "score": 99.07999674479167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt << rvalInt ;",
            "score": 99.07834879557292,
            "correctness": "wrong",
            "tokenized_patch": "result = - rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >= rvalInt ; break ;",
            "score": 99.31503295898438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = rvalInt >> >> rvalInt ;",
            "score": 99.2795918782552,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt1; }",
            "score": 99.21100725446429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ) ;",
            "score": 99.16449444110577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , new ) ;",
            "score": 99.07996544471153,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , new ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = lvalInt >> rvalInt ;",
            "score": 99.07825816761364,
            "correctness": "uncompilable",
            "tokenized_patch": "next = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ;",
            "score": 99.05030653211806,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : result.",
            "score": 99.27731759207589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : result .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> >> lval ;",
            "score": 99.23711286272321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) >> >> rvalInt ;",
            "score": 99.16424091045673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0; break ; case Token.URSH :",
            "score": 99.15342360276442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { reportCodeChange( ) ;",
            "score": 99.13674094460227,
            "correctness": "uncompilable",
            "tokenized_patch": "try { report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Math.rvalInt << rvalInt ;",
            "score": 99.07911095252403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Math . rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt >>1;",
            "score": 99.07823768028847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> rvalInt ;",
            "score": 99.04913330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1== rvalInt ;",
            "score": 99.27684674944196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt - lvalInt ;",
            "score": 99.23707682291666,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & rvalInt >> ;",
            "score": 99.2083740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >= rvalInt ;",
            "score": 99.16363994891827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1<< rvalInt >> rvalInt ;",
            "score": 99.15281325120192,
            "correctness": "wrong",
            "tokenized_patch": "result = 1 << rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "attribute( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.0784160907452,
            "correctness": "uncompilable",
            "tokenized_patch": "attribute ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>0;",
            "score": 99.07820638020833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> & lval rvalInt ;",
            "score": 99.23612467447917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'length'+ result ) ;",
            "score": 99.20820835658482,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '[].join()'+ result ) ;",
            "score": 99.20820835658482,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ''+ result ) ;",
            "score": 99.20820835658482,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'join'+ result ) ;",
            "score": 99.20820835658482,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'a'+ result ) ;",
            "score": 99.20820835658482,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & ~ ~ rvalInt ;",
            "score": 99.16354604867789,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & ~ ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "next = lvalInt >> >> rvalInt ;",
            "score": 99.07778930664062,
            "correctness": "uncompilable",
            "tokenized_patch": "next = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt << rvalInt ;",
            "score": 99.07651930588942,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>0>> rvalInt ;",
            "score": 99.2760479266827,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> 0 >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?0:1;",
            "score": 99.1635272686298,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 0 : 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return rvalInt << >> rvalInt ; break ;",
            "score": 99.15244704026442,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; try {",
            "score": 99.13454026442308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval ) >> rvalInt ;",
            "score": 99.27549525669643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>0;",
            "score": 99.23590959821429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >>0;",
            "score": 99.20798165457589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt >> >> rval ;",
            "score": 99.16270955403645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval / rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> rvalInt ; break ;",
            "score": 99.15230618990384,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt >> & rvalInt ;",
            "score": 99.31063079833984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >> rvalInt ; break ;",
            "score": 99.27503313337054,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; } ;",
            "score": 99.20747593470982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; } ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *& rvalInt ;",
            "score": 99.16147867838542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ n = lvalInt >> >> rvalInt ;",
            "score": 99.15211838942308,
            "correctness": "uncompilable",
            "tokenized_patch": "{ n = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right break ;",
            "score": 99.07528921274039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ? lvalInt >> >> rvalInt ;",
            "score": 99.04572002704327,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ? lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << >> rvalInt ; break ;",
            "score": 99.310205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result else result = lvalInt >> rvalInt ;",
            "score": 99.27444223257211,
            "correctness": "uncompilable",
            "tokenized_patch": "result else result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt >> >> >> >> >> rvalInt ;",
            "score": 99.23400065104167,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> FALSE ;",
            "score": 99.20744977678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> FALSE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval0; break ;",
            "score": 99.16079477163461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt << >> rvalInt ;",
            "score": 99.15164184570312,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rvalInt = rvalInt ;",
            "score": 99.13323505108173,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rval ) return n ;",
            "score": 99.07496134440105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval ) return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ,",
            "score": 99.0746737393466,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=0?1:0; break ;",
            "score": 99.31017252604167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != 0 ? 1 : 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0== rvalInt >> >> rvalInt ;",
            "score": 99.27413504464286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 == rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> - rvalInt ;",
            "score": 99.23377403846153,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt << rvalInt ;",
            "score": 99.15147816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "count = lvalInt >> >> rvalInt ;",
            "score": 99.07419840494792,
            "correctness": "uncompilable",
            "tokenized_patch": "count = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt >> >> rvalInt ;",
            "score": 99.07405229048295,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if lvalInt = lvalInt >> rvalInt ;",
            "score": 99.27355085100446,
            "correctness": "uncompilable",
            "tokenized_patch": "if lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + & rvalInt ;",
            "score": 99.15995279947917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rvalInt ) break ;",
            "score": 99.15132962740384,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval CaMeL Int ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval >> rvalInt << rvalInt ;",
            "score": 99.13290640024039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s = lvalInt >> rvalInt ;",
            "score": 99.07302024147727,
            "correctness": "uncompilable",
            "tokenized_patch": "s = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>0>> >> rvalInt ;",
            "score": 99.27297537667411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 0 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> lval ;",
            "score": 99.2337313565341,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt +1;",
            "score": 99.20689174107143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt | >> >> rvalInt ;",
            "score": 99.15929236778847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int | >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << rvalInt ; }",
            "score": 99.15130060369319,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ lval ) ;",
            "score": 99.1326395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ lval ) ;",
            "score": 99.1326395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ lval ) ;",
            "score": 99.1326395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ lval ) ;",
            "score": 99.1326395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ lval ) ;",
            "score": 99.1326395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> & rvalInt ;",
            "score": 99.07286487926136,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt2;",
            "score": 99.04446411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt3;",
            "score": 99.04446411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt10;",
            "score": 99.04446411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt6;",
            "score": 99.04446411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt32;",
            "score": 99.04446411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> & >> rvalInt ;",
            "score": 99.308349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.1;",
            "score": 99.2725078876202,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "short result = lvalInt >> >> rvalInt ;",
            "score": 99.15118877704327,
            "correctness": "uncompilable",
            "tokenized_patch": "short result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; finally {",
            "score": 99.13230543870192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; finally {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( result ) ;",
            "score": 99.07282049005681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt >> >> rvalInt ) ;",
            "score": 99.07266939603366,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval - lvalInt ;",
            "score": 99.04432091346153,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> -- rvalInt ; break ;",
            "score": 99.30768229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> -- rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt rvalInt ;",
            "score": 99.23329380580357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ? lvalInt : lvalInt ;",
            "score": 99.157470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ? lval CaMeL Int : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & result << rvalInt ;",
            "score": 99.14996807391827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & result << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> lval ;",
            "score": 99.13189227764423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rvalInt != lval ) ) {",
            "score": 99.07265061598558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval CaMeL Int != lval ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "r = lvalInt >> rvalInt ;",
            "score": 99.07212136008523,
            "correctness": "uncompilable",
            "tokenized_patch": "r = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt + rvalInt ;",
            "score": 99.306884765625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >> - lvalInt ;",
            "score": 99.23308856670673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> - lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> rvalInt >> rvalInt ;",
            "score": 99.20468575613839,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ?1:0;",
            "score": 99.15732046274039,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = new int rvalInt >> rvalInt ;",
            "score": 99.1318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rval ) { break ;",
            "score": 99.0719502766927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval ) { break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value >> >> rvalInt >> >> rvalInt ;",
            "score": 99.20361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return value >> >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) rval ; break ;",
            "score": 99.14927321213942,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; return ;",
            "score": 99.13140399639423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; return ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt - result ;",
            "score": 99.23224283854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int - result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> >> rvalInt ; }",
            "score": 99.20320347377232,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> ~ rvalInt ;",
            "score": 99.15647536057692,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = lvalInt << rvalInt ;",
            "score": 99.1490145596591,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> : lvalInt ;",
            "score": 99.0712178548177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange(( int ) result ) ;",
            "score": 99.04251802884616,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( ( int ) result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval1>> rvalInt ;",
            "score": 99.26971435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ; break ;",
            "score": 99.20282451923077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rval >> rvalInt ;",
            "score": 99.15622182992789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rvalInt ; break ;",
            "score": 99.1483905498798,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt << rvalInt ; break ;",
            "score": 99.12941331129808,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "++ lvalInt >> >> rvalInt ;",
            "score": 99.07114479758523,
            "correctness": "uncompilable",
            "tokenized_patch": "++ lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt ; break ; }",
            "score": 99.30382486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt -1;",
            "score": 99.26968819754464,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >> >> lval ;",
            "score": 99.231298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> & rvalInt ) ;",
            "score": 99.1561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> & rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt >> rvalInt ;",
            "score": 99.1478604403409,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != lval ) return n ;",
            "score": 99.06982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != lval ) return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >> >>1;",
            "score": 99.26963588169643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'length'+1) ;",
            "score": 99.20170375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '[].join()'+1) ;",
            "score": 99.20170375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ''+1) ;",
            "score": 99.20170375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'join'+1) ;",
            "score": 99.20170375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'a'+1) ;",
            "score": 99.20170375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >=0?1:0;",
            "score": 99.15557391826923,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >= 0 ? 1 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "long result = lvalInt >> >> rvalInt ;",
            "score": 99.14730130709134,
            "correctness": "uncompilable",
            "tokenized_patch": "long result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( lvalInt ) ;",
            "score": 99.12818400065105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double lvalInt =( int ) lvalInt ;",
            "score": 99.06978665865384,
            "correctness": "uncompilable",
            "tokenized_patch": "double lval CaMeL Int = ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "right = lvalInt >> rvalInt ;",
            "score": 99.06941361860795,
            "correctness": "uncompilable",
            "tokenized_patch": "right = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( FRACTIONAL_BITWISE_OPERAND , left ) ;",
            "score": 99.0409686748798,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( FR@@ ACTIONAL _ BITWISE _ OPERAND , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & >> >> rvalInt ;",
            "score": 99.30281575520833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = rvalInt >> >> rvalInt ;",
            "score": 99.26850237165179,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rvalInt rvalInt ;",
            "score": 99.23087565104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0?0:1;",
            "score": 99.15508563701923,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? 0 : 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ) ;",
            "score": 99.230712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; / /",
            "score": 99.20095590444711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; / /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2int >> >> rvalInt ;",
            "score": 99.15467325846355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3int >> >> rvalInt ;",
            "score": 99.15467325846355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10int >> >> rvalInt ;",
            "score": 99.15467325846355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6int >> >> rvalInt ;",
            "score": 99.15467325846355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32int >> >> rvalInt ;",
            "score": 99.15467325846355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ? lvalInt ;",
            "score": 99.22926548549107,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ? lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt & rvalInt ;",
            "score": 99.20061383928571,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / ^ rvalInt ;",
            "score": 99.15420532226562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rvalInt )",
            "score": 99.14570756392045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval CaMeL Int )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & >> >> rvalInt ;",
            "score": 99.22904146634616,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?2:0;",
            "score": 99.1532733623798,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?3:0;",
            "score": 99.1532733623798,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?10:0;",
            "score": 99.1532733623798,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?6:0;",
            "score": 99.1532733623798,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <0?32:0;",
            "score": 99.1532733623798,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? $NUMBER$ : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> right ;",
            "score": 99.12706580528847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt ) ;",
            "score": 99.06900024414062,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { reportCodeChange( ) ;",
            "score": 99.0634432705966,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1*rvalInt ;",
            "score": 99.26483154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o = lvalInt >> >> rvalInt ;",
            "score": 99.19949340820312,
            "correctness": "uncompilable",
            "tokenized_patch": "o = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> rvalInt >> rvalInt ;",
            "score": 99.1531270345052,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "byte result = lvalInt >> >> rvalInt ;",
            "score": 99.14503831129808,
            "correctness": "uncompilable",
            "tokenized_patch": "byte result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ) ;",
            "score": 99.06884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? ;",
            "score": 99.03931603064903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt >> & rvalInt ;",
            "score": 99.3006362915039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; ) ;",
            "score": 99.26437813895089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & lvalInt ;",
            "score": 99.2289287860577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == lval >> >> rvalInt ;",
            "score": 99.19915771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf = lvalInt << rvalInt ; break ;",
            "score": 99.14478478064903,
            "correctness": "uncompilable",
            "tokenized_patch": "buf = lval CaMeL Int << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1>> rvalInt << rvalInt ;",
            "score": 99.12561974158653,
            "correctness": "wrong",
            "tokenized_patch": "result = 1 >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result result = lvalInt << rvalInt ;",
            "score": 99.06112670898438,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - rvalInt >> >> rvalInt ; break ;",
            "score": 99.30039978027344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval - rval CaMeL Int >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt ) ;",
            "score": 99.2639911358173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt & lvalInt >> rvalInt ;",
            "score": 99.19782366071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int & lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval *rvalInt ;",
            "score": 99.15220289963942,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt << >> >> rvalInt ;",
            "score": 99.14334810697116,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber << rvalInt ;",
            "score": 99.1253995028409,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt , right ) ;",
            "score": 99.06572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & rvalInt >> rvalInt ;",
            "score": 99.29991149902344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval = rvalInt ;",
            "score": 99.26355852399554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( Integer ) lvalInt >> >> rvalInt ;",
            "score": 99.19730050223214,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( Integer ) lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &( rval ) ; break ;",
            "score": 99.14302884615384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & ( rval ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << >> rvalInt ;",
            "score": 99.06542358398437,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - rvalInt ;",
            "score": 99.06019422743056,
            "correctness": "wrong",
            "tokenized_patch": "result = lval - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt < rval ?1:1;",
            "score": 99.2994384765625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? 1 : 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt == >> >> rvalInt ;",
            "score": 99.2623291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int == >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : lval ;",
            "score": 99.22705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> >> rvalInt ;",
            "score": 99.1966219815341,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + ~ rvalInt ;",
            "score": 99.15121459960938,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return switch( n.getType( ) ) {",
            "score": 99.14293494591347,
            "correctness": "uncompilable",
            "tokenized_patch": "return switch ( n . get CaMeL Type ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Node.lvalInt >> rvalInt ;",
            "score": 99.06517615685097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Node . lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> -= rvalInt ;",
            "score": 99.05987548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> -= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> rvalInt ; }",
            "score": 99.29906412760417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw( lvalInt >> >> >> rvalInt ) ;",
            "score": 99.22551618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( lval CaMeL Int >> >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.>> rvalInt ;",
            "score": 99.15113321940105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break }",
            "score": 99.06499774639423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( right ) ;",
            "score": 99.05927068536931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =2>> rvalInt >> rvalInt ;",
            "score": 99.2610332782452,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =3>> rvalInt >> rvalInt ;",
            "score": 99.2610332782452,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =10>> rvalInt >> rvalInt ;",
            "score": 99.2610332782452,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =6>> rvalInt >> rvalInt ;",
            "score": 99.2610332782452,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =32>> rvalInt >> rvalInt ;",
            "score": 99.2610332782452,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new IllegalArgumentException( lvalInt ) ;",
            "score": 99.19637625558036,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval / rvalInt ;",
            "score": 99.15089768629808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> + lvalInt ;",
            "score": 99.05901544744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'length'+ result ) ;",
            "score": 99.03678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '[].join()'+ result ) ;",
            "score": 99.03678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ''+ result ) ;",
            "score": 99.03678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'join'+ result ) ;",
            "score": 99.03678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'a'+ result ) ;",
            "score": 99.03678385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - lvalInt >> >> >> rvalInt ;",
            "score": 99.22433035714286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = - lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( n , lvalInt ) ;",
            "score": 99.15078735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( n , lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt =( int ) rval ;",
            "score": 99.14198996803977,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( lvalInt != rval ) ) {",
            "score": 99.06496018629808,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( lval CaMeL Int != rval ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>0rvalInt ;",
            "score": 99.0585225423177,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 0 rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> | rvalInt ; break ;",
            "score": 99.2985610961914,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> | rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >>1>> rvalInt ;",
            "score": 99.26027268629808,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> 1 >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw( lvalInt >> >> >> >> rvalInt ;",
            "score": 99.22398158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> & rvalInt ;",
            "score": 99.1504375751202,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> rval ;",
            "score": 99.14193021334134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval )",
            "score": 99.06490071614583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p = lvalInt >> rvalInt ;",
            "score": 99.0579501065341,
            "correctness": "uncompilable",
            "tokenized_patch": "p = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> lvalInt ;",
            "score": 99.25998757102273,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> = rvalInt ;",
            "score": 99.22374616350446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n = lvalInt >> >> rvalInt ;",
            "score": 99.1499774639423,
            "correctness": "uncompilable",
            "tokenized_patch": "return n = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> - rvalInt ;",
            "score": 99.14183631310097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt :1;",
            "score": 99.25970458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int : 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>2;",
            "score": 99.19339425223214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>3;",
            "score": 99.19339425223214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>10;",
            "score": 99.19339425223214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>6;",
            "score": 99.19339425223214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >>32;",
            "score": 99.19339425223214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lvalInt / rvalInt ;",
            "score": 99.14955491286058,
            "correctness": "wrong",
            "tokenized_patch": "result = lval * lval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << >> << rvalInt ;",
            "score": 99.14176119290866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; break ; }",
            "score": 99.29701232910156,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0+ rvalInt >> >> rvalInt ;",
            "score": 99.25967843191964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 + rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ~ >> rvalInt ;",
            "score": 99.14947979266827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ~ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>0;",
            "score": 99.12127216045673,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "end = lvalInt >> rvalInt ;",
            "score": 99.0570401278409,
            "correctness": "uncompilable",
            "tokenized_patch": "end = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new lvalInt >> >> rvalInt ;",
            "score": 99.03412334735577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >> >>1; break ;",
            "score": 99.29612731933594,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this = lvalInt >> >> rvalInt ;",
            "score": 99.14933268229167,
            "correctness": "uncompilable",
            "tokenized_patch": "this = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( rvalInt ) ;",
            "score": 99.1201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ;",
            "score": 99.03409423828126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { result = lvalInt & >> rvalInt ;",
            "score": 99.22133091517857,
            "correctness": "uncompilable",
            "tokenized_patch": "try { result = lval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rvalInt ; }",
            "score": 99.13926188151042,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << >> >> rvalInt ;",
            "score": 99.0621670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -- >> rvalInt ;",
            "score": 99.0566914876302,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int -- >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt -- ;",
            "score": 99.19245256696429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int -- ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber << rvalInt ; break ;",
            "score": 99.11940354567308,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( true ) ;",
            "score": 99.05618896484376,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> << rvalInt ; break ;",
            "score": 99.29304504394531,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt {",
            "score": 99.2205059344952,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval , 'length') ;",
            "score": 99.19244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval , '[].join()') ;",
            "score": 99.19244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval , '') ;",
            "score": 99.19244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval , 'join') ;",
            "score": 99.19244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval , 'a') ;",
            "score": 99.19244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt & rvalInt ;",
            "score": 99.14803372896634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> rval ; break ;",
            "score": 99.13861553485577,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >> >> rvalInt ;",
            "score": 99.11843039772727,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt >> rvalInt ) ;",
            "score": 99.06124877929688,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else result = lvalInt + rvalInt ;",
            "score": 99.0557149251302,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) n.getDouble( ) ;",
            "score": 99.03322190504808,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != >> >> >> rvalInt ;",
            "score": 99.25619070870536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> >> >> rvalInt ;",
            "score": 99.22031813401442,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ >> ~ rvalInt ;",
            "score": 99.14670034555289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >> >= rvalInt ;",
            "score": 99.29285430908203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt ;",
            "score": 99.2559063251202,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> lvalInt ;",
            "score": 99.21956961495536,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0?0: lval ;",
            "score": 99.14639047475961,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? 0 : lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "state = lvalInt << >> rvalInt ;",
            "score": 99.1382548014323,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length', 'length') ;",
            "score": 99.11659749348958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()', '[].join()') ;",
            "score": 99.11659749348958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '', '') ;",
            "score": 99.11659749348958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join', 'join') ;",
            "score": 99.11659749348958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a', 'a') ;",
            "score": 99.11659749348958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "status = lvalInt >> >> rvalInt ;",
            "score": 99.0575459798177,
            "correctness": "uncompilable",
            "tokenized_patch": "status = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt << rvalInt ;",
            "score": 99.05210182883523,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt + ;",
            "score": 99.03231107271634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int + ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> -- rvalInt ;",
            "score": 99.29236711774554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> -- rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt lval ) ;",
            "score": 99.25493512834821,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; result else",
            "score": 99.21908133370536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; result else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt +1) ;",
            "score": 99.19138009207589,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval , lvalInt ) ;",
            "score": 99.1453857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval , lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int result = lvalInt << rvalInt ;",
            "score": 99.13751220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "int result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval2rvalInt ;",
            "score": 99.25432477678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval3rvalInt ;",
            "score": 99.25432477678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval10rvalInt ;",
            "score": 99.25432477678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval6rvalInt ;",
            "score": 99.25432477678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval32rvalInt ;",
            "score": 99.25432477678571,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> & lvalInt ;",
            "score": 99.21814982096355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c = lvalInt >> >> rvalInt ;",
            "score": 99.1913350423177,
            "correctness": "uncompilable",
            "tokenized_patch": "c = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval [0] & rvalInt ;",
            "score": 99.14480590820312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval [ 0 ] & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *lvalInt ;",
            "score": 99.05100319602273,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt > rvalInt ;",
            "score": 99.2538174715909,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> & rvalInt ;",
            "score": 99.21799142020089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> false ;",
            "score": 99.19095284598214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt / >> rvalInt ;",
            "score": 99.14470880681819,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = lvalInt >> rvalInt ;",
            "score": 99.13512073863636,
            "correctness": "uncompilable",
            "tokenized_patch": "state = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c = lvalInt >> rvalInt ;",
            "score": 99.05037064985795,
            "correctness": "uncompilable",
            "tokenized_patch": "c = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.21695382254464,
            "correctness": "uncompilable",
            "tokenized_patch": "i = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( value >> >> rvalInt ) ;",
            "score": 99.14449368990384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( value >> >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= lvalInt >> >> >> rvalInt ;",
            "score": 99.05032348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ; break ;",
            "score": 99.03109741210938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result n = lvalInt >> rvalInt ;",
            "score": 99.0501708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result n = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "initialize( FRACTIONAL_BITWISE_OPERAND , right ) ;",
            "score": 99.02978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "initialize ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt :0;",
            "score": 99.25143667367789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=0?0:0;",
            "score": 99.1443340594952,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int != 0 ? 0 : 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( reportCodeChange( ) ) {",
            "score": 99.13201904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( report CaMeL Code CaMeL Change ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2rvalInt ;",
            "score": 99.04924982244319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3rvalInt ;",
            "score": 99.04924982244319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10rvalInt ;",
            "score": 99.04924982244319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6rvalInt ;",
            "score": 99.04924982244319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32rvalInt ;",
            "score": 99.04924982244319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rvalInt ) ;",
            "score": 99.25137765066964,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt ; ;",
            "score": 99.14290677584134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "val = lvalInt >> rvalInt ;",
            "score": 99.13114790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "val = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int( rvalInt ) ;",
            "score": 99.10978560014205,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.rvalInt ;",
            "score": 99.02858664772727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> == rvalInt ; break ;",
            "score": 99.289111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> == rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt >> >> >> rvalInt ;",
            "score": 99.21459089006696,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "type = lvalInt >> >> rvalInt ;",
            "score": 99.18782552083333,
            "correctness": "uncompilable",
            "tokenized_patch": "type = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> != rvalInt ;",
            "score": 99.14290677584134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( rvalInt != rval ) )",
            "score": 99.05145263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval CaMeL Int != rval ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "right = lvalInt >> >> rvalInt ;",
            "score": 99.04871622721355,
            "correctness": "uncompilable",
            "tokenized_patch": "right = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( lvalInt >> rvalInt ) ;",
            "score": 99.02840169270833,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & >> >> rvalInt ;",
            "score": 99.28803362165179,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt >>1;",
            "score": 99.2512676532452,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "long lvalInt = lvalInt >> rvalInt ;",
            "score": 99.1876220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "long lval CaMeL Int = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2long >> >> rvalInt ;",
            "score": 99.14285278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ long >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3long >> >> rvalInt ;",
            "score": 99.14285278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ long >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10long >> >> rvalInt ;",
            "score": 99.14285278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ long >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6long >> >> rvalInt ;",
            "score": 99.14285278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ long >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32long >> >> rvalInt ;",
            "score": 99.14285278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ long >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( result ) ;",
            "score": 99.10721435546876,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { reportCodeChange( ) ; }",
            "score": 99.0484619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { report CaMeL Code CaMeL Change ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval2;",
            "score": 99.25078790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval3;",
            "score": 99.25078790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval10;",
            "score": 99.25078790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval6;",
            "score": 99.25078790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval32;",
            "score": 99.25078790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt *rvalInt ;",
            "score": 99.14224008413461,
            "correctness": "wrong",
            "tokenized_patch": "result = lval / rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "val = lvalInt << rvalInt ;",
            "score": 99.12495561079545,
            "correctness": "uncompilable",
            "tokenized_patch": "val = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int >> >> rvalInt ;",
            "score": 99.1068115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> >> rvalInt ; break ;",
            "score": 99.2868881225586,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt ; }",
            "score": 99.25042724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - lval ;",
            "score": 99.21324811662946,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> >> rvalInt ; }",
            "score": 99.18729945591518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != lval ) {",
            "score": 99.1236572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != lval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -- rvalInt ;",
            "score": 99.04775168678977,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int -- rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt != >> rvalInt ;",
            "score": 99.2502950032552,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int != >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> -1;",
            "score": 99.21307927911931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ? >> ;",
            "score": 99.18698556082589,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ? >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?1:1;",
            "score": 99.14145132211539,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 1 : 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result += rvalInt >> rvalInt ;",
            "score": 99.10486949573864,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return = lvalInt << rvalInt ;",
            "score": 99.04706365411931,
            "correctness": "uncompilable",
            "tokenized_patch": "return = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval : result ;",
            "score": 99.02586951622597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + >> >> >> rvalInt ; break ;",
            "score": 99.2862777709961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + >> >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.lval = lvalInt >> rvalInt ;",
            "score": 99.1867206280048,
            "correctness": "uncompilable",
            "tokenized_patch": "this . lval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ?0:1;",
            "score": 99.1414043719952,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < lval ? 0 : 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << | rvalInt ;",
            "score": 99.121826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rvalInt ; break ; }",
            "score": 99.28601888020833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Node.newNumber( result ) ; }",
            "score": 99.12148030598958,
            "correctness": "uncompilable",
            "tokenized_patch": "return Node . new CaMeL Number ( result ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lval >> rvalInt ;",
            "score": 99.10439046223958,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) lval >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new AssertionError( lvalInt ) ;",
            "score": 99.04664103190105,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n <<( int ) rvalInt ;",
            "score": 99.04276529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt / >> rvalInt ;",
            "score": 99.28579711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> >> rvalInt ;",
            "score": 99.24811345880681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lvalInt ; ;",
            "score": 99.21181077223558,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt >>1; }",
            "score": 99.18552943638393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int >> 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << ~ rvalInt ;",
            "score": 99.14047241210938,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << ~ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = *rvalInt >> rvalInt ;",
            "score": 99.10291544596355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = * rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval ) - rvalInt ;",
            "score": 99.24734933035714,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ) - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw( lvalInt >> >> >> rvalInt ;",
            "score": 99.21166053185097,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval [0] >> rvalInt ;",
            "score": 99.14003499348958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval [ 0 ] >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new lvalInt >> rvalInt ;",
            "score": 99.02281697591145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.2;",
            "score": 99.24716622488839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.3;",
            "score": 99.24716622488839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.10;",
            "score": 99.24716622488839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.6;",
            "score": 99.24716622488839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.32;",
            "score": 99.24716622488839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0>> >> rvalInt >> rvalInt ;",
            "score": 99.18336838942308,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> <= rvalInt ;",
            "score": 99.13951619466145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value = lvalInt << >> rvalInt ;",
            "score": 99.12033081054688,
            "correctness": "uncompilable",
            "tokenized_patch": "value = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> *lvalInt ;",
            "score": 99.04600016276042,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> * lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.= lvalInt >> >> rvalInt ;",
            "score": 99.24679800180289,
            "correctness": "uncompilable",
            "tokenized_patch": "result . = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -- >> >> >> rvalInt ;",
            "score": 99.21048409598214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int -- >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} result = lvalInt >> >> rvalInt ;",
            "score": 99.18248572716347,
            "correctness": "uncompilable",
            "tokenized_patch": "} result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >= rvalInt ;",
            "score": 99.1387188251202,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'length', right ) ;",
            "score": 99.10137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '[].join()', right ) ;",
            "score": 99.10137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '', right ) ;",
            "score": 99.10137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'join', right ) ;",
            "score": 99.10137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'a', right ) ;",
            "score": 99.10137939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = lvalInt ;",
            "score": 99.04053412543402,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ) ;",
            "score": 99.02271525065105,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval ) : rvalInt ;",
            "score": 99.24667794363839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ) : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < >> ~ rvalInt ;",
            "score": 99.13846529447116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> rvalInt ; }",
            "score": 99.12009499289773,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = *rvalInt << rvalInt ;",
            "score": 99.09957885742188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = * rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ rval = lvalInt >> rvalInt ;",
            "score": 99.03965250651042,
            "correctness": "uncompilable",
            "tokenized_patch": "{ rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == rvalInt ;",
            "score": 99.2834981282552,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt rval null ;",
            "score": 99.24644252232143,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int rval null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ==0;",
            "score": 99.20941162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval [0] >> >> rvalInt ;",
            "score": 99.13788311298077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval [ 0 ] >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String result = lvalInt << rvalInt ;",
            "score": 99.11934407552083,
            "correctness": "uncompilable",
            "tokenized_patch": "String result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rval ) return n ;",
            "score": 99.03964233398438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval ) return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right &",
            "score": 99.01944986979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right &",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> >> rvalInt ; }",
            "score": 99.2825927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rvalInt rvalInt ;",
            "score": 99.24636404854911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval(0) ) ;",
            "score": 99.18089881310097,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> >> rval ; }",
            "score": 99.11782836914062,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j = lvalInt >> rvalInt ;",
            "score": 99.0422030362216,
            "correctness": "uncompilable",
            "tokenized_patch": "j = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt rvalInt ;",
            "score": 99.03673706054687,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> << >> rvalInt ; break ;",
            "score": 99.28225708007812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "a = lvalInt >> >> rvalInt ;",
            "score": 99.1803690592448,
            "correctness": "uncompilable",
            "tokenized_patch": "a = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & result ; break ;",
            "score": 99.11782004616477,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & result ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( result , right ) ;",
            "score": 99.01460774739583,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( result , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt == >> >> >> rvalInt ;",
            "score": 99.2457275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int == >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval ;",
            "score": 99.20878770616319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt ; else",
            "score": 99.09388224283855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int ; else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( false ) ;",
            "score": 99.04024047851563,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> && rvalInt & rvalInt ;",
            "score": 99.28191375732422,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> && rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval2>> rvalInt ;",
            "score": 99.24531773158482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval3>> rvalInt ;",
            "score": 99.24531773158482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval10>> rvalInt ;",
            "score": 99.24531773158482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval6>> rvalInt ;",
            "score": 99.24531773158482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval32>> rvalInt ;",
            "score": 99.24531773158482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & rvalInt ;",
            "score": 99.20829634232955,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & Node.lval ;",
            "score": 99.11566716974431,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & Node . lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ++ rvalInt ;",
            "score": 99.09281412760417,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ++ rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval , result = lvalInt ;",
            "score": 99.03966175426136,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval , result = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; *",
            "score": 99.0352783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; break ; }",
            "score": 99.28157261439732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1? rvalInt ;",
            "score": 99.24508231026786,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0>> rvalInt >> >> rvalInt ;",
            "score": 99.17965932992789,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "arg = lvalInt >> >> rvalInt ;",
            "score": 99.1151123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "arg = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Number( rvalInt ) ;",
            "score": 99.08964399857955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final result = lvalInt << rvalInt ;",
            "score": 99.03812662760417,
            "correctness": "uncompilable",
            "tokenized_patch": "final result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.LSH , right ) ;",
            "score": 99.03499755859374,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . LSH , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> & rvalInt ; break ;",
            "score": 99.28141021728516,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt >>1;",
            "score": 99.24496895926339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.20697893415179,
            "correctness": "uncompilable",
            "tokenized_patch": "p = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "temp = lvalInt >> >> rvalInt ;",
            "score": 99.17903645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "temp = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rvalInt ; ;",
            "score": 99.12849934895833,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "reportCodeChange( 'length') ;",
            "score": 99.08727416992187,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '[].join()') ;",
            "score": 99.08727416992187,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '') ;",
            "score": 99.08727416992187,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'join') ;",
            "score": 99.08727416992187,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'a') ;",
            "score": 99.08727416992187,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval rvalInt ;",
            "score": 99.01026407877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ?1:1;",
            "score": 99.28111853966347,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == rval ? 1 : 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> > rvalInt ;",
            "score": 99.20688302176339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval rvalInt ;",
            "score": 99.12830607096355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval2;",
            "score": 99.11441040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval3;",
            "score": 99.11441040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval10;",
            "score": 99.11441040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval6;",
            "score": 99.11441040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval32;",
            "score": 99.11441040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>2; break ;",
            "score": 99.03493430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>3; break ;",
            "score": 99.03493430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>10; break ;",
            "score": 99.03493430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>6; break ;",
            "score": 99.03493430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>32; break ;",
            "score": 99.03493430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> $NUMBER$ ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; break ; case ;",
            "score": 99.28080240885417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> - - rvalInt ;",
            "score": 99.20652553013393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> - - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt >> >> rval ;",
            "score": 99.12706502278645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( rvalInt ) ;",
            "score": 99.03432210286458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length') ; }",
            "score": 99.03364701704545,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()') ; }",
            "score": 99.03364701704545,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '') ; }",
            "score": 99.03364701704545,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join') ; }",
            "score": 99.03364701704545,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a') ; }",
            "score": 99.03364701704545,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt.0;",
            "score": 99.24394008091518,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= lvalInt >> >> >> >> rvalInt ;",
            "score": 99.20643028846153,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; *;",
            "score": 99.17824009486607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; * ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval , lval , lval ) ;",
            "score": 99.12686157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval , lval , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "head = lvalInt << rvalInt ;",
            "score": 99.113037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "head = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = left.getDouble( ) ;",
            "score": 99.08559348366477,
            "correctness": "wrong",
            "tokenized_patch": "result = left . get CaMeL Double ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "r = lvalInt >> >> rvalInt ;",
            "score": 99.03395589192708,
            "correctness": "uncompilable",
            "tokenized_patch": "r = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "temp = lvalInt >> rvalInt ;",
            "score": 99.03301447088069,
            "correctness": "uncompilable",
            "tokenized_patch": "temp = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt % rvalInt >> >> rvalInt ;",
            "score": 99.2802963256836,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int % rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> | lvalInt ;",
            "score": 99.2060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> | lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1/ >> >> rvalInt ;",
            "score": 99.12657674153645,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> rvalInt ; break ;",
            "score": 99.27972819010417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt rval null ;",
            "score": 99.24254432091347,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int rval null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int result = lvalInt >> >> rvalInt ;",
            "score": 99.20538330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "final int result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << << rvalInt ;",
            "score": 99.11106363932292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rval >> rvalInt ;",
            "score": 99.08433024088542,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) rval >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "try { newNumber =( int ) rval ;",
            "score": 99.03201293945312,
            "correctness": "uncompilable",
            "tokenized_patch": "try { new CaMeL Number = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ? lvalInt >> rvalInt ;",
            "score": 99.00431315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ? lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt -0;",
            "score": 99.24210902622768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ;",
            "score": 99.12453002929688,
            "correctness": "wrong",
            "tokenized_patch": "result = lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "switch( n.getType( ) )",
            "score": 99.11088423295455,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( n . get CaMeL Type ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << *rvalInt ;",
            "score": 99.08309936523438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Number rval = lvalInt >> rvalInt ;",
            "score": 99.03152465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "Number rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt >> lval ;",
            "score": 99.20490373883929,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt / >> rvalInt ;",
            "score": 99.12208048502605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( rval ) ;",
            "score": 99.11024983723958,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( left , right ) ;",
            "score": 99.08158365885417,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( left , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( left.getType( ) ) ;",
            "score": 99.02679443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( left . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & >> >> >> rvalInt ;",
            "score": 99.27877604166666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || >> rvalInt ;",
            "score": 99.24093627929688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "head = lvalInt >> rvalInt ;",
            "score": 99.10933061079545,
            "correctness": "uncompilable",
            "tokenized_patch": "head = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) >> rvalInt ;",
            "score": 99.07982288707386,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lval , left ) ;",
            "score": 99.00070190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> -1;",
            "score": 99.20418607271634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *lvalInt >> >> rvalInt ;",
            "score": 99.17251586914062,
            "correctness": "uncompilable",
            "tokenized_patch": "return * lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> & rvalInt ;",
            "score": 99.11918131510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v = lvalInt >> >> rvalInt ;",
            "score": 99.10788981119792,
            "correctness": "uncompilable",
            "tokenized_patch": "v = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<1;",
            "score": 99.077880859375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , null ;",
            "score": 99.02396647135417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval : break ;",
            "score": 98.9988505045573,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> << >> >> rvalInt ; break ;",
            "score": 99.27865600585938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> << >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >>1/ rvalInt ;",
            "score": 99.24018205915179,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> 1 / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == >> rvalInt ;",
            "score": 99.20351155598958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt >>1;",
            "score": 99.17184682992789,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval >=0? lval : lval ;",
            "score": 99.1188077059659,
            "correctness": "wrong",
            "tokenized_patch": "result = lval >= 0 ? lval : lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "val = lvalInt << >> rvalInt ;",
            "score": 99.1066385904948,
            "correctness": "uncompilable",
            "tokenized_patch": "val = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int >> >> >> rvalInt ;",
            "score": 99.07489013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double rval = lvalInt >> rvalInt ;",
            "score": 99.01942952473958,
            "correctness": "uncompilable",
            "tokenized_patch": "double rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Node.lvalInt >> rvalInt ;",
            "score": 98.99692789713542,
            "correctness": "uncompilable",
            "tokenized_patch": "return Node . lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval >> >> >> >> rvalInt ;",
            "score": 99.23958333333333,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt *lval ;",
            "score": 99.20337785993304,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int * lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval.longValue( ) ;",
            "score": 99.11683238636364,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval . long CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & result ;",
            "score": 99.10434299045139,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'length'+ right ) ;",
            "score": 99.01941935221355,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( '[].join()'+ right ) ;",
            "score": 99.01941935221355,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ''+ right ) ;",
            "score": 99.01941935221355,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'join'+ right ) ;",
            "score": 99.01941935221355,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( 'a'+ right ) ;",
            "score": 99.01941935221355,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( $STRING$ + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n >> rvalInt >> rvalInt ;",
            "score": 98.99627685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return n >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> & >> >> rvalInt ;",
            "score": 99.27447102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> & >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.result = lvalInt >> lvalInt ;",
            "score": 99.16974346454327,
            "correctness": "uncompilable",
            "tokenized_patch": "this . result = lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ) ;",
            "score": 99.11588541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << rvalInt ; }",
            "score": 99.10364879261364,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( rvalInt >> rvalInt ) ;",
            "score": 98.99619547526042,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( rval CaMeL Int >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=1>> >> rvalInt ;",
            "score": 99.23902239118304,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>2;",
            "score": 99.20284598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>3;",
            "score": 99.20284598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>10;",
            "score": 99.20284598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>6;",
            "score": 99.20284598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> >>32;",
            "score": 99.20284598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) / rvalInt ;",
            "score": 99.11478678385417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; break ; case Token.URSH :",
            "score": 99.10340372721355,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> + rvalInt ;",
            "score": 99.0272549715909,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , right",
            "score": 98.99439586292614,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , right",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt : rvalInt ;",
            "score": 99.23861258370536,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "expr = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.20232282366071,
            "correctness": "uncompilable",
            "tokenized_patch": "expr = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "name = lvalInt >> >> rvalInt ;",
            "score": 99.10299682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "name = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt ; break ; }",
            "score": 99.23860386439732,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> lval ; ;",
            "score": 99.20042201450893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> lval ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ++ >> >> rvalInt ;",
            "score": 99.16890775240384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ++ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> Boolean.TRUE ;",
            "score": 99.11460367838542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> Boolean . TRUE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s = lvalInt << rvalInt ;",
            "score": 99.10251686789773,
            "correctness": "uncompilable",
            "tokenized_patch": "s = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << >> rvalInt ; break ;",
            "score": 99.07152303059895,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> = lvalInt ;",
            "score": 99.02633666992188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "type = FRACTIONAL_BITWISE_OPERAND , right ;",
            "score": 99.01632690429688,
            "correctness": "uncompilable",
            "tokenized_patch": "type = FR@@ ACTIONAL _ BITWISE _ OPERAND , right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= lvalInt >> rvalInt ; break ;",
            "score": 98.99142456054688,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.= rvalInt >> >> rvalInt ;",
            "score": 99.2377178485577,
            "correctness": "uncompilable",
            "tokenized_patch": "result . = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt L ;",
            "score": 99.20030866350446,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int L ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lval >> >> >> rvalInt ;",
            "score": 99.16848520132211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ] ;",
            "score": 99.11373901367188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rval = lvalInt << rvalInt ;",
            "score": 99.1015116373698,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber << rvalInt ;",
            "score": 99.0705322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt || rvalInt ;",
            "score": 99.0259676846591,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> >> rvalInt ; break ;",
            "score": 99.0138448079427,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> ;",
            "score": 98.98731486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt == lval ) ;",
            "score": 99.23698207310268,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int == lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & lvalInt ;",
            "score": 99.19994007457386,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt / rvalInt ; ;",
            "score": 99.11305745442708,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "double result = lvalInt << rvalInt ;",
            "score": 99.10032145182292,
            "correctness": "uncompilable",
            "tokenized_patch": "double result = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Integer( rvalInt ) ;",
            "score": 99.06833718039773,
            "correctness": "wrong",
            "tokenized_patch": "result = new Integer ( rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =( result >> >> >> rvalInt ;",
            "score": 99.19940185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( result >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lval / >> rvalInt ;",
            "score": 99.11289469401042,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int >> rvalInt ;",
            "score": 99.06806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rval ;",
            "score": 98.98706817626953,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt & >> << rvalInt ;",
            "score": 99.2711932842548,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> *lvalInt ;",
            "score": 99.19895717075893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> * lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != lvalInt )",
            "score": 99.09877707741477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != lval CaMeL Int )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( n , n ) ;",
            "score": 98.98527018229167,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( n , n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt + rvalInt ;",
            "score": 99.23642403738839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt >> lvalInt ;",
            "score": 99.16543344350961,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval >> rvalInt ) ;",
            "score": 99.11070760091145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> rval ;",
            "score": 99.09761186079545,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.getType( ) ) ;",
            "score": 99.01019287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> < rvalInt ;",
            "score": 99.09666951497395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> - rvalInt ;",
            "score": 99.0239590731534,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = result << rvalInt ;",
            "score": 99.00989786783855,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = result << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> <= rvalInt ;",
            "score": 99.26870291573661,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> lval rvalInt ;",
            "score": 99.19831194196429,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> rval ; }",
            "score": 99.09592692057292,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += rvalInt << >> rvalInt ;",
            "score": 99.06605021158855,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? rvalInt ;",
            "score": 99.02281605113636,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *result = lvalInt >> rvalInt ;",
            "score": 99.16468224158653,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval -1;",
            "score": 99.1092529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >> >> >> rvalInt ;",
            "score": 99.06565348307292,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt.;",
            "score": 99.02201334635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int . ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt >> >> >> rvalInt ;",
            "score": 99.00965372721355,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval ) ;",
            "score": 99.16383666992188,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / rvalInt ; }",
            "score": 99.10891723632812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt : rvalInt ;",
            "score": 99.23448835100446,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>2;",
            "score": 99.19755415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>3;",
            "score": 99.19755415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>10;",
            "score": 99.19755415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>6;",
            "score": 99.19755415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>32;",
            "score": 99.19755415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> rvalInt >> >> rvalInt ;",
            "score": 99.16363055889423,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval -( int ) rvalInt ;",
            "score": 99.02158610026042,
            "correctness": "wrong",
            "tokenized_patch": "result = lval - ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "status = lvalInt >> rvalInt ;",
            "score": 99.0087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "status = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) n ;",
            "score": 98.9802978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt == rvalInt ;",
            "score": 99.23433140345982,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> >> rvalInt ;",
            "score": 99.10826526988636,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double result = lvalInt >> rvalInt ;",
            "score": 99.0941162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "double result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - lvalInt << rvalInt ;",
            "score": 99.06431070963542,
            "correctness": "wrong",
            "tokenized_patch": "result = - lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << rvalInt1;",
            "score": 99.02152506510417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "prev = lvalInt >> >> rvalInt ;",
            "score": 99.00823974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "prev = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.19600132533482,
            "correctness": "uncompilable",
            "tokenized_patch": "sb = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt ) ;",
            "score": 99.10594482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> >> rval ;",
            "score": 99.09359741210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "out = lvalInt >> >> rvalInt ;",
            "score": 99.00818888346355,
            "correctness": "uncompilable",
            "tokenized_patch": "out = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval1;",
            "score": 98.9790547688802,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval == rvalInt ;",
            "score": 99.23378208705357,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt - result ;",
            "score": 99.19583565848214,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int - result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = node.newNumber( result ) ;",
            "score": 99.0924072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = node . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> n ;",
            "score": 99.06264919704861,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "++ lvalInt >> >> >> rvalInt ;",
            "score": 99.02105712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "++ lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else rval = lvalInt >> rvalInt ;",
            "score": 99.00813802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "else rval = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rvalInt ; }",
            "score": 99.26625279017857,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1>> >> rvalInt ;",
            "score": 99.23282470703126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt ; *",
            "score": 99.19581821986607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt >> ;",
            "score": 99.16000366210938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *^ rvalInt ;",
            "score": 99.10281372070312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> - rvalInt ;",
            "score": 99.02099609375,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "x = lvalInt >> rvalInt ;",
            "score": 99.00792347301136,
            "correctness": "uncompilable",
            "tokenized_patch": "x = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt : >> rvalInt ;",
            "score": 99.23193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int : >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lvalInt ; ;",
            "score": 99.19505964006696,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt &1;",
            "score": 99.15972430889423,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> & rval ;",
            "score": 99.10261674360795,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> rval ;",
            "score": 99.0916748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> lvalInt ;",
            "score": 99.02099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt ;",
            "score": 98.97708565848214,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; *;",
            "score": 99.15968674879808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; * ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "array = lvalInt >> >> rvalInt ;",
            "score": 99.0916239420573,
            "correctness": "uncompilable",
            "tokenized_patch": "array = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << rvalInt ; break ;",
            "score": 99.00665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( rvalInt != rvalInt ) ;",
            "score": 98.97501627604167,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( rval CaMeL Int != rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && rvalInt > rvalInt ;",
            "score": 99.2635009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && rval CaMeL Int > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == >>1- rvalInt ;",
            "score": 99.23136683872768,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == >> 1 - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "line = lvalInt >> >> >> >> rvalInt ;",
            "score": 99.19416155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "line = lval CaMeL Int >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> ~ rvalInt ;",
            "score": 99.10005696614583,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n << rvalInt ; break ;",
            "score": 99.00612571022727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> rvalInt - rvalInt ;",
            "score": 99.2311260516827,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 >> rval CaMeL Int - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return *rvalInt >> >> >> rvalInt ;",
            "score": 99.15806227463942,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lvalInt , lval ) ;",
            "score": 99.09913126627605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval CaMeL Int , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "head = lvalInt << >> rvalInt ;",
            "score": 99.09037272135417,
            "correctness": "uncompilable",
            "tokenized_patch": "head = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( n ) ;",
            "score": 99.01877663352273,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "inst = lvalInt >> rvalInt ;",
            "score": 99.00581498579545,
            "correctness": "uncompilable",
            "tokenized_patch": "inst = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += FRACTIONAL_BITWISE_OPERAND , break ;",
            "score": 98.97316487630208,
            "correctness": "uncompilable",
            "tokenized_patch": "result += FR@@ ACTIONAL _ BITWISE _ OPERAND , break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt2;",
            "score": 99.23094764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt3;",
            "score": 99.23094764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt10;",
            "score": 99.23094764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt6;",
            "score": 99.23094764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt32;",
            "score": 99.23094764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == lvalInt ) {",
            "score": 99.09010823567708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == lval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "x = lvalInt >> >> rvalInt ;",
            "score": 99.0050557454427,
            "correctness": "uncompilable",
            "tokenized_patch": "x = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==1>> >> rvalInt ;",
            "score": 99.23066929408482,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> lvalInt ;",
            "score": 99.1925800030048,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "index = lvalInt >> >> rvalInt ;",
            "score": 99.15672810872395,
            "correctness": "uncompilable",
            "tokenized_patch": "index = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt + >> rvalInt ;",
            "score": 99.09867350260417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return lvalInt >> rvalInt ;",
            "score": 99.05753580729167,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = += lvalInt >> rvalInt ;",
            "score": 99.01810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = += lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ex = lvalInt >> >> rvalInt ;",
            "score": 99.00472005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "ex = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> : result ;",
            "score": 98.97232666015626,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & & >> rvalInt ;",
            "score": 99.26282677283653,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> rvalInt {",
            "score": 99.19178118024554,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> rval CaMeL Int {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *>> rvalInt ;",
            "score": 99.09841918945312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>0; break ;",
            "score": 99.01806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> >> >> rvalInt ;",
            "score": 99.22900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rvalInt : result ;",
            "score": 99.19142368861607,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval CaMeL Int : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lval >> >> rvalInt ;",
            "score": 99.15590413411458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default : break ; }",
            "score": 99.09800211588542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default : break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s = lvalInt << >> rvalInt ;",
            "score": 99.08883666992188,
            "correctness": "uncompilable",
            "tokenized_patch": "s = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "right = lvalInt << rvalInt ;",
            "score": 99.05658513849431,
            "correctness": "uncompilable",
            "tokenized_patch": "right = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "prev = lvalInt >> rvalInt ;",
            "score": 99.0162020596591,
            "correctness": "uncompilable",
            "tokenized_patch": "prev = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cached = lvalInt >> >> rvalInt ;",
            "score": 99.00350952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "cached = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND , right +",
            "score": 98.9702657063802,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND , right +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; break ; case ;",
            "score": 99.26206868489584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; break ; case ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt [0] ;",
            "score": 99.09785766601563,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int [ 0 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> >> rval ;",
            "score": 99.08791097005208,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<1; break ;",
            "score": 99.05389959161931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt += rvalInt ;",
            "score": 99.0158358487216,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int += rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "code = lvalInt >> >> rvalInt ;",
            "score": 99.00229899088542,
            "correctness": "uncompilable",
            "tokenized_patch": "code = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = error( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 98.96925862630208,
            "correctness": "uncompilable",
            "tokenized_patch": "result = error ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt >> & rvalInt ;",
            "score": 99.19010416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> rval ;",
            "score": 99.09526977539062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "VM.assert( rvalInt != rval ) ;",
            "score": 99.08778889973958,
            "correctness": "uncompilable",
            "tokenized_patch": "VM . assert ( rval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval.getDouble( ) ;",
            "score": 99.01513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt *rvalInt ;",
            "score": 99.26163736979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >>1;",
            "score": 99.18999774639423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'length') ;",
            "score": 99.09524536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( '[].join()') ;",
            "score": 99.09524536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( '') ;",
            "score": 99.09524536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'join') ;",
            "score": 99.09524536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'a') ;",
            "score": 99.09524536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> &( rval ) ;",
            "score": 99.08727010091145,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String newNumber =( int ) rval ;",
            "score": 98.9649658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "String new CaMeL Number = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final else result = lvalInt >> >> rvalInt ;",
            "score": 99.18931361607143,
            "correctness": "uncompilable",
            "tokenized_patch": "final else result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + ^ rvalInt ;",
            "score": 99.09442138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + ^ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p = lvalInt >> >> rvalInt ;",
            "score": 99.08693440755208,
            "correctness": "uncompilable",
            "tokenized_patch": "p = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( rval ) ;",
            "score": 99.01301713423295,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cached = lvalInt >> rvalInt ;",
            "score": 98.99843528053977,
            "correctness": "uncompilable",
            "tokenized_patch": "cached = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt + ;",
            "score": 98.9649149576823,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int + ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval ) ;",
            "score": 99.22397867838542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> lval rvalInt ;",
            "score": 99.18885294596355,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt & rvalInt ;",
            "score": 99.1488788311298,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> >> rval ;",
            "score": 99.09428267045455,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "res = lvalInt >> rvalInt ;",
            "score": 99.0869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "res = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.getLong( ) ;",
            "score": 99.04485529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . get CaMeL Long ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result << rvalInt ;",
            "score": 99.012451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = rvalInt >> rvalInt ;",
            "score": 99.2237215909091,
            "correctness": "uncompilable",
            "tokenized_patch": "if = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = lvalInt >> >> rvalInt ; }",
            "score": 99.14808067908653,
            "correctness": "uncompilable",
            "tokenized_patch": "n = lval CaMeL Int >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *2>> >> rvalInt ;",
            "score": 99.09403483072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *3>> >> rvalInt ;",
            "score": 99.09403483072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *10>> >> rvalInt ;",
            "score": 99.09403483072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *6>> >> rvalInt ;",
            "score": 99.09403483072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *32>> >> rvalInt ;",
            "score": 99.09403483072917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = reportCodeChange( ) ;",
            "score": 98.9979248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval2;",
            "score": 98.96375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval3;",
            "score": 98.96375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval10;",
            "score": 98.96375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval6;",
            "score": 98.96375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval32;",
            "score": 98.96375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.0;",
            "score": 99.2230694110577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != lvalInt ; break ;",
            "score": 99.14754544771634,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<( rval ) ;",
            "score": 99.0861483487216,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.newNumber = lvalInt ;",
            "score": 98.99476207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "this . new CaMeL Number = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( int ) rval ;",
            "score": 98.9634297688802,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> ( int ) rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt : >> >> rvalInt ;",
            "score": 99.22284405048077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= ~ rvalInt ;",
            "score": 99.09305826822917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= ~ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.URSH :",
            "score": 99.03599039713542,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ? ;",
            "score": 98.9631856282552,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt > >> >> rvalInt ;",
            "score": 99.2218017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int > >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >> >> >>1;",
            "score": 99.18777029854911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value >> >> rvalInt >> rvalInt ;",
            "score": 99.14554537259616,
            "correctness": "uncompilable",
            "tokenized_patch": "return value >> >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> >> & rvalInt ;",
            "score": 99.09271240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "short result = lvalInt >> rvalInt ;",
            "score": 99.08567301432292,
            "correctness": "uncompilable",
            "tokenized_patch": "short result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> n ;",
            "score": 99.0359130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >=1; break ;",
            "score": 99.25778432992789,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( rvalInt ) ; }",
            "score": 99.14541391225961,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >0? lval : lval ;",
            "score": 99.09254039417614,
            "correctness": "wrong",
            "tokenized_patch": "result = lval > 0 ? lval : lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "ret = lvalInt << >> rvalInt ;",
            "score": 99.08536783854167,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = lval >> rvalInt ;",
            "score": 99.02936345880681,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "line = lvalInt >> rvalInt ;",
            "score": 99.00652521306819,
            "correctness": "uncompilable",
            "tokenized_patch": "line = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = -( int ) rvalInt ;",
            "score": 98.98505193536931,
            "correctness": "wrong",
            "tokenized_patch": "result = - ( int ) rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval ? lval : lval ;",
            "score": 99.09240044487848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ? lval : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "out = lvalInt >> rvalInt ;",
            "score": 99.00483842329545,
            "correctness": "uncompilable",
            "tokenized_patch": "out = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n << lvalInt ;",
            "score": 98.98484293619792,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; } return result ;",
            "score": 99.25624186197916,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; } return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2/ >> >> rvalInt ;",
            "score": 99.09229532877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3/ >> >> rvalInt ;",
            "score": 99.09229532877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10/ >> >> rvalInt ;",
            "score": 99.09229532877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6/ >> >> rvalInt ;",
            "score": 99.09229532877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32/ >> >> rvalInt ;",
            "score": 99.09229532877605,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ result = lvalInt >> >> rval ;",
            "score": 99.08324085582386,
            "correctness": "uncompilable",
            "tokenized_patch": "{ result = lval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( n , result ) ;",
            "score": 99.02397017045455,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( n , result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *>> >> rvalInt ; break ;",
            "score": 99.25601399739584,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int * >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && >> rvalInt ;",
            "score": 99.21825154622395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> : rvalInt ;",
            "score": 99.18459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> : rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval */ >> >> rvalInt ;",
            "score": 99.09181722005208,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * / >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> << rvalInt ;",
            "score": 99.25563151041666,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lval ; ;",
            "score": 99.18406325120192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ; ;",
            "score": 99.09043190696023,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> | lvalInt ;",
            "score": 99.08194986979167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> | lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "new = lvalInt >> rvalInt ;",
            "score": 99.02175071022727,
            "correctness": "uncompilable",
            "tokenized_patch": "new = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "args = lvalInt >> rvalInt ;",
            "score": 99.00255237926136,
            "correctness": "uncompilable",
            "tokenized_patch": "args = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "start = lvalInt << rvalInt ;",
            "score": 98.97907049005681,
            "correctness": "uncompilable",
            "tokenized_patch": "start = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> lvalInt ;",
            "score": 99.18185424804688,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> & rvalInt ;",
            "score": 99.0893221768466,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> n ; break ;",
            "score": 99.0213955965909,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> n ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval1;",
            "score": 99.00100708007812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval = rvalInt >> rvalInt ;",
            "score": 99.21441180889423,
            "correctness": "wrong",
            "tokenized_patch": "result = lval = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> result ;",
            "score": 99.18079552283653,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int value = lvalInt >> >> rvalInt ;",
            "score": 99.14133864182692,
            "correctness": "uncompilable",
            "tokenized_patch": "int value = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *>> >> rvalInt ;",
            "score": 99.0889559659091,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rvalInt ) {",
            "score": 99.08072916666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( result ) ;",
            "score": 99.02065700954861,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rvalInt )",
            "score": 98.97722833806819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval CaMeL Int )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >>1;",
            "score": 99.08033447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "left = lvalInt << rvalInt ;",
            "score": 99.01806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "left = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.RSH :",
            "score": 98.97684478759766,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; null",
            "score": 99.21358548677884,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; null",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j = lvalInt >> >> rvalInt ;",
            "score": 99.1389872233073,
            "correctness": "uncompilable",
            "tokenized_patch": "j = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; case Token.rval :",
            "score": 99.08634440104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; case Token . rval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >>1;",
            "score": 99.07948996803977,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "left = lvalInt >> rvalInt ;",
            "score": 99.0180331143466,
            "correctness": "uncompilable",
            "tokenized_patch": "left = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>0;",
            "score": 98.99766956676136,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt./ rvalInt ;",
            "score": 99.21334838867188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) >> rvalInt ;",
            "score": 99.08607991536458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vals = lvalInt >> >> rvalInt ;",
            "score": 99.07948811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "vals = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Double( rvalInt ) ;",
            "score": 99.01692338423295,
            "correctness": "wrong",
            "tokenized_patch": "result = new Double ( rval CaMeL Int ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return reportCodeChange( ) ;",
            "score": 98.99453735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "return report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + rvalInt >> >> >> rvalInt ;",
            "score": 99.25069173177083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval + rval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "byte result = lvalInt >> rvalInt ;",
            "score": 99.07869466145833,
            "correctness": "uncompilable",
            "tokenized_patch": "byte result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.URSH : break ;",
            "score": 99.01497025923295,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . UR@@ SH : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + rvalInt ;",
            "score": 98.9940185546875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "report.newNumber( result ) ;",
            "score": 98.97159423828126,
            "correctness": "uncompilable",
            "tokenized_patch": "report . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval lvalInt >> rvalInt ;",
            "score": 99.21164957682292,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> : lvalInt ;",
            "score": 99.17665452223558,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rvalInt ; }",
            "score": 99.13563889723558,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rvalInt ? ;",
            "score": 99.08370971679688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval CaMeL Int ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( result , result ) ;",
            "score": 99.01372736150569,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( result , result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval : result ;",
            "score": 98.95026189630681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval >> >> >> rvalInt ;",
            "score": 99.248095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lval ;",
            "score": 99.17522515190973,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > & rvalInt ;",
            "score": 99.0836893717448,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int << rvalInt ;",
            "score": 99.01074829101563,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "k = lvalInt >> rvalInt ;",
            "score": 98.991943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "k = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rvalInt ;",
            "score": 99.17353959517045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.result = lvalInt >> rvalInt ;",
            "score": 99.134033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "super . result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l = lvalInt >> >> rvalInt ;",
            "score": 99.07769775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "l = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.size( ) ;",
            "score": 99.00995427911931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . size ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( result ) ;",
            "score": 98.9904541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = result << rvalInt ;",
            "score": 98.9686612215909,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = result << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> & >> rvalInt ;",
            "score": 99.17348069411058,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt <= rvalInt ) {",
            "score": 99.07688395182292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int <= rval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb = lvalInt << rvalInt ;",
            "score": 99.00982111150569,
            "correctness": "uncompilable",
            "tokenized_patch": "sb = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> *rvalInt ;",
            "score": 98.98895818536931,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> * rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> << rvalInt ; break ;",
            "score": 99.24689127604167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> << rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0+ rvalInt >> rvalInt ;",
            "score": 99.21054311899039,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 + rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> >> >> lval ) ;",
            "score": 99.1730487530048,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ result = lvalInt >> >> rvalInt ;",
            "score": 99.13217397836539,
            "correctness": "uncompilable",
            "tokenized_patch": "/ result = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> & rvalInt ;",
            "score": 99.08174438476563,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "res = lvalInt << rvalInt ;",
            "score": 99.0762939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "res = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.getValue( ) ;",
            "score": 99.0094327059659,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . get CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l = lvalInt >> rvalInt ;",
            "score": 98.98891379616477,
            "correctness": "uncompilable",
            "tokenized_patch": "l = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lvalInt ;",
            "score": 98.96798706054688,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =0>> rvalInt ;",
            "score": 99.21002875434027,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> L rvalInt ;",
            "score": 99.172607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> L rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( String ) lvalInt >> rvalInt ;",
            "score": 99.13161057692308,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( String ) lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = rvalInt ;",
            "score": 99.07577514648438,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0/ rvalInt ;",
            "score": 99.07438354492187,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.length( ) ;",
            "score": 99.00860040838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "count = lvalInt << rvalInt ;",
            "score": 98.98842551491477,
            "correctness": "uncompilable",
            "tokenized_patch": "count = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = rvalInt >> rvalInt ;",
            "score": 98.96710759943181,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+ n ;",
            "score": 98.93574662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+ n ;",
            "score": 98.93574662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+ n ;",
            "score": 98.93574662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+ n ;",
            "score": 98.93574662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+ n ;",
            "score": 98.93574662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >=1; break ;",
            "score": 99.2418682391827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.0>> rvalInt ;",
            "score": 99.2097919170673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . 0 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret = lvalInt << rvalInt ;",
            "score": 99.07411887428977,
            "correctness": "uncompilable",
            "tokenized_patch": "ret = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> rvalInt ;",
            "score": 99.07276611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( FRACTIONAL_BITWISE_OPERAND ) ;",
            "score": 99.00575949928977,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( FR@@ ACTIONAL _ BITWISE _ OPERAND ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & lval rvalInt ;",
            "score": 99.1673114483173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt + >> rvalInt ;",
            "score": 99.07244318181819,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int + >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result +=( int ) rvalInt ;",
            "score": 99.00506591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result += ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result |= lvalInt << rvalInt ;",
            "score": 98.98781516335227,
            "correctness": "uncompilable",
            "tokenized_patch": "result |= lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ex = lvalInt >> rvalInt ;",
            "score": 98.96611993963069,
            "correctness": "uncompilable",
            "tokenized_patch": "ex = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ;",
            "score": 98.92632293701172,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> lvalInt >> >> rvalInt ;",
            "score": 99.16704852764423,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ~ rval ;",
            "score": 99.07239379882813,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ~ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "inst = lvalInt << rvalInt ;",
            "score": 99.06986860795455,
            "correctness": "uncompilable",
            "tokenized_patch": "inst = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( left ) ;",
            "score": 99.00419311523437,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt + rvalInt ;",
            "score": 98.98701615767045,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "code = lvalInt >> rvalInt ;",
            "score": 98.962646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "code = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = lvalInt >> rvalInt ;",
            "score": 99.20458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << >> >> >> rval ;",
            "score": 99.0685147372159,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber( rvalInt ) ;",
            "score": 99.00391734730114,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "index = lvalInt >> rvalInt ;",
            "score": 98.98274369673295,
            "correctness": "uncompilable",
            "tokenized_patch": "index = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt",
            "score": 98.92392800071023,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> lval rvalInt ;",
            "score": 99.16472919170673,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( *lvalInt >> rvalInt ;",
            "score": 99.12607828776042,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( * lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> options ;",
            "score": 99.06926879882812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> options ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Token( rvalInt ) ;",
            "score": 99.0023526278409,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Token ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -= rvalInt ;",
            "score": 98.98235529119319,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int -= rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( !( rval >= rval ) ) {",
            "score": 98.95369096235795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( rval >= rval ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> <1; break ;",
            "score": 99.23886343149039,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> < 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval >> >> >> rvalInt ;",
            "score": 99.2037686434659,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "expr = lvalInt >> >> rvalInt ;",
            "score": 99.1639404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "expr = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt -- ;",
            "score": 99.12603759765625,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int -- ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt / >> rval0;",
            "score": 99.06911399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int ) >> rvalInt ;",
            "score": 99.00166459517045,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ) >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber = rvalInt ;",
            "score": 98.95277235243056,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> <=1; break ;",
            "score": 99.23837716238839,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> <= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt !=1>> rvalInt ;",
            "score": 99.20181039663461,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = lvalInt >> >> >> rvalInt ;",
            "score": 99.16343336838942,
            "correctness": "uncompilable",
            "tokenized_patch": "i = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ^ rval ;",
            "score": 99.06547241210937,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ^ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval + lvalInt ;",
            "score": 98.98031955295139,
            "correctness": "wrong",
            "tokenized_patch": "result = lval + lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( lvalInt + 'length') ;",
            "score": 98.95214233398437,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt + '[].join()') ;",
            "score": 98.95214233398437,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt + '') ;",
            "score": 98.95214233398437,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt + 'join') ;",
            "score": 98.95214233398437,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt + 'a') ;",
            "score": 98.95214233398437,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n >> >> >> >> rvalInt ;",
            "score": 98.92229669744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return n >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rval ; break ;",
            "score": 99.2379901592548,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = value >> >> rvalInt ;",
            "score": 99.1992431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = value >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >>1) ;",
            "score": 99.12342418323864,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0/ >> rvalInt ;",
            "score": 99.06476384943181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 / >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval2;",
            "score": 99.06256103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval3;",
            "score": 99.06256103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval10;",
            "score": 99.06256103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval6;",
            "score": 99.06256103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval32;",
            "score": 99.06256103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "a = lvalInt >> rvalInt ;",
            "score": 98.9802579012784,
            "correctness": "uncompilable",
            "tokenized_patch": "a = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt == rvalInt ;",
            "score": 99.19905229048295,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> lvalInt ;",
            "score": 99.16266338641827,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( n , lval ) ;",
            "score": 99.064306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( n , lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( rvalInt != rval ) {",
            "score": 99.06212269176136,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "new = lvalInt << rvalInt ;",
            "score": 98.99699263139205,
            "correctness": "uncompilable",
            "tokenized_patch": "new = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> & rvalInt ;",
            "score": 98.97968084161931,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt ; break ;",
            "score": 99.19886271158855,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - lvalInt ; }",
            "score": 99.12197875976562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ? lvalInt : lval ;",
            "score": 99.0611905184659,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ? lval CaMeL Int : lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >>1>> rvalInt ;",
            "score": 98.9967373934659,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND , ;",
            "score": 98.91860129616477,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND , ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - >> >> rvalInt ;",
            "score": 99.19883375901442,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int - >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} result = lvalInt >> rvalInt ;",
            "score": 99.12193806966145,
            "correctness": "uncompilable",
            "tokenized_patch": "} result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ; }",
            "score": 99.06055797230114,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( n ) ;",
            "score": 98.99608764648437,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> << rvalInt ;",
            "score": 99.23435756138393,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt ; *",
            "score": 99.16222205528847,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int ; *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "retval = lvalInt >> >> >> rval ;",
            "score": 99.05970348011364,
            "correctness": "uncompilable",
            "tokenized_patch": "retval = lval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> L ;",
            "score": 99.0578857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> L ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt ; case Token.RSH :",
            "score": 98.94798694957386,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rvalInt ;",
            "score": 99.16217595880681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( lval ,0) ;",
            "score": 99.11883544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( lval , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ) ;",
            "score": 99.05895385742187,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rval0;",
            "score": 99.05719549005681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( rvalInt != rval ) ;",
            "score": 98.91463012695313,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( rval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >> -1) ;",
            "score": 99.11789957682292,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ reportCodeChange( ) ;",
            "score": 99.05836181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ report CaMeL Code CaMeL Change ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'length'+ rvalInt ) ;",
            "score": 98.9948974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()'+ rvalInt ) ;",
            "score": 98.9948974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( ''+ rvalInt ) ;",
            "score": 98.9948974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join'+ rvalInt ) ;",
            "score": 98.9948974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a'+ rvalInt ) ;",
            "score": 98.9948974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ + rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length';",
            "score": 98.91266547309027,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()';",
            "score": 98.91266547309027,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '';",
            "score": 98.91266547309027,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join';",
            "score": 98.91266547309027,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a';",
            "score": 98.91266547309027,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> << >> rvalInt ;",
            "score": 99.23174176897321,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval , rvalInt ;",
            "score": 99.19596041165866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval , rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = lvalInt << rvalInt ;",
            "score": 99.05742853338069,
            "correctness": "uncompilable",
            "tokenized_patch": "node = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt & >> rvalInt ;",
            "score": 99.0550537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt >> rvalInt ;",
            "score": 98.99357299804687,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >>1;",
            "score": 98.97598605685764,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.LSH : return n ;",
            "score": 98.94207208806819,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . LSH : return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == rvalInt ; break ;",
            "score": 99.23166329520089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval >> >> rvalInt ;",
            "score": 99.19569091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt & rvalInt ;",
            "score": 99.05696411132813,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <0? ;",
            "score": 99.05428466796874,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < 0 ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> + lvalInt ;",
            "score": 98.97592995383523,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> + lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += FRACTIONAL_BITWISE_OPERAND ,",
            "score": 98.911279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result += FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval >> >> rvalInt ;",
            "score": 99.23154994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & ;",
            "score": 99.1169942220052,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> LT ;",
            "score": 99.04657592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> LT ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt ;",
            "score": 98.99132622612848,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt != rvalInt ;",
            "score": 98.97523082386364,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n.newNumber( result ) ;",
            "score": 98.94057395241477,
            "correctness": "uncompilable",
            "tokenized_patch": "return n . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> <=1; break ;",
            "score": 99.2310791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> <= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval lvalInt >> rvalInt ;",
            "score": 99.19534301757812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval ; }",
            "score": 99.15922037760417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int value = lvalInt >> rvalInt ;",
            "score": 99.11294555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "int value = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( rvalInt != rval ) {",
            "score": 99.05568625710227,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> Comparable ;",
            "score": 99.04652709960938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> Comparable ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> >> >> rvalInt ;",
            "score": 98.9869051846591,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != rval ) break ;",
            "score": 98.97383256392045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != rval ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "name = lvalInt >> rvalInt ;",
            "score": 98.90806995738636,
            "correctness": "uncompilable",
            "tokenized_patch": "name = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.2;",
            "score": 99.19455190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.3;",
            "score": 99.19455190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.10;",
            "score": 99.19455190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.6;",
            "score": 99.19455190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.32;",
            "score": 99.19455190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> lvalInt ;",
            "score": 99.11251831054688,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval ; break ;",
            "score": 99.05498712713069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval , right ) ;",
            "score": 99.04491577148437,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= lvalInt ;",
            "score": 98.90678267045455,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt.) ;",
            "score": 99.19437349759616,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt -- >> >> rvalInt ;",
            "score": 99.15826885516827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int -- >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0>> rvalInt >> rvalInt ;",
            "score": 99.11158243815105,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; break ; }",
            "score": 99.04454345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> rvalInt ; }",
            "score": 98.98401988636364,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) n ;",
            "score": 98.90556989397321,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ==1; break ;",
            "score": 99.22947340745192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> == 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = rvalInt >> rvalInt ;",
            "score": 99.19352583451705,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p = lvalInt >> >> >> rvalInt ;",
            "score": 99.1567852313702,
            "correctness": "uncompilable",
            "tokenized_patch": "p = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> LE ;",
            "score": 99.04439086914063,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> LE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( rvalInt != rval ) ;",
            "score": 98.90491832386364,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( rval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt1>> rvalInt ;",
            "score": 99.19171142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lval ;",
            "score": 99.15655517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >> ;",
            "score": 99.11112467447917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt [ rvalInt ] ; break ;",
            "score": 99.22899518694196,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int [ rval CaMeL Int ] ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >>1;",
            "score": 99.19136352539063,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt & lval ;",
            "score": 99.15578049879808,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int & lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> >> >> rvalInt ;",
            "score": 99.11057535807292,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; case Token.RSH :",
            "score": 99.04995388454861,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval2;",
            "score": 99.0410489169034,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval3;",
            "score": 99.0410489169034,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval10;",
            "score": 99.0410489169034,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval6;",
            "score": 99.0410489169034,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval32;",
            "score": 99.0410489169034,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt + right ) ;",
            "score": 98.93359375,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.= lvalInt >> rvalInt ;",
            "score": 99.1898193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result . = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = lvalInt >> rvalInt ;",
            "score": 99.04951615767045,
            "correctness": "uncompilable",
            "tokenized_patch": "node = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> T ;",
            "score": 99.04093017578126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> T ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + n ;",
            "score": 98.96906195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval :",
            "score": 98.90096028645833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> lvalInt >> rvalInt ;",
            "score": 99.18959397536058,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 >> lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "b = lvalInt >> >> >> rval ;",
            "score": 99.04942737926136,
            "correctness": "uncompilable",
            "tokenized_patch": "b = lval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == rval ;",
            "score": 99.03873291015626,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( lval ) ;",
            "score": 98.97693481445313,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( lval ) ;",
            "score": 98.96849476207386,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n >> >> >> rvalInt ;",
            "score": 98.90070190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return n >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object result = lvalInt >> rvalInt ;",
            "score": 99.10781860351562,
            "correctness": "uncompilable",
            "tokenized_patch": "Object result = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval / rvalInt ;",
            "score": 99.03681776258681,
            "correctness": "wrong",
            "tokenized_patch": "result = lval / rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return newNumber << >> rvalInt ;",
            "score": 98.9764071377841,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; return n ;",
            "score": 98.96807250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n << >> rvalInt ;",
            "score": 98.93184204101563,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval( rval ) ;",
            "score": 99.1860821063702,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & >> lvalInt ;",
            "score": 99.15158315805289,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> &1;",
            "score": 99.0470947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ?1:0;",
            "score": 99.03495649857955,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? 1 : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = rvalInt << rvalInt ;",
            "score": 98.9759521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw lvalInt << >> rvalInt ;",
            "score": 98.92755681818181,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "line = lvalInt >> >> rvalInt ;",
            "score": 99.15157063802083,
            "correctness": "uncompilable",
            "tokenized_patch": "line = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0>> & rvalInt ;",
            "score": 99.03477894176136,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "arg = lvalInt >> rvalInt ;",
            "score": 98.96620871803977,
            "correctness": "uncompilable",
            "tokenized_patch": "arg = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( result ) ;",
            "score": 98.89666137695312,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt -0;",
            "score": 99.18436373197116,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =( result >> >> rvalInt ;",
            "score": 99.15106756036931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( result >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ) ;",
            "score": 99.04648659446023,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt *>> rvalInt ;",
            "score": 99.0337246981534,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> MAX_VALUE ;",
            "score": 98.9752530184659,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> MAX _ VALUE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != rval )",
            "score": 98.92444525824652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != rval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rval ; break ;",
            "score": 99.22752888997395,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> >> ; ;",
            "score": 99.15037184495192,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> >> ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *rvalInt >> rvalInt ;",
            "score": 99.10353781960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return * rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> rval0;",
            "score": 99.03204900568181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> rval 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >>1;",
            "score": 98.96425170898438,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int( lvalInt ) ;",
            "score": 98.89386541193181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String value = lvalInt >> >> rvalInt ;",
            "score": 99.14938589242789,
            "correctness": "uncompilable",
            "tokenized_patch": "String value = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt + rval ;",
            "score": 99.03084988064236,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int + rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "n = rvalInt << rvalInt ;",
            "score": 98.97438742897727,
            "correctness": "uncompilable",
            "tokenized_patch": "n = rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lvalInt ;",
            "score": 98.96256880326705,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt , left ) ;",
            "score": 98.91687622070313,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt =( int ) rval ;",
            "score": 98.89315795898438,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval > lval ? lval : lval ;",
            "score": 99.0307950106534,
            "correctness": "wrong",
            "tokenized_patch": "result = lval > lval ? lval : lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =1>> rvalInt ;",
            "score": 98.91496446397569,
            "correctness": "wrong",
            "tokenized_patch": "result = 1 >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> <= rvalInt ; break ;",
            "score": 99.22348458426339,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> <= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt L ;",
            "score": 99.1812744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int L ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "line = lvalInt >> >> >> rvalInt ;",
            "score": 99.1486065204327,
            "correctness": "uncompilable",
            "tokenized_patch": "line = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt << >> >> >> rval ;",
            "score": 99.0412264737216,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int << >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> type ;",
            "score": 99.02994384765626,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> type ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "++ lvalInt >> rvalInt ;",
            "score": 98.96094970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "++ lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> & rvalInt ;",
            "score": 99.2234356219952,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.- rvalInt ;",
            "score": 99.18111165364583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long rvalInt =( int ) rval ;",
            "score": 99.04109330610795,
            "correctness": "uncompilable",
            "tokenized_patch": "long rval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval % >> rvalInt ;",
            "score": 99.02760620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval % >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval :",
            "score": 98.89035034179688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt >>1;",
            "score": 99.18035419170673,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( lvalInt == rvalInt ) {",
            "score": 99.14785766601562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval [ lvalInt ] ;",
            "score": 99.0275146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval [ lval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> rvalInt ; }",
            "score": 98.97118030894886,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e = lvalInt << rvalInt ;",
            "score": 98.9590731534091,
            "correctness": "uncompilable",
            "tokenized_patch": "e = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != lval ) {",
            "score": 98.91024780273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != lval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt |= lvalInt ;",
            "score": 98.88670765269886,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int |= lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt & >> rvalInt ; break ;",
            "score": 99.2225341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & >> rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval lvalInt >> >> rvalInt ;",
            "score": 99.18026029146634,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( >> rvalInt ) ;",
            "score": 99.0262784090909,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( >> rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt",
            "score": 98.95785522460938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == lval ) {",
            "score": 98.90611572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == lval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> rvalInt ;",
            "score": 98.88388400607639,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result result = rvalInt >> >> rvalInt ;",
            "score": 99.17978140024039,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pos = lvalInt << rvalInt ;",
            "score": 99.0403719815341,
            "correctness": "uncompilable",
            "tokenized_patch": "pos = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & rval1;",
            "score": 99.02534623579545,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n.getParent( ) ;",
            "score": 98.9695712002841,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "expr = lvalInt >> >> >> rvalInt ;",
            "score": 99.1458270733173,
            "correctness": "uncompilable",
            "tokenized_patch": "expr = lval CaMeL Int >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result ; case Token.URSH :",
            "score": 99.03952026367188,
            "correctness": "uncompilable",
            "tokenized_patch": "return result ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ?0:0;",
            "score": 99.02393687855114,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? 0 : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt , rvalInt ;",
            "score": 98.96888316761364,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int , rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'+",
            "score": 98.90321858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'+",
            "score": 98.90321858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''+",
            "score": 98.90321858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'+",
            "score": 98.90321858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'+",
            "score": 98.90321858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> lvalInt ;",
            "score": 99.14570756392045,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> rvalInt >> rvalInt ;",
            "score": 99.09932454427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c = lvalInt << rvalInt ;",
            "score": 99.03862970525569,
            "correctness": "uncompilable",
            "tokenized_patch": "c = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.RSH , right ) ;",
            "score": 98.90209350585937,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . RSH , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval( rval ) ;",
            "score": 99.17586263020833,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >>1<< rvalInt ;",
            "score": 98.96515447443181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> 1 << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt >= rval ) {",
            "score": 98.90075073242187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int >= rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lvalInt ; ;",
            "score": 99.0963846842448,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int >> lval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> true ;",
            "score": 99.0194091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rvalInt ; }",
            "score": 98.96491033380681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( n ) ;",
            "score": 98.95447998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.newNumber( result ) ;",
            "score": 98.9004638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "super . new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ^ rvalInt ; break ;",
            "score": 99.21871243990384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ^ rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt : ;",
            "score": 99.14385516826923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int : ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "results = lvalInt >> >> rvalInt ;",
            "score": 99.09539794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "results = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer lvalInt =( int ) rval ;",
            "score": 99.03715376420455,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer lval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rval ;",
            "score": 99.0193115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = rvalInt >> rvalInt ;",
            "score": 98.9629239169034,
            "correctness": "uncompilable",
            "tokenized_patch": "n = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) n ;",
            "score": 98.9539462002841,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( rvalInt , right ) ;",
            "score": 98.8951416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( rval CaMeL Int , right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object newNumber =( int ) rval ;",
            "score": 98.8804043856534,
            "correctness": "uncompilable",
            "tokenized_patch": "Object new CaMeL Number = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; return result ;",
            "score": 99.21848842075893,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.= rvalInt >> rvalInt ;",
            "score": 99.16847737630208,
            "correctness": "uncompilable",
            "tokenized_patch": "result . = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & lvalInt ; ;",
            "score": 99.09487915039062,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & lval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval1>> >> rvalInt ;",
            "score": 99.01920942826705,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return >> rvalInt << rvalInt ;",
            "score": 98.96262428977273,
            "correctness": "uncompilable",
            "tokenized_patch": "return >> rval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt1;",
            "score": 98.95014953613281,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> -- rvalInt ;",
            "score": 99.21812086838942,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> -- rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int end = lvalInt >> >> rvalInt ;",
            "score": 99.14353590745192,
            "correctness": "uncompilable",
            "tokenized_patch": "int end = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "arg = lvalInt << rvalInt ;",
            "score": 99.0322598544034,
            "correctness": "uncompilable",
            "tokenized_patch": "arg = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "] = lvalInt >> rvalInt ;",
            "score": 98.9501065340909,
            "correctness": "uncompilable",
            "tokenized_patch": "] = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 98.87556762695313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> >= rvalInt ;",
            "score": 99.21761380709134,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt <= >> rvalInt ;",
            "score": 99.16764322916667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int <= >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "name = lvalInt << rvalInt ;",
            "score": 99.03184925426136,
            "correctness": "uncompilable",
            "tokenized_patch": "name = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ? lvalInt : rval ;",
            "score": 99.01795543323864,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ? lval CaMeL Int : rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval lvalInt ;",
            "score": 99.142822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; } return n ;",
            "score": 99.03029563210227,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; } return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( right ) ;",
            "score": 98.94639282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ) ; }",
            "score": 98.89331665039063,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rvalInt ; ;",
            "score": 99.21535818917411,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >>1;",
            "score": 99.1644620028409,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == >> >> rvalInt ;",
            "score": 99.14247483473558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o = lvalInt >> rvalInt ;",
            "score": 99.08964399857955,
            "correctness": "uncompilable",
            "tokenized_patch": "o = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> EQ ;",
            "score": 99.01517944335937,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> EQ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result - rvalInt ;",
            "score": 98.94545676491477,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt < rval ) {",
            "score": 98.88998413085938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int < rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber =( int ) result ;",
            "score": 98.8715487393466,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = ( int ) result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ? >> rvalInt ;",
            "score": 99.1553955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ? >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> lval( rvalInt ;",
            "score": 99.14138559194711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> lval ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & Node.rval ;",
            "score": 99.02759898792614,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & Node . rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> & ~ rval ;",
            "score": 99.01341663707386,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & ~ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = FRACTIONAL_BITWISE_OPERAND ;",
            "score": 98.93990478515624,
            "correctness": "uncompilable",
            "tokenized_patch": "result = FR@@ ACTIONAL _ BITWISE _ OPERAND ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert( rvalInt != rval ) ;",
            "score": 98.88896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "assert ( rval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> & rvalInt ; break ;",
            "score": 99.21348353794643,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt ++ >> rvalInt ;",
            "score": 99.15468343098958,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int ++ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval ; break ; case Token.;",
            "score": 99.01190740411931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; case Token . ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = value >> >> >> rvalInt ;",
            "score": 98.94507945667614,
            "correctness": "uncompilable",
            "tokenized_patch": "result = value >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int - rvalInt ;",
            "score": 98.9335693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt <= rval ) {",
            "score": 98.88326416015624,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int <= rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rval >> >> >> >> rvalInt ;",
            "score": 99.1544189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new InternalError( rvalInt ) ;",
            "score": 99.08521525065105,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Internal CaMeL Error ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int & rvalInt ;",
            "score": 98.930419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reportCodeChange( ) ; }",
            "score": 98.88161010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "report CaMeL Code CaMeL Change ( ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( lvalInt != rval ) ;",
            "score": 98.87047729492187,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( lval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rvalInt ; ;",
            "score": 99.14930216471355,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> rval CaMeL Int ; ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new IllegalArgumentException(1) ;",
            "score": 99.08519490559895,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt ; case Token.RSH :",
            "score": 99.02651145241477,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == -1? ;",
            "score": 99.01116388494319,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == - 1 ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= lvalInt << rvalInt ;",
            "score": 98.94293823242188,
            "correctness": "uncompilable",
            "tokenized_patch": "= lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt ; break ;",
            "score": 98.92826334635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = lvalInt ;",
            "score": 98.88151719835069,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n.getDouble( ) ;",
            "score": 98.866650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return n . get CaMeL Double ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "case Token.URSH :",
            "score": 99.02584402901786,
            "correctness": "uncompilable",
            "tokenized_patch": "case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> rval ;",
            "score": 99.01079644097223,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rval ) ;",
            "score": 98.942822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( lval ) ;",
            "score": 98.92598266601563,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalInt {",
            "score": 99.13529459635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL Int {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> ~ rval ;",
            "score": 99.00972123579545,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> ~ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != rval ) ;",
            "score": 98.9423095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == rval ) {",
            "score": 98.87775268554688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rvalInt ; }",
            "score": 99.20867047991071,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( >> rvalInt ;",
            "score": 99.14528401692708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt - ;",
            "score": 99.08335367838542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int - ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2>> >> rvalInt ;",
            "score": 99.0084228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3>> >> rvalInt ;",
            "score": 99.0084228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10>> >> rvalInt ;",
            "score": 99.0084228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6>> >> rvalInt ;",
            "score": 99.0084228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32>> >> rvalInt ;",
            "score": 99.0084228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int + rvalInt ;",
            "score": 98.9201904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n >> lvalInt ;",
            "score": 98.87662760416667,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >1; break ;",
            "score": 99.20828012319711,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> > 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt || >> rvalInt ;",
            "score": 99.1444803873698,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int || >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> rval ;",
            "score": 99.0081454190341,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != n ;",
            "score": 98.93336995442708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = lvalInt ;",
            "score": 98.87423095703124,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n >> >> rvalInt ;",
            "score": 98.85163031684027,
            "correctness": "uncompilable",
            "tokenized_patch": "return n >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>1; break ;",
            "score": 99.20787702287946,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "array = lvalInt << rvalInt ;",
            "score": 99.02248313210227,
            "correctness": "uncompilable",
            "tokenized_patch": "array = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / >> rval1;",
            "score": 99.00813432173295,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / >> rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ] ;",
            "score": 98.93289947509766,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( Node.LSH , left ) ;",
            "score": 98.87349243164063,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( Node . LSH , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) n ;",
            "score": 98.85162353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ? rval : rval ;",
            "score": 99.20724722055289,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int > rval ? rval : rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt - rvalInt ; }",
            "score": 99.08168538411458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >= lval ? lval : lval ;",
            "score": 99.00807883522727,
            "correctness": "wrong",
            "tokenized_patch": "result = lval >= lval ? lval : lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "rvalInt = lvalInt ;",
            "score": 98.86941189236111,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rval ;",
            "score": 98.85141427176339,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt.-- rvalInt ;",
            "score": 99.140869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int . -- rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt << lvalInt ;",
            "score": 98.9285400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int << lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << n ;",
            "score": 98.91004096137152,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ==1; break ;",
            "score": 99.20663016183036,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> == 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval1;",
            "score": 99.14080255681819,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt / & rval ;",
            "score": 99.00556030273438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int / & rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = - rvalInt ;",
            "score": 98.92735290527344,
            "correctness": "wrong",
            "tokenized_patch": "result = - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new RuntimeException( rvalInt ;",
            "score": 99.08026677911931,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) rvalInt >> rval ;",
            "score": 99.0179443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) rval CaMeL Int >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rval ;",
            "score": 99.00466086647727,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> Math ;",
            "score": 98.9268798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> Math ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt != lval )",
            "score": 98.86575656467014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int != lval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber >>( result ) ;",
            "score": 98.84122314453126,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number >> ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval ) ;",
            "score": 99.13956298828126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> result ;",
            "score": 99.1273701985677,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v = lvalInt >> rvalInt ;",
            "score": 99.01690118963069,
            "correctness": "uncompilable",
            "tokenized_patch": "v = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> ~ rval ;",
            "score": 99.00328480113636,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> ~ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; }",
            "score": 98.9261245727539,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new Number( rvalInt ) ;",
            "score": 98.90072631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return new Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == rval )",
            "score": 98.86166042751736,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == rval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >=0; break ;",
            "score": 99.20398888221153,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >= 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rvalInt ; ?",
            "score": 99.0794169108073,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval CaMeL Int ; ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> RETURN ;",
            "score": 99.00316772460937,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> RETURN ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n =( int ) rvalInt ;",
            "score": 98.900048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "n = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( lvalInt + left ) ;",
            "score": 98.8601806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( lval CaMeL Int + left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >= >> rvalInt ;",
            "score": 99.13767496744792,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >= >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt - lvalInt ;",
            "score": 99.1253662109375,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "type = lvalInt >> rvalInt ;",
            "score": 99.07875754616477,
            "correctness": "uncompilable",
            "tokenized_patch": "type = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( rvalInt != rval ) {",
            "score": 99.01567993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( rval CaMeL Int != rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> EQ ;",
            "score": 99.00182427300348,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> EQ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> value ;",
            "score": 98.92423095703126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> value ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert rvalInt != rvalInt ;",
            "score": 98.85899658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "assert rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) result ;",
            "score": 98.82938232421876,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << & rvalInt ; break ;",
            "score": 99.20333426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval <0? lval : lval ;",
            "score": 99.0016756924716,
            "correctness": "wrong",
            "tokenized_patch": "result = lval < 0 ? lval : lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> count ;",
            "score": 98.92322998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> count ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt ;",
            "score": 98.89870779854911,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >> >>1; break ;",
            "score": 99.1328633626302,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> == rval ;",
            "score": 99.0015536221591,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> == rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( rvalInt ) ;",
            "score": 98.910888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( rvalInt ) ;",
            "score": 98.8501205444336,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rvalInt ; ; break ;",
            "score": 99.20236642020089,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval CaMeL Int ; ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> >> rvalInt ;",
            "score": 99.07620239257812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> == rval ? ;",
            "score": 99.00154252485795,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> == rval ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval - lvalInt ;",
            "score": 98.91071234809027,
            "correctness": "wrong",
            "tokenized_patch": "result = lval - lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw lvalInt << rvalInt ;",
            "score": 98.89679565429688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( true ) ;",
            "score": 98.81619262695312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; return result ;",
            "score": 99.20220947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> STRING ;",
            "score": 98.99905395507812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> STRING ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> >> rvalInt ;",
            "score": 98.89637451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result << rvalInt ;",
            "score": 98.84675428602431,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rval1; break ;",
            "score": 99.20144217354911,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt <= rvalInt ;",
            "score": 99.12760786576705,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval1;",
            "score": 99.12225341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v = lvalInt << rvalInt ;",
            "score": 99.01238458806819,
            "correctness": "uncompilable",
            "tokenized_patch": "v = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << Node.lval ;",
            "score": 99.01190740411931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << Node . lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt & rvalInt ;",
            "score": 98.99232177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval & rvalInt ;",
            "score": 98.90429009331598,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<2;",
            "score": 98.89486355251736,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <<3;",
            "score": 98.89486355251736,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <<10;",
            "score": 98.89486355251736,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <<6;",
            "score": 98.89486355251736,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt <<32;",
            "score": 98.89486355251736,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt > >> >= rvalInt ;",
            "score": 99.19896521935097,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o = lvalInt << rvalInt ;",
            "score": 99.01167436079545,
            "correctness": "uncompilable",
            "tokenized_patch": "o = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ] ;",
            "score": 98.9915771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt = lvalInt ;",
            "score": 98.90234985351563,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt == rval ? rval : rval ;",
            "score": 99.1956787109375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int == rval ? rval : rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = rvalInt >>0rvalInt ;",
            "score": 99.12650553385417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> 0 rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> >> >> rvalInt ;",
            "score": 99.07020152698864,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vals = lvalInt << rvalInt ;",
            "score": 99.00966574928977,
            "correctness": "uncompilable",
            "tokenized_patch": "vals = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1/ rvalInt ;",
            "score": 98.99017944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt + rvalInt ;",
            "score": 98.90078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n >> rvalInt ;",
            "score": 98.83747863769531,
            "correctness": "uncompilable",
            "tokenized_patch": "return n >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> rvalInt",
            "score": 99.12007649739583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> rval CaMeL Int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> rvalInt ;",
            "score": 99.06991916232639,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> << rvalInt ;",
            "score": 99.0095547762784,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ? ;",
            "score": 98.98763427734374,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < lval ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( left ) ;",
            "score": 98.89716186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> right ;",
            "score": 98.88702392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = value >> >> >> >> rvalInt ;",
            "score": 99.121826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = value >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> & lval ;",
            "score": 99.11849975585938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) lval ;",
            "score": 99.0083895596591,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= >> rval ;",
            "score": 98.98551025390626,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval >> rvalInt ;",
            "score": 98.88678656684027,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 98.80304565429688,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >1; break ;",
            "score": 99.1944110576923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> > 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt0>> rvalInt ;",
            "score": 99.1216532389323,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int 0 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval2;",
            "score": 99.00787908380681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval3;",
            "score": 99.00787908380681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval10;",
            "score": 99.00787908380681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval6;",
            "score": 99.00787908380681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> rval32;",
            "score": 99.00787908380681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval +( int ) lval ;",
            "score": 98.98370361328125,
            "correctness": "wrong",
            "tokenized_patch": "result = lval + ( int ) lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt + right ;",
            "score": 98.89253065321181,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int + right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Number( result ) ;",
            "score": 98.88644070095486,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result result = rvalInt >> rvalInt ;",
            "score": 99.12071736653645,
            "correctness": "uncompilable",
            "tokenized_patch": "result result = rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> >> lval ;",
            "score": 99.11679077148438,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value >> >> >> rvalInt ;",
            "score": 99.0683837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return value >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >> rval ;",
            "score": 99.00772094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( lval ) ;",
            "score": 98.98226318359374,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt != rvalInt ;",
            "score": 98.89197998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> result ;",
            "score": 98.88034396701389,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt && >> rvalInt ;",
            "score": 99.12052408854167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int && >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt & >> rvalInt ;",
            "score": 99.1158447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "array = lvalInt >> rvalInt ;",
            "score": 99.00651411576705,
            "correctness": "uncompilable",
            "tokenized_patch": "array = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *rvalInt ;",
            "score": 98.88703070746527,
            "correctness": "wrong",
            "tokenized_patch": "result = lval * rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result += rvalInt ;",
            "score": 98.87924630301339,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert newNumber( result ) ;",
            "score": 98.82325575086806,
            "correctness": "uncompilable",
            "tokenized_patch": "assert new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> !=0; break ;",
            "score": 99.19312462439903,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> != 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt2>> rvalInt ;",
            "score": 99.120361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt3>> rvalInt ;",
            "score": 99.120361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt10>> rvalInt ;",
            "score": 99.120361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt6>> rvalInt ;",
            "score": 99.120361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt32>> rvalInt ;",
            "score": 99.120361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'length';",
            "score": 99.06751598011364,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '[].join()';",
            "score": 99.06751598011364,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( '';",
            "score": 99.06751598011364,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'join';",
            "score": 99.06751598011364,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'a';",
            "score": 99.06751598011364,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> rval ;",
            "score": 99.0064208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> NUMBER ;",
            "score": 98.97992553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> NUMBER ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "switch( rvalInt ) {",
            "score": 98.87740325927734,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( rval CaMeL Int ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lvalInt ;",
            "score": 98.82274518694196,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( lvalInt >> rval ) ;",
            "score": 98.79105224609376,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( lval CaMeL Int >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> > rvalInt ;",
            "score": 99.1925800030048,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> > rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt *>> rvalInt ;",
            "score": 99.1203104654948,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int * >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt / rvalInt ;",
            "score": 98.979248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> Math ;",
            "score": 98.87885199652777,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> Math ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( right ) ; return n ;",
            "score": 98.82242838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( right ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new int( result ) ;",
            "score": 98.78999837239583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new int ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt = >> rvalInt ;",
            "score": 99.1198221842448,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int = >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> ; }",
            "score": 99.0652188387784,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p = lvalInt << rvalInt ;",
            "score": 99.0058260830966,
            "correctness": "uncompilable",
            "tokenized_patch": "p = lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt *rval ;",
            "score": 98.97919379340277,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int * rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt : right ;",
            "score": 98.87163628472223,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int : right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node newNumber = rvalInt ;",
            "score": 98.8217529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "Node new CaMeL Number = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ? n : lvalInt ;",
            "score": 98.7814208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ? n : lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int rvalInt =( int ) result ;",
            "score": 99.00457208806819,
            "correctness": "uncompilable",
            "tokenized_patch": "int rval CaMeL Int = ( int ) result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( Node ) rvalInt ;",
            "score": 98.87603149414062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( Node ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt =( int ) n ;",
            "score": 98.77937622070313,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = ( int ) n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & rvalInt ; break ;",
            "score": 99.18597881610577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> INSTANCEOF ;",
            "score": 98.9735107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> INSTANCEOF ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? rval : rval ;",
            "score": 99.18595064603366,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int < rval ? rval : rval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =2>> >> rvalInt ;",
            "score": 99.11763916015624,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =3>> >> rvalInt ;",
            "score": 99.11763916015624,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =10>> >> rvalInt ;",
            "score": 99.11763916015624,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =6>> >> rvalInt ;",
            "score": 99.11763916015624,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =32>> >> rvalInt ;",
            "score": 99.11763916015624,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $NUMBER$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval0& rvalInt ;",
            "score": 98.97337646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 0 & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new Integer( rvalInt ) ;",
            "score": 98.87428588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "return new Integer ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( right ) ;",
            "score": 98.86781616210938,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "warn( FRACTIONAL_BITWISE_OPERAND ,",
            "score": 98.76776733398438,
            "correctness": "uncompilable",
            "tokenized_patch": "warn ( FR@@ ACTIONAL _ BITWISE _ OPERAND ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; }",
            "score": 99.18400065104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt == lvalInt ;",
            "score": 99.0605801669034,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int == lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vals = lvalInt >> rvalInt ;",
            "score": 99.00298517400569,
            "correctness": "uncompilable",
            "tokenized_patch": "vals = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> ] ;",
            "score": 98.97202555338542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >>2;",
            "score": 98.87351684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >>3;",
            "score": 98.87351684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >>10;",
            "score": 98.87351684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >>6;",
            "score": 98.87351684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >>32;",
            "score": 98.87351684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result ;",
            "score": 98.86298479352679,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> result rvalInt ;",
            "score": 99.10806274414062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> result rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return *lvalInt >> rvalInt ;",
            "score": 99.05881569602273,
            "correctness": "uncompilable",
            "tokenized_patch": "return * lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> rval ;",
            "score": 98.971533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1<< rvalInt ;",
            "score": 98.81591796875,
            "correctness": "wrong",
            "tokenized_patch": "result = 1 << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt > rval - rvalInt ;",
            "score": 99.18262657752403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) rval ; break ;",
            "score": 98.99304809570313,
            "correctness": "uncompilable",
            "tokenized_patch": "result = ( int ) rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1>> rvalInt ;",
            "score": 98.96708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += rvalInt ; break ;",
            "score": 98.87129041883681,
            "correctness": "uncompilable",
            "tokenized_patch": "result += rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> value ;",
            "score": 98.85645887586806,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> value ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>( ;",
            "score": 98.75852661132812,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt >> >> lvalInt ;",
            "score": 99.10500081380208,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt & lvalInt ;",
            "score": 99.05640258789063,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < ;",
            "score": 98.96521759033203,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> break ;",
            "score": 98.86874050564236,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( result ) ;",
            "score": 98.85604095458984,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> result ;",
            "score": 99.10493607954545,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> lval ) ;",
            "score": 99.09266246448864,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'length') ;",
            "score": 98.96456909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( '[].join()') ;",
            "score": 98.96456909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( '') ;",
            "score": 98.96456909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'join') ;",
            "score": 98.96456909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( 'a') ;",
            "score": 98.96456909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =( int ) lval ;",
            "score": 98.86808013916016,
            "correctness": "wrong",
            "tokenized_patch": "result = ( int ) lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "else result = lvalInt >>1;",
            "score": 98.85479125976562,
            "correctness": "uncompilable",
            "tokenized_patch": "else result = lval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =2>> rvalInt ;",
            "score": 98.80944146050348,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =3>> rvalInt ;",
            "score": 98.80944146050348,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =10>> rvalInt ;",
            "score": 98.80944146050348,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =6>> rvalInt ;",
            "score": 98.80944146050348,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =32>> rvalInt ;",
            "score": 98.80944146050348,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> rval1; break ;",
            "score": 99.18096454326923,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= rvalInt >> >> rvalInt ;",
            "score": 99.09199662642045,
            "correctness": "uncompilable",
            "tokenized_patch": "= rval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval % rvalInt ;",
            "score": 98.96357557508681,
            "correctness": "wrong",
            "tokenized_patch": "result = lval % rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval == rvalInt ;",
            "score": 98.85107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval == rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert( lvalInt != rval ) ;",
            "score": 98.80733032226563,
            "correctness": "uncompilable",
            "tokenized_patch": "assert ( lval CaMeL Int != rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( false ) ;",
            "score": 98.75681762695312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = result >> >> >> >> rvalInt ;",
            "score": 99.10488891601562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = result >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break lvalInt >> >> rvalInt ;",
            "score": 99.05323375355114,
            "correctness": "uncompilable",
            "tokenized_patch": "break lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> SET ;",
            "score": 98.96348876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> SET ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >>1;",
            "score": 98.86442735460069,
            "correctness": "wrong",
            "tokenized_patch": "result = rval CaMeL Int >> 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt || lvalInt ;",
            "score": 99.08092151988636,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int || lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value >> >> >> >> rvalInt ;",
            "score": 99.04902787642045,
            "correctness": "uncompilable",
            "tokenized_patch": "return value >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int lvalInt = rvalInt ;",
            "score": 98.98675537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "int lval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> &0;",
            "score": 98.96264038085937,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> & 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> false ;",
            "score": 98.84788682725694,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt >= rval ) {",
            "score": 98.80454711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int >= rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt & lval rvalInt ;",
            "score": 99.10306803385417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int & lval rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'length';",
            "score": 99.04721901633523,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '[].join()';",
            "score": 99.04721901633523,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( '';",
            "score": 99.04721901633523,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'join';",
            "score": 99.04721901633523,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'a';",
            "score": 99.04721901633523,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> READ ;",
            "score": 98.96083374023438,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> READ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( rval ) ;",
            "score": 98.862353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = value >> rvalInt ;",
            "score": 98.84570990668402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = value >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt > rval ) {",
            "score": 98.80426025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int > rval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( value ) ;",
            "score": 98.75478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> !=1; break ;",
            "score": 99.1790301983173,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> != 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'length'>> >> >> rvalInt ;",
            "score": 99.07891290838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = '[].join()'>> >> >> rvalInt ;",
            "score": 99.07891290838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = ''>> >> >> rvalInt ;",
            "score": 99.07891290838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'join'>> >> >> rvalInt ;",
            "score": 99.07891290838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'a'>> >> >> rvalInt ;",
            "score": 99.07891290838069,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ; default : return n ; }",
            "score": 98.98604736328124,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ; default : return n ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> ++ rvalInt ;",
            "score": 99.17844801682692,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> ++ rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =1>> >> >> rvalInt ;",
            "score": 99.07835804332386,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 1 >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt >= lval ) {",
            "score": 98.80263061523438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int >= lval ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ? lvalInt : n ;",
            "score": 98.74498901367187,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ? lval CaMeL Int : n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> <=1; break ;",
            "score": 99.17752779447116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> <= 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt ;",
            "score": 98.98238118489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >= rval ;",
            "score": 98.95750122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >= rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = newNumber( n ) ;",
            "score": 98.85989990234376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new CaMeL Number ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <<0;",
            "score": 98.84452311197917,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int << 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "throw new AssertionError( this ) ;",
            "score": 98.74240112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > - rvalInt ;",
            "score": 99.17709350585938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > - rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> lvalInt ;",
            "score": 99.09916178385417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & ~ rval ;",
            "score": 98.95618286132813,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & ~ rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >>1;",
            "score": 98.84440612792969,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> result ;",
            "score": 98.73934326171874,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> &1;",
            "score": 99.09902954101562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> & 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt < rvalInt ;",
            "score": 99.07457386363636,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int < rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> LE ;",
            "score": 98.95576985677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> LE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval =( int ) rvalInt ;",
            "score": 98.85863037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = ( int ) rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber( rvalInt ) ;",
            "score": 98.84050903320312,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> refs ; break ;",
            "score": 99.17633526141827,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> refs ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval null ;",
            "score": 99.0732754794034,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt &1;",
            "score": 98.97381591796875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> T ;",
            "score": 98.95248752170139,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> T ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt << >> rvalInt ;",
            "score": 98.85673217773437,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int << >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> & rval ; break ;",
            "score": 99.17557466947116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rvalCaMeL",
            "score": 98.97357788085938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval , left ) ;",
            "score": 98.95070190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval , left ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ++ ;",
            "score": 98.83393096923828,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return rvalInt != rvalInt ;",
            "score": 98.73410034179688,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int != rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >= rval ; break ;",
            "score": 99.17499248798077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >= rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw( lvalInt >> >> rvalInt ;",
            "score": 99.09642537434895,
            "correctness": "uncompilable",
            "tokenized_patch": "throw ( lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >= rvalInt ;",
            "score": 99.06870339133523,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt / >> rval ;",
            "score": 98.94624159071181,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int / >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> rvalInt ; }",
            "score": 98.85527954101562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( $STRING$",
            "score": 98.79779052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( $STRING$",
            "score": 98.79779052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( $STRING$",
            "score": 98.79779052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( $STRING$",
            "score": 98.79779052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( $STRING$",
            "score": 98.79779052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt & rvalInt ;",
            "score": 99.09485973011364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int & rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ==0? ;",
            "score": 98.94610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int == 0 ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> | rvalInt ;",
            "score": 99.17432579627403,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> | rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> >> >> >> >> rvalInt ;",
            "score": 99.0939432779948,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> >> >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( result ) ;",
            "score": 99.02978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) / rval ;",
            "score": 98.94537963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) / rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << rvalInt",
            "score": 98.85406494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << rval CaMeL Int",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> size ;",
            "score": 98.83263549804687,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> size ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; case Token.RSH : break ;",
            "score": 98.79653930664062,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . RSH : break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & - rvalInt ;",
            "score": 99.09368896484375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & - rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return rval >> >> >> rvalInt ;",
            "score": 99.0560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval -( int ) lval ;",
            "score": 98.94435424804688,
            "correctness": "wrong",
            "tokenized_patch": "result = lval - ( int ) lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt -- ; break ;",
            "score": 98.8536376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int -- ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval1<< rvalInt ;",
            "score": 98.8321044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval 1 << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt =( int ) rval ;",
            "score": 98.79561157226563,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = ( int ) rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( rvalInt ;",
            "score": 99.05576393821023,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( int ) lvalInt ;",
            "score": 99.02812364366319,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( int ) lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> TRUE ;",
            "score": 98.94413248697917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> TRUE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & right ;",
            "score": 98.83205837673611,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "d = lvalInt >> >> rvalInt ;",
            "score": 99.09133911132812,
            "correctness": "uncompilable",
            "tokenized_patch": "d = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>1; }",
            "score": 99.05340021306819,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0>> >> >> rvalInt ;",
            "score": 99.0251220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n.getNode( ) ;",
            "score": 98.9607177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return n . get CaMeL Node ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2>> rvalInt ;",
            "score": 98.94290771484376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3>> rvalInt ;",
            "score": 98.94290771484376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10>> rvalInt ;",
            "score": 98.94290771484376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6>> rvalInt ;",
            "score": 98.94290771484376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32>> rvalInt ;",
            "score": 98.94290771484376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt << rvalInt ;",
            "score": 98.84422471788194,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> >>1;",
            "score": 98.83192749023438,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "newNumber =( int ) lval ;",
            "score": 98.72762451171874,
            "correctness": "uncompilable",
            "tokenized_patch": "new CaMeL Number = ( int ) lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval ; break ; }",
            "score": 99.16834435096153,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval ; break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>0;",
            "score": 99.09025065104167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval.) ;",
            "score": 99.05201305042614,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >=0? ;",
            "score": 98.94180297851562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= 0 ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << right ;",
            "score": 98.84381781684027,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( n ) ;",
            "score": 98.83120727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> &1; break ;",
            "score": 99.16787484975961,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> & 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( result >> >> >> rvalInt ;",
            "score": 99.09023215553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( result >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < rval ? ;",
            "score": 98.94120483398437,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < rval ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( n ) ;",
            "score": 98.84254964192708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( n ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Number >> rvalInt ;",
            "score": 98.78019883897569,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Number >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Short >> >> rvalInt ;",
            "score": 98.72680053710937,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Short >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> lval ; ;",
            "score": 99.08980305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> lval ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && rvalInt ;",
            "score": 99.0489834872159,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> rvalInt ; }",
            "score": 99.01953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ?0:0;",
            "score": 98.9404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ? 0 : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >>1;",
            "score": 98.83028157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n << rvalInt ;",
            "score": 98.78014373779297,
            "correctness": "uncompilable",
            "tokenized_patch": "return n << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> <= rvalInt ;",
            "score": 99.16568697415866,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> <= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0>> >> rvalInt ; }",
            "score": 99.04736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = 0 >> >> rval CaMeL Int ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt < lval ;",
            "score": 98.94021945529514,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int < lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >= rvalInt ;",
            "score": 99.1652080829327,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >= rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >> >>1;",
            "score": 99.0888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> >> 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - >> rval ) ;",
            "score": 99.04674183238636,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new RuntimeException( >> ) ;",
            "score": 99.01546020507813,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Runtime CaMeL Exception ( >> ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt ; } return n ;",
            "score": 98.9419677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int ; } return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> left ;",
            "score": 98.82505289713542,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> left ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( left ) ; return n ;",
            "score": 98.77741834852431,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( left ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( lvalInt ) ;",
            "score": 98.72002410888672,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( lval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>2;",
            "score": 99.08858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>3;",
            "score": 99.08858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>10;",
            "score": 99.08858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>6;",
            "score": 99.08858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >>32;",
            "score": 99.08858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this = lvalInt >> rvalInt ;",
            "score": 99.01507013494319,
            "correctness": "uncompilable",
            "tokenized_patch": "this = lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval *lval ;",
            "score": 98.93480573381696,
            "correctness": "wrong",
            "tokenized_patch": "result = lval * lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt << result ;",
            "score": 98.82377115885417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( right ) ;",
            "score": 98.76199340820312,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( right ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result += lvalInt ; break ;",
            "score": 98.7113037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result += lval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= rvalInt ; break ;",
            "score": 99.16353665865384,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= rval CaMeL Int ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval */ rvalInt ;",
            "score": 98.93463745117188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Token( result ) ;",
            "score": 98.82295735677083,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Token ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt , break ;",
            "score": 98.80359564887152,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int , break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval << lvalInt ;",
            "score": 98.7568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval << lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != rval ;",
            "score": 98.70265028211806,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >0; break ;",
            "score": 99.16336763822116,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> > 0 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >> >> ; }",
            "score": 99.08746337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> >> ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rval ;",
            "score": 98.93441772460938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> count ;",
            "score": 98.80315483940973,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> count ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = n ;",
            "score": 98.75400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rvalInt ; ;",
            "score": 99.16286214192708,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval CaMeL Int ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = >> >> >> rvalInt ;",
            "score": 99.08646240234376,
            "correctness": "uncompilable",
            "tokenized_patch": "result = >> >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return result >> >> >> lvalInt ;",
            "score": 99.00933227539062,
            "correctness": "uncompilable",
            "tokenized_patch": "return result >> >> >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval( lval ) ; break ;",
            "score": 98.9340087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ( lval ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval += lvalInt ;",
            "score": 98.80229356553819,
            "correctness": "wrong",
            "tokenized_patch": "result = lval += lval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "break ; case Token.LSH :",
            "score": 98.75345611572266,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; case Token . LSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> >>1; }",
            "score": 99.08615112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> >> 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt( lvalInt ;",
            "score": 99.0378750887784,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ( lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =2<< rvalInt ;",
            "score": 98.93528238932292,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =3<< rvalInt ;",
            "score": 98.93528238932292,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =10<< rvalInt ;",
            "score": 98.93528238932292,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =6<< rvalInt ;",
            "score": 98.93528238932292,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result =32<< rvalInt ;",
            "score": 98.93528238932292,
            "correctness": "wrong",
            "tokenized_patch": "result = $NUMBER$ << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval *lval ; break ;",
            "score": 98.93313259548611,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval * lval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rvalInt = rvalInt ;",
            "score": 98.82139756944444,
            "correctness": "uncompilable",
            "tokenized_patch": "rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return newNumber( result ) ;",
            "score": 98.80074055989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return new CaMeL Number ( result ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt >= rval )",
            "score": 98.74957275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int >= rval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> refs ; break ;",
            "score": 99.16241455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> refs ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ break ; case Token.URSH :",
            "score": 98.93394775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ break ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( int ) rval ) ;",
            "score": 98.69297281901042,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( int ) rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >= rval ;",
            "score": 98.93040635850694,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >= rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = new Node( lval ) ;",
            "score": 98.81435818142361,
            "correctness": "uncompilable",
            "tokenized_patch": "result = new Node ( lval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt ;",
            "score": 98.7971903483073,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result -= lvalInt ;",
            "score": 98.74595424107143,
            "correctness": "uncompilable",
            "tokenized_patch": "result -= lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt2;",
            "score": 98.69004821777344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt3;",
            "score": 98.69004821777344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt10;",
            "score": 98.69004821777344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt6;",
            "score": 98.69004821777344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt32;",
            "score": 98.69004821777344,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval + rvalInt ;",
            "score": 99.1610576923077,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval + rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ++ & rvalInt ;",
            "score": 99.08418782552083,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int ++ & rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lval - lval ;",
            "score": 98.93035888671875,
            "correctness": "wrong",
            "tokenized_patch": "result = lval - lval ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return n.getParent( ) ;",
            "score": 98.92529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return n . get CaMeL Parent ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new int >> rvalInt ;",
            "score": 98.81376817491319,
            "correctness": "uncompilable",
            "tokenized_patch": "return new int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval catch( 'length') ;",
            "score": 98.79590521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval catch ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval catch( '[].join()') ;",
            "score": 98.79590521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval catch ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval catch( '') ;",
            "score": 98.79590521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval catch ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval catch( 'join') ;",
            "score": 98.79590521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval catch ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval catch( 'a') ;",
            "score": 98.79590521918402,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval catch ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rval << rvalInt ;",
            "score": 98.74376763237848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result( rvalInt ) ;",
            "score": 98.68932342529297,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( rval CaMeL Int ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval >> rvalInt ;",
            "score": 99.1599590594952,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return lvalInt >> >> >> >> lval ;",
            "score": 99.08359596946023,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break lvalInt >> rvalInt ;",
            "score": 99.0047607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "break lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & rval1;",
            "score": 98.92896728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & rval 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer rvalInt = rvalInt ;",
            "score": 98.92476806640624,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer rval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'length'>> rvalInt ;",
            "score": 98.74068196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = '[].join()'>> rvalInt ;",
            "score": 98.74068196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = ''>> rvalInt ;",
            "score": 98.74068196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'join'>> rvalInt ;",
            "score": 98.74068196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'a'>> rvalInt ;",
            "score": 98.74068196614583,
            "correctness": "wrong",
            "tokenized_patch": "result = $STRING$ >> rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "result = lvalInt >> >> }",
            "score": 98.68783908420139,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > rval ; break ;",
            "score": 99.1576815518466,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > rval ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> >> lval ;",
            "score": 99.08310953776042,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval ; break ; default :",
            "score": 98.92836507161458,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval ; break ; default :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & -1;",
            "score": 98.92034912109375,
            "correctness": "wrong",
            "tokenized_patch": "result = lval CaMeL Int & - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return lvalInt >> : result ;",
            "score": 98.79048665364583,
            "correctness": "uncompilable",
            "tokenized_patch": "return lval CaMeL Int >> : result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = n >> rvalInt ;",
            "score": 98.73940022786458,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = n >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lval = lvalInt & >> rvalInt ;",
            "score": 99.08310953776042,
            "correctness": "uncompilable",
            "tokenized_patch": "lval = lval CaMeL Int & >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> byte ;",
            "score": 98.92822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> byte ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rval ; case Token.RSH :",
            "score": 98.92032199435764,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval ; case Token . RSH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result =0<< rvalInt ;",
            "score": 98.80902777777777,
            "correctness": "wrong",
            "tokenized_patch": "result = 0 << rval CaMeL Int ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "error( 'length') ; return n ;",
            "score": 98.73541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '[].join()') ; return n ;",
            "score": 98.73541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( '') ; return n ;",
            "score": 98.73541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'join') ; return n ;",
            "score": 98.73541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "error( 'a') ; return n ;",
            "score": 98.73541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "error ( $STRING$ ) ; return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> >> >>0;",
            "score": 99.02168412642045,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> >> >> 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt ; return result ;",
            "score": 98.99923706054688,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt >> >> rval ;",
            "score": 98.91936577690973,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval & lvalInt ;",
            "score": 98.78702799479167,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> rval ) ;",
            "score": 99.02166193181819,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> rval length ;",
            "score": 98.99921209161931,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> rval length ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rval = lval >> rvalInt ;",
            "score": 98.73504638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "rval = lval >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >>( ;",
            "score": 98.65856255425348,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= rvalInt >> rvalInt ;",
            "score": 99.01948852539063,
            "correctness": "uncompilable",
            "tokenized_patch": "= rval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> TRUE ;",
            "score": 98.92428588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> TRUE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt >> rvalInt ;",
            "score": 98.79550509982639,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >>",
            "score": 98.65364074707031,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >>",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt > >> << rvalInt ;",
            "score": 99.15521709735577,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int > >> << rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt && lvalInt ;",
            "score": 99.01912064985795,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int && lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> NULL ;",
            "score": 98.918408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> NULL ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << Number ;",
            "score": 98.79545084635417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << Number ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt <= rval )",
            "score": 98.73067220052083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int <= rval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >>1; break ;",
            "score": 99.15420532226562,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> 1 ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'length'>> >> rvalInt ;",
            "score": 99.0117431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = '[].join()'>> >> rvalInt ;",
            "score": 99.0117431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = ''>> >> rvalInt ;",
            "score": 99.0117431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'join'>> >> rvalInt ;",
            "score": 99.0117431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = 'a'>> >> rvalInt ;",
            "score": 99.0117431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = $STRING$ >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> TYPE ;",
            "score": 98.91676025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> TYPE ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Math.rvalInt ;",
            "score": 98.64261203342014,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Math . rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> rval lvalInt ;",
            "score": 99.0810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> rval lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( result == null ; return result ;",
            "score": 98.99118041992188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( result == null ; return result ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt >> >> VAR ;",
            "score": 98.91644897460938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int >> >> VAR ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return rvalInt & lvalInt ;",
            "score": 98.90948486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return rval CaMeL Int & lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt != right ;",
            "score": 98.78021240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int != right ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt < rval )",
            "score": 98.73038058810764,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int < rval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result(( int ) rval ) ;",
            "score": 98.63745795355902,
            "correctness": "uncompilable",
            "tokenized_patch": "result ( ( int ) rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "element = lvalInt >> >> rvalInt ;",
            "score": 99.08031209309895,
            "correctness": "uncompilable",
            "tokenized_patch": "element = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt - rval ) ;",
            "score": 98.96812744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int - rval ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt % >> rval ;",
            "score": 98.9152099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int % >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> >> >> >> rval ;",
            "score": 98.90814208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> >> >> >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lvalInt = rvalInt ;",
            "score": 98.790771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "lval CaMeL Int = rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rvalInt == lval )",
            "score": 98.73004828559027,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rval CaMeL Int == lval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt << >> ;",
            "score": 98.63661024305556,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int << >> ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "location = lvalInt >> >> rvalInt ;",
            "score": 99.08016967773438,
            "correctness": "uncompilable",
            "tokenized_patch": "location = lval CaMeL Int >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0>> >> rvalInt ;",
            "score": 98.98318820529514,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval2;",
            "score": 98.96421508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval3;",
            "score": 98.96421508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval10;",
            "score": 98.96421508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval6;",
            "score": 98.96421508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = rvalInt >> rval32;",
            "score": 98.96421508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "result = rval CaMeL Int >> rval $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & left ;",
            "score": 98.90646701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & left ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( lvalInt != lval )",
            "score": 98.72943793402777,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( lval CaMeL Int != lval )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'length'/",
            "score": 98.63595920138889,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( '[].join()'/",
            "score": 98.63595920138889,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( ''/",
            "score": 98.63595920138889,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'join'/",
            "score": 98.63595920138889,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new AssertionError( 'a'/",
            "score": 98.63595920138889,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Assertion CaMeL Error ( $STRING$ /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt & >> >> lval ;",
            "score": 99.07926802201705,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int & >> >> lval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = false >> >> rvalInt ;",
            "score": 98.96107177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = false >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lvalInt <= >> rval ;",
            "score": 98.91162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval CaMeL Int <= >> rval ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return left ; case Token.URSH :",
            "score": 98.905712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return left ; case Token . UR@@ SH :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval : result ; break ;",
            "score": 98.6297607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval : result ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = true >> >> rvalInt ;",
            "score": 98.9609130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = true >> >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval2/ rvalInt ;",
            "score": 98.91104736328126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval3/ rvalInt ;",
            "score": 98.91104736328126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval10/ rvalInt ;",
            "score": 98.91104736328126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval6/ rvalInt ;",
            "score": 98.91104736328126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval32/ rvalInt ;",
            "score": 98.91104736328126,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval $NUMBER$ / rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return n ;",
            "score": 98.76901245117188,
            "correctness": "uncompilable",
            "tokenized_patch": "return n ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = lval >> lvalInt ;",
            "score": 98.725341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = lval >> lval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = Short >> rvalInt ;",
            "score": 98.62617323133681,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Short >> rval CaMeL Int ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        }
    ]
}