{
    "src": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
    "patches": [
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.951904296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.85038488051471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.86529862253289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.8568603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.84556820518092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { {",
            "score": 99.835205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.820556640625,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0)",
            "score": 99.74496459960938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.83447265625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0) {",
            "score": 99.82103329613095,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0) {",
            "score": 99.80259486607143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=0) {",
            "score": 99.7868015455163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.77865998641305,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0) {",
            "score": 99.77616802014802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0) {",
            "score": 99.76300370065789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0) {",
            "score": 99.7308708639706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, epsilon ) {",
            "score": 99.78285283627717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >=0) {",
            "score": 99.76510487432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >=0) {",
            "score": 99.76040504092262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.74659559461806,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <0) {",
            "score": 99.72903262867646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) {",
            "score": 99.77445903577302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.73732688210227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=1) {",
            "score": 99.76497395833333,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=0) {",
            "score": 99.76445079985119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==0) {",
            "score": 99.74681454613095,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.73206097146739,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0) {",
            "score": 99.72451602711396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0) {",
            "score": 99.70613606770833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.74552194695724,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=0) {",
            "score": 99.74417550223214,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >=0) {",
            "score": 99.72839936755952,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=0) {",
            "score": 99.69933363970588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.759033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=0) {",
            "score": 99.74501255580357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= minRatio )",
            "score": 99.72573020241477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) >=0) {",
            "score": 99.71536690848214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=0) {",
            "score": 99.68732048483456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0)",
            "score": 99.71945190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0) {",
            "score": 99.71412417763158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) >=0) {",
            "score": 99.70203218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >=0) {",
            "score": 99.67642032398896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) >=0) {",
            "score": 99.73056428328805,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { final",
            "score": 99.71083762428977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=0) {",
            "score": 99.69984654017857,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >=0) {",
            "score": 99.67451028262867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=0) {",
            "score": 99.72596499794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=0) {",
            "score": 99.72122628348214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0)",
            "score": 99.70497436523438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=0) {",
            "score": 99.69795949835526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0) {",
            "score": 99.67046042049633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >=0) {",
            "score": 99.72537667410714,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >=0) {",
            "score": 99.72537667410714,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) <0) {",
            "score": 99.71190243675595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <0) {",
            "score": 99.70701840049342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >=0) {",
            "score": 99.69580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) ==0) {",
            "score": 99.66163545496323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.71593627929687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <0) {",
            "score": 99.70548930921052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0, epsilon ) >=0) {",
            "score": 99.68790336277173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >=0) {",
            "score": 99.68345883018092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) -0) {",
            "score": 99.6681896391369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=0) {",
            "score": 99.62657973345588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0)",
            "score": 99.68135986328124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >=0) {",
            "score": 99.62309713924633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=0) {",
            "score": 99.68865645559211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >=0) {",
            "score": 99.68168712797619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, epsilon )",
            "score": 99.68095259232955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { }",
            "score": 99.6748934659091,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=0) {",
            "score": 99.67376349954044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <0) {",
            "score": 99.6226806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) >=0) {",
            "score": 99.68114172894022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=0) {",
            "score": 99.66745174632354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <0) {",
            "score": 99.6215461282169,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=6) {",
            "score": 99.70785667782738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=2) {",
            "score": 99.70785667782738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <=0) {",
            "score": 99.691162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) >=0) {",
            "score": 99.67288643973214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0)",
            "score": 99.6207275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >=0) {",
            "score": 99.7033054517663,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) >=0) {",
            "score": 99.67246791294643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& ! Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.65558416193181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0)",
            "score": 99.61640930175781,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) >=0) {",
            "score": 99.68759300595238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { return -1; }",
            "score": 99.6763028231534,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { return - 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { ) {",
            "score": 99.67221467391305,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0)",
            "score": 99.671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < minRatio ) {",
            "score": 99.6838909646739,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.6707699424342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) >=0) {",
            "score": 99.66718982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) >=0) {",
            "score": 99.65959087171052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > minRatio ) {",
            "score": 99.6552097486413,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) ) >=0) {",
            "score": 99.6126644736842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=1) {",
            "score": 99.69744551809211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.67060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -0) {",
            "score": 99.66602672230114,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= minRatio ) {",
            "score": 99.65293817934783,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0>=0) {",
            "score": 99.61170718544408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, epsilon ) {",
            "score": 99.69446382068452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) >=0) {",
            "score": 99.65644763764881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) >=0) {",
            "score": 99.65644763764881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) ) >=0) {",
            "score": 99.6110775596217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=1) {",
            "score": 99.68677920386905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) >=0) {",
            "score": 99.66999897203948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=0) {",
            "score": 99.66688755580357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.65179443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , epsilon ) >=0) {",
            "score": 99.6496814546131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <0)",
            "score": 99.60995483398438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0, epsilon ) {",
            "score": 99.68545134171195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.66979399181548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= epsilon ) {",
            "score": 99.64703078497024,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=0) {",
            "score": 99.60174153645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -1) {",
            "score": 99.67950994318181,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { ;",
            "score": 99.65684925426136,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.64719556725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=1) {",
            "score": 99.59994686351104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >=0) {",
            "score": 99.67355828536184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) >=0) {",
            "score": 99.65886579241071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.64619140625,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >0) {",
            "score": 99.59975714432566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ==0) {",
            "score": 99.66726845189145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, epsilon ) >=0) {",
            "score": 99.65047200520833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=0)",
            "score": 99.64998168945313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry >=0) {",
            "score": 99.644541015625,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) >=0) {",
            "score": 99.59849446614584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >=0) {",
            "score": 99.66552016314338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.66063290550595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.657958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) >=0) {",
            "score": 99.64925130208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0) { final",
            "score": 99.64202325994319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.64154663085938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, epsilon ) >=0) {",
            "score": 99.59415475945724,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <=0) {",
            "score": 99.6628353721217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.64076450892857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0,0) >=0) {",
            "score": 99.63404482886905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==0) {",
            "score": 99.66900956003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) ==0) {",
            "score": 99.6614990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new double [0] ) >=0) {",
            "score": 99.59114797491776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new double [ 0 ] ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >=0) {",
            "score": 99.66456240699405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0.0) {",
            "score": 99.65568741508152,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col ) >=0) {",
            "score": 99.65273902529762,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, epsilon ) >=0) {",
            "score": 99.6444091796875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon >=0) {",
            "score": 99.638642578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare(0, entry ) >=0) {",
            "score": 99.59111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) !=0) {",
            "score": 99.65524773848684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) <0) {",
            "score": 99.65255301339286,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >=0)",
            "score": 99.64716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) >=0) {",
            "score": 99.64680989583333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { {",
            "score": 99.6443603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0) >=0) {",
            "score": 99.62626567639802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0) {",
            "score": 99.59054800180289,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=0) {",
            "score": 99.66080729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=0)",
            "score": 99.6457763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , epsilon ) >=0) {",
            "score": 99.64356631324405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , epsilon ) >=0) {",
            "score": 99.64921642485119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon , epsilon ) >=0) {",
            "score": 99.64181082589286,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon <0) {",
            "score": 99.637265625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0&& ! compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.62610973011364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, epsilon ) >=0) {",
            "score": 99.62209601151316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >0) {",
            "score": 99.5893195657169,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.64117986505681,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ,0, epsilon ) >=0) {",
            "score": 99.64028785342262,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >=0) {",
            "score": 99.61924984580592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { {",
            "score": 99.58781602647569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) >=0) {",
            "score": 99.64091564360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| ! Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.6173983487216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || ! Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >=0) {",
            "score": 99.58551384420956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >=0) {",
            "score": 99.65829613095238,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) >=0) {",
            "score": 99.63678850446429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return 0;",
            "score": 99.63680366847827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, entry ) {",
            "score": 99.6365382982337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, false ) >=0) {",
            "score": 99.61519949776786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0) { {",
            "score": 99.63421075994319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon ) { if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.62697347005208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, entry ,0, epsilon ) >=0) {",
            "score": 99.61566452752976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) >=0) {",
            "score": 99.58213177849265,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >1) {",
            "score": 99.65571521577381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=0) {",
            "score": 99.638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) >=0) {",
            "score": 99.63420758928571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) >=0) {",
            "score": 99.63420758928571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0, epsilon ) >=0) {",
            "score": 99.6123379794034,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=0.0) {",
            "score": 99.58165218955592,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >=0) >=0) {",
            "score": 99.63404381793478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0)",
            "score": 99.62921142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==0)",
            "score": 99.62598876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, true ) >=0) {",
            "score": 99.61011904761905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) >=0) {",
            "score": 99.58164576480263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0) >=0) {",
            "score": 99.62880161830357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! entry >=0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.6257832845052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry >= 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=1) {",
            "score": 99.6093814247533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, null ) >=0) {",
            "score": 99.60829380580357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=0)",
            "score": 99.5806884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >=0) {",
            "score": 99.64827688116776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >=0) {",
            "score": 99.64827688116776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0, epsilon ) ) {",
            "score": 99.63498822380515,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6, epsilon ) >=0) {",
            "score": 99.62882133152173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2, epsilon ) >=0) {",
            "score": 99.62882133152173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=0) { {",
            "score": 99.62724165482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=1)",
            "score": 99.62521362304688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.getWidth( ) , epsilon ) >=0) {",
            "score": 99.62283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . get CaMeL Width ( ) , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) <0) {",
            "score": 99.57969755284927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0, epsilon ) {",
            "score": 99.645751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -1) >=0) {",
            "score": 99.63387398097827,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) >=0) {",
            "score": 99.62994706003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) <0) {",
            "score": 99.62880161830357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=0) { {",
            "score": 99.627197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.62067205255681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= ) {",
            "score": 99.60822143554688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >0) {",
            "score": 99.57825520833333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, f ) >=0) {",
            "score": 99.62949916294643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0) { final",
            "score": 99.62028364701705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, max ) >=0) {",
            "score": 99.6064220610119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0.0) {",
            "score": 99.57676295230263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, entry ) >=0) {",
            "score": 99.64342680431548,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, entry ) >=0) {",
            "score": 99.64342680431548,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=0) {",
            "score": 99.63289388020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry ,0, epsilon ) >=0) {",
            "score": 99.62474476207386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >=0)",
            "score": 99.61958451704545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *minRatio ) {",
            "score": 99.61841881793478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true , epsilon ) >=0) {",
            "score": 99.60745675223214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0, epsilon ) >=0) {",
            "score": 99.60526958264802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, value ) >=0) {",
            "score": 99.57568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= minRatio ) {",
            "score": 99.64169709578805,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= minRatioPos ) {",
            "score": 99.6328655740489,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { { {",
            "score": 99.6221340013587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) >=0) {",
            "score": 99.60327866498162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) >=0) {",
            "score": 99.57567074424342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatioPos ) >=0) {",
            "score": 99.63761039402173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) >=0) {",
            "score": 99.62901547080592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0) { {",
            "score": 99.62201482599431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , tableau.getWidth( ) -1) ;",
            "score": 99.61634318033855,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , tableau . get CaMeL Width ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) >=0)",
            "score": 99.61533425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= epsilon ) {",
            "score": 99.60052168996711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0,0) {",
            "score": 99.623291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0) ) {",
            "score": 99.61683565027573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <0)",
            "score": 99.61182996961806,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MAX_VALUE ) >=0) {",
            "score": 99.57391036184211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0, epsilon ) {",
            "score": 99.63516090029762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0, epsilon ) {",
            "score": 99.61788504464286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >0) {",
            "score": 99.61562965029762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, epsilon ) >=0) {",
            "score": 99.57343606387867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, epsilon ) >=0) {",
            "score": 99.57343606387867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=6) {",
            "score": 99.63388543379934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=2) {",
            "score": 99.63388543379934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry >0) {",
            "score": 99.614375,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null ,0, epsilon ) >=0) {",
            "score": 99.61422596807066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >=0)",
            "score": 99.60870971679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >=0)",
            "score": 99.60870971679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ) { if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.60328258167614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ) { if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0f ) >=0) {",
            "score": 99.57337782118056,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >0) {",
            "score": 99.6330798921131,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { {",
            "score": 99.62420043945312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.613642578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=0)",
            "score": 99.61061789772727,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <0.0) {",
            "score": 99.57227847450658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, epsilon ) ) {",
            "score": 99.6209228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >0) {",
            "score": 99.61518297697368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >0) ) {",
            "score": 99.61265497622283,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) ) >=0) {",
            "score": 99.56968929893092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, entry ) >=0) {",
            "score": 99.6303478422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) <0) {",
            "score": 99.61865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= 'AS IS') {",
            "score": 99.61497860863095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= 'License') {",
            "score": 99.61497860863095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.6121136209239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , epsilon ) >=0) {",
            "score": 99.60702659970238,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, entry ) >=0) {",
            "score": 99.60092995383523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,1, epsilon ) >=0) {",
            "score": 99.59465680803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <=0) {",
            "score": 99.56932779947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry , epsilon ) >=0) {",
            "score": 99.61442057291667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| epsilon ) {",
            "score": 99.6117527173913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= minRatio )",
            "score": 99.606787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=1) { {",
            "score": 99.60593483664773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.59231567382812,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >0) {",
            "score": 99.56838809742646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=6) {",
            "score": 99.6261974516369,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=2) {",
            "score": 99.6261974516369,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,0.0, epsilon ) >=0.0) {",
            "score": 99.61610630580357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = rhs / entry ; if( Math.compare( entry , entry ) >=0) {",
            "score": 99.6160198709239,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = rhs / entry ; if ( Math . compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0, epsilon ) {",
            "score": 99.61197562839673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( MathUtils.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.61055501302083,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=0) { {",
            "score": 99.60570179332386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=0)",
            "score": 99.60459594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,6, epsilon ) >=0) {",
            "score": 99.59163411458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,2, epsilon ) >=0) {",
            "score": 99.59163411458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) >=0) {",
            "score": 99.567919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) <=0) {",
            "score": 99.6160952919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , epsilon ) >=0) {",
            "score": 99.61418805803571,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon ) {",
            "score": 99.61058508831522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) break ;",
            "score": 99.60383744673295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) !=0) {",
            "score": 99.5975341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) >=0) {",
            "score": 99.56602376302084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0, epsilon ) >=0) {",
            "score": 99.61446707589286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this , entry ,0, epsilon ) >=0) {",
            "score": 99.60343070652173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) <0) {",
            "score": 99.59358723958333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ epsilon ) >=0) {",
            "score": 99.59109933035714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=0)",
            "score": 99.5656509399414,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=1, epsilon ) {",
            "score": 99.62242060122283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) >=0) {",
            "score": 99.61246530633224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=1) {",
            "score": 99.60829380580357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, -0) >=0) {",
            "score": 99.59320623224431,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , - 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ,0, epsilon ) >=0) {",
            "score": 99.59029715401786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) >0) {",
            "score": 99.60795261548913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ,0) >=0) {",
            "score": 99.58486793154762,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.max( entry ,0.0) <0.0) {",
            "score": 99.56366930509868,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0, epsilon ) {",
            "score": 99.62146577380952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) <0) ) {",
            "score": 99.61047894021739,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( Math.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.61040704900569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [ i ] ,0, epsilon ) >=0) {",
            "score": 99.6073710123698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ i ] , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) !=0) {",
            "score": 99.60658023231908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < tableau.getHeight( ) ; i ++ ) {",
            "score": 99.6011629971591,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < tableau . get CaMeL Height ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this ,0, epsilon ) >=0) {",
            "score": 99.60055106026786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0.0) {",
            "score": 99.5626220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) >=0) {",
            "score": 99.6103156594669,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0, epsilon ) {",
            "score": 99.60654994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry >=0) {",
            "score": 99.606396484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) <0) {",
            "score": 99.5880126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry ,0, epsilon ) >=0) {",
            "score": 99.60616932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry ,0, epsilon ) >=0) {",
            "score": 99.60616932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -1)",
            "score": 99.5998302641369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=0) { {",
            "score": 99.59907670454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0.0) {",
            "score": 99.58267066592262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) >=0) {",
            "score": 99.5616814108456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) >=0) {",
            "score": 99.5616814108456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.60796797902961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry <=0) {",
            "score": 99.60595703125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0&& MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.60578719429348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) ) {",
            "score": 99.60192192925348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) continue ;",
            "score": 99.59977583451705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +1, epsilon ) >=0) {",
            "score": 99.59859793526786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0, epsilon ) >=0) {",
            "score": 99.58112444196429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >0) {",
            "score": 99.56153779871323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0&& MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.605830078125,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ,0) >=0) {",
            "score": 99.59488578464673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >=0.0) {",
            "score": 99.56053402549342,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , minRatio ) >=0) {",
            "score": 99.6173785665761,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0, epsilon ) >=0) {",
            "score": 99.60114397321429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=0)",
            "score": 99.59655151367187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs , epsilon ) >=0) {",
            "score": 99.59485394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.58580961681548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) <=0) {",
            "score": 99.60326038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0, epsilon ) >=0) {",
            "score": 99.59531763980263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) !=0) {",
            "score": 99.55942670036765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) <=0) {",
            "score": 99.59981863839286,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0-0) {",
            "score": 99.59402598505434,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 - 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , entry , epsilon ) >=0) {",
            "score": 99.57925575657895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) >=0) ) {",
            "score": 99.55826608758224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon / entry ) >=0) {",
            "score": 99.60676375679348,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0) >=0) {",
            "score": 99.601953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry <0) {",
            "score": 99.6013671875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.59952121310764,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { { }",
            "score": 99.59300696331522,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { { }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= -1) {",
            "score": 99.57863159179688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >=0)",
            "score": 99.55823516845703,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >0) {",
            "score": 99.61505998883929,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) <0) {",
            "score": 99.60139973958333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& {",
            "score": 99.59294782366071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) >=0) {",
            "score": 99.5578972311581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=1) {",
            "score": 99.60129266036184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= minRatio ) {",
            "score": 99.5924762228261,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , epsilon ) >=0) {",
            "score": 99.57741185238487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'AS IS') >=0) {",
            "score": 99.57700892857143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'License') >=0) {",
            "score": 99.57700892857143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0)",
            "score": 99.55628967285156,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=0, epsilon ) {",
            "score": 99.61318571671195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) <=0) {",
            "score": 99.59803989955357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ,0) >=0) {",
            "score": 99.5771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=0) {",
            "score": 99.55321451822917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= -1) {",
            "score": 99.61109508167614,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) <0) {",
            "score": 99.60372764185855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& true ) {",
            "score": 99.60115913722827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && true ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) <=0) ) {",
            "score": 99.59757133152173,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0) { {",
            "score": 99.59507057883523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0,6) >=0) {",
            "score": 99.57670665922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0,2) >=0) {",
            "score": 99.57670665922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >0) {",
            "score": 99.61075492527173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.597314453125,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "try { if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.59152088994566,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= epsilon ) {",
            "score": 99.57441791735198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , epsilon ) >=0) {",
            "score": 99.57357788085938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1) >=0) {",
            "score": 99.55122884114583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, -1) >=0) {",
            "score": 99.5992764559659,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , - 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >0) ) {",
            "score": 99.59614490327381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon )",
            "score": 99.58984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5742919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) <0) {",
            "score": 99.54896455652573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, i ) >=0) {",
            "score": 99.60044642857143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , i ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| epsilon >=0) {",
            "score": 99.595537109375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { return -0; }",
            "score": 99.58983265269886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { return - 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.58677606997283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <0) {",
            "score": 99.54816750919117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( entry <0) {",
            "score": 99.60889733355978,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] ,0, epsilon ) >=0) {",
            "score": 99.59552001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -0, epsilon ) >=0) {",
            "score": 99.58656529017857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) ) {",
            "score": 99.57182384672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, compare ) >=0) {",
            "score": 99.57062639508929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , compare ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) >=0) {",
            "score": 99.6076427641369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( Math.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.58866743607955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >=0)",
            "score": 99.5863037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= -0) {",
            "score": 99.57075805664063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <=0) {",
            "score": 99.54663803998162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.59873560855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0) { {",
            "score": 99.58549360795455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >0) {",
            "score": 99.54574764476104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >1) {",
            "score": 99.60732550370066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| true ) {",
            "score": 99.59471594769022,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || true ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <=0&& MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5933203125,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, epsilon ) >=0) {",
            "score": 99.58533296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) ) {",
            "score": 99.56984991776316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) >=0) {",
            "score": 99.54546042049633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon >0) {",
            "score": 99.59296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, entry ) >=0) {",
            "score": 99.58539109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=0) )",
            "score": 99.58402876420455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= entry ) {",
            "score": 99.56647600446429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0)",
            "score": 99.54480852399554,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= -1) {",
            "score": 99.60654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ,0) >=0) {",
            "score": 99.59758649553571,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "10"
        },
        {
            "patch": "} if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.59384987571023,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, start ) >=0) {",
            "score": 99.56554594494048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry , epsilon ) >=0) {",
            "score": 99.56500799005681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) >=0.0) {",
            "score": 99.54470985814145,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max( entry ,0.2) >=0.0) {",
            "score": 99.54470985814145,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <1) {",
            "score": 99.60618954613095,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= minRatioPos ) {",
            "score": 99.59646739130434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0&& epsilon >=0) {",
            "score": 99.59366508152173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 && epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >=0) ) {",
            "score": 99.59248279389881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=0)",
            "score": 99.58428276909723,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double entry ,0, epsilon ) >=0) {",
            "score": 99.58168096127717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) ==0) {",
            "score": 99.54458438648896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , col ) >=0) {",
            "score": 99.59566824776786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , col ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) <=0) {",
            "score": 99.5924656080163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >0) {",
            "score": 99.58548134251645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >=0) {",
            "score": 99.58260498046874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0,0, epsilon ) >=0) {",
            "score": 99.58134128736413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) <=0) {",
            "score": 99.56333705357143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry ,6, epsilon ) >=0) {",
            "score": 99.56317459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,2, epsilon ) >=0) {",
            "score": 99.56317459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >=0)",
            "score": 99.54456329345703,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) >=1) {",
            "score": 99.60270889945652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >0) {",
            "score": 99.59565815172698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ,0) >=0) {",
            "score": 99.59196671195652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==1) {",
            "score": 99.58523995535714,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0)",
            "score": 99.58186848958333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , entry ) >=0) {",
            "score": 99.58120329483695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >>0) {",
            "score": 99.56311616443452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >> 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry , epsilon ) >=0) {",
            "score": 99.56306966145833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, entry ) >=0) {",
            "score": 99.5443474264706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) <0) {",
            "score": 99.60254967730978,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0,0, epsilon ) >=0) {",
            "score": 99.59102199388587,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , rhs ) >=0) {",
            "score": 99.5808742357337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) <0) {",
            "score": 99.58994838169643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col ) >=0)",
            "score": 99.58027954101563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.56197684151786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, entry ) >=0) {",
            "score": 99.56172107514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >=0) {",
            "score": 99.54349772135417,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, entry ) >=0) {",
            "score": 99.60019066220238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= minRatio ) {",
            "score": 99.5942150297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0.1) {",
            "score": 99.58993928328805,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 . 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0)",
            "score": 99.57964409722223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >0) {",
            "score": 99.56191871279762,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0,0) >=0) {",
            "score": 99.56151181175595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0.0) >=0) {",
            "score": 99.54300087376645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) >=0)",
            "score": 99.58811257102273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ) {",
            "score": 99.56057559742646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=0) {",
            "score": 99.5425666360294,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1, epsilon ) >=0) {",
            "score": 99.58952530570652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ) >=0) {",
            "score": 99.57825991981908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry , epsilon ) >=0) {",
            "score": 99.54160443474265,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >0) {",
            "score": 99.59773763020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >0) {",
            "score": 99.59773763020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ,0, epsilon ) >=0) {",
            "score": 99.58851689877717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0.0) {",
            "score": 99.58232189360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0,0) >=0) ) {",
            "score": 99.57813561480978,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( MathUtils.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.55969819568452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0) >=0) {",
            "score": 99.54156172902961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, epsilon ) >=0) {",
            "score": 99.58908562911184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0, epsilon ) >=0) {",
            "score": 99.57772972470238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0>=0) {",
            "score": 99.55947730654762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.58866613051471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.58655315896739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >=0) { {",
            "score": 99.57747025923295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >=0) { {",
            "score": 99.57747025923295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MIN_VALUE ) >=0) {",
            "score": 99.54091925370066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MIN _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >6) {",
            "score": 99.59659830729167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >2) {",
            "score": 99.59659830729167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , value ,0, epsilon ) >=0) {",
            "score": 99.57688306725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , value , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < minRatio )",
            "score": 99.57671564275569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| false ) {",
            "score": 99.58738111413044,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || false ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) < minRatio ) {",
            "score": 99.58580961681548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0) { final",
            "score": 99.58575994318181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0,0, epsilon ) >=0) {",
            "score": 99.57654339334239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.null , epsilon ) >=0) {",
            "score": 99.5593029203869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ,0) >=0) {",
            "score": 99.55763003700658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=0) {",
            "score": 99.54012357271634,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| entry <0) {",
            "score": 99.59435504415761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon || epsilon ) >=0) {",
            "score": 99.58670176630434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon || epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this.entry ,0, epsilon ) >=0) {",
            "score": 99.57654339334239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this . entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this , entry , epsilon ) >=0) {",
            "score": 99.55880301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,1, epsilon ) >=0) {",
            "score": 99.55760556175595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) <0) {",
            "score": 99.53927791819854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0.0) {",
            "score": 99.5866168478261,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ==0) ) {",
            "score": 99.58557710193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==0) { {",
            "score": 99.57802512428977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, entry ) >=0) ) {",
            "score": 99.57564113451087,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, round ) >=0) {",
            "score": 99.55794270833333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , round ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >=0, epsilon ) {",
            "score": 99.59245499320652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >=0, epsilon ) {",
            "score": 99.59245499320652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0) >=0) {",
            "score": 99.58641357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *0) {",
            "score": 99.58551897321429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >= minRatio ) {",
            "score": 99.58430281929348,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=6)",
            "score": 99.57102661132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=2)",
            "score": 99.57102661132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) >=0) ) {",
            "score": 99.53786749588816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.entry ,0, epsilon ) >=0) {",
            "score": 99.59178626019022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, true ) {",
            "score": 99.58576766304348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.58373006184895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) ==0) {",
            "score": 99.57749537417763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=1) {",
            "score": 99.57491932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=0)",
            "score": 99.5708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0+ epsilon ) {",
            "score": 99.58573581861413,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 + epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0) { {",
            "score": 99.57713012695312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) >=0)",
            "score": 99.56943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { else {",
            "score": 99.55559430803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=1) {",
            "score": 99.53723862591912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, rhs ) >=0) {",
            "score": 99.5744098165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <1) {",
            "score": 99.53704474954044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& false ) {",
            "score": 99.58534307065217,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && false ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -0) >=0) {",
            "score": 99.58250891644022,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon ) >=0) {",
            "score": 99.57393606085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) <0.0) {",
            "score": 99.53229081003289,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >0) {",
            "score": 99.59027390252976,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0&& entry <0) {",
            "score": 99.58513077445652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 && entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, entry ) >=0) {",
            "score": 99.56812686011905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) >0) {",
            "score": 99.55354817708333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( entry ) >0) {",
            "score": 99.5316162109375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=1) {",
            "score": 99.58877081620066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) <0) {",
            "score": 99.5846808938419,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) <0) {",
            "score": 99.58060128348214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0f ) >=0) {",
            "score": 99.576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= null ) {",
            "score": 99.57338169642857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > minRatio )",
            "score": 99.56550736860795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0,0) >=0) {",
            "score": 99.55323375355114,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.55272152549342,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Integer.MAX_VALUE ) >=0) {",
            "score": 99.53061394942434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Integer . MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >=1) {",
            "score": 99.58834706182066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, entry ) >=0) {",
            "score": 99.58455757472827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new( entry ,0, epsilon ) >=0) ) {",
            "score": 99.57967122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { break ; } else {",
            "score": 99.57573908025569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { break ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0,0) >=0) {",
            "score": 99.57212763247283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= minRatio ) {",
            "score": 99.56534830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,6) >=0) {",
            "score": 99.55232319078948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,2) >=0) {",
            "score": 99.55232319078948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& entry >0) {",
            "score": 99.58693529211956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon1) >=0) {",
            "score": 99.58402876420455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils == compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.57713681175595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils == compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( entry ) ) >=0) {",
            "score": 99.5290591591283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( entry ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= minRatio ) {",
            "score": 99.58658854166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) <=0) {",
            "score": 99.58307756696429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( value ,0, epsilon ) >=0) {",
            "score": 99.5795665922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( value , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.i , epsilon ) >=0) {",
            "score": 99.57616024925595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,1) >=0) {",
            "score": 99.57392810639881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , epsilon ) >=0) {",
            "score": 99.5703189247533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.6) >=0.0) {",
            "score": 99.52875077097039,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.min( entry ,0.2) >=0.0) {",
            "score": 99.52875077097039,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) <0) ) {",
            "score": 99.57953171502976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) <=0) {",
            "score": 99.57842658547794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.57604449728261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry <= 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false ,0, epsilon ) >=0) {",
            "score": 99.56947393002717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon / entry ) >=0)",
            "score": 99.56309925426136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, entry , epsilon ) >=0) {",
            "score": 99.55061420641448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, entry ) >=0) {",
            "score": 99.55049060639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) <0) {",
            "score": 99.52812114514802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , epsilon ) <0) {",
            "score": 99.57939220610119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( double ) epsilon ) >=0) {",
            "score": 99.56935813210227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( double ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, this ) >=0) {",
            "score": 99.54926990327381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , this ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) ==0)",
            "score": 99.52811431884766,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=1) {",
            "score": 99.58264741443452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.compare( entry , entry ) <0) {",
            "score": 99.57798665364584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) ==0) {",
            "score": 99.57132393973214,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) == 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= false ) {",
            "score": 99.56930106026786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= minRatio )",
            "score": 99.56254438920455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( this , entry ,0, epsilon ) >=0) {",
            "score": 99.55008370535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( this , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ,0, epsilon ) >=0) {",
            "score": 99.52736944901316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==0, epsilon ) {",
            "score": 99.58211616847827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon - entry ) >=0) {",
            "score": 99.57777471127717,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon epsilon ) >=0) {",
            "score": 99.57677112926136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! ! MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.57497240149456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { )",
            "score": 99.5479403409091,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0*epsilon ) >=0) {",
            "score": 99.5271857766544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 * epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) <0) {",
            "score": 99.57679814877717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) ==0) {",
            "score": 99.57640438988095,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >0) {",
            "score": 99.5743992017663,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.57042172080592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, ! epsilon ) >=0) {",
            "score": 99.5682705965909,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , ! epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) >=0) {",
            "score": 99.5483165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= >=0) {",
            "score": 99.54719682173295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) <0) {",
            "score": 99.5796130952381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) <0) {",
            "score": 99.5796130952381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, false , epsilon ) >=0) {",
            "score": 99.56749957540761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , false , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) == -1) {",
            "score": 99.56902521306819,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon , epsilon ) >=0) {",
            "score": 99.56676715353261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >=1) {",
            "score": 99.54707263764881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0, epsilon ) >=0) {",
            "score": 99.52245375689338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon , epsilon ) >=0) {",
            "score": 99.5468390969669,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=0.0) {",
            "score": 99.52231959292763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon , epsilon ) >=0) {",
            "score": 99.56492017663044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { *",
            "score": 99.54331276633523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) >=0) {",
            "score": 99.5215087890625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > -1) {",
            "score": 99.57792524857955,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >=0)",
            "score": 99.57235107421874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) <0) {",
            "score": 99.54601469494048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <=0) {",
            "score": 99.52142693014706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0, epsilon ) {",
            "score": 99.57741380774456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , col ) >=0) {",
            "score": 99.57189360119048,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , col ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) <=0) {",
            "score": 99.54480561755952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.54173694957386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <=0.0) {",
            "score": 99.5211181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( entry >=0) {",
            "score": 99.57601265285327,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , entry ,0, epsilon ) >=0) {",
            "score": 99.56309442934783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,6) >=0) {",
            "score": 99.5447009858631,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,2) >=0) {",
            "score": 99.5447009858631,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, ) {",
            "score": 99.53896262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0, epsilon ) >=0) {",
            "score": 99.52088838465073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=0, epsilon ) {",
            "score": 99.57564113451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0, epsilon ) >=0.0) {",
            "score": 99.56597609747024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, epsilon )",
            "score": 99.55630493164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ,0) >=0) {",
            "score": 99.54379417782738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=0.0) {",
            "score": 99.51993001302084,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) <0) {",
            "score": 99.57158346737133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=1) {",
            "score": 99.57112630208333,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) >=0.0) {",
            "score": 99.56573195684524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) >=0) { {",
            "score": 99.56288840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compareTo( entry , epsilon ) >=0) {",
            "score": 99.54361572265626,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) <0.0) {",
            "score": 99.51980108963816,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0.2) <0.0) {",
            "score": 99.51980108963816,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=6, epsilon ) {",
            "score": 99.57546068274456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=2, epsilon ) {",
            "score": 99.57546068274456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=0) { return -1; }",
            "score": 99.56538529829545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 0 ) { return - 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0) ) {",
            "score": 99.56285184972427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { ) {",
            "score": 99.519775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| entry >0) {",
            "score": 99.5741550611413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon6) >=0) {",
            "score": 99.5650967684659,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon2) >=0) {",
            "score": 99.5650967684659,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| {",
            "score": 99.5620349702381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0) >=0) {",
            "score": 99.55367238898026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.53641183035714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) >=0) {",
            "score": 99.51829427083334,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry -1) >=0) {",
            "score": 99.57228685461956,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry - 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) <=0) {",
            "score": 99.56898716517857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <=0) {",
            "score": 99.5684878700658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) ) {",
            "score": 99.56157483552632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0.0) {",
            "score": 99.53470284598214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -0, epsilon ) >=0) {",
            "score": 99.51819525824652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , entry ) >=0) {",
            "score": 99.5688709077381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon f ) >=0) {",
            "score": 99.56830388849431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.54256184895833,
            "correctness": "timeout",
            "tokenized_patch": "while ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) ==0) {",
            "score": 99.51744169347427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0, epsilon ) {",
            "score": 99.57174246651786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= minRatioPos ) {",
            "score": 99.56844075520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry , epsilon ) >=0) {",
            "score": 99.5633185891544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0, epsilon ) >=0) {",
            "score": 99.56120499320652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1,0, epsilon ) >=0) {",
            "score": 99.54237583705357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry ) >=0) {",
            "score": 99.53403930664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon , epsilon ) >=0) {",
            "score": 99.51735325863487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=0) { final",
            "score": 99.5675738790761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >=0) { {",
            "score": 99.56111283735795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ,6) >=0) {",
            "score": 99.54234095982143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ,2) >=0) {",
            "score": 99.54234095982143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) <=0) {",
            "score": 99.51703957950367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) >=0) {",
            "score": 99.57117984169408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0,0, epsilon ) >=0) {",
            "score": 99.56661854619566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, rhs ) {",
            "score": 99.56615149456522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , rhs ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double entry ) >=0) {",
            "score": 99.56103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , start , epsilon ) >=0) {",
            "score": 99.54158528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , start , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) <0) {",
            "score": 99.57087053571429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -1) <0) {",
            "score": 99.56559952445652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - 1 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.5502865439967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=01) {",
            "score": 99.5322598544034,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0) ==0) {",
            "score": 99.51668294270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) ) {",
            "score": 99.55997467041016,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=1) ) {",
            "score": 99.55964461616848,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.1, epsilon ) >=0) {",
            "score": 99.54908389136905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) !=0) {",
            "score": 99.53224583675987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=0.6) {",
            "score": 99.51608758223684,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=0.2) {",
            "score": 99.51608758223684,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( entry >=0) { final double entry = tableau.getEntry( i , col ) ; final",
            "score": 99.56617228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ; final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon ,0, epsilon ) >=0) {",
            "score": 99.55935801630434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon /1) >=0)",
            "score": 99.54779607599431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=1) {",
            "score": 99.53208229758523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer(0) ) >=0) {",
            "score": 99.51543225740132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( 0 ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >= minRatio ) {",
            "score": 99.56999405570652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon && epsilon ) >=0) {",
            "score": 99.566162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon && epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) <0) {",
            "score": 99.56395422894022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,1, epsilon ) >=0) ) {",
            "score": 99.55893342391305,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , epsilon ) >=0)",
            "score": 99.54752807617187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, new Double( entry ) ) >=0) {",
            "score": 99.51499537417763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , new Double ( entry ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon !=0) ) {",
            "score": 99.56587146577381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon != 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -6) {",
            "score": 99.5582608309659,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -2) {",
            "score": 99.5582608309659,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) >=0)",
            "score": 99.54738159179688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <0.0) {",
            "score": 99.5145263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) >0) {",
            "score": 99.56910241168478,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon <=0) ) {",
            "score": 99.56579008556548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon <= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( null , entry ,0, epsilon ) >=0) {",
            "score": 99.56312627377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( null , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) <0) {",
            "score": 99.55799932065217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) ==0) {",
            "score": 99.53669084821429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0,0, epsilon ) ) {",
            "score": 99.5299960049716,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, epsilon ) >=0)",
            "score": 99.51423475477431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, i ) {",
            "score": 99.5690387228261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >= minRatio ) {",
            "score": 99.56360394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , Integer.MAX_VALUE ) >=0) {",
            "score": 99.55788255774456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , Integer . MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& epsilon <0) {",
            "score": 99.56895380434783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) <0) {",
            "score": 99.562744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.56117466517857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon , epsilon ) >=0) {",
            "score": 99.55775669642857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >0) {",
            "score": 99.54628208705357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { /",
            "score": 99.52873091264205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return epsilon ;",
            "score": 99.55705460258152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0) >=0) {",
            "score": 99.55363913143383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ,6) >=0) {",
            "score": 99.53421456473214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ,2) >=0) {",
            "score": 99.53421456473214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ) >=0) {",
            "score": 99.52836339613971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=0, epsilon ) {",
            "score": 99.56825322690217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) final",
            "score": 99.5607677641369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, rhs ) >=0) ) {",
            "score": 99.55696968410327,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compare( epsilon , entry ,0, epsilon ) >=0) {",
            "score": 99.53386579241071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0, entry ) >=0) {",
            "score": 99.52723277698864,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , Double.MAX_VALUE ) <0) {",
            "score": 99.5125668174342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MAX _ VALUE ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.56052652994792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ,0) >=0) {",
            "score": 99.54402669270833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=1) {",
            "score": 99.53266344572368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MAX_VALUE ) <=0) {",
            "score": 99.51035670230263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MAX _ VALUE ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=0, epsilon ) {",
            "score": 99.56739342730978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon - epsilon ) >=0) {",
            "score": 99.56037703804348,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=6) { {",
            "score": 99.5567959872159,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=2) { {",
            "score": 99.5567959872159,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) <=0) {",
            "score": 99.5514904203869,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0>=0) {",
            "score": 99.52719261532738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0) >=0) >=0) {",
            "score": 99.51015111019737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) <0) {",
            "score": 99.55861302425987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0>=0) {",
            "score": 99.55583389945652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= epsilon ) {",
            "score": 99.5311215049342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.55866033380681,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) <0) {",
            "score": 99.55829934512867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) -1) {",
            "score": 99.55109514508929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) <0) {",
            "score": 99.54243774414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MAX_VALUE ) >0) {",
            "score": 99.5078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MAX _ VALUE ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) <=0) {",
            "score": 99.55934740149456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon /1) >=0) {",
            "score": 99.55775518002717,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ++ ,0, epsilon ) >=0) {",
            "score": 99.55527565696023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ++ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.55045572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,1) >=0) {",
            "score": 99.52887926603618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) <=0) {",
            "score": 99.50755399816177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| epsilon <0) {",
            "score": 99.56618333899456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return rhs ;",
            "score": 99.55479364809783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return rhs ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,1) >=0) {",
            "score": 99.52781918174342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < epsilon ) {",
            "score": 99.52436755952381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,1, entry ) >=0) {",
            "score": 99.5074462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatioPos ) <0) {",
            "score": 99.56611965013587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio CaMeL Pos ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) >=0) { {",
            "score": 99.55446555397727,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= minRatio )",
            "score": 99.53973943536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=0, epsilon ) {",
            "score": 99.56592959449405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( Math.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.55715110085227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Math . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, epsilon , epsilon ) >=0) {",
            "score": 99.55415675951087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,0, epsilon ) >=0) {",
            "score": 99.54817708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= i ) {",
            "score": 99.53841145833333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= i ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=6) {",
            "score": 99.52716385690789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=2) {",
            "score": 99.52716385690789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) !=0) {",
            "score": 99.52377464657738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,1, epsilon ) >=0) {",
            "score": 99.50662051930146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { ;",
            "score": 99.5379150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.52691359747024,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0>=0) {",
            "score": 99.52325148809524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) ) >0) {",
            "score": 99.50556383634868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.0, epsilon ) >=0) {",
            "score": 99.55642218338816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) <0) {",
            "score": 99.5370861235119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) ) {",
            "score": 99.52558826264881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >=0.0) {",
            "score": 99.50494706003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ==0) >=0) {",
            "score": 99.5569484544837,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon == 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >= MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.55246900475544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon >= Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >= minRatio )",
            "score": 99.53673206676136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , entry , epsilon ) >=0) {",
            "score": 99.52540225074405,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) ) <0) {",
            "score": 99.50370065789474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry >=0)",
            "score": 99.5554911295573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return null ;",
            "score": 99.55241593070652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0",
            "score": 99.54631604646382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) <0) {",
            "score": 99.50368365119485,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) <0) {",
            "score": 99.50368365119485,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >= minRatio ) {",
            "score": 99.5637737771739,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0&& epsilon ) {",
            "score": 99.5551120923913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0.0) >=0) {",
            "score": 99.52529761904762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( this.Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.52144949776786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( this . Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=0)",
            "score": 99.50362396240234,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, minRatio ) >=0) {",
            "score": 99.56355086616848,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=0) { {",
            "score": 99.54558771306819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( i ,0, epsilon ) >=0) {",
            "score": 99.53587704613095,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( i , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( epsilon ,0, epsilon ) >=0) {",
            "score": 99.52512078536184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0-0) {",
            "score": 99.52060081845238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0.0) >=0) {",
            "score": 99.50339226973684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >0) {",
            "score": 99.563232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.55573064630681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math == MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.55420983355978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math == Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this ,0, epsilon , epsilon ) >=0) {",
            "score": 99.55123768682066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon , epsilon ) >=0) {",
            "score": 99.52413504464286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0, entry ) {",
            "score": 99.52046130952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.TRUE.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5534031080163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . TRUE . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| epsilon )",
            "score": 99.5353116122159,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,6, epsilon ) >=0) {",
            "score": 99.52320498511905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,2, epsilon ) >=0) {",
            "score": 99.52320498511905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) >=0.6) {",
            "score": 99.5029232627467,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max( entry ,0.2) >=0.2) {",
            "score": 99.5029232627467,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >=1) {",
            "score": 99.56295340401786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >=1) {",
            "score": 99.56295340401786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) ==0) {",
            "score": 99.55537683823529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >= minRatio ) ) {",
            "score": 99.55432659646739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >= min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >=1) {",
            "score": 99.55070694633152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >= minRatio )",
            "score": 99.53526722301136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, true ) >=0) {",
            "score": 99.5228271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1) >=0) {",
            "score": 99.50189971923828,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1) >=0) {",
            "score": 99.55495733963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.! Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.55168013139205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, entry ) >=0)",
            "score": 99.53524780273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, max ) >=0) {",
            "score": 99.52274362664474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) ==0) {",
            "score": 99.50173052619485,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0, epsilon ) {",
            "score": 99.56269274259868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0, epsilon ) >=0) {",
            "score": 99.54388106496711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , epsilon ) >=0) {",
            "score": 99.53486713610198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.52229614257813,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, ) >=0) {",
            "score": 99.51912231445313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS', epsilon ) >=0) {",
            "score": 99.50165872012867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License', epsilon ) >=0) {",
            "score": 99.50165872012867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , minRatio ) >=0) {",
            "score": 99.56246815557066,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0) { {",
            "score": 99.54989013671874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >= minRatio )",
            "score": 99.5346346768466,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=1) {",
            "score": 99.56245349702381,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon , epsilon ) >=0) {",
            "score": 99.54970915421195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0*epsilon ) >=0) {",
            "score": 99.54356166294643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 * epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] , epsilon ) >=0) {",
            "score": 99.5338467684659,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.52183024088542,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) <=0.0) {",
            "score": 99.50075812088816,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& entry <0) {",
            "score": 99.56199048913044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) ==0) {",
            "score": 99.55265299479167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) == 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, epsilon ) >=0) { {",
            "score": 99.54932750355114,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=0)",
            "score": 99.53382025824652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, entry ) >=0) {",
            "score": 99.50070672286184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=1) {",
            "score": 99.56149773848684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0, epsilon ) {",
            "score": 99.55162992931548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) !=0) {",
            "score": 99.54261997767857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo(0, entry , epsilon ) >=0) {",
            "score": 99.52113743832237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) ) <0) {",
            "score": 99.49940892269737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon >=0)",
            "score": 99.55126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon , epsilon ) >=0) {",
            "score": 99.54895550271739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.epsilon ) >=0) {",
            "score": 99.54195363898026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, format ) >=0) {",
            "score": 99.52104259672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , format ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.) >=0) {",
            "score": 99.49861907958984,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >0) {",
            "score": 99.5610415810033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.51795014880952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS') >=0) {",
            "score": 99.49798990885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License') >=0) {",
            "score": 99.49798990885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.56056810461956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) <0) {",
            "score": 99.54993960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= MAX_VALUE ) {",
            "score": 99.5486370584239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= MAX _ VALUE ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.i ,0, epsilon ) >=0) {",
            "score": 99.5602390455163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . i , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==0) { final",
            "score": 99.55079234730114,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= -1) {",
            "score": 99.54945678710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, MAX_VALUE ) >=0) {",
            "score": 99.54860521399456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { } else {",
            "score": 99.548583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0,1) >=0) {",
            "score": 99.51915922619048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) <0) {",
            "score": 99.49724264705883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) >=0, epsilon ) {",
            "score": 99.55894403872283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon <0)",
            "score": 99.55043538411458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, epsilon ) >=0) { {",
            "score": 99.54757557744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0/ epsilon ) >=0) {",
            "score": 99.53208705357143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 / epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,6) >=0) {",
            "score": 99.51863820929276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,2) >=0) {",
            "score": 99.51863820929276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) ==0) {",
            "score": 99.51734561011905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) ) >0) {",
            "score": 99.49701248972039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, entry ) >=0) {",
            "score": 99.55853826349431,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *entry ) {",
            "score": 99.55018833705357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return 1;",
            "score": 99.54744819972827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ;",
            "score": 99.5315300436581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon0) >=0) {",
            "score": 99.51732288707386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=0) {",
            "score": 99.49689127604167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >0) {",
            "score": 99.54957116168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >0, epsilon ) >=0) {",
            "score": 99.5468517485119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry > 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { { return 0; }",
            "score": 99.5400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { { return 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1,0) >=0) {",
            "score": 99.5182872953869,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >0) {",
            "score": 99.4964958639706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& entry >=0) {",
            "score": 99.55703337296195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( !( entry ,0, epsilon ) >=0) ) {",
            "score": 99.54957071940105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.54823521205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , minRatioPos ) >=0) {",
            "score": 99.54645739103618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) >=0) { {",
            "score": 99.54636452414773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, value ) >=0) {",
            "score": 99.53961502878289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) > minRatio ) {",
            "score": 99.53091285342262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.51826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , epsilon , epsilon ) >=0) {",
            "score": 99.5161465731534,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=6) {",
            "score": 99.49645278033088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=2) {",
            "score": 99.49645278033088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0&& epsilon ) {",
            "score": 99.54927394701087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, this , epsilon ) >=0) {",
            "score": 99.54622749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= -0) {",
            "score": 99.51814575195313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >=0) {",
            "score": 99.49643123851104,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', entry ) >=0) {",
            "score": 99.5566173735119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', entry ) >=0) {",
            "score": 99.5566173735119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) ==0) {",
            "score": 99.54783871299342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.startsWith( entry ,0, epsilon ) ) {",
            "score": 99.53946725945724,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . starts CaMeL With ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) >=0)",
            "score": 99.52990112304687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0/ epsilon ) >=0) {",
            "score": 99.4963019875919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 / epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) >=1) {",
            "score": 99.55653447690217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(( entry ,0, epsilon ) >=0) ) {",
            "score": 99.54894488790761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +=0, epsilon ) >=0) {",
            "score": 99.54607282366071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry += 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( Math.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.53794167258523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . round ( Math . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) <0) {",
            "score": 99.49584242876838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0, entry ) {",
            "score": 99.54727027529762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -1, epsilon ) >=0) {",
            "score": 99.5458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , new Integer( epsilon ) ) >=0) {",
            "score": 99.5378650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , new Integer ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,6, epsilon ) >=0) {",
            "score": 99.51788039434524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,2, epsilon ) >=0) {",
            "score": 99.51788039434524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry , epsilon ) >=0) {",
            "score": 99.51526460193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry , epsilon ) >=0) {",
            "score": 99.51526460193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'AS IS') >=0) {",
            "score": 99.49575626148896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'License') >=0) {",
            "score": 99.49575626148896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon > minRatio ) ) {",
            "score": 99.54854152513587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon > min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0,0) >=0) {",
            "score": 99.54680524553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) <0) {",
            "score": 99.5443050986842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0)",
            "score": 99.53781467013889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.52872924804687,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0,0, epsilon ) ) {",
            "score": 99.51757202148437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , entry ) >=0) {",
            "score": 99.51495070684524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) ) <=0) {",
            "score": 99.49495656866776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| entry >=0) {",
            "score": 99.55545176630434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.54802110460069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , entry ) >=0) {",
            "score": 99.54517886513158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) <0) {",
            "score": 99.54413805509868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, entry ,0) >=0) {",
            "score": 99.51730828536184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >0) {",
            "score": 99.49412626378677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon <0) ) {",
            "score": 99.54796781994048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0,0) {",
            "score": 99.54596819196429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( new MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5450439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( new Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) )",
            "score": 99.53665964226974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry > Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51471819196429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) >0) {",
            "score": 99.49372944078948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=0, epsilon ) {",
            "score": 99.5547511888587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false && MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.54770295516305,
            "correctness": "wrong",
            "tokenized_patch": "if ( false && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "for( int i =0; i < tableau.getHeight( ) ; i ++ )",
            "score": 99.52763439360119,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < tableau . get CaMeL Height ( ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) return 0;",
            "score": 99.49361379523026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ epsilon ) <0) {",
            "score": 99.54385230654762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) < minRatio ) {",
            "score": 99.543701171875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,1, epsilon ) >=0) {",
            "score": 99.52723911830357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon >=0) >=0) {",
            "score": 99.49342105263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0,0) {",
            "score": 99.55424167798913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= minRatio ) { final",
            "score": 99.54620361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon < MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.54443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon < Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0) >=0) ) {",
            "score": 99.54336402529762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >=0) {",
            "score": 99.49319223257211,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0, entry ) {",
            "score": 99.55373216711956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0, entry ) {",
            "score": 99.5432361421131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) >=0)",
            "score": 99.52542724609376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) !=0) {",
            "score": 99.51654343377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1, epsilon ) >=0) {",
            "score": 99.49196370442708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0, {",
            "score": 99.54267810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0.0)",
            "score": 99.53484552556819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new double [0] ) <0) {",
            "score": 99.49190481085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new double [ 0 ] ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { ) {",
            "score": 99.54263160342262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col , epsilon ) >=0) {",
            "score": 99.54262823807566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0, epsilon ) >=0) {",
            "score": 99.53479721966912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) ) >=0)",
            "score": 99.49165174696181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) ==0) {",
            "score": 99.55266007133152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) - minRatio ) {",
            "score": 99.54398777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) < minRatio ) {",
            "score": 99.54255022321429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0>=0) {",
            "score": 99.51209077380952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) <0) {",
            "score": 99.49055750229779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >= minRatio ) {",
            "score": 99.55213994565217,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >= minRatio ) {",
            "score": 99.55213994565217,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) == minRatio ) {",
            "score": 99.54355256453805,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1,0, epsilon ) >=0) {",
            "score": 99.54184358016305,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, minRatioPos ) >=0) {",
            "score": 99.54151553199405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) !=0) {",
            "score": 99.54007393973214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0, epsilon ) >=0)",
            "score": 99.53252618963069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , epsilon ) >=0)",
            "score": 99.52437744140624,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0+ epsilon ) >=0) {",
            "score": 99.51350911458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0) {",
            "score": 99.511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=0.0) {",
            "score": 99.490234375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) >=6) {",
            "score": 99.55192764945652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) >=2) {",
            "score": 99.55192764945652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >> >=0) {",
            "score": 99.5425137606534,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >> >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -0) { {",
            "score": 99.54146144701087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , epsilon ) <0) {",
            "score": 99.54105050223214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) <0) {",
            "score": 99.53987630208333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) <0) {",
            "score": 99.53987630208333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >0) {",
            "score": 99.53231956845238,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.6, epsilon ) >=0) {",
            "score": 99.52342587425595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.2, epsilon ) >=0) {",
            "score": 99.52342587425595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon , epsilon ) >=0) {",
            "score": 99.51325334821429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) >=0) {",
            "score": 99.48959530101104,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max( entry ,0.2) >=0) {",
            "score": 99.48959530101104,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= minRatio )",
            "score": 99.52332153320313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) -0) {",
            "score": 99.51130114103618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new double [0] ) >0) {",
            "score": 99.48948267886513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new double [ 0 ] ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) -0, epsilon ) {",
            "score": 99.55150305706522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , epsilon ) >=0) { {",
            "score": 99.54097123579545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >0) {",
            "score": 99.54091099330357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) <=0) {",
            "score": 99.5387951078869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.53185356987848,
            "correctness": "uncompilable",
            "tokenized_patch": "final int Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=1) {",
            "score": 99.48932243795956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, rhs ) >=0) {",
            "score": 99.54089886209239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - -1) {",
            "score": 99.54081394361413,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - - 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { return i ;",
            "score": 99.54069010416667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { return i ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, 'AS IS', epsilon ) >=0) {",
            "score": 99.51226515997024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, 'License', epsilon ) >=0) {",
            "score": 99.51226515997024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) ==0.0) {",
            "score": 99.48916144120066,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) == 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math != MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5407077955163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, col ) >=0) {",
            "score": 99.52192768297698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <<0) {",
            "score": 99.50948660714286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) << 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >0)",
            "score": 99.48914930555556,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0) ) {",
            "score": 99.54025448069854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry == MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.54012398097827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { final",
            "score": 99.53963623046874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= -1) {",
            "score": 99.53166060014205,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) !=0)",
            "score": 99.52135552300348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new ) >=0) {",
            "score": 99.4886962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon , epsilon ) >=0) { {",
            "score": 99.54020552201705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0|| epsilon ) {",
            "score": 99.53929602581522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon L ) >=0) {",
            "score": 99.53523393110795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon L ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >=0)",
            "score": 99.52132161458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >= epsilon ) {",
            "score": 99.5109001608456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.null , entry ) >=0) {",
            "score": 99.50761486235119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . null , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.6) <0.0) {",
            "score": 99.48842259457237,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,0.2) <0.0) {",
            "score": 99.48842259457237,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( minRatioPos , epsilon ) >=0) {",
            "score": 99.53992229959239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( min CaMeL Ratio CaMeL Pos , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i ) >=0) {",
            "score": 99.5389340049342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, value ) >=0) {",
            "score": 99.53114077919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, true ) >=0) {",
            "score": 99.51064918154762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, ) >=0) {",
            "score": 99.50761274857955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <0)",
            "score": 99.48812866210938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [ i ] ,0, epsilon ) >0) {",
            "score": 99.53896077473958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ i ] , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) ) <=0) {",
            "score": 99.48808850740132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=1, epsilon ) {",
            "score": 99.54898734714673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 1 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) throw null ;",
            "score": 99.53959324048913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) throw null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=0)",
            "score": 99.52034912109374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) <0) {",
            "score": 99.50933478860294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& ! epsilon ) {",
            "score": 99.53872680664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && ! epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >= minRatio ) ) {",
            "score": 99.5382770040761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( MathUtils.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.52985174005681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= minRatio )",
            "score": 99.51959228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5085681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) >=0) {",
            "score": 99.48700358072917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0) ) {",
            "score": 99.53923483455883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String entry = tableau.getEntry( i , tableau.getWidth( ) -1) ;",
            "score": 99.5382663892663,
            "correctness": "uncompilable",
            "tokenized_patch": "String entry = tableau . get CaMeL Entry ( i , tableau . get CaMeL Width ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) <0) {",
            "score": 99.53430757068452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) <=0) {",
            "score": 99.52983165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , entry ) >=0) {",
            "score": 99.50852564761513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon )0>=0) {",
            "score": 99.5069580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) <=0) {",
            "score": 99.48674460018383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& epsilon >0) {",
            "score": 99.548583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < -1) {",
            "score": 99.53395774147727,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) <=0) {",
            "score": 99.50823102678571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) ) {",
            "score": 99.5063540810033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <6) {",
            "score": 99.5483165922619,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <2) {",
            "score": 99.5483165922619,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry / entry ) >=0) {",
            "score": 99.53742781929348,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry / entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry ,0, epsilon ) >=0)",
            "score": 99.51888020833333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >=0)",
            "score": 99.50816650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0+ epsilon ) >=0) {",
            "score": 99.48617733226104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry6,0, epsilon ) >=0) {",
            "score": 99.5381192294034,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry2,0, epsilon ) >=0) {",
            "score": 99.5381192294034,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, f ) >=0) {",
            "score": 99.529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50595238095238,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double(0) ) >=0) {",
            "score": 99.48599403782895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( 0 ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, entry ) >=0) {",
            "score": 99.5477359169408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ,0, epsilon ) >=0) { {",
            "score": 99.5377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry /1) >=0) {",
            "score": 99.53698199728261,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry / 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) != -1) {",
            "score": 99.52924138849431,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, max ) >=0) {",
            "score": 99.50706845238095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) <0) {",
            "score": 99.54772367931548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= minRatioPos ) {",
            "score": 99.53698199728261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.1, epsilon ) >=0) {",
            "score": 99.5068591889881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0>=0) {",
            "score": 99.48542865953948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, minRatio ) >=0) {",
            "score": 99.54749065896739,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, minRatio ) >=0) {",
            "score": 99.54749065896739,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( !( MathUtils.compareTo( entry ,0, epsilon ) >0) ) {",
            "score": 99.53702799479167,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0) { ) {",
            "score": 99.53683338994566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) !=0) {",
            "score": 99.5316097861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.compare( entry ,0, epsilon ) ) >=0) {",
            "score": 99.52783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . compare ( entry , 0 , epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, rhs ) >=0) {",
            "score": 99.51650855654762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= epsilon ) {",
            "score": 99.50645228794643,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0) >=0) >=0) {",
            "score": 99.50462704613095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) ==0) {",
            "score": 99.48535874310662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( true && MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.53674847146739,
            "correctness": "wrong",
            "tokenized_patch": "if ( true && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) ==0.0) {",
            "score": 99.48504959909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) == 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >= minRatio ) {",
            "score": 99.5471722146739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.,0, epsilon ) >=0) {",
            "score": 99.53656560724431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(0< MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.53636633831522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( 0 < Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { ) {",
            "score": 99.53584216889881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= true ) {",
            "score": 99.53111049107143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0, epsilon ) >=0.0) {",
            "score": 99.52751813616071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0+ epsilon ) >=0) {",
            "score": 99.50615491365132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MIN_VALUE ) <0) {",
            "score": 99.48502390008224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MIN _ VALUE ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& entry ==0) {",
            "score": 99.54694930366848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >=0) )",
            "score": 99.51569213867188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, true ) >=0) {",
            "score": 99.50539036800987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.6) >=0.6) {",
            "score": 99.48467696340461,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.min( entry ,0.2) >=0.2) {",
            "score": 99.48467696340461,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( entry >0) {",
            "score": 99.546875,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry ,0, epsilon ) >=0) {",
            "score": 99.53647867838542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo(0,0, epsilon ) >=0) ) {",
            "score": 99.53563391644022,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) ) {",
            "score": 99.51394813939145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.48463841488487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatioPos ) >0) {",
            "score": 99.5466945482337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio CaMeL Pos ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon <= minRatio ) ) {",
            "score": 99.53604789402173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon <= min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { ; }",
            "score": 99.53552776834239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry /0, epsilon ) >=0) {",
            "score": 99.53513502038044,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry / 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) ==0) {",
            "score": 99.53006417410714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { return 0; }",
            "score": 99.52613467261905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { return 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >=1) {",
            "score": 99.51381138392857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) <0) {",
            "score": 99.50522030101104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) <0) {",
            "score": 99.48456887637867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <1) {",
            "score": 99.52928402549342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) <0) {",
            "score": 99.51362537202381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { } else {",
            "score": 99.5037841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1.0) >=0) {",
            "score": 99.48340561810662,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 . 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( MathUtils.compareTo( rhs ,0, epsilon ) >=0) ) {",
            "score": 99.53532608695652,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, rhs ) >=0) {",
            "score": 99.53461014597039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) >=0)",
            "score": 99.51361694335938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.50391787574405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 && Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -6, epsilon ) >=0) {",
            "score": 99.53514515269886,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -2, epsilon ) >=0) {",
            "score": 99.53514515269886,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) <=0) {",
            "score": 99.52552705652573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < -0) {",
            "score": 99.50221946022727,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < - 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0>=0)",
            "score": 99.48253716362848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >= minRatio ) {",
            "score": 99.54556937839673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { final double entry = tableau.getEntry( i , col ) ; final",
            "score": 99.53458658854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ; final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) >=0)",
            "score": 99.51239691840277,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ entry ) >=0) {",
            "score": 99.50204613095238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.48249897203948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <1) {",
            "score": 99.54543585526316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry ,0, epsilon ) >0) {",
            "score": 99.53450874660327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry ,0, epsilon ) >0) {",
            "score": 99.53450874660327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) >=0)",
            "score": 99.51182250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) >=0)",
            "score": 99.51182250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ) >=0) {",
            "score": 99.48207194010416,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( 0 , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry ,0) >=0) {",
            "score": 99.52479137073864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, rhs ) >=0) {",
            "score": 99.51159086681548,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( Math.compareTo( epsilon ,0, epsilon ) >=0) {",
            "score": 99.50337299547698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0,0) >=0) {",
            "score": 99.50141834077381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >=0)",
            "score": 99.48193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) <=0) {",
            "score": 99.533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.abs( entry ,0, epsilon ) >=0) {",
            "score": 99.53342799136513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . abs ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0,0, epsilon ) >=0) {",
            "score": 99.5268322172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0L ) {",
            "score": 99.5245694247159,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 L ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, i ) >=0)",
            "score": 99.51158447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , i ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, entry ) >=0) {",
            "score": 99.50133056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0.0) {",
            "score": 99.48183079769737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) <=0) {",
            "score": 99.52446056547619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.0) {",
            "score": 99.4817138671875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col ) <0) {",
            "score": 99.53306361607143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, entry ) >=0) {",
            "score": 99.52421489514802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=00) {",
            "score": 99.50059925426136,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=0.0) {",
            "score": 99.48141659007354,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=1) {",
            "score": 99.5329822358631,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "final double MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.53293185763889,
            "correctness": "uncompilable",
            "tokenized_patch": "final double Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0,0) {",
            "score": 99.52498372395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) <0)",
            "score": 99.51112670898438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, max ) >=0) {",
            "score": 99.50237715871711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) >0) {",
            "score": 99.50015113467262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=0, epsilon ) {",
            "score": 99.5420558763587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +1,0, epsilon ) >=0) {",
            "score": 99.532470703125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 1 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) <=0) {",
            "score": 99.51093982514881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, start ) >=0) {",
            "score": 99.50213301809211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ,0.0) >=0) {",
            "score": 99.48122687088816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,6, epsilon ) >=0) ) {",
            "score": 99.5316745923913,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,2, epsilon ) >=0) ) {",
            "score": 99.5316745923913,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= -0) {",
            "score": 99.52432250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) ) { {",
            "score": 99.52332124255952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, entry ) >=0)",
            "score": 99.5107666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , value ) >=0) {",
            "score": 99.4812255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| entry ==0) {",
            "score": 99.54175866168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { return rhs ;",
            "score": 99.531494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { return rhs ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0*entry ) {",
            "score": 99.53147291100544,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 * entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) < minRatioPos ) {",
            "score": 99.53133491847827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) <=0) {",
            "score": 99.52404203869048,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) <=0) {",
            "score": 99.52404203869048,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "final if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.52315945095486,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , epsilon ) >=0)",
            "score": 99.5107666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50204613095238,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >=0.6) {",
            "score": 99.48099557976974,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >=0.2) {",
            "score": 99.48099557976974,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) ==0) {",
            "score": 99.53139426491477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , MAX_VALUE ) >=0) {",
            "score": 99.53138950892857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) , epsilon ) {",
            "score": 99.52384440104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.col , epsilon ) >=0) {",
            "score": 99.51062593005952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=0>=0) {",
            "score": 99.48073858963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& epsilon >=0) {",
            "score": 99.53132430366848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs / entry ) >=0) {",
            "score": 99.53115446671195,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs / entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==0)",
            "score": 99.51010470920139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) >=1) {",
            "score": 99.5014880952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0.6) {",
            "score": 99.48070004111842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0.2) {",
            "score": 99.48070004111842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >6) {",
            "score": 99.54132401315789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >2) {",
            "score": 99.54132401315789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) >=0) { {",
            "score": 99.53118341619319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) >=0) { {",
            "score": 99.53118341619319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,01, epsilon ) >=0) {",
            "score": 99.52287153764205,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) <0) {",
            "score": 99.52283296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) <0) {",
            "score": 99.52283296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) >0) {",
            "score": 99.51009114583333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) ==0) {",
            "score": 99.52277483258929,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) >=0)",
            "score": 99.50965576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) >=0)",
            "score": 99.50965576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ,1) >=0) {",
            "score": 99.50088355654762,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) ) >=0)",
            "score": 99.48016357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) <=0) {",
            "score": 99.54090947690217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - -0) {",
            "score": 99.5302734375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - - 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { epsilon =0; }",
            "score": 99.52228338068181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { epsilon = 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) ) {",
            "score": 99.50956003289474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >1) {",
            "score": 99.48014562270221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0==0) {",
            "score": 99.5305706521739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , - minRatio ) >=0) {",
            "score": 99.53012917258523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new( epsilon ) ) >=0) {",
            "score": 99.5215731534091,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( this.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4973208778783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( this . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >0.0) {",
            "score": 99.47987124794408,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) > 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) <0) {",
            "score": 99.52174778988487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) >=0)",
            "score": 99.5094970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, false ) >=0) {",
            "score": 99.50033714657738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, null , epsilon ) >=0) {",
            "score": 99.52951978600544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.epsilon ) >=0.0) {",
            "score": 99.52065558182566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >= Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.4797299033717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon >= Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.getWidth( ) , epsilon ) >=0)",
            "score": 99.5299072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . get CaMeL Width ( ) , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return entry ;",
            "score": 99.52922257133152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs -1) >=0) {",
            "score": 99.5285007642663,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs - 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { return 0; } }",
            "score": 99.52021928267045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { return 0 ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry !=0, epsilon ) >=0) {",
            "score": 99.50932231702302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry != 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0, epsilon ) >=0) {",
            "score": 99.47947933799342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo(0, epsilon , epsilon ) >=0) ) {",
            "score": 99.52879797894022,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "switch( MathUtils.compareTo( entry ,0, epsilon ) ) { case1:",
            "score": 99.52016379616477,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) { case 1 :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=1) {",
            "score": 99.49443126860119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <0) { {",
            "score": 99.47943115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=6) {",
            "score": 99.52870244565217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=2) {",
            "score": 99.52870244565217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( entry ==0) {",
            "score": 99.52787449048913,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( entry == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <=0, epsilon ) {",
            "score": 99.5209728422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.50891723632813,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0+ epsilon ) >=0) {",
            "score": 99.49909410978618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) <0) {",
            "score": 99.49441688939145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >0) {",
            "score": 99.53924881784539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >0) {",
            "score": 99.53924881784539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.entry , epsilon ) >=0) {",
            "score": 99.52046130952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,0) >=0) {",
            "score": 99.51996813322368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0, epsilon ) >=0) {",
            "score": 99.50848029641544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry != Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4944080171131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, epsilon ) >0) {",
            "score": 99.47805946751645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { } }",
            "score": 99.53918987771739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0&& true ) {",
            "score": 99.52044968377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 && true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) <0) {",
            "score": 99.51978701636905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < minRatioPos ; i ++ ) {",
            "score": 99.50769653320313,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min CaMeL Ratio CaMeL Pos ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0, epsilon ) <0) {",
            "score": 99.49426850818452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new , epsilon ) >=0) {",
            "score": 99.53917875744048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, epsilon ) >=0)",
            "score": 99.50737072172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon , entry , epsilon ) >=0) {",
            "score": 99.49809827302632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ) >0) {",
            "score": 99.47765299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.! compareTo( entry ,0, epsilon ) ) {",
            "score": 99.50734252929688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ! compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MIN_VALUE ) <=0) {",
            "score": 99.47764185855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MIN _ VALUE ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.52854410807292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , this , epsilon ) >=0) {",
            "score": 99.52702985491071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) ==0) {",
            "score": 99.51934523809524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) ==0) {",
            "score": 99.51934523809524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) >=1) {",
            "score": 99.49225725446429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) <0.0) {",
            "score": 99.4774105674342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) <0.0) {",
            "score": 99.4774105674342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0|| epsilon ) {",
            "score": 99.52791694972827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math == Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5268322172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math == Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double minRatio ) >=0) {",
            "score": 99.526611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) ;",
            "score": 99.50682431175595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) <0) {",
            "score": 99.49781436011905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) >0) {",
            "score": 99.4768130653783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , entry ) >=0) {",
            "score": 99.53858584449405,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { else",
            "score": 99.49723510742187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.49179077148438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=1)",
            "score": 99.47602844238281,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,1, epsilon ) >=0) {",
            "score": 99.53853175951087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon + entry ) >=0) {",
            "score": 99.52773649796195,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon + entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo(0, rhs ,0, epsilon ) >=0) {",
            "score": 99.52611243206522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , entry ) >=0) {",
            "score": 99.52593703497024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ,0) {",
            "score": 99.51889183407738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon.) >=0) {",
            "score": 99.51812189275569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon . ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) <=0) {",
            "score": 99.49678119860198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Long.MAX_VALUE ) >=0) {",
            "score": 99.47581722861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Long . MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <0, epsilon ) {",
            "score": 99.518798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0, entry ) >=0) {",
            "score": 99.51695033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) <=0) {",
            "score": 99.4755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <0, epsilon ) {",
            "score": 99.53836495535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon i ) >=0) {",
            "score": 99.52510209517045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, new Double( epsilon ) ) >=0) {",
            "score": 99.47525185032895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , new Double ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils != compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.52640206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils != compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , start ) >=0) {",
            "score": 99.49642783717105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, min ) >=0) {",
            "score": 99.4899669828869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <0)",
            "score": 99.47517225477431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) true ++ ;",
            "score": 99.52623980978261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) true ++ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , tableau.getWidth( ) -1) >=0) {",
            "score": 99.52403192934783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , tableau . get CaMeL Width ( ) - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) >=0)",
            "score": 99.5056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0.1) {",
            "score": 99.49637276785714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 . 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS', entry ,0, epsilon ) >=0) {",
            "score": 99.47503340871711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License', entry ,0, epsilon ) >=0) {",
            "score": 99.47503340871711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0!=0) {",
            "score": 99.5248492697011,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0) { ) {",
            "score": 99.52351180366848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0,6) >=0) {",
            "score": 99.4955822172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0,2) >=0) {",
            "score": 99.4955822172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry ,0, epsilon ) ) {",
            "score": 99.48909759521484,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) >=0.0) {",
            "score": 99.47488223805146,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry ,0, epsilon ) >=0) { {",
            "score": 99.5244777513587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ) >=0) {",
            "score": 99.52330824908088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0- epsilon ) >=0) {",
            "score": 99.49547758556548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 - epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry ) {",
            "score": 99.53635572350544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,(0, epsilon ) >=0) ) {",
            "score": 99.52438221807066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0,0) >=0) {",
            "score": 99.51758975074405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) <=0) {",
            "score": 99.51472024356617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , true ) >=0) {",
            "score": 99.49468703497024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.compareTo( entry , epsilon ) >=0) {",
            "score": 99.48793247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=6) {",
            "score": 99.47433651194854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=2) {",
            "score": 99.47433651194854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon length ) >=0) {",
            "score": 99.52557927911931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon length ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.51754324776786,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.contains( entry ,0, epsilon ) ) {",
            "score": 99.51471306295956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . contains ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.start , epsilon ) >=0) {",
            "score": 99.50480143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . start , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon ,0,0, epsilon ) >=0) {",
            "score": 99.49464053199405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6, epsilon ) >=0) {",
            "score": 99.47417249177632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2, epsilon ) >=0) {",
            "score": 99.47417249177632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >=1) {",
            "score": 99.53607468377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , epsilon , epsilon ) >=0) {",
            "score": 99.5234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=1)",
            "score": 99.50475396050348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) - entry ) {",
            "score": 99.4875720796131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) >0) {",
            "score": 99.47398466222427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >=0, epsilon ) {",
            "score": 99.53600543478261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [ i ] ,0, epsilon ) <=0) {",
            "score": 99.52532958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ i ] , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >0) {",
            "score": 99.52220865885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , f ) >=0) {",
            "score": 99.5172119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) %0) {",
            "score": 99.48724655877976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) % 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >0) {",
            "score": 99.47395405016448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0-1) {",
            "score": 99.5359523607337,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] ,0, epsilon ) >0) {",
            "score": 99.525146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , - entry ) >=0) {",
            "score": 99.52310791015626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , rhs ) >=0) {",
            "score": 99.52210053943452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , true ) >=0) {",
            "score": 99.49369884672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, entry ) >=0, epsilon ) {",
            "score": 99.53555961277173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this ,0,0, epsilon ) >=0) {",
            "score": 99.52302352241848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) < minRatio ) {",
            "score": 99.52168354235198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, rhs ) >=0) {",
            "score": 99.50408063616071,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( compareTo , entry ) >=0) {",
            "score": 99.48647925967262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( compare CaMeL To , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.6) >=0) {",
            "score": 99.47344649465461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.2) >=0) {",
            "score": 99.47344649465461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry -0) >=0) {",
            "score": 99.5354534646739,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry - 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon == epsilon ) >=0) {",
            "score": 99.52511463994566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon == epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0) >=0) { {",
            "score": 99.52288263494319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon / entry ) <0) {",
            "score": 99.52160113790761,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compareTo( entry , epsilon ) >=0) {",
            "score": 99.51325819227431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( name ,0, epsilon ) >=0) {",
            "score": 99.50387137276786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( name , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,1, epsilon ) >=0) {",
            "score": 99.48643275669643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new ) >=0) {",
            "score": 99.47344649465461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'AS IS', epsilon ) >=0) {",
            "score": 99.535400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'License', epsilon ) >=0) {",
            "score": 99.535400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.length , epsilon ) >=0) {",
            "score": 99.50274367559524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . length , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0+0) {",
            "score": 99.48640950520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 + 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) >=0.0) {",
            "score": 99.47255572150735,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon + epsilon ) >=0) {",
            "score": 99.5244671365489,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon + epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -0,0, epsilon ) >=0) {",
            "score": 99.52258831521739,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, -1) >=0) {",
            "score": 99.49302368164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0.0) {",
            "score": 99.486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) <0) {",
            "score": 99.53410259046052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) < minRatioPos ) {",
            "score": 99.52015752377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.value , epsilon ) >=0) {",
            "score": 99.50236002604167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . value , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= epsilon ) {",
            "score": 99.48617699032738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , Double.MIN_VALUE ) >0) {",
            "score": 99.4716861122533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MIN _ VALUE ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) <=0) {",
            "score": 99.49282657398896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.48565995065789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) <0.6) {",
            "score": 99.4716732627467,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) < 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0.0) <0.2) {",
            "score": 99.4716732627467,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) < 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=0, epsilon ) {",
            "score": 99.53358525815217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon < minRatio ) ) {",
            "score": 99.52431852921195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon < min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0,0, epsilon ) >=0) {",
            "score": 99.5214206861413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.1, entry ) >=0) {",
            "score": 99.50203450520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Integer.MAX_VALUE ) <=0) {",
            "score": 99.4715640419408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Integer . MAX _ VALUE ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( ! MathUtils.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.52372233072917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( , entry ,0, epsilon ) >=0) {",
            "score": 99.52114035866477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0, epsilon ) >=0)",
            "score": 99.50174386160714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >0) {",
            "score": 99.49281529017857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.compare( entry ,0) >=0) {",
            "score": 99.47135844983552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.53269361413044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , max ) >=0) {",
            "score": 99.51455206620066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.epsilon ) >=0) {",
            "score": 99.51253469366776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <= minRatio ) {",
            "score": 99.50137183779762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >= epsilon ) {",
            "score": 99.4923031455592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math = Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.485107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math = Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0) { {",
            "score": 99.4713134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, entry ) >=0, epsilon ) {",
            "score": 99.5324176290761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry >0)",
            "score": 99.52296956380208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i ,0) >=0) {",
            "score": 99.51894996279762,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, entry ) >=0) {",
            "score": 99.50127883184524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) >=0, epsilon ) {",
            "score": 99.53215225883152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry , null , epsilon ) >=0) ) {",
            "score": 99.51970108695652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0+0, epsilon ) >=0) {",
            "score": 99.49198986235119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) >0) {",
            "score": 99.47118326822917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon ) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.52229817708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( start ,0, epsilon ) >=0) {",
            "score": 99.51947312127976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( start , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& epsilon >=0) {",
            "score": 99.51146298363095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , epsilon ) >=0) {",
            "score": 99.49177381727431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) <0) {",
            "score": 99.4832699424342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Integer.MAX_VALUE ) <0) {",
            "score": 99.4710629111842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Integer . MAX _ VALUE ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, minRatio ) {",
            "score": 99.5318019701087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.1, epsilon ) >=0) {",
            "score": 99.51929772418478,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { }",
            "score": 99.518798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= -1) {",
            "score": 99.51397150213069,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >=0)",
            "score": 99.50078735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, null , epsilon ) >=0) {",
            "score": 99.49174572172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0, entry ) >=0) {",
            "score": 99.4831310453869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) >=0) {",
            "score": 99.470849609375,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, entry ) >=0) {",
            "score": 99.53151983963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, entry ) >=0) {",
            "score": 99.53151983963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0) >=0) {",
            "score": 99.5192935341283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, entry ) >=0) {",
            "score": 99.5185016134511,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( rhs ,0, epsilon ) >=0) {",
            "score": 99.5004818564967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >=0)",
            "score": 99.46909586588542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [ i ] , epsilon ) >=0) {",
            "score": 99.53117231889205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ i ] , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0&& epsilon ) {",
            "score": 99.5216648267663,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.epsilon ) >=0) {",
            "score": 99.50987333409927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.1) >=0) {",
            "score": 99.50031389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , null , epsilon ) >=0) {",
            "score": 99.4689582375919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >=6) {",
            "score": 99.5310695482337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >=2) {",
            "score": 99.5310695482337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=6) {",
            "score": 99.52162388392857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=2) {",
            "score": 99.52162388392857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, this.epsilon ) >=0) {",
            "score": 99.51857591711956,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , this . epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >= minRatio ) {",
            "score": 99.51807702105978,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry.0, entry ) >=0) {",
            "score": 99.51278525904605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) >0) {",
            "score": 99.50961449032738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= -0) {",
            "score": 99.4906982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( this.entry ,0, epsilon ) >=0) {",
            "score": 99.4688656455592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( this . entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( epsilon ,0, epsilon ) >=0) ) {",
            "score": 99.51848038383152,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( minRatioPos , entry ) >=0) {",
            "score": 99.51796025815217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( min CaMeL Ratio CaMeL Pos , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "switch( MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.5001220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) <=0) {",
            "score": 99.48278227306548,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >0) {",
            "score": 99.4688361672794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) <0) {",
            "score": 99.52949451264881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( MathUtils.compareTo( entry ,0, epsilon ) <=0) ) {",
            "score": 99.52137247721355,
            "correctness": "plausible",
            "tokenized_patch": "if ( ! ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon , epsilon ) >=0) {",
            "score": 99.51793902853261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon , epsilon ) >=0) {",
            "score": 99.51793902853261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0,0, epsilon ) >=0) {",
            "score": 99.5123226768092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= -1) {",
            "score": 99.50863986545139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0, epsilon ) >=0)",
            "score": 99.50010172526042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, floor ) >=0) {",
            "score": 99.48253813244048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , floor ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) >=0) {",
            "score": 99.46853841145834,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ==0, epsilon ) >=0) {",
            "score": 99.52922620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry == 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) ==0) ) {",
            "score": 99.52126146399456,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, true , epsilon ) >=0) {",
            "score": 99.490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >= minRatio ) {",
            "score": 99.5290294828869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) != minRatio ) {",
            "score": 99.52111285665761,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ,0) <0) {",
            "score": 99.51751999627976,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=0&& {",
            "score": 99.51668648097827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&&",
            "score": 99.51210327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 &&",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) >=0)",
            "score": 99.49959309895833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new double [0] ) <=0) {",
            "score": 99.46836451480263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new double [ 0 ] ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatioPos ) >=1) {",
            "score": 99.52896781589673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio CaMeL Pos ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.52093796502976,
            "correctness": "uncompilable",
            "tokenized_patch": "final double Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils == MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.51745074728261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils == Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, true , epsilon ) >=0) {",
            "score": 99.51655910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0&& epsilon ) {",
            "score": 99.51178850446429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, value ) >=0) {",
            "score": 99.50794566761364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >0) {",
            "score": 99.52885509672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon true ) >=0) {",
            "score": 99.5201748934659,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry /1, epsilon ) >=0) {",
            "score": 99.51725968070652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry / 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0,0,0) >=0) {",
            "score": 99.4883968955592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) <0.6) {",
            "score": 99.46776058799342,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) < 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0.2) <0.2) {",
            "score": 99.46776058799342,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) < 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { continue ; }",
            "score": 99.51997884114583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { continue ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( Math ,0, epsilon ) >=0) {",
            "score": 99.51611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( Math , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry , epsilon ) >=0) >=0) {",
            "score": 99.481201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , epsilon ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) ) <=0) {",
            "score": 99.4675228721217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) ==0) {",
            "score": 99.5198284646739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,(0, epsilon ) ) >=0) {",
            "score": 99.51692000679348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( 0 , epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <=1) {",
            "score": 99.51155813116776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , entry ) >=0) {",
            "score": 99.4989013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ,1) >=0) {",
            "score": 99.48767671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , entry ) >=0) {",
            "score": 99.48114691840277,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.6) {",
            "score": 99.46675618489583,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.2) {",
            "score": 99.46675618489583,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( col ,0, epsilon ) >=0) {",
            "score": 99.52811104910714,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( col , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, epsilon ) >0) {",
            "score": 99.51967551491477,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry instanceof0, epsilon ) >=0) {",
            "score": 99.51597377232143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry instanceof 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { } else {",
            "score": 99.506982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) >=0)",
            "score": 99.46647644042969,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , minRatio ) >=0) {",
            "score": 99.52805494225544,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry >=0)",
            "score": 99.51964314778645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) <0) {",
            "score": 99.5168224516369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.'AS IS', epsilon ) >=0) {",
            "score": 99.49710518973214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.'License', epsilon ) >=0) {",
            "score": 99.49710518973214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >=6) {",
            "score": 99.48721168154762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >=2) {",
            "score": 99.48721168154762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0-0) {",
            "score": 99.480712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, value ) <0) {",
            "score": 99.46617934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , value ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) ==0) {",
            "score": 99.51949637276786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ,0, epsilon ) >=0) {",
            "score": 99.51522163722827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) !=0) {",
            "score": 99.5110095796131,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, tableau ) >=0) {",
            "score": 99.49698893229167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , tableau ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >0) {",
            "score": 99.52759951636905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { return 0;",
            "score": 99.5188700358073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6,0, epsilon ) >=0) {",
            "score": 99.51504118546195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2,0, epsilon ) >=0) {",
            "score": 99.51504118546195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, entry ) ) {",
            "score": 99.50638427734376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - ) {",
            "score": 99.48045712425595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) >=0.0) {",
            "score": 99.4656982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , Math.MAX_VALUE ) >=0) {",
            "score": 99.52747112771739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , Math . MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry <=0)",
            "score": 99.51847330729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , minRatioPos ) >=0) {",
            "score": 99.51621791294643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0|| true ) {",
            "score": 99.51070731026786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 || true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) <=0) {",
            "score": 99.50590587797619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=0.0) {",
            "score": 99.46564684416118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0&& MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.51845296223958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0,0, epsilon ) >=0) {",
            "score": 99.514404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.50579279119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| Math.compare( entry ,0) >=0) {",
            "score": 99.4655825966283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || Math . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , tableau.getWidth( ) -1)",
            "score": 99.52741805366848,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , tableau . get CaMeL Width ( ) - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, entry ) >=0)",
            "score": 99.4960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { if( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.48628162202381,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, value ) >0) {",
            "score": 99.46551872702206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , value ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry ,0, epsilon ) <=0) {",
            "score": 99.51803456182066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry ,0, epsilon ) <=0) {",
            "score": 99.51803456182066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , minRatio ) >=0) {",
            "score": 99.51578422214673,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==6) {",
            "score": 99.50549897693452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==2) {",
            "score": 99.50549897693452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { else {",
            "score": 99.4860607328869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0,0) {",
            "score": 99.47960844494048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) >=0)",
            "score": 99.46537511488971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, minRatio ) >=0) {",
            "score": 99.51375679347827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.6, epsilon ) >=0.0) {",
            "score": 99.50546409970238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.2, epsilon ) >=0.0) {",
            "score": 99.50546409970238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon + epsilon ) >=0) {",
            "score": 99.48592122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) >=0)",
            "score": 99.46523708767361,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >=1) {",
            "score": 99.52676246279762,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >=0) { final",
            "score": 99.51755593039773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true ,0, epsilon ) >=0) {",
            "score": 99.51334281589673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) <=0.0) {",
            "score": 99.46493369654605,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >0)",
            "score": 99.51732235863095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0+0) {",
            "score": 99.5132366677989,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 + 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( Math.min( entry ,0, epsilon ) >=0) ) {",
            "score": 99.50531560724431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Math . min ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry <0, epsilon ) >=0) {",
            "score": 99.49385793585526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'AS IS', epsilon ) >=0) {",
            "score": 99.51310929008152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'License', epsilon ) >=0) {",
            "score": 99.51310929008152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.min( entry ,0, epsilon ) >=0) ) {",
            "score": 99.50529341264205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . min ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, epsilon ) >=0)",
            "score": 99.49362182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6, epsilon ) ) {",
            "score": 99.4856189546131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2, epsilon ) ) {",
            "score": 99.4856189546131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) -0>=0) {",
            "score": 99.47796921502976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) - 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >=0)",
            "score": 99.46436309814453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=1) {",
            "score": 99.52605329241071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon , epsilon ) >=0) ) {",
            "score": 99.51308806046195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0f ) {",
            "score": 99.5052823153409,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 f ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, exp ) >=0) {",
            "score": 99.48530505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , exp ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0, entry ) {",
            "score": 99.47792271205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) <0) {",
            "score": 99.4643195657169,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) >=0) { final",
            "score": 99.51685587565105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math = MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51437245244566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS',0, epsilon ) >=0) {",
            "score": 99.51266346807066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License',0, epsilon ) >=0) {",
            "score": 99.51266346807066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,1, epsilon ) >=0) {",
            "score": 99.50526012073864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,6, epsilon ) >=0) {",
            "score": 99.4933849516369,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "9"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,2, epsilon ) >=0) {",
            "score": 99.4933849516369,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) -0) {",
            "score": 99.47745768229167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <=0.0) {",
            "score": 99.46385091145834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, entry ) >=0) ) {",
            "score": 99.51432291666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , entry ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -1) { {",
            "score": 99.51259977921195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - 1 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >=0)",
            "score": 99.4929134971217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=1) {",
            "score": 99.48518451891448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1) <0) {",
            "score": 99.46376139322916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=6) {",
            "score": 99.52549525669643,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=2) {",
            "score": 99.52549525669643,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.51673955502717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=6) ) {",
            "score": 99.51257854959239,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=2) ) {",
            "score": 99.51257854959239,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry , new Integer( epsilon ) ) >=0) {",
            "score": 99.50518508184524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , new Integer ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) < minRatio )",
            "score": 99.49241333007812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) ==0.0) {",
            "score": 99.46368729440789,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) == 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , null , epsilon ) >=0) {",
            "score": 99.52548699629934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , epsilon ) <0) {",
            "score": 99.51422991071429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "7"
        },
        {
            "patch": "final double MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.51174926757812,
            "correctness": "uncompilable",
            "tokenized_patch": "final double Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) /0) {",
            "score": 99.50498744419643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) / 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , -0, epsilon ) >=0) {",
            "score": 99.48499755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) instanceof0) {",
            "score": 99.47677176339286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) instanceof 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) <0) {",
            "score": 99.46356670673077,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| entry <=0) {",
            "score": 99.52501910665761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0) { }",
            "score": 99.51410466974431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51164444633152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.0,0, epsilon ) >=0) {",
            "score": 99.50698707217262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& epsilon <0) {",
            "score": 99.50397600446429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && epsilon < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=6) {",
            "score": 99.48477333470395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=2) {",
            "score": 99.48477333470395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.46351453993056,
            "correctness": "uncompilable",
            "tokenized_patch": "Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) > -1) {",
            "score": 99.5245361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { final double entry = tableau.getEntry( i , col ) ; final",
            "score": 99.5164286295573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ; final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , rhs ) >=0) {",
            "score": 99.51397414434524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry , epsilon ) >=0) {",
            "score": 99.5115382982337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.50673130580357,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - ;",
            "score": 99.49198608398437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) ) <0) {",
            "score": 99.46328253495066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6,0) >=0) {",
            "score": 99.5243908110119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2,0) >=0) {",
            "score": 99.5243908110119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( entry != MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51377802309783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >0) {",
            "score": 99.50377699908088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'AS IS') >=0)",
            "score": 99.49193115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'License') >=0)",
            "score": 99.49193115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) >=0)",
            "score": 99.46303982204861,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0,0) >=0) {",
            "score": 99.5063809481534,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 , 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) > minRatio )",
            "score": 99.4918212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { Math.compareTo( entry ,0, epsilon ) ;",
            "score": 99.47586495535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { Math . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon [ i ] ) >=0) {",
            "score": 99.5160624186198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon [ i ] ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0>0) {",
            "score": 99.51063603940217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , - , epsilon ) >=0) {",
            "score": 99.50634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) { {",
            "score": 99.5033935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >=0.0) {",
            "score": 99.46287135074013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=1) {",
            "score": 99.52354213169643,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.FALSE.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51356572690217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . FALSE . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) ) >=0) {",
            "score": 99.51029636548913,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, list ) >=0) {",
            "score": 99.48375883556548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , list ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > epsilon ) {",
            "score": 99.47528366815476,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0) <0) {",
            "score": 99.46274285567434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry.0, epsilon ) >=0) {",
            "score": 99.51593572443181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry != null && Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5134914232337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != null && Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| epsilon >=0) {",
            "score": 99.50887398097827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( Math.compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.50327758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( Math . compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >0)",
            "score": 99.49100341796876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) ==0) {",
            "score": 99.46271829044117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , i , epsilon ) >=0) {",
            "score": 99.49057488692434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ,0) >=0) {",
            "score": 99.462158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry , epsilon , epsilon ) >=0) ) {",
            "score": 99.50856615149456,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.abs( Math.compareTo( entry , epsilon ) >=0) ) {",
            "score": 99.50275213068181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . compare CaMeL To ( entry , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) ==0) {",
            "score": 99.4831310453869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) ==0) {",
            "score": 99.4611457375919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >0) {",
            "score": 99.51283892463235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, epsilon ) <0) {",
            "score": 99.50523617393092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.6, epsilon ) >=0) {",
            "score": 99.5024181547619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.2, epsilon ) >=0) {",
            "score": 99.5024181547619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, false ) >=0)",
            "score": 99.49021606445312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , false ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) >0) {",
            "score": 99.46100930606617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) >0) {",
            "score": 99.46100930606617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( MathUtils.compareTo( entry ,0, epsilon ) >=0) )",
            "score": 99.51550823709239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry < minRatioPos ) ) {",
            "score": 99.489990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < min CaMeL Ratio CaMeL Pos ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, false ) >=0) {",
            "score": 99.48244757401316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.minRatio , epsilon ) >=0) {",
            "score": 99.51548700747283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . min CaMeL Ratio , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.51237349076705,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=0) { {",
            "score": 99.5075350674716,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >0) {",
            "score": 99.50491153492646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0) >= epsilon ) {",
            "score": 99.5022331686581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.true , epsilon ) >=0) {",
            "score": 99.48985072544643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) ==0) {",
            "score": 99.52227492559524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >1)",
            "score": 99.51533813476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -1) >0) {",
            "score": 99.51158075747283,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - 1 ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, f ) >=0) {",
            "score": 99.50217572380515,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.min , epsilon ) >=0) {",
            "score": 99.48981584821429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . min , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) <=0) {",
            "score": 99.48191731770834,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0.6) {",
            "score": 99.46075118215461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0.2) {",
            "score": 99.46075118215461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { return null ;",
            "score": 99.51523844401042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon , epsilon , epsilon ) >=0) {",
            "score": 99.50722868546195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <0.0) {",
            "score": 99.50348772321429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "switch( MathUtils.compareTo( entry ,0, epsilon ) ) { case0:",
            "score": 99.50185324928977,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) { case 0 :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= epsilon ) {",
            "score": 99.48178582442434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <0.0) {",
            "score": 99.46028217516448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.value ,0, epsilon ) >=0) {",
            "score": 99.52214249320652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . value , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) >0) {",
            "score": 99.51492745535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) else {",
            "score": 99.5069912997159,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0.0) {",
            "score": 99.50318545386905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -0)",
            "score": 99.481689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= compare ) {",
            "score": 99.4729236421131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= compare ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.MAX_VALUE ) ==0) {",
            "score": 99.46027575041118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . MAX _ VALUE ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=1, epsilon ) {",
            "score": 99.52201915922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 1 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0) { }",
            "score": 99.51094193892045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= min ) {",
            "score": 99.48883928571429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.48157348632813,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=1.0) {",
            "score": 99.4599365234375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) <0) ) {",
            "score": 99.51092208059211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >=0) ) { {",
            "score": 99.50676935369319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, rhs ) >=0) {",
            "score": 99.48869977678571,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, rhs ) >=0) {",
            "score": 99.48869977678571,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.1, epsilon ) >=0) {",
            "score": 99.4809337797619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0.0) {",
            "score": 99.47237723214286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) ==0) {",
            "score": 99.45974551930146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, entry ) {",
            "score": 99.52197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=1) { final",
            "score": 99.5140380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0, epsilon ) >=0)",
            "score": 99.50651411576705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( f ,0, epsilon ) >=0) {",
            "score": 99.50281343005952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( f , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry ,0, epsilon ) ) {",
            "score": 99.49891246448864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,1) >=0) {",
            "score": 99.48084932215073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, - ) >=0) {",
            "score": 99.47236560639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , - ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ) <0) {",
            "score": 99.45928548177083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ,0, epsilon ) >=0) {",
            "score": 99.5219195822011,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0) >=0.0) {",
            "score": 99.49870862458882,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , -1, epsilon ) >=0) {",
            "score": 99.48068237304688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , - 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.NaN ) >=0) {",
            "score": 99.45877878289474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . Na CaMeL N ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >0) ) {",
            "score": 99.50984700520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon , epsilon ) >=0) {",
            "score": 99.50626273777173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon , epsilon ) >=0) {",
            "score": 99.50626273777173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= 'AS IS') {",
            "score": 99.5024349814967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= 'License') {",
            "score": 99.5024349814967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0f ) >=0.0f ) {",
            "score": 99.49857003348214,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 f ) >= 0 . 0 f ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ epsilon ) >0) {",
            "score": 99.47198195684524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if private( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51300603693181,
            "correctness": "uncompilable",
            "tokenized_patch": "if private ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) +0) {",
            "score": 99.50218563988095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) + 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >0)",
            "score": 99.48819580078126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compare( entry , epsilon ) >=0) >=0) {",
            "score": 99.4802478608631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0>=0) {",
            "score": 99.47152855282738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) continue ;",
            "score": 99.45822482638889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, epsilon ) ) { minRatioPos = i ;",
            "score": 99.51286514945652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , epsilon ) ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , col ) <0) {",
            "score": 99.50907970610119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , col ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math < MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.48707217261905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math < Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0.0) >=0) {",
            "score": 99.48015485491071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) throws",
            "score": 99.47088913690476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) throws",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0, entry ) >=0) {",
            "score": 99.45784076891448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [ i ] ,0, epsilon ) >=0)",
            "score": 99.51284391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ i ] , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <0) { {",
            "score": 99.50863647460938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , value ) >=0) {",
            "score": 99.49761641652961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.rhs , epsilon ) >=0) {",
            "score": 99.48668852306548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.47987670898438,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ,0, epsilon ) >=0) {",
            "score": 99.45780864514802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, -1) <0) {",
            "score": 99.50822310014205,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , - 1 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= epsilon ) {",
            "score": 99.47981531479779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Integer.MAX_VALUE ) >0) {",
            "score": 99.45768657483552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Integer . MAX _ VALUE ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col , epsilon ) >=0) {",
            "score": 99.50578507133152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +6, epsilon ) >=0) {",
            "score": 99.50184849330357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +2, epsilon ) >=0) {",
            "score": 99.50184849330357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) <=0) {",
            "score": 99.48640950520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,( Integer ) epsilon ) >=0) {",
            "score": 99.47962646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , ( Integer ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <0>=0) {",
            "score": 99.45767372532895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=6) {",
            "score": 99.52055278577302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=2) {",
            "score": 99.52055278577302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math < MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5077594259511,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math < Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=0) { {",
            "score": 99.49668190696023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, -0) >=0) {",
            "score": 99.47960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& ! compareTo( entry ,0, epsilon ) ) {",
            "score": 99.46925048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry <0)",
            "score": 99.51212565104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -0) <0) {",
            "score": 99.50765327785327,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( assert MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.5052823153409,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( assert Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= epsilon ) {",
            "score": 99.47928659539474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, epsilon ) <0) {",
            "score": 99.45741673519737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math != Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50741722470238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) >=0) -0) {",
            "score": 99.50502080502717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.47917829241071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 && Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, sum ) >=0) {",
            "score": 99.46887788318452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , sum ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) <0) {",
            "score": 99.4569450827206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( entry >=0) { final",
            "score": 99.51200358072917,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( entry >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon entry ) >=0) {",
            "score": 99.5008544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , epsilon ) >0) {",
            "score": 99.485595703125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >=0) { {",
            "score": 99.45678032769098,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0,0, epsilon ) >=0) {",
            "score": 99.5194781759511,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null ,0) >=0) {",
            "score": 99.50483630952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, *epsilon ) >=0) {",
            "score": 99.50019975142045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , * epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , -1) >=0) {",
            "score": 99.49598277698864,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , - 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, null ) >=0)",
            "score": 99.4850341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , null ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >0) {",
            "score": 99.46815892269737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >0)",
            "score": 99.45664978027344,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0) >=0) >=0) {",
            "score": 99.50472359035327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= epsilon ) {",
            "score": 99.46806408110119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) >=0)",
            "score": 99.4565200805664,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] ,0, epsilon ) <=0) {",
            "score": 99.51139322916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) !=0) {",
            "score": 99.4996337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0,0) ) {",
            "score": 99.4783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, entry ) >=0) {",
            "score": 99.46798706054688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry / entry ) >=0) {",
            "score": 99.50644066220238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.compare( entry ,0) >=0) )",
            "score": 99.4560611122533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . compare ( entry , 0 ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ] ,0, epsilon ) >=0) {",
            "score": 99.504150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ] , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry +0, epsilon ) >=0) {",
            "score": 99.4994229403409,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0, entry ) >=0.0) {",
            "score": 99.49557059151786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=1, epsilon ) >=0) {",
            "score": 99.48359607514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry , epsilon ) >=0) ) {",
            "score": 99.46764555431548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, entry ) >=0) {",
            "score": 99.45576746323529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| ! epsilon ) {",
            "score": 99.51107788085938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || ! epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - entry ) {",
            "score": 99.50391734730114,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - entry ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( int ) epsilon ) >=0) {",
            "score": 99.49543900923295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( int ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , minRatio ) >=0) {",
            "score": 99.48356119791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=0.6) {",
            "score": 99.45560709635417,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=0.2) {",
            "score": 99.45560709635417,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , doubleValue ) >=0) {",
            "score": 99.49923270089286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , double CaMeL Value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.Math , epsilon ) >=0) {",
            "score": 99.48338681175595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . Math , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, entry ) ) {",
            "score": 99.51792506167763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false || MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51082710597827,
            "correctness": "wrong",
            "tokenized_patch": "if ( false || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , minRatioPos ) <0) {",
            "score": 99.50538394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio CaMeL Pos ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , MathUtils.epsilon ) >=0) {",
            "score": 99.50376825747283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , Math CaMeL Utils . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= 'AS IS') {",
            "score": 99.49862510279605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= 'License') {",
            "score": 99.49862510279605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( compare ,0, epsilon ) >=0) {",
            "score": 99.48308454241071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( compare , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,6, epsilon ) >=0) {",
            "score": 99.47719212582237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,2, epsilon ) >=0) {",
            "score": 99.47719212582237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true , entry ) >=0) {",
            "score": 99.46658761160714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) <0) {",
            "score": 99.45550130208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0>= minRatio ) {",
            "score": 99.51786472486413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , epsilon ) >= minRatio ) {",
            "score": 99.50525433084239,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "switch( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50372023809524,
            "correctness": "uncompilable",
            "tokenized_patch": "switch ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0, epsilon )",
            "score": 99.48240966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0.0) >=0) {",
            "score": 99.45540125229779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >=0, epsilon ) {",
            "score": 99.51750837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! epsilon && MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51022338867188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! epsilon && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) >=0)",
            "score": 99.48239135742188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, 'AS IS') >=0) {",
            "score": 99.47662032277961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, 'License') >=0) {",
            "score": 99.47662032277961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, epsilon ) >0) {",
            "score": 99.45536534926471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, epsilon ) >0) {",
            "score": 99.45536534926471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.TRUE.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.51729910714286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=0) { final",
            "score": 99.50983220880681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=0) { {",
            "score": 99.49481201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,1) >=0) {",
            "score": 99.47662032277961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <0.0) {",
            "score": 99.46556454613095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , new Double( entry ) ) >=0) {",
            "score": 99.45529656661184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , new Double ( entry ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry >0) ) {",
            "score": 99.51703171502976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >=0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.5097019361413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon >= 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >=6) {",
            "score": 99.50350288722827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >=2) {",
            "score": 99.50350288722827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( Integer ) epsilon ) >=0) {",
            "score": 99.49432927911931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( Integer ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.48162231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ,0,0) >=0) {",
            "score": 99.47659737723214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , false ) >=0) {",
            "score": 99.46549479166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) ==0) {",
            "score": 99.4552066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, entry ) >=0, epsilon ) {",
            "score": 99.51700492527173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, entry ) >=0, epsilon ) {",
            "score": 99.51700492527173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double , epsilon ) >=0) {",
            "score": 99.5031405362216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0||",
            "score": 99.49817504882813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ||",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compareTo( entry ,0, epsilon ) <=0) {",
            "score": 99.49385209517045,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= -1)",
            "score": 99.48161878083882,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo(0, entry ,0, epsilon ) >=0) {",
            "score": 99.47607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , entry , epsilon ) >=0) {",
            "score": 99.46549072265626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) ==0) {",
            "score": 99.4552066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.50966389973958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , rhs ) >=0) {",
            "score": 99.50383649553571,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0)",
            "score": 99.48103841145833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, false ) >=0) {",
            "score": 99.47604851973684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) -0) {",
            "score": 99.46484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0.0) <0) {",
            "score": 99.45510382401316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) <0)",
            "score": 99.48090209960938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.47594633556548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != 0 && Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& entry <=0) {",
            "score": 99.51645295516305,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, i ) <0) {",
            "score": 99.50372023809524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , i ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -1,0, epsilon ) >=0) {",
            "score": 99.50229279891305,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 1 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ epsilon ) <=0) {",
            "score": 99.49784923735119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , value , epsilon ) >=0) {",
            "score": 99.49350120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , value , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,6,0, epsilon ) >=0) {",
            "score": 99.47593470982143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,2,0, epsilon ) >=0) {",
            "score": 99.47593470982143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ,0, epsilon ) >=0)",
            "score": 99.45481363932292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= Double.MAX_VALUE ) {",
            "score": 99.51639988111413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= Double . MAX _ VALUE ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) >0)",
            "score": 99.5096435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return 6;",
            "score": 99.50223972486413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return 2;",
            "score": 99.50223972486413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , new Double( epsilon ) ) >=0) {",
            "score": 99.4934314546131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , new Double ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) break ;",
            "score": 99.48037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,1, epsilon ) >=0) {",
            "score": 99.47592002467105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( Double.MAX_VALUE , entry ) >=0) {",
            "score": 99.45477616159539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Double . MAX _ VALUE , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| epsilon >=0)",
            "score": 99.50960286458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon , false ) >=0) {",
            "score": 99.50159222146739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0|| false ) {",
            "score": 99.49741908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 || false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) !=0) {",
            "score": 99.49332682291667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < minRatio ) {",
            "score": 99.48021298363095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0{",
            "score": 99.46425170898438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0, epsilon ) >=0) {",
            "score": 99.45457056949013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( i , entry ,0, epsilon ) >=0) {",
            "score": 99.51637865149456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( i , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) >=0) { {",
            "score": 99.49320845170455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) >= minRatio ) {",
            "score": 99.47982933407738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) <=0) {",
            "score": 99.47561806126645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry +0, epsilon ) >=0) {",
            "score": 99.46424624794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0, entry ) >=0) {",
            "score": 99.454345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double entry = tableau.getEntry( i , tableau.getWidth( ) -1) ;",
            "score": 99.50951086956522,
            "correctness": "uncompilable",
            "tokenized_patch": "double entry = tableau . get CaMeL Entry ( i , tableau . get CaMeL Width ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ epsilon ) >=0)",
            "score": 99.47901000976563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) ==0) {",
            "score": 99.47561163651316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, entry ) ) {",
            "score": 99.46423921130952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0>=1) {",
            "score": 99.45430072985198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.i , epsilon ) >0) {",
            "score": 99.509033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . i , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) < minRatio ) {",
            "score": 99.50340735394022,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, new double entry ) >=0) {",
            "score": 99.50113578464673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , new double entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, f ) >=0) {",
            "score": 99.49294562088816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , tableau ) >=0) {",
            "score": 99.4786441200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , tableau ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0,0) {",
            "score": 99.46405319940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) >= minRatio ) {",
            "score": 99.50110394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1) <0) {",
            "score": 99.4961001747533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& epsilon <=0) {",
            "score": 99.49242001488095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && epsilon <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6) >=0) {",
            "score": 99.47848992598684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2) >=0) {",
            "score": 99.47848992598684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, epsilon ) >=0) {",
            "score": 99.45369466145833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) ==0) {",
            "score": 99.51515794836956,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0/ entry ) {",
            "score": 99.50294030230978,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 / entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) }",
            "score": 99.50052315848214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0&& false ) {",
            "score": 99.49604724702381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 && false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, entry ) >=0) {",
            "score": 99.47820172991071,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( entry >0&& Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.47541155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 && Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.compareTo( entry ,0) >=0) {",
            "score": 99.46392531622024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) ) >0) {",
            "score": 99.45365825452302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=(0) ) {",
            "score": 99.5004245923913,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= ( 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < 'AS IS') {",
            "score": 99.49602399553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < 'License') {",
            "score": 99.49602399553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { entry =0; }",
            "score": 99.4921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { entry = 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0, epsilon )",
            "score": 99.4781494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ,6) >=0) {",
            "score": 99.475341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ,2) >=0) {",
            "score": 99.475341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) ) ==0) {",
            "score": 99.45352333470395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) >=0, epsilon ) {",
            "score": 99.51503057065217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) >=0, epsilon ) {",
            "score": 99.51503057065217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this ,0, epsilon ) >=0) { {",
            "score": 99.5003662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( value ,0, epsilon ) >=0) {",
            "score": 99.49599095394737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( value , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) /6) {",
            "score": 99.491943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) / $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) /2) {",
            "score": 99.491943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) / $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0|| Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.47526041666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 || Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(( double ) entry ,0, epsilon ) >=0)",
            "score": 99.4529965049342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( ( double ) entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry ,0, epsilon ) >=0)",
            "score": 99.5083340731534,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry ,0, epsilon ) >=0)",
            "score": 99.5083340731534,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , false ) >=0) {",
            "score": 99.47477213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.46257672991071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.i , entry ) >=0) {",
            "score": 99.51484607514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . i , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs ) >=0) {",
            "score": 99.50247012867646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) !=0) {",
            "score": 99.49539620535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) ==0) {",
            "score": 99.47455124627976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , epsilon ) ) {",
            "score": 99.46231418185764,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) >0) {",
            "score": 99.45276596966912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=0) ) { final",
            "score": 99.50799560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.matches( entry ,0, epsilon ) ) {",
            "score": 99.50149739583334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . matches ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.rhs ,0, epsilon ) >=0) {",
            "score": 99.5000636888587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( Math.compare( entry ,0, epsilon ) ) >=0) {",
            "score": 99.4913330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . round ( Math . compare ( entry , 0 , epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.! Math.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.47709728422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1,0) >=0) {",
            "score": 99.47451300370066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( this , entry ,0, epsilon ) >=0) {",
            "score": 99.45257247121711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( this , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return MathUtils.compareTo( entry ,0, epsilon ) >=0) ;",
            "score": 99.50767211914062,
            "correctness": "uncompilable",
            "tokenized_patch": "return Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ,0) >=0) {",
            "score": 99.47437686011905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(6, entry , epsilon ) >=0) {",
            "score": 99.46180943080357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo(2, entry , epsilon ) >=0) {",
            "score": 99.46180943080357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) >=0.0) {",
            "score": 99.45246438419117,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0, minRatio ) {",
            "score": 99.51411769701087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 , min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry , false , epsilon ) >=0) ) {",
            "score": 99.4999363111413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=1) {",
            "score": 99.4739631204044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0- epsilon ) >=0) {",
            "score": 99.45225614659927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 - epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= rhs ) {",
            "score": 99.49983723958333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= rhs ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "9"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.6, epsilon ) >=0) {",
            "score": 99.49068777901786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.2, epsilon ) >=0) {",
            "score": 99.49068777901786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) -0)",
            "score": 99.47633056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= -0) {",
            "score": 99.47368706597223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, value ) >=0)",
            "score": 99.45167541503906,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , value ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , entry ) >=0) {",
            "score": 99.500732421875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( double ) entry ) >=0) {",
            "score": 99.4996004971591,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( double ) entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >=0)",
            "score": 99.47618950737848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >=0)",
            "score": 99.47618950737848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0+ epsilon ) {",
            "score": 99.47299339657738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 + epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry == Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.46143740699405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| entry <1) {",
            "score": 99.5138629415761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >0) )",
            "score": 99.50651411576705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon / entry ) >=0) {",
            "score": 99.4753185453869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,6) >=0) {",
            "score": 99.47287166819854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,2) >=0) {",
            "score": 99.47287166819854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , entry ) >=0) {",
            "score": 99.46139090401786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >0.0) {",
            "score": 99.45137746710526,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon +1) >=0) {",
            "score": 99.50064750339673,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon + 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( Double ) epsilon ) >=0) {",
            "score": 99.49452903053977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( Double ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= -0) {",
            "score": 99.48966841264205,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= - 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, rhs ) >=0) {",
            "score": 99.47514415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0,0) >=0) {",
            "score": 99.47282104492187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon0) >=0) {",
            "score": 99.45091417100694,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +1, epsilon ) >=0) { {",
            "score": 99.49894575639205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 1 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& epsilon ) {",
            "score": 99.47476050967262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( f , entry ,0, epsilon ) >=0) {",
            "score": 99.47227260044643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( f , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=0.0) {",
            "score": 99.46111188616071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >0.0) {",
            "score": 99.45084421258224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) > 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0,0, epsilon ) >=0) {",
            "score": 99.50604248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ) { {",
            "score": 99.48941650390626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.6, entry ) >=0) {",
            "score": 99.4746326264881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.2, entry ) >=0) {",
            "score": 99.4746326264881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0, epsilon ) <=0) {",
            "score": 99.46063523065476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, -1) >=0) {",
            "score": 99.45077853732639,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatioPos = i ; minRatioPos = i ;",
            "score": 99.50600179036458,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio CaMeL Pos = i ; min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon /6) >=0) {",
            "score": 99.49985139266305,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon /2) >=0) {",
            "score": 99.49985139266305,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0.0) >=0) {",
            "score": 99.49873683763587,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , - ) >=0) {",
            "score": 99.49428839432566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, this.epsilon ) >=0) {",
            "score": 99.48917643229167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , this . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) ) {",
            "score": 99.47078022203948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0f ) >0) {",
            "score": 99.45069037543402,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 f ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) <0) {",
            "score": 99.51252184416118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) <0) {",
            "score": 99.51252184416118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=6) {",
            "score": 99.49412777549342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=2) {",
            "score": 99.49412777549342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , min ) >=0) {",
            "score": 99.4887759560033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) >= epsilon ) {",
            "score": 99.4706798735119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true , epsilon ) <0) {",
            "score": 99.46023995535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) <0)",
            "score": 99.45054626464844,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.50562540690105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry <= 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, entry ) >=0)",
            "score": 99.47410888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compareTo( entry , entry ) >=0) {",
            "score": 99.47064819335938,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon -0) >=0) {",
            "score": 99.45987955729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >=0.0) {",
            "score": 99.45047200520834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( min ,0, epsilon ) >=0) {",
            "score": 99.49820963541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( min , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= >=1) {",
            "score": 99.49388538707386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, f ) <=0) {",
            "score": 99.48808361235119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , f ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1) >=0) {",
            "score": 99.44993681066177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >1, epsilon ) {",
            "score": 99.51197350543478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 1 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >0) >=0) {",
            "score": 99.49854577105978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon > 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( ! Math.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.49774724786931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.epsilon ) >=0.0) {",
            "score": 99.48808361235119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) continue ;",
            "score": 99.4739501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) ) ==0) {",
            "score": 99.44966205797698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, minRatio ) >=0) {",
            "score": 99.5119693153783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) >0) {",
            "score": 99.50558035714286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { { ;",
            "score": 99.49763289741848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { { ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0, entry ) >=0) {",
            "score": 99.48787434895833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0,0) >=0) {",
            "score": 99.4739002046131,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , entry ) >=0) {",
            "score": 99.47034976356908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <1) {",
            "score": 99.4494269875919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, false ) >=0) { {",
            "score": 99.49762517755681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , false ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon0) >=0) {",
            "score": 99.46993408203124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) & epsilon ) {",
            "score": 99.45958891369048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) & epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, epsilon ) >=0)",
            "score": 99.44902038574219,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, epsilon ) >=0)",
            "score": 99.44902038574219,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , minRatio ) >=0) {",
            "score": 99.51178850446429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry ) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.50493829900569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) >0) {",
            "score": 99.48729306175595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( value ,0, epsilon ) >=0)",
            "score": 99.47340087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( value , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) >=0.0) {",
            "score": 99.4486443014706,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, entry ) >=1) {",
            "score": 99.5117420014881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, entry ) >=1) {",
            "score": 99.5117420014881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( false , entry ,0, epsilon ) >=0) {",
            "score": 99.49796195652173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( false , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, rhs , epsilon ) >=0) {",
            "score": 99.49711681547619,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.entry ,0) >=0) {",
            "score": 99.49290829613095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) >=0) { {",
            "score": 99.48707217261905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( epsilon ) >=0) )",
            "score": 99.44863552517361,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0L ) >=0) {",
            "score": 99.48617553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 L ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=1.0) {",
            "score": 99.44845420435855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , false , epsilon ) >=0) {",
            "score": 99.51105057565789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , false , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(( entry ,0, epsilon ) >0) ) {",
            "score": 99.504638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ( entry , 0 , epsilon ) > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( entry !=0) {",
            "score": 99.49732506793478,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( entry != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( in ,0, epsilon ) >=0) {",
            "score": 99.49703543526786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( in , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, true ) >=0)",
            "score": 99.47279052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , true ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) <=0.0) {",
            "score": 99.44844135485198,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0.2) <=0.0) {",
            "score": 99.44844135485198,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, TRUE ) >=0) {",
            "score": 99.4968029203869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , TRUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) <0) {",
            "score": 99.49662511488971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0,0) >=0) {",
            "score": 99.49182710193452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0.1) {",
            "score": 99.46868024553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 . 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >0) {",
            "score": 99.44830729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( col ,0, epsilon ) >=0) {",
            "score": 99.51097347861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( col , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new ,0, epsilon ) >=0) {",
            "score": 99.49623325892857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry , epsilon ) <0) {",
            "score": 99.49180385044643,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , epsilon ) < 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0) { ) {",
            "score": 99.45858909970238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.6) >=0) {",
            "score": 99.44796932444854,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.min( entry ,0.2) >=0) {",
            "score": 99.44796932444854,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.value( entry ,0, epsilon ) >=0) {",
            "score": 99.49638815487133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . value ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, , epsilon ) >=0) {",
            "score": 99.49579412286931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, entry ,0,0) >=0) {",
            "score": 99.46838960193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) ==0) {",
            "score": 99.44792094983552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry instanceof0, entry ) >=0) {",
            "score": 99.51089332217262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry instanceof 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return i ;",
            "score": 99.50450067934783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return i ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( compare , entry ,0, epsilon ) >=0) {",
            "score": 99.496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( compare , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , true , epsilon ) >=0) {",
            "score": 99.46799830386513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.) >0) {",
            "score": 99.44778442382812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) > minRatioPos ) {",
            "score": 99.4962742017663,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= -0) {",
            "score": 99.49067826704545,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= - 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.valueOf( entry ,0, epsilon ) >=0) {",
            "score": 99.47159830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . value CaMeL Of ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( Math.compare( entry ,0, epsilon ) >=0) )",
            "score": 99.46793619791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Math . compare ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( ) ) >=0) {",
            "score": 99.44769287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >1) {",
            "score": 99.51033528645833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0) continue ;",
            "score": 99.50425026633523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , col ) >=0) {",
            "score": 99.49625651041667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , col ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( this , epsilon , epsilon ) >=0) {",
            "score": 99.49421037946429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry < minRatio ) ) {",
            "score": 99.47151264391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) <=0) {",
            "score": 99.46781198601974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1) <0) {",
            "score": 99.44703674316406,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , rhs ) >=0) {",
            "score": 99.51028878348214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry ,0, epsilon ) >0) {",
            "score": 99.50398393110795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return {",
            "score": 99.49419611150569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) ==0, epsilon ) {",
            "score": 99.49039713541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) == 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) <0) {",
            "score": 99.48377046130952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( 'AS IS', entry ,0, epsilon ) >=0) {",
            "score": 99.46773856026786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( 'License', entry ,0, epsilon ) >=0) {",
            "score": 99.46773856026786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, double ) >=0) {",
            "score": 99.45765904017857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , double ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , epsilon ) >=0) {",
            "score": 99.44695638020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >= -1) {",
            "score": 99.50994873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils <= compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils <= compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0, epsilon ) {",
            "score": 99.47069149925595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , true ) >=0) {",
            "score": 99.46749441964286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <=0)",
            "score": 99.44644504123264,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry -0, epsilon ) >=0) {",
            "score": 99.5098293138587,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , epsilon , epsilon ) >=0) {",
            "score": 99.49388485863095,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) ==1) {",
            "score": 99.49004163240132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) == 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) >0) {",
            "score": 99.4458869485294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatioPos ) >1) {",
            "score": 99.50977623980978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(1, entry ,0, epsilon ) >=0) {",
            "score": 99.49589206861413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 1 , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.max , epsilon ) >=0) {",
            "score": 99.47058686755952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . max , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ,1) >=0) {",
            "score": 99.466552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, new Integer( entry ) ) >=0) {",
            "score": 99.44553736636513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , new Integer ( entry ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& entry ) {",
            "score": 99.5097125509511,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.50384162454044,
            "correctness": "uncompilable",
            "tokenized_patch": "return Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= minRatioPos ) {",
            "score": 99.4955417798913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double =0, epsilon ) >=0) {",
            "score": 99.49360795454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double = 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <0)",
            "score": 99.44535609654018,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) <=0)",
            "score": 99.50382486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >= -1) {",
            "score": 99.49549449573864,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <1, epsilon ) >=0) {",
            "score": 99.470458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6) >=0) {",
            "score": 99.44515787760416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2) >=0) {",
            "score": 99.44515787760416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *0.0) {",
            "score": 99.50344981317934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math <= MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4952976392663,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math <= Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry =0, epsilon ) >=0) {",
            "score": 99.49336170014881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry = 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) <=0) {",
            "score": 99.48983909970238,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( Math.compareTo( entry , new Double( epsilon ) ) >=0) {",
            "score": 99.48250325520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , new Double ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, col ) >=0) {",
            "score": 99.46995907738095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| Math.compare( entry ,0) >=0) {",
            "score": 99.44511975740132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 || Math . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, epsilon ) <=0) {",
            "score": 99.50335138494319,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0) final",
            "score": 99.49523344494048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, rhs ) >=0) {",
            "score": 99.4923095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) >=0.0) {",
            "score": 99.48235212053571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) ==0) {",
            "score": 99.46574964021382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0, epsilon ) >0) {",
            "score": 99.45683361235119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) <0) {",
            "score": 99.44440104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >=1) {",
            "score": 99.5089175575658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon >0)",
            "score": 99.50286865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= <=0) {",
            "score": 99.4920654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) <=0) {",
            "score": 99.48902529761905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) <=0) {",
            "score": 99.48902529761905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.false , epsilon ) >=0) {",
            "score": 99.4697498139881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . false , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) ==0) {",
            "score": 99.46559053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , 'AS IS') >=0) {",
            "score": 99.45682198660714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , 'License') >=0) {",
            "score": 99.45682198660714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) !=0) {",
            "score": 99.44439338235294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <0|| epsilon ) {",
            "score": 99.5028659986413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) throws Exception {",
            "score": 99.49483058763587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) throws Exception {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= -1) {",
            "score": 99.48900146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon + epsilon ) >=0) {",
            "score": 99.44398257606908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry /6) >=0) {",
            "score": 99.49475628396739,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry /2) >=0) {",
            "score": 99.49475628396739,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, epsilon ) ) {",
            "score": 99.4692318564967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < ) {",
            "score": 99.45675659179688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, new Double( epsilon ) >=0) ) {",
            "score": 99.44392475328948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , new Double ( epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, entry ) ) {",
            "score": 99.50788959703948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true , epsilon ) >=0) { {",
            "score": 99.4913330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) ) {",
            "score": 99.4814685639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , f , epsilon ) >=0) {",
            "score": 99.46505301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , f , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, epsilon ) >=0) {",
            "score": 99.45662195542279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) ==0) {",
            "score": 99.44380457261029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon /1) <0) {",
            "score": 99.49471382472827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / 1 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo(0,0, epsilon ) >=0) {",
            "score": 99.49114026521382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) >0.0) {",
            "score": 99.44353284333882,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max( entry ,0.2) >0.0) {",
            "score": 99.44353284333882,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( true || MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50191066576087,
            "correctness": "wrong",
            "tokenized_patch": "if ( true || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0) <=0) {",
            "score": 99.4880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isNaN( entry ,0, epsilon ) ) {",
            "score": 99.481201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Na CaMeL N ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >=0)",
            "score": 99.46907958984374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.1) >=0) {",
            "score": 99.46500436883224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,( double ) epsilon ) >=0)",
            "score": 99.44310238486842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , ( double ) epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , *0, epsilon ) >=0) {",
            "score": 99.50693581321023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , * 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0) { final double entry = tableau.getEntry( i , col ) ; final",
            "score": 99.50167846679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry <= 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ; final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( true , entry ,0, epsilon ) >=0) {",
            "score": 99.49452275815217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( true , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0) <0) {",
            "score": 99.48792724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0.0) >=0) {",
            "score": 99.48109654017857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1,6) >=0) {",
            "score": 99.46494838169643,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1,2) >=0) {",
            "score": 99.46494838169643,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( Math.compare( entry , i , epsilon ) >=0) {",
            "score": 99.4430290670956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, epsilon ) <0) {",
            "score": 99.50682484019886,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math : compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50162546258224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math : compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0i ) {",
            "score": 99.49027876420455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) !=0, epsilon ) {",
            "score": 99.48786272321429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) != 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -6)",
            "score": 99.4689708891369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= -2)",
            "score": 99.4689708891369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , entry ,0) >=0) {",
            "score": 99.46478562127976,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , entry , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, null ) >=0) {",
            "score": 99.45625385485198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0|| Math.compare( entry ,0) >=0) {",
            "score": 99.4429995888158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 || Math . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math : MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.50159222146739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math : Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry == null && Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.49401324728261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == null && Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& { {",
            "score": 99.48989035866477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, entry ) >=0.0) {",
            "score": 99.48091052827381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= -1) {",
            "score": 99.46471557617187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) - epsilon ) {",
            "score": 99.45621744791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) - epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >= minRatio ) {",
            "score": 99.50640314275569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry <0) ) >=0) {",
            "score": 99.48985072544643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry < 0 ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry +0, epsilon ) >=0) {",
            "score": 99.487548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.valueOf( entry ,0, epsilon ) >=0) {",
            "score": 99.46463815789474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . value CaMeL Of ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=1.0) {",
            "score": 99.44249203330592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , Double.MAX_VALUE ) >=0) {",
            "score": 99.49385402513587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , Double . MAX _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, entry ) >=0) {",
            "score": 99.4646228608631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon && Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.44211939761513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon && Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) )",
            "score": 99.46451144748264,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) <0) {",
            "score": 99.44200846354167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >=6) {",
            "score": 99.50582449776786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >=2) {",
            "score": 99.50582449776786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon , epsilon ) >=0) {",
            "score": 99.5014139811198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) >0) {",
            "score": 99.48008510044643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >0) {",
            "score": 99.46442727481617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1.0) >=0.0) {",
            "score": 99.44195235402961,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >= -1) {",
            "score": 99.50553755326705,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0) { final",
            "score": 99.50132057883523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >> entry ) >=0) {",
            "score": 99.4934718919837,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >> entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, -1) >=0)",
            "score": 99.46835472470238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , - 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon , entry ,0) >=0) {",
            "score": 99.4642269736842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >= ) {",
            "score": 99.45547340029762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ==0)",
            "score": 99.44144015842014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0,0) {",
            "score": 99.50508045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon && epsilon ) >0) {",
            "score": 99.50129500679348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon && epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, minRatioPos ) >=0) {",
            "score": 99.49338697350544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , min CaMeL Ratio CaMeL Pos ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false ,0) >=0) {",
            "score": 99.48865327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon && epsilon ) >=0) {",
            "score": 99.4794689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon && epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0/ entry ) >=0) {",
            "score": 99.46827334449405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ,0) >=0) {",
            "score": 99.46397181919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=0, epsilon ) {",
            "score": 99.4554443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, epsilon ) <0) {",
            "score": 99.4413703469669,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, epsilon ) <0) {",
            "score": 99.4413703469669,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) >=1) {",
            "score": 99.50495256696429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0,0, epsilon ) >0) {",
            "score": 99.50121008831522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -6) >=0) {",
            "score": 99.49338697350544,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -2) >=0) {",
            "score": 99.49338697350544,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( l ,0, epsilon ) >=0) {",
            "score": 99.48826962425595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( l , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) [0] ) {",
            "score": 99.48663884943181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) [ 0 ] ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ,0) >=0)",
            "score": 99.46824340820312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >= -1) {",
            "score": 99.46357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= ) {",
            "score": 99.45540771484374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.POSITIVE_INFINITY ) >=0) {",
            "score": 99.44123278166118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . POSITIVE _ INFINITY ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >0)",
            "score": 99.50103759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >= minRatioPos ) {",
            "score": 99.49336574388587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0, true ) {",
            "score": 99.48651413690476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 , true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) >0) {",
            "score": 99.45535714285714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0) { {",
            "score": 99.4411849975586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon +0) >=0) {",
            "score": 99.50093410326087,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon + 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) >0) {",
            "score": 99.441064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) return",
            "score": 99.49293154761905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon.epsilon ) >=0) {",
            "score": 99.47929454985119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >=0)",
            "score": 99.46784125434027,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) !=0) {",
            "score": 99.46284412202381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > ) {",
            "score": 99.455029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=1) {",
            "score": 99.44050149356617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= -0) {",
            "score": 99.4862948330966,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= - 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==1, epsilon ) >=0) {",
            "score": 99.46736653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , epsilon ) >=0.0) {",
            "score": 99.44043686810662,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) >0) {",
            "score": 99.50406901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) >0) {",
            "score": 99.50406901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >> -1) >=0) {",
            "score": 99.50050862630208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >> - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -0, epsilon ) >=0) { {",
            "score": 99.48661665482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) ==0) {",
            "score": 99.48580496651786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) ==0) {",
            "score": 99.47920154389881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=0)",
            "score": 99.46708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) >=0.0) {",
            "score": 99.4403564453125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , true , epsilon ) >=0) {",
            "score": 99.50404759457237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) ==0) {",
            "score": 99.46708751860119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.compare(0, epsilon , epsilon ) >=0) {",
            "score": 99.44030043658088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo(0, epsilon , epsilon ) >=0) {",
            "score": 99.48616750616776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=6) {",
            "score": 99.48560732886905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=2) {",
            "score": 99.48560732886905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0, epsilon ) >=0) {",
            "score": 99.47873406661184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= ) {",
            "score": 99.45432535807292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0.6) >=0) {",
            "score": 99.44015984786184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0.2) >=0) {",
            "score": 99.44015984786184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] ,0, epsilon ) >=0)",
            "score": 99.50036090353261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs , epsilon ) >=0) {",
            "score": 99.46680972450658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , null ) >=0) {",
            "score": 99.43965657552083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==0, epsilon ) {",
            "score": 99.50345284598214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4920321377841,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0) <0) ) {",
            "score": 99.48536318824405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon.epsilon ) >=0) {",
            "score": 99.47823660714286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert( MathUtils.compareTo( entry ,0, epsilon ) >=0) ;",
            "score": 99.46658761160714,
            "correctness": "uncompilable",
            "tokenized_patch": "assert ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=0, epsilon ) {",
            "score": 99.50323195684524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( null ,0, epsilon ) >=0) {",
            "score": 99.4855724516369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( null , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] ,0) >=0) {",
            "score": 99.4852627840909,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) ==0) {",
            "score": 99.4780505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,1,0) >=0) {",
            "score": 99.4619373139881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 1 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this , entry ,0) >=0) {",
            "score": 99.45381091889881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >=0>=0) {",
            "score": 99.43948524876645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=6) {",
            "score": 99.50240652901786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >=2) {",
            "score": 99.50240652901786,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0) { entry = tableau.getEntry( i , col ) ;",
            "score": 99.50013950892857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , col ) >=0) {",
            "score": 99.49198986235119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , col ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= <0) {",
            "score": 99.4853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0) { ) {",
            "score": 99.48525855654762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.abs( entry ) ) >=0) {",
            "score": 99.43941243489583,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( Math . abs ( entry ) ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , tableau.getWidth( ) ) >=0) {",
            "score": 99.49197520380434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , tableau . get CaMeL Width ( ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) >=0)",
            "score": 99.47756958007812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, this , epsilon ) >=0) {",
            "score": 99.46147228422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ,0, epsilon ) >=0) {",
            "score": 99.43939530222039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( 0 , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ,0, epsilon ) <0) {",
            "score": 99.49156122622283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.epsilon ) >=0.0) {",
            "score": 99.4771728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0<0) {",
            "score": 99.45355515252976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==1) {",
            "score": 99.50108578330592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=1)",
            "score": 99.49931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils != compareTo( entry ,0, epsilon ) ) {",
            "score": 99.48361045435855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils != compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0f ) >=0) {",
            "score": 99.47710571289062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >=1) {",
            "score": 99.43900792738971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < -1) {",
            "score": 99.484521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= epsilon ) { {",
            "score": 99.48353160511364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= epsilon ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.! compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.46566162109374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( list ,0, epsilon ) >=0) {",
            "score": 99.45333426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( list , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1.0) <0.0) {",
            "score": 99.43888774671052,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 . 0 ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , epsilon ) >0) {",
            "score": 99.50078381990132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry , col ) >=0) {",
            "score": 99.49072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , !0, epsilon ) >=0) {",
            "score": 99.4830322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ! 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=0.6) {",
            "score": 99.43873355263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=0.2) {",
            "score": 99.43873355263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double entry = tableau.getEntry( i , col ) ;",
            "score": 99.49886881510416,
            "correctness": "uncompilable",
            "tokenized_patch": "double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( Math.equals( entry ,0, epsilon ) ) >=0) {",
            "score": 99.49062278053977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Math . equals ( entry , 0 , epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col , col ) ;",
            "score": 99.46513536241319,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.46107700892857,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) <=0) {",
            "score": 99.43871131310097,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| epsilon <0)",
            "score": 99.4987080891927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) >0) {",
            "score": 99.49041426809211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) <=0) {",
            "score": 99.47683233963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( Long.MAX_VALUE , entry ) >=0) {",
            "score": 99.43865645559211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Long . MAX _ VALUE , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, entry ) ) {",
            "score": 99.50043045847039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon length -1) >=0) {",
            "score": 99.49861653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon length - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry ,0, epsilon ) <0) {",
            "score": 99.49040421195652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry ,0, epsilon ) <0) {",
            "score": 99.49040421195652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, entry ) >=0) {",
            "score": 99.48436337425595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon ,0) >=0) {",
            "score": 99.48273577008929,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.47682100183823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.contains( entry ,0, epsilon ) ) {",
            "score": 99.46409505208334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . contains ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , epsilon ) <0) {",
            "score": 99.45253208705357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.6) <0.6) {",
            "score": 99.43846371299342,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) < 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,0.2) <0.2) {",
            "score": 99.43846371299342,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ ) < 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ,0) <0) {",
            "score": 99.49019191576087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double = epsilon ) >=0) {",
            "score": 99.48273259943181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double = epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.46091180098684,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >0.0) {",
            "score": 99.43818744860198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) > 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) <=0)",
            "score": 99.49778053977273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double ,0, epsilon ) >=0) {",
            "score": 99.48200017755681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >0) )",
            "score": 99.4634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon > 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { }",
            "score": 99.46088256835938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { final",
            "score": 99.49774169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , -0) >=0) {",
            "score": 99.48390891335227,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , - 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon + epsilon ) >=0) {",
            "score": 99.47574869791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) >=0)",
            "score": 99.46340603298611,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry , epsilon ) ) {",
            "score": 99.4522705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=0>=0) {",
            "score": 99.43795615748355,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.49764351222827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) <0) {",
            "score": 99.47546968005952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) >= epsilon ) {",
            "score": 99.45225306919643,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) >=0, epsilon ) {",
            "score": 99.498779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( true ) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.49763997395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( true ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) == -0) {",
            "score": 99.4831875887784,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == - 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.isEmpty( entry ,0, epsilon ) ) {",
            "score": 99.47525827508224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Empty ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) >=0)",
            "score": 99.46295844184027,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.! compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.48947975852273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ! compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=0) { {",
            "score": 99.48142311789773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0, epsilon ) ) {",
            "score": 99.46274928042763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.) >=0) {",
            "score": 99.43733045789931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=0, epsilon ) {",
            "score": 99.49823319284539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= minRatio ) { {",
            "score": 99.49752807617188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) <=0) {",
            "score": 99.46262078536184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Double( entry ) >=0) ) {",
            "score": 99.43730083264802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Double ( entry ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= minRatioPos ) {",
            "score": 99.4888226052989,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+0) >=0) {",
            "score": 99.48252650669643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= this ) {",
            "score": 99.48114304315476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= this ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.4599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry , epsilon ) >=0) {",
            "score": 99.43711942784927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new entry ,0, epsilon ) >=0) {",
            "score": 99.4972811612216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0&& entry >=0)",
            "score": 99.4971415201823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 && entry >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) >=1) {",
            "score": 99.45977492559524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, distance ) >=0) {",
            "score": 99.45057896205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , distance ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0, entry ) >=0) {",
            "score": 99.4369255514706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon == minRatio ) ) {",
            "score": 99.4970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon == min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=6) {",
            "score": 99.49674907483552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=2) {",
            "score": 99.49674907483552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , this.epsilon ) >=0) {",
            "score": 99.48227074032738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , this . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry +1) >=0) {",
            "score": 99.47417922247024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry + 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) !=0) {",
            "score": 99.45969752261513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0-0) {",
            "score": 99.45027669270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon <0) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.49705969769022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon < 0 ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0, epsilon ) <0) {",
            "score": 99.48786727241848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0,0) {",
            "score": 99.48227074032738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=0) { {",
            "score": 99.47417534722223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <= minRatio )",
            "score": 99.4605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon +0) >=0) {",
            "score": 99.4502185639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon + 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon & epsilon ) >=0) {",
            "score": 99.4968898607337,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon & epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isEmpty( entry ,0, epsilon ) >=0) {",
            "score": 99.4741443452381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Empty ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >0)",
            "score": 99.46055908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, minRatio ) >=0) {",
            "score": 99.49603562127976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.- entry ) >=0) {",
            "score": 99.47813831676136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . - entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >=6) {",
            "score": 99.46039109002976,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) >=2) {",
            "score": 99.46039109002976,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) ) {",
            "score": 99.45953047902961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) >=0)",
            "score": 99.43611907958984,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , epsilon ) <=0) {",
            "score": 99.49614025297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= >0) {",
            "score": 99.49510609019886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , entry ) >=0) {",
            "score": 99.487548828125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, null ) >=0) {",
            "score": 99.45940290178571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon | epsilon ) >=0) {",
            "score": 99.4957859205163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon | epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, epsilon ) <0) {",
            "score": 99.48074501439145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry &&0, epsilon ) >=0) {",
            "score": 99.47748093377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry && 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.epsilon ) >=0.0) {",
            "score": 99.47309955797698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.45991443452381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(1, entry , epsilon ) >=0) {",
            "score": 99.48036411830357,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 1 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry1,0, epsilon ) >=0) {",
            "score": 99.4773282137784,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry 1 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, entry ) <0) {",
            "score": 99.45970517113095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon6) >=0) {",
            "score": 99.4359130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon2) >=0) {",
            "score": 99.4359130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) >=1) {",
            "score": 99.49475678943452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon /0) >=0) {",
            "score": 99.48709239130434,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon / 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) ==0) {",
            "score": 99.48023623511905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) ==0) {",
            "score": 99.48023623511905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0, epsilon ) >0) {",
            "score": 99.45958187705592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) >0) {",
            "score": 99.44935825892857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.round( entry ) >0) {",
            "score": 99.435546875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > -0) {",
            "score": 99.4955166903409,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > - 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, epsilon ) <0) {",
            "score": 99.47956194196429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) >=0) { {",
            "score": 99.4772616299716,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon && epsilon ) >=0) {",
            "score": 99.47206333705357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon && epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) <0)",
            "score": 99.45942125822368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0+0) {",
            "score": 99.44933500744048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 + 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,1.0) >=0) {",
            "score": 99.43549661075367,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 1 . 0 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , epsilon ) >0) {",
            "score": 99.49444289434524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) ==0) {",
            "score": 99.48676990327381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) >=1) {",
            "score": 99.4794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) !=0) {",
            "score": 99.44926901424633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) >0) {",
            "score": 99.43533145680146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.49547809103261,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =1; i < tableau.getHeight( ) ; i ++ ) {",
            "score": 99.48671653053977,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 1 ; i < tableau . get CaMeL Height ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, epsilon , epsilon ) >=0) {",
            "score": 99.47942243303571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, Math.epsilon ) >=0) {",
            "score": 99.47085425967262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , Math . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( ! entry ,0, epsilon ) >=0) {",
            "score": 99.45912475585938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( ! entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >0)",
            "score": 99.4352798461914,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *minRatio )",
            "score": 99.49518377130681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry + 'AS IS', epsilon ) >=0) {",
            "score": 99.47931780133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry + 'License', epsilon ) >=0) {",
            "score": 99.47931780133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) ==0) {",
            "score": 99.47066824776786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,6,0) >=0) {",
            "score": 99.45903087797619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,2,0) >=0) {",
            "score": 99.45903087797619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [0] , epsilon ) >=0)",
            "score": 99.45878673735119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ 0 ] , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) < entry ) {",
            "score": 99.4487537202381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < entry ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , false , epsilon ) >=0) {",
            "score": 99.43410357306985,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , false , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, entry ) >=1) {",
            "score": 99.49332682291667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double rhs ) >=0) {",
            "score": 99.47652762276786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& entry >=0) {",
            "score": 99.47036597842262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, epsilon ) !=0) {",
            "score": 99.45875186011905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, this.epsilon ) >=0) {",
            "score": 99.44864908854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , this . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , 'AS IS', epsilon ) >=0) {",
            "score": 99.43406918174342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , 'License', epsilon ) >=0) {",
            "score": 99.43406918174342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( list , entry ,0, epsilon ) >=0) {",
            "score": 99.49495796535327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( list , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) !=1) {",
            "score": 99.47919664884868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) != 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( long ,0, epsilon ) >=0) {",
            "score": 99.47627185639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( long , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0, epsilon ) >=0.6) {",
            "score": 99.47028459821429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0, epsilon ) >=0.2) {",
            "score": 99.47028459821429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, hash ) >=0) {",
            "score": 99.45848446800595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , hash ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) <=0) {",
            "score": 99.45836821056548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ,0.0) >=0) {",
            "score": 99.43392783717105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( 0 , entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { return entry ;",
            "score": 99.49493408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { return entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=6) {",
            "score": 99.48588634672619,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=2) {",
            "score": 99.48588634672619,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( minRatio , epsilon ) >=0) {",
            "score": 99.47617885044643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( min CaMeL Ratio , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.6) >=0) {",
            "score": 99.47015671502976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.2) >=0) {",
            "score": 99.47015671502976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final synchronized( MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.4583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "final synchronized ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ,0, epsilon ) >=0) {",
            "score": 99.43381219161184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( epsilon , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) >= minRatio ) {",
            "score": 99.48582821800595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= null ) { {",
            "score": 99.47594105113636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= null ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >=1) {",
            "score": 99.45839329769737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) ) {",
            "score": 99.433544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry , MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.49481201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry , Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) <=0) {",
            "score": 99.48575846354167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( double ) rhs ) >=0) {",
            "score": 99.475341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( double ) rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& epsilon ==0) {",
            "score": 99.46963355654762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && epsilon == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= minRatio )",
            "score": 99.458251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( ! entry ,0, epsilon ) >=0) {",
            "score": 99.45819091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( ! entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, null ) >=0) {",
            "score": 99.44849917763158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.endsWith( entry ,0, epsilon ) ) {",
            "score": 99.46958521792763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ends CaMeL With ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ,0) >=0)",
            "score": 99.45823364257812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( start , entry , epsilon ) >=0) {",
            "score": 99.44847470238095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( start , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, value ) >=0) {",
            "score": 99.43349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0, epsilon ) >0) {",
            "score": 99.49437415081522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >=0, epsilon ) {",
            "score": 99.47810444078948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, new Integer( epsilon ) ) >=0) {",
            "score": 99.46957542782738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , new Integer ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >= minRatio )",
            "score": 99.45820545014881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) <0) {",
            "score": 99.43343955592105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , - ,0, epsilon ) >=0) {",
            "score": 99.4938434103261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >> <0) {",
            "score": 99.48471901633523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >> < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0,",
            "score": 99.47783813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6f ) >=0) {",
            "score": 99.43325466579861,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2f ) >=0) {",
            "score": 99.43325466579861,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) <= minRatio ) {",
            "score": 99.4938434103261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) <= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >=0, epsilon ) {",
            "score": 99.49075753348214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >=0, epsilon ) {",
            "score": 99.49075753348214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) !=0) {",
            "score": 99.47752743675595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) !=0) {",
            "score": 99.47752743675595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& true ) {",
            "score": 99.45784505208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) ) >=0)",
            "score": 99.43312581380208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { return epsilon ;",
            "score": 99.49381510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { return epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=0) { {",
            "score": 99.46896701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) !=0) {",
            "score": 99.45779854910714,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS') >=0) {",
            "score": 99.43275210731908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License') >=0) {",
            "score": 99.43275210731908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0&& entry >=0)",
            "score": 99.49367268880208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 && entry >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) < minRatio ) {",
            "score": 99.48434012276786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, entry , epsilon ) >=0) {",
            "score": 99.47700427827381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0>=0) {",
            "score": 99.43248075597427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { i ++ ;",
            "score": 99.49364217122395,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { i ++ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "13"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ epsilon ) ==0) {",
            "score": 99.47630673363095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ rhs ) >=0) {",
            "score": 99.45771716889881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) !=0) {",
            "score": 99.43243049172794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - ; }",
            "score": 99.48982747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) <=0) {",
            "score": 99.48406018708882,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) <=0) {",
            "score": 99.47623697916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) <=0) {",
            "score": 99.47623697916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0, entry ) >=0) {",
            "score": 99.45757765997024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0,0) ) {",
            "score": 99.44735863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0) <0) >=0) {",
            "score": 99.43207108347039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 ) < 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) <=0) )",
            "score": 99.4932861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) <=0) {",
            "score": 99.46849300986842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, rhs ) >=0) {",
            "score": 99.45747302827381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ,0) >=0) {",
            "score": 99.45728824013158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon )0) {",
            "score": 99.44735717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Long( epsilon ) ) >=0) {",
            "score": 99.43201968544408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Long ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) >0) {",
            "score": 99.49326869419643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >0) {",
            "score": 99.48337689568015,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,6, epsilon ) >=0) {",
            "score": 99.47169078480114,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,2, epsilon ) >=0) {",
            "score": 99.47169078480114,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry +0, epsilon ) >=0) {",
            "score": 99.44725399925595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.6) >=0) {",
            "score": 99.43194901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.2) >=0) {",
            "score": 99.43194901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=1, entry ) >=0) {",
            "score": 99.48960658482143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry /1) >=0) {",
            "score": 99.48322405133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry / 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.47165749289773,
            "correctness": "uncompilable",
            "tokenized_patch": "{ if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >0) {",
            "score": 99.45693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) <=0) {",
            "score": 99.4317985983456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry [ i ] ,0, epsilon ) <0) {",
            "score": 99.4929911295573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry [ i ] , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , -1) >=0) {",
            "score": 99.48876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) final",
            "score": 99.48321854440789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS',0) >=0) {",
            "score": 99.47541155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License',0) >=0) {",
            "score": 99.47541155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( i ,0, epsilon ) >=0)",
            "score": 99.4567626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( i , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo(0, entry ,0) >=0) {",
            "score": 99.45651084498355,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0+ epsilon ) {",
            "score": 99.44694010416667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 + epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) !=0) {",
            "score": 99.49297540838069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) <1) {",
            "score": 99.48822312127976,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) < 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( value ,0, epsilon ) >=0) {",
            "score": 99.483154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( value , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , entry ) >=0) {",
            "score": 99.47528366815476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >= epsilon ) {",
            "score": 99.46826171875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= i )",
            "score": 99.45646362304687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= i )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , new Double( entry ) ) >=0) {",
            "score": 99.43129368832237,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , new Double ( entry ) ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon false ) >=0) {",
            "score": 99.49289772727273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) < minRatio ) ) {",
            "score": 99.48303753396739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) < min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) <0, epsilon ) {",
            "score": 99.47524879092262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry , epsilon ) >=0) {",
            "score": 99.43088892886513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry >0)",
            "score": 99.49270629882812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, FALSE ) >=0) {",
            "score": 99.47086588541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , FALSE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=1) {",
            "score": 99.46744577508224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ,0.0) >=0) {",
            "score": 99.43081825657895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) > minRatio ) {",
            "score": 99.49265455163044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) > min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) &0-1) {",
            "score": 99.4829738451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) & 0 - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >= epsilon ) {",
            "score": 99.4671630859375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >0) {",
            "score": 99.44655247738487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, 'AS IS') >=0) {",
            "score": 99.43072831003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, 'License') >=0) {",
            "score": 99.43072831003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=0, rhs ) {",
            "score": 99.48275093410327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 , rhs ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, this.epsilon ) >=0) {",
            "score": 99.46660413240132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , this . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) <=0) {",
            "score": 99.4560314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=6, epsilon ) >=0) {",
            "score": 99.455322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=2, epsilon ) >=0) {",
            "score": 99.455322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.) <=0) {",
            "score": 99.43069458007812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >=0, epsilon ) {",
            "score": 99.48640580610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0|| epsilon ) {",
            "score": 99.4750744047619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , new Double( epsilon ) ) >=0) {",
            "score": 99.4303042763158,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , new Double ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >= -1) {",
            "score": 99.48628373579545,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >= -1) {",
            "score": 99.48628373579545,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0.0) {",
            "score": 99.45586194490132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) <0)",
            "score": 99.454833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) !=0)",
            "score": 99.43024444580078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compareTo( entry , epsilon ) >=0) {",
            "score": 99.45577392578124,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry != minRatioPos ) ) {",
            "score": 99.45471772693452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != min CaMeL Ratio CaMeL Pos ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0>=0) {",
            "score": 99.44614955357143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( entry ) ) <0) {",
            "score": 99.43013723273026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( entry ) ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0) continue ;",
            "score": 99.4920321377841,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) continue ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , epsilon ) ) {",
            "score": 99.45565635279605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0.0)",
            "score": 99.43002658420139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0) >=1) {",
            "score": 99.47437133789063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -0, entry ) >=0) {",
            "score": 99.47029622395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( this , entry , epsilon ) >=0) {",
            "score": 99.45548288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( this , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon ,0.0) >=0.0) {",
            "score": 99.42995733963816,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , 0 . 0 ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.i , epsilon ) <=0) {",
            "score": 99.4914783296131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . i , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , this , entry ) >=0) {",
            "score": 99.48567708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , this , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new0, epsilon ) >=0) {",
            "score": 99.47019264914773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.epsilon ) >=0.0) {",
            "score": 99.46484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.1, epsilon ) >=0) {",
            "score": 99.4554379111842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, rhs ) >=0) {",
            "score": 99.4543224516369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0) >=0) >0) {",
            "score": 99.4457775297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 ) >= 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0, epsilon ) >=0)",
            "score": 99.42981635199652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.entry ,0, epsilon ) >0) {",
            "score": 99.49138077445652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) >=0, epsilon ) {",
            "score": 99.48564220610119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , entry ) <0) {",
            "score": 99.48159644717262,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0? epsilon ;",
            "score": 99.46974875710227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ? epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.) <0) {",
            "score": 99.42975616455078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) { final double entry = tableau.getEntry( i , col ) ;",
            "score": 99.49135044642857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false ) { final double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) <=0) {",
            "score": 99.47364566200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this ,0, entry ) >=0) {",
            "score": 99.4697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) !=0) {",
            "score": 99.46444847470238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) ==0) {",
            "score": 99.4292056435033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon - epsilon ) >0) {",
            "score": 99.49123216711956,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - epsilon ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, true ) <0) {",
            "score": 99.47364443824405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , true ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this , entry ) >=0) {",
            "score": 99.4696044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, i ) >=0) {",
            "score": 99.46408562911184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.1, epsilon ) >=0)",
            "score": 99.45346069335938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.44528680098684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ,0) >=0) {",
            "score": 99.42899816176471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) ==0) {",
            "score": 99.485107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ,0) >=0) {",
            "score": 99.47929944490132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( tableau ,0, epsilon ) >=0) {",
            "score": 99.46927315848214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( tableau , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0.0) >0) {",
            "score": 99.42892295435855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 . 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& MathUtils.compareTo( entry ,0, epsilon ) >0)",
            "score": 99.49119059244792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >=1) {",
            "score": 99.48481830797698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >=1) {",
            "score": 99.48481830797698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, minRatioPos ) <0) {",
            "score": 99.47920154389881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , min CaMeL Ratio CaMeL Pos ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ) >=0) { {",
            "score": 99.4692138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0, epsilon ) <=0) {",
            "score": 99.46387881324405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compareTo( entry ,0) >=0) {",
            "score": 99.45377197265626,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0) { {",
            "score": 99.4532958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <=0.0) {",
            "score": 99.42889725534539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < tableau.getHeight( ) ; i ++ ) {",
            "score": 99.47899280894886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < tableau . get CaMeL Height ( ) ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > -1)",
            "score": 99.4531482514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= entry ) {",
            "score": 99.44476639597039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=6) {",
            "score": 99.42871811810662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=2) {",
            "score": 99.42871811810662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=0, epsilon ) {",
            "score": 99.48445852179276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', rhs ) >=0) {",
            "score": 99.47850399925595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', rhs ) >=0) {",
            "score": 99.47850399925595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, - entry ) >=0) {",
            "score": 99.4685391512784,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , - entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , new Double( entry ) ) >=0) {",
            "score": 99.4636462983631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , new Double ( entry ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , -1, epsilon ) >=0) {",
            "score": 99.484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry -0, epsilon ) >=0) {",
            "score": 99.47257915296052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.-1) >=0) {",
            "score": 99.46833939985795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( *Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.44432373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( * Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0.0) >=0)",
            "score": 99.42856852213542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.49048913043478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <0, epsilon ) {",
            "score": 99.48399135044643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this.entry , epsilon ) >=0) {",
            "score": 99.47257486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this . entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=06) {",
            "score": 99.46820623224431,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=02) {",
            "score": 99.46820623224431,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , -0, epsilon ) >=0) {",
            "score": 99.45328369140626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.-0, entry ) >=0)",
            "score": 99.4524158296131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . - 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *0)",
            "score": 99.49038696289062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) )",
            "score": 99.44347563244048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, epsilon ) >=0)",
            "score": 99.42828369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= false ) { {",
            "score": 99.46727405894886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= false ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon && epsilon ) >=0) {",
            "score": 99.46330823396382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon && epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,6, epsilon ) >=0) {",
            "score": 99.42828010110294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,2, epsilon ) >=0) {",
            "score": 99.42828010110294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=0) { {",
            "score": 99.46327718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= entry ) {",
            "score": 99.44329512746711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) >0)",
            "score": 99.42790985107422,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon ) { MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.48928833007812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ==0, epsilon ) {",
            "score": 99.47236560639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( *entry ,0, epsilon ) >=0) {",
            "score": 99.46718528053977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( * entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0.epsilon ) >=0) {",
            "score": 99.4631580171131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0) >=0)",
            "score": 99.45180935329861,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) >=0)",
            "score": 99.42787170410156,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) >=0)",
            "score": 99.42787170410156,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& epsilon <=0)",
            "score": 99.48928833007812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >= -1) {",
            "score": 99.48297674005681,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) >= - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon ) >=0) { {",
            "score": 99.46680908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.45257889597039,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0) >=0) {",
            "score": 99.443115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0|| MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.48917643229167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compareTo( entry ,0, entry ) >=0) {",
            "score": 99.47625177556819,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( compare( entry ,0, epsilon ) >=0) ) {",
            "score": 99.4720458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( compare ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.NaN( entry ,0, epsilon ) >=0) {",
            "score": 99.4626232328869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . Na CaMeL N ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i ) <0) {",
            "score": 99.47615131578948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1) <=0) {",
            "score": 99.47178890830592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , value ,0) >=0) {",
            "score": 99.46257672991071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , value , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, -0) >=0) {",
            "score": 99.45225830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) -0) {",
            "score": 99.44282459077381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) <0) {",
            "score": 99.42721737132354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) >=1) {",
            "score": 99.4828369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, entry ,0) >=0) {",
            "score": 99.4714587983631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >=0) { }",
            "score": 99.46644176136364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, value ) >=0)",
            "score": 99.46256103515626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , value ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , length , epsilon ) >=0) {",
            "score": 99.45219494047619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , length , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >= minRatio ) {",
            "score": 99.45137746710526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=0) { {",
            "score": 99.42715115017361,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, rhs ) >=0) ) {",
            "score": 99.47607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <1) {",
            "score": 99.47132632606908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( rhs ,0, epsilon ) >=0) {",
            "score": 99.46636408025569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, abs ) >=0) {",
            "score": 99.45206705729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , abs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0, epsilon ) <=0.0) {",
            "score": 99.46208844866071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <6) {",
            "score": 99.42660701976104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <2) {",
            "score": 99.42660701976104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , tableau , epsilon ) >=0) {",
            "score": 99.48208472842262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , tableau , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.0,0) >=0) {",
            "score": 99.4709536903783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0+ entry ) {",
            "score": 99.44217354910714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 + entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(( double ) entry ,0) >=0) {",
            "score": 99.42652045355902,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( ( double ) entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) < minRatio ) {",
            "score": 99.47577194940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0f ) >=0.0f ) {",
            "score": 99.46205357142857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 f ) >= 0 . 0 f ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.45169228001645,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon /1) >=0) {",
            "score": 99.45086960565476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon / 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo(0, epsilon ) >=0) {",
            "score": 99.42645622702206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , tableau.getWidth( ) ) >=0)",
            "score": 99.48834228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , tableau . get CaMeL Width ( ) ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, entry ) <0) ) {",
            "score": 99.47568147078805,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( f , entry , epsilon ) >=0) {",
            "score": 99.47055199032738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( f , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , MIN_VALUE ) >=0) {",
            "score": 99.46612258184524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , MIN _ VALUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <=0) { {",
            "score": 99.46163940429688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) <= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, col ) >=0) {",
            "score": 99.4507068452381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , col ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.abs( epsilon ) >0) {",
            "score": 99.42543381911058,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= tableau ) {",
            "score": 99.48188709077381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= tableau ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon.epsilon ) >=0) {",
            "score": 99.46161179315476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.( entry ,0, epsilon ) >=0) {",
            "score": 99.45067681206598,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.1) >=0) {",
            "score": 99.42529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isNaN( entry ) >= epsilon ) {",
            "score": 99.4612972861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Na CaMeL N ( entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true , epsilon ) >=0)",
            "score": 99.45057983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) break ;",
            "score": 99.42426893446181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *6) {",
            "score": 99.46128627232143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *2) {",
            "score": 99.46128627232143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry , epsilon ) >=0) {",
            "score": 99.4512939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.min( entry ,0, epsilon ) >=0) {",
            "score": 99.45046515213816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . min ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) >0) {",
            "score": 99.4240478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0, false ) {",
            "score": 99.46908714657738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 , false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +1, entry ) >=0) {",
            "score": 99.46562267485119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , f ) >=0) {",
            "score": 99.46128627232143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , -0) >=0) {",
            "score": 99.45127563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, entry ) >=0) {",
            "score": 99.44170821340461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) <=0) {",
            "score": 99.42378504136029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) <=0) {",
            "score": 99.42378504136029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , epsilon ) <0) {",
            "score": 99.46890113467262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , false ) >=0) {",
            "score": 99.45124162946429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) <=0)",
            "score": 99.45043334960937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) ==0) {",
            "score": 99.42373477711396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry ,0, epsilon ) <=0) {",
            "score": 99.48787064985795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "entry = MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.46885172526042,
            "correctness": "uncompilable",
            "tokenized_patch": "entry = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0, epsilon ) <=0) {",
            "score": 99.46087937127976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon.1) >=0) {",
            "score": 99.45097423735119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon . 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, epsilon ) !=0) {",
            "score": 99.45023018973214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) -0) {",
            "score": 99.44145275297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { )",
            "score": 99.42361111111111,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <6) {",
            "score": 99.4810855263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <2) {",
            "score": 99.4810855263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ==0) ) >=0) {",
            "score": 99.4653087797619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry == 0 ) ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >= -0) {",
            "score": 99.4508544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( value ,0, epsilon ) >=0) {",
            "score": 99.4233039407169,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( value , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=0|| epsilon ) {",
            "score": 99.48780314127605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= -6) {",
            "score": 99.48029119318181,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= - $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= -2) {",
            "score": 99.48029119318181,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= - $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0, entry ) {",
            "score": 99.46857561383929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.4652987393466,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.45062546502976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 || Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , epsilon ) <=0) {",
            "score": 99.44974190848214,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compare( entry , false , epsilon ) >=0) {",
            "score": 99.44004420230263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , false , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , max ) >=0) {",
            "score": 99.42296549479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) <=0)",
            "score": 99.48751831054688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >= minRatio ) {",
            "score": 99.47994559151786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0) ) { {",
            "score": 99.46515570746527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.epsilon ) >=0.0) {",
            "score": 99.46040424547698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.! MathUtils.compareTo( entry ,0, epsilon ) )",
            "score": 99.44960239955357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) ) {",
            "score": 99.43988396139706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0) { {",
            "score": 99.42295328776042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, i , epsilon ) >=0) {",
            "score": 99.48750636888587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry -1) >=0) {",
            "score": 99.47989908854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=0) { ) {",
            "score": 99.47420601222827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , this ) >=0) {",
            "score": 99.46844803659539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , this ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , TRUE , epsilon ) >=0) {",
            "score": 99.46507626488095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , TRUE , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0+ epsilon ) >=0) {",
            "score": 99.45049758184524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=1) {",
            "score": 99.422412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { minRatioPos = i ; minRatioPos = i ;",
            "score": 99.4873046875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 ) { min CaMeL Ratio CaMeL Pos = i ; min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col , col ) <0) {",
            "score": 99.47410946800595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col , col ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) == 'AS IS') {",
            "score": 99.4682849702381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) == 'License') {",
            "score": 99.4682849702381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false ) >=0) {",
            "score": 99.46478592722039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| ! compareTo( entry ,0, epsilon ) ) {",
            "score": 99.43961181640626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || ! compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, ) >=0) {",
            "score": 99.4221420288086,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) + minRatio ) {",
            "score": 99.48726222826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) + min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=0, epsilon ) {",
            "score": 99.47905530427632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >= minRatio ) ) {",
            "score": 99.47381882440476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, entry ) >0) {",
            "score": 99.44933500744048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=1) {",
            "score": 99.42210286458334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ==0&& epsilon ) {",
            "score": 99.48716669497283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) == 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0) { ) {",
            "score": 99.47380264945652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0|| true ) {",
            "score": 99.46787806919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 || true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compare( entry , entry , epsilon ) >=0) {",
            "score": 99.44988403320312,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , -1) <0) {",
            "score": 99.44921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) epsilon ) {",
            "score": 99.4389892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, entry ) ==0) {",
            "score": 99.42202579273896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry <0)",
            "score": 99.4871317545573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >=6) {",
            "score": 99.47834123883929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) >=2) {",
            "score": 99.47834123883929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0,0, epsilon ) ) {",
            "score": 99.44980003720238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.decode( entry ,0, epsilon ) >=0) {",
            "score": 99.4379021139706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . decode ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >=0) { {",
            "score": 99.42186821831598,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0|| MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.4871114095052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry <= 0 || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >1) {",
            "score": 99.47832961309524,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >= minRatio ) {",
            "score": 99.47369706003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col ) >=0) { {",
            "score": 99.46469948508523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(6, entry ,0, epsilon ) >=0) {",
            "score": 99.44970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( $NUMBER$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(2, entry ,0, epsilon ) >=0) {",
            "score": 99.44970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( $NUMBER$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, entry ) >0) {",
            "score": 99.42120720358456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math( MathUtils.compareTo( entry ,0, epsilon ) >=0) ) {",
            "score": 99.48705037434895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <=0, epsilon ) {",
            "score": 99.46742466517857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) <= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& ) {",
            "score": 99.46441095525569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0/ epsilon ) >=0)",
            "score": 99.44850463867188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 / epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0,0) >=0) {",
            "score": 99.43746948242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1) >0) {",
            "score": 99.42076822916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) ==0) {",
            "score": 99.48694378396739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry !=0, entry ) >=0) {",
            "score": 99.47794382195724,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry != 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0) <0) {",
            "score": 99.46740141369048,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 ) < 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0,0) ) {",
            "score": 99.46429122121711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compare( entry , epsilon ) >=0) {",
            "score": 99.448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon1) >=0)",
            "score": 99.44843982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.4374267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1) >=0) {",
            "score": 99.420654296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >=0) { final",
            "score": 99.4866231282552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) <0) {",
            "score": 99.47788783482143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) { } else {",
            "score": 99.47301136363636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { */",
            "score": 99.44852120535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1.0) <0) {",
            "score": 99.42003676470588,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 . 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( Math.compare( entry ,0, entry ) >=0) ) {",
            "score": 99.47292608963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , entry ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, epsilon ) >=0) { {",
            "score": 99.46416681463069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, col ) >=0)",
            "score": 99.44828965928819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , col ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >0)",
            "score": 99.41987609863281,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, minRatio ) >=0) {",
            "score": 99.47734142485119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, minRatio ) >=0) {",
            "score": 99.47734142485119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , MathUtils.epsilon ) >=0) {",
            "score": 99.46702938988095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , Math CaMeL Utils . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,6) >=0) {",
            "score": 99.44772820723684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,2) >=0) {",
            "score": 99.44772820723684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon , epsilon ) >=0) {",
            "score": 99.41940487132354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean value = MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.48616536458333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean value = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry",
            "score": 99.47709728422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +1, epsilon ) <0) {",
            "score": 99.46691313244048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 1 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.max( entry ,0, epsilon ) >=0) {",
            "score": 99.447998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . max ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, entry ) >=0) {",
            "score": 99.4192756204044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, entry ) >=0) {",
            "score": 99.4192756204044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0*epsilon ) {",
            "score": 99.48615828804348,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 * epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , epsilon , epsilon ) >=0) {",
            "score": 99.46329752604167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) ==0) {",
            "score": 99.45775082236842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( epsilon , entry , epsilon ) >=0) {",
            "score": 99.44746479235198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( epsilon , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0) >=0) {",
            "score": 99.43439398871527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon , epsilon ) >=0)",
            "score": 99.41891818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) >=0) { final",
            "score": 99.48613947088069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= null ) {",
            "score": 99.47660900297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) >=0) true",
            "score": 99.46623091264205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) true",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,( double )0) >=0) {",
            "score": 99.4631014737216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ( double ) 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, epsilon ) <=0)",
            "score": 99.4478271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1, epsilon ) ) {",
            "score": 99.44738188244048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= -0) {",
            "score": 99.43409423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,1) >=0) {",
            "score": 99.41872989430146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,00, epsilon ) >=0) {",
            "score": 99.46306818181819,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) &0) {",
            "score": 99.45757765997024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) & 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0f ) >=0)",
            "score": 99.4182990579044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 f ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0,0, epsilon ) <=0) {",
            "score": 99.48597783627717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=1) {",
            "score": 99.47627527573529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( value ,0, epsilon ) <0) {",
            "score": 99.47109840029762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( value , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , epsilon ) >=0) { {",
            "score": 99.46286010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , i ) >=0) {",
            "score": 99.44781203497024,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , i ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) ==0) {",
            "score": 99.44708610983456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >0) {",
            "score": 99.4182861328125,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( new( entry ,0, epsilon ) >=0) )",
            "score": 99.48596722146739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >0) {",
            "score": 99.4758533296131,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry /1, epsilon ) >=0) {",
            "score": 99.47073800223214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry / 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +1, epsilon ) >=0) {",
            "score": 99.46526135896382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=0)",
            "score": 99.41765485491071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >=0) )",
            "score": 99.4859619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==6, epsilon ) >=0) {",
            "score": 99.47567894345238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==2, epsilon ) >=0) {",
            "score": 99.47567894345238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| { {",
            "score": 99.46256880326705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) >=0) { {",
            "score": 99.45713404605263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { } else",
            "score": 99.44756789434524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { } else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0f ) <0) {",
            "score": 99.41746690538194,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 f ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.48588053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 || Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry6, epsilon ) >=0) {",
            "score": 99.46248779296874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry2, epsilon ) >=0) {",
            "score": 99.46248779296874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean compare = MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.4475330171131,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean compare = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, entry ) >=0) {",
            "score": 99.44688013980263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) <0)",
            "score": 99.41727447509766,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0|| entry <=0)",
            "score": 99.48585001627605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || entry <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , epsilon ) >0) {",
            "score": 99.44725399925595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, doubleValue ) >=0) {",
            "score": 99.44673084077381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , double CaMeL Value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=0.0) {",
            "score": 99.43000873766448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >=0.0) {",
            "score": 99.41726505055146,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) { } else {",
            "score": 99.4857889811198,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col ) >0) {",
            "score": 99.4694591703869,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <= -1) {",
            "score": 99.46502075195312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, >=0) ) {",
            "score": 99.42869873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) <=0) {",
            "score": 99.417236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ||0, epsilon ) >=0) {",
            "score": 99.46201869419643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry || 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { { } else {",
            "score": 99.45635695684524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >0)",
            "score": 99.44696655273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >0)",
            "score": 99.44696655273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( epsilon ) >=0) )",
            "score": 99.41676161024306,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon -1) >=0) {",
            "score": 99.46940104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, epsilon ) ==0) {",
            "score": 99.46481162623355,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ++0, epsilon ) >=0) {",
            "score": 99.46192568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ++ 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { { {",
            "score": 99.45635695684524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=6)",
            "score": 99.44681125217014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=2)",
            "score": 99.44681125217014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==1, entry ) >=0) {",
            "score": 99.47470238095238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compare( entry ,0, epsilon ) >=0) {",
            "score": 99.46481119791666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) >=0)",
            "score": 99.41630336216518,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *epsilon ) {",
            "score": 99.48524693080357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) ==0) {",
            "score": 99.47424897693452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry , entry ) >=0) ) {",
            "score": 99.46934291294643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= *entry ) {",
            "score": 99.46135919744319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= * entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compare( entry ,0,0) >=0) {",
            "score": 99.44608764648437,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , entry ) ) {",
            "score": 99.42739529079861,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon ,0, epsilon ) >=0) {",
            "score": 99.41618077895221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0, rhs ) {",
            "score": 99.4692150297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 , rhs ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >=0.0) {",
            "score": 99.4460681733631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) <0)",
            "score": 99.44603271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0, epsilon ) !=0) {",
            "score": 99.48509680706522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , epsilon ) <0) {",
            "score": 99.47401829769737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0&& epsilon ) {",
            "score": 99.46435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >=1) {",
            "score": 99.4457943564967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >>1) >=0) {",
            "score": 99.48503311820652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >> 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >0, epsilon ) {",
            "score": 99.47379557291667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0) <=0) ) {",
            "score": 99.4643322172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry0,0, epsilon ) >=0) {",
            "score": 99.46098188920455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==0) { {",
            "score": 99.45547485351562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <1)",
            "score": 99.44571533203126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) >=1) {",
            "score": 99.44544038318452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) >=1) {",
            "score": 99.44544038318452,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) <0) {",
            "score": 99.4266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,( double ) epsilon ) >=0) {",
            "score": 99.41536458333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , ( double ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon && epsilon ) <=0) {",
            "score": 99.48475713315217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon && epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=1, epsilon ) {",
            "score": 99.47317940848214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 1 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col , epsilon ) <0) {",
            "score": 99.46879497327302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , FALSE , epsilon ) >=0) {",
            "score": 99.46080961681548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , FALSE , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6, epsilon ) >=0.0) {",
            "score": 99.45541527157738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.2, epsilon ) >=0.0) {",
            "score": 99.45541527157738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >=1)",
            "score": 99.44568481445313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , epsilon ) >=1) {",
            "score": 99.44525437127976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) <0) {",
            "score": 99.41534830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,6, epsilon ) <0) {",
            "score": 99.464111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,2, epsilon ) <0) {",
            "score": 99.464111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , epsilon ) >=0)",
            "score": 99.4456787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <0)",
            "score": 99.41526794433594,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) !=0) ) {",
            "score": 99.4845660665761,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.isNaN( entry ) >=0) {",
            "score": 99.45505242598684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Na CaMeL N ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, entry ) >=0)",
            "score": 99.41521453857422,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0; }",
            "score": 99.47244698660714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null , rhs ) >=0) {",
            "score": 99.46798270089286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) ==0) {",
            "score": 99.46354166666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) ==0) {",
            "score": 99.46354166666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= ) {",
            "score": 99.42457275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) >=1.0) {",
            "score": 99.41438562729779,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, rhs ) {",
            "score": 99.47210984002976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , rhs ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& entry <0) {",
            "score": 99.46343703497024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry --0, epsilon ) >=0) {",
            "score": 99.4602283296131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry -- 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.Integer , epsilon ) >=0) {",
            "score": 99.4448474702381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . Integer , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=0.0) {",
            "score": 99.42426500822368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo(0, entry ) >=0) {",
            "score": 99.41412712545956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0&& epsilon <0)",
            "score": 99.48402913411458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 && epsilon < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , col , epsilon ) >=0) {",
            "score": 99.4674431295956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , <=0, epsilon ) >=0) {",
            "score": 99.4598388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , <= 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0f ) >=0.0f ) {",
            "score": 99.45439220610119,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 f ) >= 0 . 0 f ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.abs( entry ) <=0.0) {",
            "score": 99.414111328125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,0.0, epsilon ) >=0.0)",
            "score": 99.45438842773437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 , epsilon ) >= 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) <0)",
            "score": 99.4447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) !=0) {",
            "score": 99.44439376027961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , epsilon , epsilon ) ) {",
            "score": 99.4233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry , epsilon ) >=0) {",
            "score": 99.4137321920956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0&& epsilon >=0)",
            "score": 99.48392740885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 && epsilon >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,1) >=1) {",
            "score": 99.46314639136905,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 1 ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) !=0) {",
            "score": 99.45438058035714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >= epsilon ) {",
            "score": 99.4441779641544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1,0) >=0) {",
            "score": 99.41343060661765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0.0) >=0) {",
            "score": 99.45389597039474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.44413926866319,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ) >=0)",
            "score": 99.41329520089286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( value ,0, entry ) >=0) {",
            "score": 99.46640159970238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( value , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0&& true ) {",
            "score": 99.46292550223214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 && true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry , null , epsilon ) >=0) {",
            "score": 99.45897327769886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) >=0) { {",
            "score": 99.453857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0) { else {",
            "score": 99.44399879092262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry , epsilon ) <0) {",
            "score": 99.42209344161184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) >=0) { {",
            "score": 99.45866255326705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,1, epsilon ) ) {",
            "score": 99.45381469726563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 1 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >0) {",
            "score": 99.4219906455592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( entry ) >=0.0) {",
            "score": 99.4130859375,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . floor ( entry ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.start ,0, epsilon ) >=0) {",
            "score": 99.48368503736413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . start , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( 'AS IS', entry ,0, epsilon ) >=0) {",
            "score": 99.4660877046131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( 'License', entry ,0, epsilon ) >=0) {",
            "score": 99.4660877046131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( $STRING$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon , entry ) >=0) {",
            "score": 99.45831008184524,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, Math.epsilon ) >=0) {",
            "score": 99.45368395353618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , Math . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <6, epsilon ) >=0) {",
            "score": 99.4438709077381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <2, epsilon ) >=0) {",
            "score": 99.4438709077381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, value ) >=0) {",
            "score": 99.4129279641544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.TRUE.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.46594819568452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . TRUE . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( out ,0, epsilon ) >=0) {",
            "score": 99.45820545014881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( out , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.45364815848214,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >=0) <0) {",
            "score": 99.44304547991071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) >= 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) >=1) {",
            "score": 99.4129279641544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.getWidth( ) ,0) >=0)",
            "score": 99.48358154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . get CaMeL Width ( ) , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.start , entry ) >=0) {",
            "score": 99.47054036458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . start , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) >0) {",
            "score": 99.44375128495066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >=0.0) {",
            "score": 99.44277808779762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0,0, epsilon ) >=0) {",
            "score": 99.42132889597039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <0) { {",
            "score": 99.41240776909723,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& Math ;",
            "score": 99.4657870205966,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && Math ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( chars ,0, epsilon ) >=0) {",
            "score": 99.4580310639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( chars , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= max ) {",
            "score": 99.45333426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= max ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <0)",
            "score": 99.4434814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new , epsilon ) >=0) {",
            "score": 99.41182215073529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1, rhs ) >=0) {",
            "score": 99.4580078125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0, epsilon ) {",
            "score": 99.44267835115132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >=0.6) {",
            "score": 99.41175130208333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.round( entry ) >=0.2) {",
            "score": 99.41175130208333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ==0) ) {",
            "score": 99.47006370907738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.! Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) ) {",
            "score": 99.44259482935855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <0.0)",
            "score": 99.41109890407986,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) < 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0, epsilon ) >0) {",
            "score": 99.48291015625,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 , epsilon ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , col , entry ) >=0) {",
            "score": 99.46538985402961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, epsilon ) <=0) {",
            "score": 99.46195261101974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( get ,0, epsilon ) >=0) {",
            "score": 99.45771716889881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( get , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) <=0) {",
            "score": 99.45242130055146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.44332449776786,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compare( entry ,0, entry ) >=0) {",
            "score": 99.44244995117188,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -0) >=0) {",
            "score": 99.41107940673828,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >=0) >=0) {",
            "score": 99.48283585258152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, minRatio ) ==0) {",
            "score": 99.46991257440476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >0) ) {",
            "score": 99.45717486213235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= minRatio )",
            "score": 99.44331665039063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.0) <0)",
            "score": 99.41102430555556,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, float )0) {",
            "score": 99.46149291992188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , float ) 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon , epsilon ) >=0) { {",
            "score": 99.45714222301136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= ) {",
            "score": 99.41912231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=1)",
            "score": 99.41077423095703,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >=0, epsilon ) {",
            "score": 99.46976143973214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , minRatioPos ) <0) {",
            "score": 99.46455310639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , min CaMeL Ratio CaMeL Pos ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , Double.0) >=0) {",
            "score": 99.46147228422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , Double . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS',0, epsilon ) >=0) {",
            "score": 99.45677548363095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License',0, epsilon ) >=0) {",
            "score": 99.45677548363095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.Math.min( entry ,0, epsilon ) >=0) {",
            "score": 99.45216771175987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Math . min ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >0.0) {",
            "score": 99.41061197916666,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils ! compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.48260788690476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils ! compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, entry ) >=1) {",
            "score": 99.4697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= *0) {",
            "score": 99.45670942826705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= * 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) <=0.0) {",
            "score": 99.4521251860119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! ! Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.44269670758929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ! Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0f ) >=0) {",
            "score": 99.41058349609375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 f ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >> <=0) {",
            "score": 99.48258833451705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >> <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.TRUE.compareTo( entry ) >=0) {",
            "score": 99.46943933823529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -0, epsilon ) <0) {",
            "score": 99.46139090401786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= entry ) { {",
            "score": 99.45618785511364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= entry ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true ) >=0) {",
            "score": 99.41803299753289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.-1) >=0) {",
            "score": 99.41046820746527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon -0) >0) {",
            "score": 99.48255986752717,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon - 0 ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=6, epsilon ) {",
            "score": 99.46938941592262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=2, epsilon ) {",
            "score": 99.46938941592262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < epsilon ) {",
            "score": 99.46138080797698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) <0) {",
            "score": 99.44261410361842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0,0, epsilon ) ) {",
            "score": 99.44106573807566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, <0) ) {",
            "score": 99.41686401367187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) <=0) {",
            "score": 99.41045065487133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= false ) {",
            "score": 99.46931966145833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( minRatio , entry ) >=0) {",
            "score": 99.45560128348214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( min CaMeL Ratio , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0*epsilon ) >=0)",
            "score": 99.40937805175781,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 * epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, minRatio ) <=0) {",
            "score": 99.48245371942934,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , min CaMeL Ratio ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry.0, epsilon ) <0) {",
            "score": 99.46112381784539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& epsilon >0) {",
            "score": 99.45140438988095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && epsilon > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( rhs ,0, epsilon ) >=0) {",
            "score": 99.4425048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0*epsilon ) <0) {",
            "score": 99.4087273092831,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 * epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , false , epsilon ) >0) {",
            "score": 99.4682384672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , false , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, rhs ) >=0) {",
            "score": 99.45542689732143,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatioPos ) >0)",
            "score": 99.44249877929687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio CaMeL Pos ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, -1) >=0) {",
            "score": 99.44069213867188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) >0) {",
            "score": 99.46321186266448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= 'AS IS') {",
            "score": 99.46103050595238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >= 'License') {",
            "score": 99.46103050595238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0.6) {",
            "score": 99.44059244791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0.2) {",
            "score": 99.44059244791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) <=0) {",
            "score": 99.40860188802084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=( epsilon ) ) {",
            "score": 99.48230511209239,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= ( epsilon ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.tableau , epsilon ) >=0) {",
            "score": 99.46736653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . tableau , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >0, epsilon ) {",
            "score": 99.46098400297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=6) {",
            "score": 99.45513361150569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) >=2) {",
            "score": 99.45513361150569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) >=0)",
            "score": 99.45108192845395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0,0.0) >=0) {",
            "score": 99.4404064360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) >=1) {",
            "score": 99.415234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry /0, epsilon ) >=0) {",
            "score": 99.46270461309524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry / 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0.0) {",
            "score": 99.4609607514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.equals( entry ,0, epsilon ) ) {",
            "score": 99.41509046052632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && Math . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=6) {",
            "score": 99.46702938988095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >=2) {",
            "score": 99.46702938988095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( epsilon , epsilon ) >=0) {",
            "score": 99.40788717830883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ==0.0) {",
            "score": 99.46083286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= null )",
            "score": 99.44215087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils..compare( entry ,0, epsilon ) >=0) {",
            "score": 99.4148681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, entry ) <0) {",
            "score": 99.4077507467831,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) >=1) {",
            "score": 99.48198009672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) ==0) {",
            "score": 99.46669224330357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) >= minRatio ) {",
            "score": 99.46223958333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.46061567826705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( - entry ,0, epsilon ) >=0) {",
            "score": 99.45464533025569,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( - entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,1*epsilon ) >=0) {",
            "score": 99.4075066061581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 * epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry ,0) >=0) {",
            "score": 99.44207763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) >=1) {",
            "score": 99.43947239925987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.round( entry ) ) >=0) {",
            "score": 99.40735541449652,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( Math . round ( entry ) ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon / entry ) >=0) {",
            "score": 99.46144505550987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0) ==0) {",
            "score": 99.4604248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >= epsilon ) {",
            "score": 99.4394172219669,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >= epsilon ) {",
            "score": 99.40713321461396,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=6, entry ) >=0) {",
            "score": 99.46650623139881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=2, entry ) >=0) {",
            "score": 99.46650623139881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.Double , epsilon ) >=0) {",
            "score": 99.46019345238095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . Double , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ,0) >=0) {",
            "score": 99.43923468338816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , value ) >=0) {",
            "score": 99.40691731770833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) >=0, epsilon ) {",
            "score": 99.46620396205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon || epsilon ) >=0) {",
            "score": 99.46013532366071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon || epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon.epsilon ) >=0) {",
            "score": 99.45004111842105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0/ epsilon ) >=0) {",
            "score": 99.44179815995066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 / epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0*epsilon ) >0) {",
            "score": 99.40683880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 * epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >=6) {",
            "score": 99.46601795014881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, entry ) >=2) {",
            "score": 99.46601795014881,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.! Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.4609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -6) >=0) {",
            "score": 99.45358276367188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -2) >=0) {",
            "score": 99.45358276367188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry , epsilon ) >=0.0) {",
            "score": 99.44975729549633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.-0, epsilon ) >=0)",
            "score": 99.441650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . - 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , true ) >=0) {",
            "score": 99.4383609169408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >0) {",
            "score": 99.4067138671875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ==0) )",
            "score": 99.48157348632813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon == 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , minRatio ) >=0) {",
            "score": 99.4607292624081,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= , epsilon ) {",
            "score": 99.45316938920455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i = i ; i < tableau.getHeight( ) ; i ++ )",
            "score": 99.44153413318452,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = i ; i < tableau . get CaMeL Height ( ) ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon , entry ) >=0) {",
            "score": 99.43823960248162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=1) {",
            "score": 99.40670072115384,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compareTo(6, entry ,0, epsilon ) >=0) {",
            "score": 99.48143469769022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(2, entry ,0, epsilon ) >=0) {",
            "score": 99.48143469769022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, i ) >0) {",
            "score": 99.4606701078869,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , i ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, start ) >=0) {",
            "score": 99.43763491981908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) >=0) { }",
            "score": 99.46064897017045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= 'AS IS') {",
            "score": 99.45976329985119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= 'License') {",
            "score": 99.45976329985119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= ++0) {",
            "score": 99.45265891335227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= ++ 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0|| epsilon ) {",
            "score": 99.44127836681548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 || epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <=0) {",
            "score": 99.40645658052884,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon , epsilon ) >1) {",
            "score": 99.46554129464286,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon , epsilon ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, null ) >=0) { {",
            "score": 99.4525479403409,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , null ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { return 1; }",
            "score": 99.44905598958333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { return 1 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0) >= minRatio ) {",
            "score": 99.44120861235119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0+ entry ) >=0) {",
            "score": 99.4125912314967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 + entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, null ) >=0) {",
            "score": 99.40617101332721,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new ,0) >=0) {",
            "score": 99.46549479166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= value ) {",
            "score": 99.45232282366071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= value ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) <=0) {",
            "score": 99.440966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >= -1) {",
            "score": 99.4371826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0) >=0) {",
            "score": 99.41213989257812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) <0) {",
            "score": 99.40602740119485,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <0) { } else {",
            "score": 99.46006081321023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, compare ) >=0) {",
            "score": 99.41195518092105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , compare ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { }",
            "score": 99.40593126085069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.47995923913044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'AS IS', epsilon ) >=1) {",
            "score": 99.46522739955357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , 'License', epsilon ) >=1) {",
            "score": 99.46522739955357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <=0.0) {",
            "score": 99.45936802455357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0,0) >=0) {",
            "score": 99.45134626116071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0+ epsilon ) {",
            "score": 99.4485095796131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 + epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( f ,0, epsilon ) >=0) {",
            "score": 99.43703741776316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( f , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,1, entry ) >=0) {",
            "score": 99.4057976217831,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 1 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon [ i ] ) >=0) {",
            "score": 99.44827880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon [ i ] ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0) >=0) ) {",
            "score": 99.41155684621711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >=1) {",
            "score": 99.40577799479166,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) !=0) {",
            "score": 99.47979445684524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0,0) ) {",
            "score": 99.43681504991319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) <=0) {",
            "score": 99.40565592447916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1,0) >=0) {",
            "score": 99.4645931846217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry /0, epsilon ) >=0) {",
            "score": 99.45930561266448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( { entry ,0, epsilon ) >=0) {",
            "score": 99.45042835582386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( { entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) <0) {",
            "score": 99.4480044716283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.this , epsilon ) >=0) {",
            "score": 99.4406970796131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon0) >=0) {",
            "score": 99.43644409179687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry.0, epsilon ) >=0) {",
            "score": 99.41095934416118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) <=0) {",
            "score": 99.4056037454044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean entry = MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.47936430431548,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean entry = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, entry ) <0) {",
            "score": 99.46435546875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, entry ) <0) {",
            "score": 99.46435546875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >= minRatioPos ) {",
            "score": 99.45929827008929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= 'AS IS') {",
            "score": 99.45880998883929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <= 'License') {",
            "score": 99.45880998883929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'AS IS') >=0) { {",
            "score": 99.4501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'License') >=0) { {",
            "score": 99.4501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,1, epsilon ) >=0) {",
            "score": 99.44783742804276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0, rhs ) >=0)",
            "score": 99.44063720703124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >= epsilon ) {",
            "score": 99.43633069490132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >>0) {",
            "score": 99.410888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >> 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'AS IS') <0) {",
            "score": 99.40544577205883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'License') <0) {",
            "score": 99.40544577205883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) { final",
            "score": 99.47930908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) <=0) {",
            "score": 99.45872587316177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1,0) >=0) {",
            "score": 99.45006214488636,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils ! compareTo( entry ,0, epsilon ) ) {",
            "score": 99.44060958059211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils ! compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , Math.compareTo( entry ,0) >=0) {",
            "score": 99.41006630345395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , Math . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.abs( epsilon ) ) >=0) {",
            "score": 99.40536838107639,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( Math . abs ( epsilon ) ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0|| entry <0) {",
            "score": 99.46392531622024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 || entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( ! entry , entry ) >=0) {",
            "score": 99.45914306640626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, epsilon ) >=0) { {",
            "score": 99.45854048295455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,6) >=0) { {",
            "score": 99.45006214488636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,2) >=0) { {",
            "score": 99.45006214488636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,1, epsilon ) >=0) {",
            "score": 99.44050903320313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , compare ) >=0) {",
            "score": 99.41006630345395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , compare ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >0.0) {",
            "score": 99.40533854166667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *1) {",
            "score": 99.47792271205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) ,0) {",
            "score": 99.45823267886513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= - false ) {",
            "score": 99.44989568536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= - false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, entry ) >=0) {",
            "score": 99.44742838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0: epsilon ) >=0) {",
            "score": 99.44030180431548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 : epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ) <=0) {",
            "score": 99.40498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( if ,0, epsilon ) >=0) {",
            "score": 99.44970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( if , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compare( entry ,0,0) >=0) ) {",
            "score": 99.43594215029762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) < epsilon ) {",
            "score": 99.40452665441177,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) + epsilon ) {",
            "score": 99.45813569568452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) + epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( !0, epsilon , epsilon ) >=0) {",
            "score": 99.44970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.compare( entry , epsilon ) >=0) ) {",
            "score": 99.4472412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . compare ( entry , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, max ) >=0) {",
            "score": 99.43577665441177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=1) {",
            "score": 99.4044940655048,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) ==0) {",
            "score": 99.46351382606908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) ==0) {",
            "score": 99.46351382606908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.matches( entry ,0, epsilon ) ) {",
            "score": 99.45850327435662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . matches ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , Double.epsilon ) >=0) {",
            "score": 99.45805431547619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , Double . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.43541195518092,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon >=0) ) {",
            "score": 99.40447639016544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false && Math.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.45849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false && Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { else {",
            "score": 99.43534770764802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, value ) >=0) {",
            "score": 99.4044548483456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) ==0) ) {",
            "score": 99.45848446800595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) System.",
            "score": 99.44939630681819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) System .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0, epsilon ) <0) {",
            "score": 99.44004420230263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon , epsilon ) >=0) {",
            "score": 99.43458467371323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1) <=0) {",
            "score": 99.40438639322916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) < minRatioPos ) {",
            "score": 99.458251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, T ) >=0) {",
            "score": 99.45753115699405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , T ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ==1) {",
            "score": 99.44547311883224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0/ epsilon ) >=0) {",
            "score": 99.44003441220238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 / epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , entry ) >=0) {",
            "score": 99.40411783854167,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) >= true ) {",
            "score": 99.462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) >= true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils == compareTo( entry ,0, epsilon ) ) {",
            "score": 99.44923802425987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils == compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon , epsilon ) ) {",
            "score": 99.43452380952381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, compare ) >=0) {",
            "score": 99.40623715049342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , compare ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.) <=0.0) {",
            "score": 99.40384250217014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . ) <= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! ! MathUtils.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.4760409268466,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) <=0) {",
            "score": 99.45801595052083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon6) >=0) {",
            "score": 99.44442749023438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon2) >=0) {",
            "score": 99.44442749023438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , start , epsilon ) >=0) {",
            "score": 99.43405633223684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , start , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { if( entry >=0) {",
            "score": 99.40591634114584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -0, epsilon ) >=0)",
            "score": 99.40375832950367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=6) {",
            "score": 99.46273949032738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) !=2) {",
            "score": 99.46273949032738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) != $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -1) >=0) { {",
            "score": 99.44909086681548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 1 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry , entry ,0, epsilon ) >=0) {",
            "score": 99.44415283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,1, epsilon ) >=0)",
            "score": 99.43951416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <0.0) {",
            "score": 99.40365397135416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.tableau , entry ) >=0) {",
            "score": 99.46257672991071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . tableau , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) ++0) {",
            "score": 99.45768229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ++ 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0.0, epsilon ) >=0) {",
            "score": 99.45701962425595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0, epsilon ) >=0) { {",
            "score": 99.44890802556819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon -1) >=0) {",
            "score": 99.4439761513158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon >0) ) {",
            "score": 99.43941457648026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >>0) {",
            "score": 99.40533768503289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >> 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=0.6) {",
            "score": 99.40329159007354,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=0.2) {",
            "score": 99.40329159007354,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) >=1) {",
            "score": 99.46227446056548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , minRatioPos ) >0) {",
            "score": 99.45766087582237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio CaMeL Pos ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, true ) >=0) { {",
            "score": 99.44865278764205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , true ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , -1) >=0) {",
            "score": 99.43364868164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, entry ) >=0)",
            "score": 99.40316433376736,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) >1) {",
            "score": 99.46205357142857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) >1) {",
            "score": 99.46205357142857,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <0) { {",
            "score": 99.4568603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.equals( entry ,0, epsilon ) ) {",
            "score": 99.44342719184027,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! Math CaMeL Utils . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.-0, epsilon ) >=0) {",
            "score": 99.47526411576705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >= minRatioPos ) {",
            "score": 99.45761253720238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0+ epsilon ) <0) {",
            "score": 99.45658794202302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 + epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -1, epsilon ) >=0) { {",
            "score": 99.44854181463069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 1 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, i ) >=0) {",
            "score": 99.44324448529412,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.43327985491071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.40344916449652,
            "correctness": "uncompilable",
            "tokenized_patch": "if = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) >=1) {",
            "score": 99.40283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ,0) <0) {",
            "score": 99.45758928571429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) !=0) {",
            "score": 99.45655014935662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0, epsilon ) >=0) {",
            "score": 99.44303813733552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , rhs ) >=0) {",
            "score": 99.43766704358552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , Math.compareTo( entry , epsilon ) >=0) {",
            "score": 99.4033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , Math . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) { ) {",
            "score": 99.45743815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, minRatio ) ) {",
            "score": 99.4482189360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >0)",
            "score": 99.43758138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0, epsilon ) >0) {",
            "score": 99.40263097426471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) !=1) {",
            "score": 99.46176629317434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) != 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( this , entry ,0, epsilon ) >=0) {",
            "score": 99.45715913318452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( this , entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=1, epsilon ) {",
            "score": 99.45571754092262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 1 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=1) { }",
            "score": 99.44819779829545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, true ) >=0) {",
            "score": 99.43294031479779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6) >=0) {",
            "score": 99.40253762637867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2) >=0) {",
            "score": 99.40253762637867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( entry ,0, epsilon ) <0)",
            "score": 99.45562453497024,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, ! entry ) >=0) {",
            "score": 99.44813121448864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , ! entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0.0, epsilon ) >=0) {",
            "score": 99.44218139648437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) <0)",
            "score": 99.4371109008789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0,0) ) {",
            "score": 99.4328677528783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { compareTo( entry ,0, epsilon ) ;",
            "score": 99.40286415501645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) <0) {",
            "score": 99.4025146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , col , epsilon ) >=0) {",
            "score": 99.4570248252467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ) >= minRatio ) {",
            "score": 99.44785853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0) >0)",
            "score": 99.43704833984376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) !=0) {",
            "score": 99.43257410386029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) <=0)",
            "score": 99.4024658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) >0)",
            "score": 99.47412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >0, epsilon ) {",
            "score": 99.46135602678571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0, entry ) ) {",
            "score": 99.45686609604779,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , entry ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( f , entry ) >=0) {",
            "score": 99.45555355674342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( f , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , start , epsilon ) >=0) { {",
            "score": 99.44783158735795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , start , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, epsilon ) <0)",
            "score": 99.4370361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, epsilon ) <0)",
            "score": 99.4370361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new double [0] ) >=0)",
            "score": 99.40226915147569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new double [ 0 ] ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.47355346679687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0) <0) {",
            "score": 99.44146369485294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0) >=0) {",
            "score": 99.43702607996323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0) <=0) {",
            "score": 99.43239232113487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) <=0.0) {",
            "score": 99.40214269301471,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) <=0) {",
            "score": 99.4734119233631,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < -0) {",
            "score": 99.45494384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, f ) >=0)",
            "score": 99.440869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , f ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >= epsilon ) {",
            "score": 99.43219957853618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( MathUtils.compareTo( entry ,0, epsilon ) >=0) ;",
            "score": 99.47313290550595,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) >= minRatio )",
            "score": 99.43653564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, entry ) >0) {",
            "score": 99.40170467601104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) -0) {",
            "score": 99.40071186266448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, entry ) >0) {",
            "score": 99.4609375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, entry ) >0) {",
            "score": 99.4609375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0) { }",
            "score": 99.45643199573864,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0) <0) {",
            "score": 99.44036543996711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >0) {",
            "score": 99.40115176930146,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) !=0) {",
            "score": 99.40047414679276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, i ) >=0) {",
            "score": 99.43934390419408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, rhs ) >=0)",
            "score": 99.4362060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.43155067845395,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon ,0.0) >=0) {",
            "score": 99.40114458869485,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <0) { {",
            "score": 99.45452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +=0, epsilon ) >=0) { {",
            "score": 99.447021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry += 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0, epsilon ) >=0) { {",
            "score": 99.43926391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < tableau.getEntry( i , col ) ) {",
            "score": 99.4361931295956,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < tableau . get CaMeL Entry ( i , col ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0.) >=0.0) {",
            "score": 99.40112982855902,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= ) {",
            "score": 99.39955647786458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=0, epsilon ) {",
            "score": 99.45433407738095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, rhs ) ) {",
            "score": 99.43558542351974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <1)",
            "score": 99.401123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) < 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(( entry ,0, epsilon ) >=0) {",
            "score": 99.472412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , -0) >0) {",
            "score": 99.4543212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( !0, epsilon ) >=0) {",
            "score": 99.44661254882813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ==0) { {",
            "score": 99.43865356445312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >0, epsilon ) ) {",
            "score": 99.43556614925987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry > 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=0) { else {",
            "score": 99.43096633184524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 ) { else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >0)",
            "score": 99.40068708147321,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >= ) {",
            "score": 99.39909532335069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , true , epsilon ) >0) {",
            "score": 99.46037946428571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , true , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0, epsilon ) <=0) ) {",
            "score": 99.45576404389881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0) ) {",
            "score": 99.44633932674633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.epsilon ) >=0)",
            "score": 99.43829956054688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=1)",
            "score": 99.40057373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) < -1) {",
            "score": 99.46034545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) >=1) {",
            "score": 99.44627743675595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, epsilon ) <=0) {",
            "score": 99.40050551470588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, epsilon ) <=0) {",
            "score": 99.40050551470588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.39869449013158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.abs( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.45565941220238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . abs ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) >=0)",
            "score": 99.40046037946429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >=0, epsilon ) {",
            "score": 99.45408993675595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double <0, epsilon ) >=0) {",
            "score": 99.4461337002841,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& epsilon )",
            "score": 99.4346435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) ==0)",
            "score": 99.4003677368164,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math *compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.45516164679276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math * compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0) <=0) {",
            "score": 99.43779440487133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < minRatio )",
            "score": 99.43432006835937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ,0) >=0) {",
            "score": 99.43015423943015,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) !=0) {",
            "score": 99.40016802619485,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >= minRatio ) {",
            "score": 99.45980674342105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >=0&& epsilon ==0) {",
            "score": 99.4538341703869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= 0 && epsilon == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) == -1) {",
            "score": 99.43732299804688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry != minRatio ) ) {",
            "score": 99.43424907483552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0) >=0)",
            "score": 99.40003119574652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *>=0) {",
            "score": 99.47028142755681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( return ,0, epsilon ) >=0) {",
            "score": 99.44517299107143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( return , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { if( Math.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.4341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) ==0) { {",
            "score": 99.39999728732639,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) == 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >> >0) {",
            "score": 99.46992631392045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >> > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, tableau ) >=0)",
            "score": 99.43413696289062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , tableau ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, epsilon , epsilon ) >=0) {",
            "score": 99.42978387129934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >= Math.compare( entry ,0, epsilon ) ) {",
            "score": 99.3998664407169,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon >= Math . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry +0, epsilon ) <0) {",
            "score": 99.39641370271382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry + 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=6) {",
            "score": 99.45935639880952,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ,0) >=2) {",
            "score": 99.45935639880952,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry ) ==0) {",
            "score": 99.45465494791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.4295654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=0.6) {",
            "score": 99.39939252068015,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=0.2) {",
            "score": 99.39939252068015,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >1) {",
            "score": 99.39930635340073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) ==0) {",
            "score": 99.39582905016448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= -6) {",
            "score": 99.45930786132813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= - $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= -2) {",
            "score": 99.45930786132813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= - $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {.",
            "score": 99.45051713423295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0) >=0) {",
            "score": 99.44447728207237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { break ; }",
            "score": 99.43652954101563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { break ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= epsilon )",
            "score": 99.4337646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , entry ,0, epsilon ) ) {",
            "score": 99.4292236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { entry = tableau.getEntry( i , col ) ;",
            "score": 99.46868024553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 ) { entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= length ) {",
            "score": 99.44426618303571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= length ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0, epsilon )",
            "score": 99.43284301757812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= -6) {",
            "score": 99.42918090820312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= - $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= -2) {",
            "score": 99.42918090820312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= - $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=0)",
            "score": 99.39913177490234,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.TRUE.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.39509662828948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >=0, epsilon ) {",
            "score": 99.45884303042763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( MathUtils.compare( entry ,0, epsilon ) >=0)",
            "score": 99.45018421519886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < minRatioPos ; i ++ )",
            "score": 99.43266216077302,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min CaMeL Ratio CaMeL Pos ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, format ) >=0) {",
            "score": 99.42912854646382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , format ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry , epsilon ) <0) {",
            "score": 99.39887551700367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry , entry ) >=0) {",
            "score": 99.39491780598958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs , epsilon ) >=1) {",
            "score": 99.45856584821429,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( MathUtils.compareTo( name , entry ) >=0) {",
            "score": 99.4534912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( name , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,( Integer ) epsilon ) >=0) {",
            "score": 99.428955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , ( Integer ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0.0) >=0)",
            "score": 99.39868842230902,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.minRatio( entry ,0, epsilon ) >=0) {",
            "score": 99.46818033854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . min CaMeL Ratio ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0) >=0) {",
            "score": 99.4493472450658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) >=0) { {",
            "score": 99.43604736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon epsilon ) >=0) {",
            "score": 99.42869262695312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) <=0) {",
            "score": 99.39863137637867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) -0>=0) {",
            "score": 99.39422928659539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) - 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, i ) {",
            "score": 99.45831008184524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) == -1) {",
            "score": 99.4490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) == - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( MathUtils.compare( entry ,0, epsilon ) ) {",
            "score": 99.42857450597427,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=1.0) {",
            "score": 99.39860983455883,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=0, entry ) {",
            "score": 99.39419073807566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 , entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { final",
            "score": 99.46754286024306,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >= minRatio ) {",
            "score": 99.45820545014881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >= minRatio ) {",
            "score": 99.45820545014881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( Math.compareTo( entry , epsilon ) >=0) ) {",
            "score": 99.435693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( Math . compare CaMeL To ( entry , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.! compareTo( entry ,0, epsilon ) )",
            "score": 99.43183336759868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ! compare CaMeL To ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , null , epsilon ) >=0) {",
            "score": 99.42743241159539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, epsilon ) >=0.0) {",
            "score": 99.39837287454044,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( compareTo( entry ,0) >=0) {",
            "score": 99.44777018229166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else if( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.42714329769737,
            "correctness": "uncompilable",
            "tokenized_patch": "} else if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon >=0) >=0)",
            "score": 99.39820692274306,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon >= 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils == compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.46685180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils == compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) == minRatio ) {",
            "score": 99.45225306919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) <=0) { {",
            "score": 99.435107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) <= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0>=0) {",
            "score": 99.42710474917763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0, epsilon ) >=0)",
            "score": 99.39776611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, round ) >=0) {",
            "score": 99.39317562705592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , round ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { entry = tableau.getEntry( i , col ) ;",
            "score": 99.46668061755952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( byte ,0, epsilon ) >=0) {",
            "score": 99.443115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( byte , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) <0)",
            "score": 99.43151245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS') <0) {",
            "score": 99.39755045572916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License') <0) {",
            "score": 99.39755045572916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0) { final",
            "score": 99.46622924804687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >= minRatio ) {",
            "score": 99.45743815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0, rhs ) >=0) {",
            "score": 99.45206705729167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >1) {",
            "score": 99.44635331003289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ,0,0) >=0) {",
            "score": 99.44271995907738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0) { {",
            "score": 99.42662217881944,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) !=0) {",
            "score": 99.43435489430146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >= -0) {",
            "score": 99.42625122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) < epsilon ) {",
            "score": 99.39719525505515,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0) {0",
            "score": 99.4566983309659,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >>1, epsilon ) >=0) {",
            "score": 99.44160388764881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >> 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry.null , epsilon ) >=0) {",
            "score": 99.3919741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry . null , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , epsilon ) <=0) {",
            "score": 99.4653552827381,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) != -1) {",
            "score": 99.44586181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) != - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) ==1) {",
            "score": 99.43418974034927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) == 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1, rhs ) >=0)",
            "score": 99.43079833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon ,0,0) >=0) {",
            "score": 99.42594186883224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) >=0)",
            "score": 99.39630126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0,0) >=0) {",
            "score": 99.445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) <0)",
            "score": 99.43072509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) ==0) {",
            "score": 99.39629049862133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry , epsilon ) <=0) {",
            "score": 99.39106188322368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, col ) <=0) {",
            "score": 99.46447172619048,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , col ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, entry ) <0) { {",
            "score": 99.4514493075284,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= 'AS IS') {",
            "score": 99.44520327919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= 'License') {",
            "score": 99.44520327919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) <=1) {",
            "score": 99.43417197779605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) <= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) <=0) {",
            "score": 99.42583264802632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=01) {",
            "score": 99.39621310763889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i , rhs ) >=0) {",
            "score": 99.45126488095238,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo(0,0, epsilon ) >=0)",
            "score": 99.4409912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0+ epsilon ) {",
            "score": 99.43415912828948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 + epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! tableau.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4305419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! tableau . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.epsilon ) >=0) {",
            "score": 99.39575913373162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= null ) {",
            "score": 99.45566920230263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( i , entry ) >=0) {",
            "score": 99.45122327302632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( i , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0, epsilon )",
            "score": 99.4300537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0, epsilon ) <0) {",
            "score": 99.39555089613971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=1) {",
            "score": 99.38643152573529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'AS IS') >0) {",
            "score": 99.46365792410714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, 'License') >0) {",
            "score": 99.46365792410714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , $STRING$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,0) <0) {",
            "score": 99.45121042351974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0+ entry ) >=0)",
            "score": 99.43003540039062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 + entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0,0) >=0) {",
            "score": 99.42496744791667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, value ) <=0) {",
            "score": 99.39552935431985,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , value ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = MathUtils.compareTo( entry ,0, epsilon ) {",
            "score": 99.38393147786458,
            "correctness": "uncompilable",
            "tokenized_patch": "if = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >=1) {",
            "score": 99.4537417763158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) >=0) { {",
            "score": 99.43385620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >0) { ;",
            "score": 99.43001708984374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 0 ) { ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=1) {",
            "score": 99.42495548023896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= ) {",
            "score": 99.39459991455078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0, epsilon ) <0)",
            "score": 99.46321614583333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) !=0) {",
            "score": 99.4440673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ++ , epsilon ) >=0) {",
            "score": 99.44031372070313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ++ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0,0, epsilon ) )",
            "score": 99.42416381835938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, epsilon ) >=0) {",
            "score": 99.39444986979167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry ) >=0) {",
            "score": 99.382080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.i , epsilon ) >=0)",
            "score": 99.46282348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . i , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= null ) {",
            "score": 99.44404039884868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ,0, entry ) >=0) {",
            "score": 99.4401622953869,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6, entry ) >=0)",
            "score": 99.42935180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2, entry ) >=0)",
            "score": 99.42935180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , - epsilon ) >=0) {",
            "score": 99.42404174804688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , - epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry , epsilon ) >=0)",
            "score": 99.3943862915039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon == epsilon ) ) {",
            "score": 99.46271623883929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon == epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.trim( entry ,0, epsilon ) >=0) {",
            "score": 99.45351275275735,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . trim ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.getEntry( entry ,0, epsilon ) >=0) {",
            "score": 99.45096261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . get CaMeL Entry ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , -0) >=0) {",
            "score": 99.44342719184027,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , null ) >=0) {",
            "score": 99.43996710526316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , null ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >0)",
            "score": 99.42919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ,1) >=0) {",
            "score": 99.4239501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) <0) {",
            "score": 99.39429428998162,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0.2) <0) {",
            "score": 99.39429428998162,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,0) >0) {",
            "score": 99.45314427425987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.1, epsilon ) >=0) {",
            "score": 99.44277472245066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +1) >=0) {",
            "score": 99.43996068050987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry <=0, epsilon ) >=0) {",
            "score": 99.42887155633224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry <= 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( Math.compareTo( entry , epsilon ) >=0) {",
            "score": 99.42388916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) >0) {",
            "score": 99.39405110677083,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , -0) >=0) {",
            "score": 99.38049994574652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) --0) {",
            "score": 99.45076497395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) -- 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) , epsilon ) {",
            "score": 99.44245990953948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double MathUtils.compareTo( entry ,0, epsilon , epsilon ) ;",
            "score": 99.4394775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "final double Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ,0, epsilon ) >=0) {",
            "score": 99.42375745271382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >=0) { {",
            "score": 99.39366997612848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, epsilon ) { {",
            "score": 99.452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , epsilon ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , col ) >=0) {",
            "score": 99.45061934621711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& false )",
            "score": 99.44193892045455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0,0) ) {",
            "score": 99.43907406455592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0) { )",
            "score": 99.42308959960937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) { )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) ==0) {",
            "score": 99.3935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatioPos = i ;",
            "score": 99.46170806884766,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo(0<0, epsilon ) >=0) {",
            "score": 99.43904622395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) <=0) {",
            "score": 99.42771510074013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) <=0) {",
            "score": 99.42771510074013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) ==0) {",
            "score": 99.4227359169408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) <1) {",
            "score": 99.39356904871323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.matches( entry ,0, epsilon ) >=0) {",
            "score": 99.37963149126838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . matches ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , epsilon ) >=1) {",
            "score": 99.45258532072368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) )",
            "score": 99.42742919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.42236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, new ) >=0) {",
            "score": 99.39356186810662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , new ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) ) {",
            "score": 99.37883444393383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= false ) {",
            "score": 99.451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(6,0, epsilon ) >=0) {",
            "score": 99.43881370907738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo(2,0, epsilon ) >=0) {",
            "score": 99.43881370907738,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.equals( entry ,0, epsilon ) )",
            "score": 99.42735944475446,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, this ) >=0) {",
            "score": 99.42214483963816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , this ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { if( entry <0) {",
            "score": 99.37858072916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils == compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.4611583891369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils == compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) ==0) {",
            "score": 99.45034610523896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, entry ) >=0)",
            "score": 99.4273193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, min ) >=0) {",
            "score": 99.42185572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , min ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , entry ) >=0) {",
            "score": 99.39290364583333,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1) >=0) {",
            "score": 99.44038660386029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry , epsilon ) >0) {",
            "score": 99.39251349954044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) !=0) {",
            "score": 99.3778435202206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >= minRatioPos ) {",
            "score": 99.44920712425595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0&& true )",
            "score": 99.44004128196023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) >=0)",
            "score": 99.39247349330357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= Math.compare( entry ,0, epsilon ) ) {",
            "score": 99.37753475413604,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col , col ) >=0) {",
            "score": 99.4489810341283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= TRUE ) {",
            "score": 99.43782552083333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= TRUE ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, epsilon ) )",
            "score": 99.42606608072917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) !=0) {",
            "score": 99.39242733226104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.split( entry ,0, epsilon ) >=0) {",
            "score": 99.37718290441177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . split ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= 'AS IS') {",
            "score": 99.4481201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= 'License') {",
            "score": 99.4481201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, rhs ) ) {",
            "score": 99.43780196340461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) >=1) {",
            "score": 99.3918212890625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( compareTo( entry , epsilon ) >=0) {",
            "score": 99.37494303385417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, col ) >=0) {",
            "score": 99.44871610753677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { { {",
            "score": 99.43097887541118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , minRatio ) >0)",
            "score": 99.42560424804688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , min CaMeL Ratio ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( Math.abs( epsilon ) >=0) ) {",
            "score": 99.39178466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( Math . abs ( epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >= ) {",
            "score": 99.37364366319444,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0,0)",
            "score": 99.4387539950284,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , col ) >=0)",
            "score": 99.42540893554687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , col ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,( double ) epsilon ) >=0) {",
            "score": 99.42122802734374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , ( double ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <=0)",
            "score": 99.39152526855469,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; if( false ) {",
            "score": 99.44727725074405,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; if ( false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) < epsilon ) {",
            "score": 99.43873997738487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon , epsilon ) >=0)",
            "score": 99.43743286132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isInstance( entry ,0, epsilon ) ) {",
            "score": 99.42518374794408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Instance ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0, entry ) >=0) {",
            "score": 99.42085988898026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.) >=0) {",
            "score": 99.39131164550781,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry ,0,0, epsilon ) ) {",
            "score": 99.37115478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, rhs ) ) {",
            "score": 99.4472720497533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= true ) {",
            "score": 99.44612201891448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= true ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( epsilon , entry ) >=0) {",
            "score": 99.42035271139706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS', entry ,0) >=0) {",
            "score": 99.3912353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License', entry ,0) >=0) {",
            "score": 99.3912353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { if( entry >0) {",
            "score": 99.3685791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) > null ) {",
            "score": 99.45928664434524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ) <0) {",
            "score": 99.44709329044117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= min )",
            "score": 99.42439575195313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= min )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=0.0) {",
            "score": 99.41998650045956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, entry ) ) {",
            "score": 99.36836751302083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >=6) {",
            "score": 99.44508120888158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >=2) {",
            "score": 99.44508120888158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0- epsilon ) >=0) {",
            "score": 99.43766061883224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 - epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, entry ) >=1) {",
            "score": 99.39068244485294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon <=0) )",
            "score": 99.45868530273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon <= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( i ,0, epsilon ) >=0) {",
            "score": 99.44490774054276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( i , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ) <0) {",
            "score": 99.4372199563419,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , entry ) >=0) { {",
            "score": 99.43653564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.6, epsilon ) >=0)",
            "score": 99.42415771484374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.2, epsilon ) >=0)",
            "score": 99.42415771484374,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . $NUMBER$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) { else",
            "score": 99.41990966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0/ epsilon ) >=0)",
            "score": 99.39037322998047,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 / epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( this.compareTo( entry , epsilon ) >=0) {",
            "score": 99.36493278952206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( this . compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compare( entry ,0, epsilon ) <0) ) {",
            "score": 99.44607979910714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ==0, entry ) >=0) {",
            "score": 99.44475354646382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry == 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compareTo( entry ,0,0) >=0) ) {",
            "score": 99.43639555431548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) == -1) {",
            "score": 99.429443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) == - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double rhs = tableau.getEntry( i , col ) ;",
            "score": 99.42383575439453,
            "correctness": "uncompilable",
            "tokenized_patch": "final double rhs = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compare( entry ,0, epsilon ) >=0) )",
            "score": 99.41988525390624,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) <0) {",
            "score": 99.39016927083334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon <= epsilon ) ) {",
            "score": 99.45853097098214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon <= epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0.0, epsilon ) ) {",
            "score": 99.428955078125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 . 0 , epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon , epsilon ) >=0)",
            "score": 99.4197509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( epsilon ) >=0.0) {",
            "score": 99.39007161458333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon !=0) )",
            "score": 99.45850219726563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon != 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >= minRatio ) {",
            "score": 99.44597424958882,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'AS IS', entry ) >=0) {",
            "score": 99.44399542557566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'License', entry ) >=0) {",
            "score": 99.44399542557566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) -0) {",
            "score": 99.43675472861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) <0) {",
            "score": 99.38990885416666,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0, epsilon ) {",
            "score": 99.443603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1) ==0) {",
            "score": 99.43668405633224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ,0, epsilon ) >=0)",
            "score": 99.43627319335937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.1, entry ) >=0)",
            "score": 99.42359619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 1 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0+0, epsilon ) >=0) {",
            "score": 99.41964561060855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , max ) >=0) {",
            "score": 99.38988539751838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , max ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String entry = tableau.getEntry( i , col ) ;",
            "score": 99.45833333333333,
            "correctness": "uncompilable",
            "tokenized_patch": "String entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) ==0) {",
            "score": 99.43640854779412,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double rhs , epsilon ) >=0) {",
            "score": 99.43616303943452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , Math.epsilon ) >=0) {",
            "score": 99.4277279502467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , Math . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= Math.compare( entry ,0, epsilon ) >=0)",
            "score": 99.38980441623264,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= minRatio ) { {",
            "score": 99.4442138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= min CaMeL Ratio ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ==0, epsilon ) ) {",
            "score": 99.43597771139706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry == 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0&& epsilon ) {",
            "score": 99.42750950863487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 && epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon , epsilon , epsilon ) >=0) {",
            "score": 99.41938219572368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <=0)",
            "score": 99.38976178850446,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) -0) {",
            "score": 99.36326688878677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon , rhs ) >=0) {",
            "score": 99.43602353050595,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon , rhs ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry ==0, epsilon ) >=0) {",
            "score": 99.4356689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry == 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0*epsilon ) >=0) {",
            "score": 99.42750308388158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 * epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry == minRatio ) ) {",
            "score": 99.42320492393092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, exp ) >=0) {",
            "score": 99.41928582442434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , exp ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ) ==0) {",
            "score": 99.3893310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0, entry ) >=0) {",
            "score": 99.36310891544117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) { }",
            "score": 99.44380493164063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) { }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >=0) { {",
            "score": 99.4413818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry == minRatio ) >=0) {",
            "score": 99.43596540178571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0, entry ) >=0)",
            "score": 99.422900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , new ) >=0) {",
            "score": 99.3892463235294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , new ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >= -0) {",
            "score": 99.36223687065973,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( value , entry ) >=0) {",
            "score": 99.44373843544408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( value , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >= epsilon ) {",
            "score": 99.41920572916666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) >=0.6) {",
            "score": 99.38866469439338,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) >=0.2) {",
            "score": 99.38866469439338,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <1) {",
            "score": 99.4428775185033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( split ,0, epsilon ) >=0) {",
            "score": 99.4350353422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( split , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) <=0) {",
            "score": 99.45558471679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry /1, epsilon ) >=0) {",
            "score": 99.44247918379934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) >=1) {",
            "score": 99.4394467002467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.trim( entry ,0, epsilon ) >=0) {",
            "score": 99.43466668379934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . trim ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,6,0) >=0) {",
            "score": 99.41877184416118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,2,0) >=0) {",
            "score": 99.41877184416118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) >=0.0)",
            "score": 99.388427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) >= 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < 'AS IS') {",
            "score": 99.434326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) < 'License') {",
            "score": 99.434326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -0, epsilon ) >=0)",
            "score": 99.42208862304688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= ) {",
            "score": 99.35787624782986,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , public ) >=0) {",
            "score": 99.43349095394737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , public ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0, epsilon ) <=0) {",
            "score": 99.42172723067434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ,0) >=0) {",
            "score": 99.38795381433823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "MathUtils.compareTo( entry ,0,0, epsilon ) ;",
            "score": 99.35769314236111,
            "correctness": "uncompilable",
            "tokenized_patch": "Math CaMeL Utils . compare CaMeL To ( entry , 0 , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.45453844572368,
            "correctness": "uncompilable",
            "tokenized_patch": "return Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math == compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.44139340049342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math == compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -6, epsilon ) >=0) {",
            "score": 99.43451218377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry -2, epsilon ) >=0) {",
            "score": 99.43451218377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ,0) ) {",
            "score": 99.43314615885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(( entry ,0, epsilon ) >=0) ) {",
            "score": 99.42662289268092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( ( entry , 0 , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=0)",
            "score": 99.42157745361328,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) >=0.0) {",
            "score": 99.38788200827206,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "MathUtils.compareTo( entry ,0, epsilon ) ; }",
            "score": 99.35764447380515,
            "correctness": "uncompilable",
            "tokenized_patch": "Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==6) {",
            "score": 99.43625359786184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) ==2) {",
            "score": 99.43625359786184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) == $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compareTo( epsilon , epsilon ) >=0) ) {",
            "score": 99.43412853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare CaMeL To ( epsilon , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) , epsilon ) {",
            "score": 99.432373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry , entry , epsilon ) >=0) {",
            "score": 99.35678998161765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <=0) { {",
            "score": 99.43196411132813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0, epsilon ) >=0)",
            "score": 99.42113647460937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) <=0) {",
            "score": 99.38760579427084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( *Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.35674370659723,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( * Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.< compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.45272216796874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . < compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >= FALSE ) {",
            "score": 99.43377976190476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= FALSE ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0, epsilon ) >0)",
            "score": 99.38753255208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , ) >=0) {",
            "score": 99.35618082682292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs ) <0) {",
            "score": 99.44078153722427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,6, epsilon ) >=0) {",
            "score": 99.43558959960937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,2, epsilon ) >=0) {",
            "score": 99.43558959960937,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, length ) >=0) {",
            "score": 99.43369838169643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , length ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1) !=0) {",
            "score": 99.43120374177632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0) >0) {",
            "score": 99.42609719669117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0, epsilon ) >0) {",
            "score": 99.38694852941177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.compareTo( entry ) >=0) {",
            "score": 99.3557990579044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ,0, rhs ) >=0) {",
            "score": 99.43359375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.min( entry ,0.6, epsilon ) >=0) {",
            "score": 99.42604466488487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.2, epsilon ) >=0) {",
            "score": 99.42604466488487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.0) >=0) {",
            "score": 99.38689108455883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >=0) { final",
            "score": 99.45152587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double <0) ) {",
            "score": 99.43358764648437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math < Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.42019813939145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math < Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compare( entry , epsilon ) >=0) ) {",
            "score": 99.41660670230263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry +1) >=0) {",
            "score": 99.38684800091912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry + 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry , col ) >=0) {",
            "score": 99.43949809827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >1) {",
            "score": 99.4351742393092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.41992950439453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <0) {",
            "score": 99.3867657001202,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) ) {",
            "score": 99.35498764935662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) > minRatio ) {",
            "score": 99.4385986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry +0) >=0) {",
            "score": 99.43039422286184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon +1) >=0) {",
            "score": 99.42558850740132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon + 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , epsilon ) >=0)",
            "score": 99.41990152994792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0, epsilon ) <0) {",
            "score": 99.38640280330883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math == Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.41926655016448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math == Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >=0.6) {",
            "score": 99.38635971966912,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.max(0, entry ) >=0.2) {",
            "score": 99.38635971966912,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if(( entry >=0) &&( entry >=0) ) {",
            "score": 99.35354614257812,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( entry >= 0 ) && ( entry >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >0",
            "score": 99.44892321134868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) > 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , i , epsilon ) >=0) {",
            "score": 99.43704384251645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , -1) >=0) {",
            "score": 99.42982313368056,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , - 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0) return 0;",
            "score": 99.43276832217262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, epsilon ) <=0) {",
            "score": 99.42959755345395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >= -0) {",
            "score": 99.41571723090277,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( i , epsilon ) >=0) {",
            "score": 99.43411415501645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon >= epsilon ) ) {",
            "score": 99.43246605282738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon >= epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) < minRatio ) {",
            "score": 99.41829641241776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry , epsilon ) ) {",
            "score": 99.41569438733552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS', entry ,0, epsilon ) >=0)",
            "score": 99.38616265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License', entry ,0, epsilon ) >=0)",
            "score": 99.38616265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0&& entry >0.0) {",
            "score": 99.34881591796875,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 . 0 && entry > 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0, epsilon ) <0)",
            "score": 99.44771118164063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, entry ) ) {",
            "score": 99.43365799753289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, ! entry ) ) {",
            "score": 99.43087158203124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , ! entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( Math.compareTo( entry ,0) >=0) ) {",
            "score": 99.42482299804688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( Math . compare CaMeL To ( entry , 0 ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=",
            "score": 99.41817220052083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) ==0) {",
            "score": 99.38605813419117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) ==0) {",
            "score": 99.38605813419117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,1) >=0) {",
            "score": 99.42461799172794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col -1) ;",
            "score": 99.41741265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry -0, epsilon ) >=0) {",
            "score": 99.41538599917763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, value ) ==0) {",
            "score": 99.38595760569854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , value ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0&& entry <0.0) {",
            "score": 99.34785461425781,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 && entry < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry ,0, entry ) ) {",
            "score": 99.43589680989584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isEmpty( entry ,0.0) ) {",
            "score": 99.42425858347039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Empty ( entry , 0 . 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = Math.compareTo( entry ,0, epsilon ) ;",
            "score": 99.41676839192708,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = Math . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.contains( entry ,0, epsilon ) >=0) {",
            "score": 99.41537957442434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . contains ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, entry ) <0) {",
            "score": 99.38592170266544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int MathUtils.compareTo( entry ,0, epsilon ) ) ;",
            "score": 99.42393092105263,
            "correctness": "uncompilable",
            "tokenized_patch": "final int Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col , epsilon ) >=0)",
            "score": 99.41594102647569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1, epsilon ) ==0) {",
            "score": 99.38573500689338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 1 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0&& entry >=0.0) {",
            "score": 99.34709167480469,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 . 0 && entry >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) *entry )",
            "score": 99.44649658203124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) * entry )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <0) { {",
            "score": 99.43507690429688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, ! epsilon ) ) {",
            "score": 99.42857055664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , ! epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, entry ) !=0) {",
            "score": 99.41497481496711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0.0) >=0) {",
            "score": 99.38560575597427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) !=0) {",
            "score": 99.43500077097039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , new , epsilon ) >=0) {",
            "score": 99.43181409333882,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , new , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry < minRatio ) &&( entry < minRatio ) ) {",
            "score": 99.42827758789062,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < min CaMeL Ratio ) && ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) >0) {",
            "score": 99.42365465666118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) <=0) {",
            "score": 99.38553059895834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( epsilon ) { entry = tableau.getEntry( i , col ) ;",
            "score": 99.4454345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.6, epsilon ) >=0) {",
            "score": 99.42762515419408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.2, epsilon ) >=0) {",
            "score": 99.42762515419408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ,6) >=0) {",
            "score": 99.41477564761513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ,2) >=0) {",
            "score": 99.41477564761513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) >=0.6) {",
            "score": 99.38543342141544,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.max( entry ,0) >=0.2) {",
            "score": 99.38543342141544,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( entry >= Math.compareTo( entry , epsilon ) ) {",
            "score": 99.34452550551471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0.0) ) {",
            "score": 99.42705977590461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 . 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0.0) >=0)",
            "score": 99.42317504882813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS', entry , epsilon ) >=0) {",
            "score": 99.38540469898896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License', entry , epsilon ) >=0) {",
            "score": 99.38540469898896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= Math.equals( entry ,0, epsilon ) ) {",
            "score": 99.34386488970588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) <=0) {",
            "score": 99.41422311883224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >1) {",
            "score": 99.4309017783717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0&& epsilon ==0) {",
            "score": 99.42697625411184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 && epsilon == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( ,0, epsilon ) >=0) {",
            "score": 99.42595825195312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0.1) {",
            "score": 99.41392758018092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 . 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col , epsilon ) >0) {",
            "score": 99.41379908511513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < Math.compare( entry ,0, epsilon ) ) {",
            "score": 99.34192612591912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=0) { final",
            "score": 99.44151611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , T ) >=0) {",
            "score": 99.42693770559211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , T ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >0)",
            "score": 99.41364881727431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry , epsilon ) >=0) >=0) {",
            "score": 99.41361276726974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , epsilon ) >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <6) {",
            "score": 99.38494514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <2) {",
            "score": 99.38494514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0) >=0) {",
            "score": 99.42555638363487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) >0)",
            "score": 99.41361490885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS', epsilon ) >=0)",
            "score": 99.38461303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License', epsilon ) >=0)",
            "score": 99.38461303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry / entry ) >=0) {",
            "score": 99.4336001747533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'AS IS', epsilon ) >0) {",
            "score": 99.43050344366776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'License', epsilon ) >0) {",
            "score": 99.43050344366776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0, epsilon ) <=0) {",
            "score": 99.41343929893092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) <0)",
            "score": 99.41244845920139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'AS IS') >0) {",
            "score": 99.38454302619485,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'License') >0) {",
            "score": 99.38454302619485,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry +0, epsilon ) ==0) {",
            "score": 99.42555638363487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry + 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.42365180121527,
            "correctness": "uncompilable",
            "tokenized_patch": "try { Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,1) >=0) {",
            "score": 99.42213199013158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0) { } else {",
            "score": 99.4130126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 ) { } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0,0) ) {",
            "score": 99.41221859580592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS', epsilon ) >0) {",
            "score": 99.38447840073529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License', epsilon ) >0) {",
            "score": 99.38447840073529,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >=0) { final",
            "score": 99.4388916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final if( Math.compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.43258666992188,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math . compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) >= null ) {",
            "score": 99.42439992804276,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) >= null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , ! epsilon ) >=0) {",
            "score": 99.42328491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , ! epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0.0, epsilon ) >=0)",
            "score": 99.42208251953124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 . 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, false ) >=0) {",
            "score": 99.41203038832721,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=0.0)",
            "score": 99.38436550564236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.,0) >=0) {",
            "score": 99.43860473632813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , rhs ) >=0) {",
            "score": 99.43202311197916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry < minRatio ) ) {",
            "score": 99.42976888020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >=0_",
            "score": 99.42117919921876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 _",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ ) {",
            "score": 99.41132354736328,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) ==0) {",
            "score": 99.38431803385417,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( Math.compare( entry ,0) >=0) ) {",
            "score": 99.33738798253677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0, epsilon ) ) { {",
            "score": 99.42053833007813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , tableau.getEntry( i , col ) >=0) {",
            "score": 99.41116493626645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , tableau . get CaMeL Entry ( i , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , false ) >=0) {",
            "score": 99.383935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , false ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) &&( entry >0) ) {",
            "score": 99.3369140625,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( entry >= 0 ) && ( entry > 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,6,0) >=0) {",
            "score": 99.42938553659539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2,0) >=0) {",
            "score": 99.42938553659539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) !=0) { {",
            "score": 99.42135620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) != 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, entry ,0, epsilon ) ) {",
            "score": 99.41094006990132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) ==0) {",
            "score": 99.38369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) ==0) {",
            "score": 99.43096602590461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=1) {",
            "score": 99.42881146599265,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.0, epsilon ) <=0) {",
            "score": 99.42399516858552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0.0)",
            "score": 99.42119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 . 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs ,0) <0) {",
            "score": 99.41001490542763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new Integer( entry ) ) >=0)",
            "score": 99.38363308376736,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new Integer ( entry ) ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >=1) {",
            "score": 99.42350499770221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) >=0)",
            "score": 99.42112901475694,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < tableau.getEntry( i , col ) )",
            "score": 99.40971374511719,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < tableau . get CaMeL Entry ( i , col ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0,0) >=0) {",
            "score": 99.33500402113971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon *epsilon ) >=0) {",
            "score": 99.42094983552632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon * epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , new double ) >=0) {",
            "score": 99.4183349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , new double ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <1) {",
            "score": 99.38347981770833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ) >=0) {",
            "score": 99.3342041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon <0) )",
            "score": 99.43721923828124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon < 0 ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , epsilon ) ==0) {",
            "score": 99.42692485608552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) <=0) {",
            "score": 99.4302914268092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <6) {",
            "score": 99.42328202097039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <2) {",
            "score": 99.42328202097039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) < $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0.epsilon ) >=0) {",
            "score": 99.42059004934211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry , epsilon , epsilon ) >=0) {",
            "score": 99.3332878561581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , epsilon , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int entry = tableau.getEntry( i , col ) ;",
            "score": 99.43690592447916,
            "correctness": "uncompilable",
            "tokenized_patch": "int entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.round( entry ,0, epsilon ) >=0) {",
            "score": 99.42966822574013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . round ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ==0, epsilon ) >=0) {",
            "score": 99.42589613970588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry == 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0, epsilon ) )",
            "score": 99.40785725911458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1) >=0.0) {",
            "score": 99.3828125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) ) {",
            "score": 99.3329345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( i ,0, epsilon ) >=0) {",
            "score": 99.42258814761513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( i , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0, epsilon ) >=0.0) {",
            "score": 99.42010819284539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 , epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , Math.compare( entry ,0, epsilon ) >=0)",
            "score": 99.38271755642361,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , Math . compare ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ) <0) {",
            "score": 99.42110402960526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,6, epsilon ) >=0) {",
            "score": 99.38264016544117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,2, epsilon ) >=0) {",
            "score": 99.38264016544117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) >=1) {",
            "score": 99.42545358758224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0, {",
            "score": 99.4208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 , {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry <0, epsilon ) ) {",
            "score": 99.41424560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry < 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( minRatio ) >=0) {",
            "score": 99.40723941200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6, epsilon ) ==0) {",
            "score": 99.3822380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2, epsilon ) ==0) {",
            "score": 99.3822380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) >1) {",
            "score": 99.42537006578948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, epsilon ) !=0) {",
            "score": 99.41888106496711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0) >=1) {",
            "score": 99.40728438527961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , this , epsilon ) >=0) {",
            "score": 99.38215188419117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < Math.compareTo( entry ,0) ) {",
            "score": 99.32931698069854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math . compare CaMeL To ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= minRatio ) { minRatioPos = i ;",
            "score": 99.43171522352431,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= min CaMeL Ratio ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.isArray( entry ,0, epsilon ) ) {",
            "score": 99.41878469366776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Array ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( MathUtils.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.40721435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, compare ) >=0) {",
            "score": 99.38194364659927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , compare ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math6.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4315673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math $NUMBER$ . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math2.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.4315673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math $NUMBER$ . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >= minRatioPos ) {",
            "score": 99.42759303042763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0*epsilon ) >=0) {",
            "score": 99.38186465992646,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 * epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0.compareTo( entry ) ) {",
            "score": 99.32665201822917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 . compare CaMeL To ( entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math Integer.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.43156127929687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math Integer . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) !=0) {",
            "score": 99.42519017269737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >=0) { {",
            "score": 99.41250610351562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry !=0, epsilon ) >=0)",
            "score": 99.40656873914931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry != 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >= epsilon ) {",
            "score": 99.40644274259868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0+ epsilon ) <0) {",
            "score": 99.38136201746323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 + epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , entry ) ) {",
            "score": 99.3260726928711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( epsilon ,0, entry ) >=0) {",
            "score": 99.40631424753289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( epsilon , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& Math.abs( entry ) >=0) {",
            "score": 99.38112505744485,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && Math . abs ( entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >= false ) {",
            "score": 99.41816791735198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= false ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >=0) { {",
            "score": 99.40626220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( rhs , entry ) >=0)",
            "score": 99.40592447916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( rhs , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ||( entry <0) ) {",
            "score": 99.38107299804688,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >= epsilon ) {",
            "score": 99.32518813189338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0, {",
            "score": 99.42387309827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 , {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,0) <=0) {",
            "score": 99.41774388363487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , this , epsilon ) >=0) {",
            "score": 99.40614077919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >0)",
            "score": 99.40558624267578,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) >=1) {",
            "score": 99.38102213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) ,0) {",
            "score": 99.41803299753289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.startsWith( entry ,0, epsilon ) ) {",
            "score": 99.41773178998162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . starts CaMeL With ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ,0) >=0)",
            "score": 99.41087646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ,0) >=0) {",
            "score": 99.38078038832721,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <= 'AS IS') {",
            "score": 99.41787237870066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <= 'License') {",
            "score": 99.41787237870066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= $STRING$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ,0) >=0) {",
            "score": 99.41752544202302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0, epsilon ) >=0)",
            "score": 99.38055419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry , entry ) >=0) {",
            "score": 99.32254028320312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) <=0)",
            "score": 99.42965359157986,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.get( entry ,0, epsilon ) >=0) {",
            "score": 99.4250129250919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . get ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) *0.0) {",
            "score": 99.41744192023026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) * 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <= epsilon ) {",
            "score": 99.41692793996711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( !0, entry ) >=0) {",
            "score": 99.41000366210938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( ! 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0,6) >=0) {",
            "score": 99.4051577919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0,2) >=0) {",
            "score": 99.4051577919408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( entry ) >=0.6) {",
            "score": 99.380517578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.floor( entry ) >=0.2) {",
            "score": 99.380517578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( this.compareTo( entry ) >=0) {",
            "score": 99.32098795572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( this . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean MathUtils.compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.42939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >= minRatio ) {",
            "score": 99.42439350328948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1, epsilon ) >0) {",
            "score": 99.41679302014802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry <0, epsilon ) >=0) {",
            "score": 99.40968724300987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=0) { {",
            "score": 99.40507202148437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >= minRatio )",
            "score": 99.40420193142361,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) <0) {",
            "score": 99.38043619791667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry ,0) ) {",
            "score": 99.31980543870192,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( minRatioPos , entry ) >=0) {",
            "score": 99.42429713199013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( min CaMeL Ratio CaMeL Pos , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0<0, epsilon ) ) {",
            "score": 99.40871068050987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 < 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >= i ) {",
            "score": 99.40378931949013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= i ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Boolean.TRUE ) >=0) {",
            "score": 99.3803351907169,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Boolean . TRUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0,0, epsilon ) ) {",
            "score": 99.319580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >=6) {",
            "score": 99.42080206620066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >=2) {",
            "score": 99.42080206620066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0) >0) {",
            "score": 99.41682514391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <= minRatio ) ) {",
            "score": 99.40378289473684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=0)",
            "score": 99.40355767144098,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) <=0)",
            "score": 99.38018798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.31868250229779,
            "correctness": "uncompilable",
            "tokenized_patch": "final Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , minRatio ) >=0) {",
            "score": 99.42388594777961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry + entry ) >=0) {",
            "score": 99.40709164268092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry + entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >0.6) {",
            "score": 99.38015950520834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.abs( entry ) >0.2) {",
            "score": 99.38015950520834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) !=0) {",
            "score": 99.31800034466912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, epsilon ) >0) ) {",
            "score": 99.42341051603618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , epsilon ) > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( MathUtils.compare( entry , entry ) >=0) {",
            "score": 99.40334743923611,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int entry = tableau.getEntry( i , col ) ;",
            "score": 99.40232849121094,
            "correctness": "uncompilable",
            "tokenized_patch": "final int entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'AS IS') >=0) {",
            "score": 99.3800910500919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'License') >=0) {",
            "score": 99.3800910500919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < Math.compareTo( entry , epsilon ) ) {",
            "score": 99.31795008042279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < Math . compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) <=0",
            "score": 99.42551141036184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) <= 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, col ) <0) {",
            "score": 99.42298648231908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , col ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , entry ) >=0.0) {",
            "score": 99.41613051470588,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , entry ) >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry.0, epsilon ) ==0) {",
            "score": 99.41591925370066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , true ) >=0) {",
            "score": 99.40324964021382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , true ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, epsilon ) >=0) {",
            "score": 99.37994743795956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , abs ) >=0) {",
            "score": 99.41591925370066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , abs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare(0, entry , entry ) >=0) {",
            "score": 99.40278063322368,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( 0 , entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) ==0) {",
            "score": 99.37959798177083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >= Math.compareTo( entry ,0) ) {",
            "score": 99.31696633731617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math . compare CaMeL To ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry /1) >=0) {",
            "score": 99.42255602384868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry / 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >1) {",
            "score": 99.41843775699013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , distance ) >=0) {",
            "score": 99.41588070518092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , distance ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,6, epsilon ) ==0) {",
            "score": 99.41580360814145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,2, epsilon ) ==0) {",
            "score": 99.41580360814145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) >=0)",
            "score": 99.40272352430556,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , rhs ) >0) {",
            "score": 99.40155993009868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , rhs ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=1.0) {",
            "score": 99.37950942095588,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( epsilon( entry ,0, epsilon ) >=0) {",
            "score": 99.31171061197917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=6) {",
            "score": 99.41819361636513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) <=2) {",
            "score": 99.41819361636513,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) <= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double , epsilon ) >=0) {",
            "score": 99.40540771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) !=0) {",
            "score": 99.40230520148026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) <0.0) {",
            "score": 99.37941080729166,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.31146240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { minRatioPos = i ;",
            "score": 99.4244384765625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, rhs ) <0) {",
            "score": 99.42201634457237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , rhs ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0&& {",
            "score": 99.4174740439967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 && {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,6, epsilon ) <=0) {",
            "score": 99.41541812294408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,2, epsilon ) <=0) {",
            "score": 99.41541812294408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , $NUMBER$ , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >1)",
            "score": 99.40102810329861,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) > 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) <=0.0) {",
            "score": 99.37938017003677,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry <0, entry ) >=0) {",
            "score": 99.41668379934211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry < 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final int MathUtils.compare( entry ,0, epsilon ) ;",
            "score": 99.4154281616211,
            "correctness": "uncompilable",
            "tokenized_patch": "final int Math CaMeL Utils . compare ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= MathUtils.compare( entry ,0, epsilon ) ) {",
            "score": 99.41509046052632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= Math CaMeL Utils . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( <0, epsilon ) >=0) {",
            "score": 99.40443725585938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry +0, epsilon ) >=0) {",
            "score": 99.37932990579044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry + 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) ||( entry >=0) ) {",
            "score": 99.30776977539062,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( entry >= 0 ) || ( entry >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math != Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.42104620682566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, entry ) >=1) {",
            "score": 99.4165103310033,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isNaN( entry ,0) ) {",
            "score": 99.41525750411184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Na CaMeL N ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1) >=0)",
            "score": 99.37923758370536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) >= minRatio ) {",
            "score": 99.4210140830592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ,0) <0) {",
            "score": 99.37901395909927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0&& entry <=0.0) {",
            "score": 99.30351257324219,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 && entry <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.TRUE.equals( entry ,0, epsilon ) ) {",
            "score": 99.42062217310855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . TRUE . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) -1) {",
            "score": 99.4140560752467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0+ epsilon ) <=0) {",
            "score": 99.41340075041118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 + epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.FALSE.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.40065403988487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . FALSE . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.TRUE.compareTo( entry ,0) >=0) {",
            "score": 99.3994204872533,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . compare CaMeL To ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compare( entry ,0, epsilon ) >=0) {",
            "score": 99.30231475830078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) >0)",
            "score": 99.42280409071181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0, rhs ) ) {",
            "score": 99.42045323988971,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , rhs ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( Math.compareTo( entry , -1) >0) {",
            "score": 99.41597493489583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0, epsilon ) {",
            "score": 99.41287051930146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new ) <0) {",
            "score": 99.37891438802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0|| entry <0.0) {",
            "score": 99.30226135253906,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 || entry < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.TRUE.compareTo( entry ) <0) {",
            "score": 99.41595818014706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . compare CaMeL To ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math = Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.40019788240132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math = Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) <=1) {",
            "score": 99.37866928998162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) <= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) !=0) {",
            "score": 99.30222981770834,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.4200798483456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs ,0) >=0) {",
            "score": 99.41478207236842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) ) {",
            "score": 99.40018956801471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0) <=0)",
            "score": 99.39900037977431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) >=0.6) {",
            "score": 99.37860514322917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.round( epsilon ) >=0.2) {",
            "score": 99.37860514322917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >=0) &&( entry <0) ) {",
            "score": 99.30162811279297,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry >= 0 ) && ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=0) { ) {",
            "score": 99.37830307904412,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry , epsilon ) >=0) {",
            "score": 99.30152994791666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, value ) <=0) {",
            "score": 99.41306023848684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , value ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( this , epsilon ) >=0) {",
            "score": 99.40073756167763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( this , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( f , entry , epsilon ) >=0) {",
            "score": 99.39988949424342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( f , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1/ epsilon ) >=0) {",
            "score": 99.37795122931985,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 / epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { if( entry >=0) {",
            "score": 99.30015462239584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0) ) { {",
            "score": 99.40072970920139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,6) <=0) {",
            "score": 99.39981239720395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,2) <=0) {",
            "score": 99.39981239720395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , epsilon ) >=1.0) {",
            "score": 99.37780043658088,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0.0|| entry >=0.0) {",
            "score": 99.29505157470703,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 . 0 || entry >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( entry <0) ||( entry < minRatio ) ) {",
            "score": 99.41263834635417,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) <0) {",
            "score": 99.39946546052632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0*epsilon ) <=0) {",
            "score": 99.37746294806985,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 * epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0|| entry >0.0) {",
            "score": 99.29492950439453,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 . 0 || entry > 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.abs( entry ,0) >= epsilon ) {",
            "score": 99.41261393229166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry , epsilon ) >=0) {",
            "score": 99.37744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0&& epsilon <0.0) {",
            "score": 99.29378509521484,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 && epsilon < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry >0) ) {",
            "score": 99.41138980263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry > 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer entry = MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.39764083059211,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer entry = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon ,0, epsilon ) >=0) {",
            "score": 99.37616325827206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( epsilon , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.equals( entry ,0, epsilon ) ) {",
            "score": 99.29337310791016,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon /6) >=0) {",
            "score": 99.41185238486842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon /2) >=0) {",
            "score": 99.41185238486842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( col , epsilon ) >=0) {",
            "score": 99.4110043174342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert MathUtils.compareTo( entry ,0, epsilon ) >=0;",
            "score": 99.39980597245066,
            "correctness": "uncompilable",
            "tokenized_patch": "assert Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,1, epsilon ) >=0)",
            "score": 99.3761215209961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) >0) {",
            "score": 99.41734403722427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < minRatio ) { minRatioPos = i ;",
            "score": 99.4150390625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < min CaMeL Ratio ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, ! rhs ) ) {",
            "score": 99.39979858398438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , ! rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( rhs ,0, epsilon ) >=0)",
            "score": 99.39722357855902,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( rhs , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.0) ==0)",
            "score": 99.37606048583984,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . 0 ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { if( entry >=0) {",
            "score": 99.28829752604166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0.epsilon ) <=0) {",
            "score": 99.4114990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 . epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , null , epsilon ) >0) {",
            "score": 99.41047748766448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , null , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', entry ) >=0) {",
            "score": 99.3995297080592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', entry ) >=0) {",
            "score": 99.3995297080592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, entry ) >=0)",
            "score": 99.37602233886719,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) ||( entry >0) ) {",
            "score": 99.28741455078125,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( entry >= 0 ) || ( entry > 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.41425524259868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, i , epsilon ) >=0) {",
            "score": 99.41138980263158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.< compareTo( entry ,0, epsilon ) ) {",
            "score": 99.41012912326389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . < compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry.0, epsilon ) >=0) {",
            "score": 99.40045525045956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry . 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry1, epsilon ) >=0) {",
            "score": 99.3994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS',0, epsilon ) >=0) {",
            "score": 99.37591911764706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License',0, epsilon ) >=0) {",
            "score": 99.37591911764706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0) >=0) {",
            "score": 99.28701985677084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <= minRatio ) {",
            "score": 99.41386333264802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ) >= minRatio ) {",
            "score": 99.39891293174342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0+ epsilon ) >=0) {",
            "score": 99.39781429893092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 + epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry.0) >=0) {",
            "score": 99.39532149465461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry . 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,1, epsilon ) >0) {",
            "score": 99.3758544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 1 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0,0) ) {",
            "score": 99.28583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon1) >=0) {",
            "score": 99.41057671440973,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , entry ) >=0) {",
            "score": 99.40987356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >= -1) {",
            "score": 99.39772542317708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, epsilon ) )",
            "score": 99.39524332682292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0+ epsilon ) >0) {",
            "score": 99.37578986672794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 + epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry.compareTo( entry ) >=0) {",
            "score": 99.2857666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon , epsilon ) <=0) {",
            "score": 99.40976434004934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, list ) >=0) {",
            "score": 99.39728746916118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , list ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( rhs ,0, epsilon ) ) {",
            "score": 99.39520670572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( rhs , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry , epsilon ) >=0) {",
            "score": 99.3756462545956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compare( entry ,0, epsilon ) ) {",
            "score": 99.28480747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=6) {",
            "score": 99.39689555921052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0,0) >=2) {",
            "score": 99.39689555921052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1, epsilon ) >=0)",
            "score": 99.37561753216912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) &&( entry <=0) ) {",
            "score": 99.28467559814453,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry >= 0 ) && ( entry <= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >=0) &&( entry < minRatio ) ) {",
            "score": 99.40741644965277,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry >= 0 ) && ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ,0) ==0) {",
            "score": 99.39686343544408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , i , epsilon ) >0) {",
            "score": 99.39511590254934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , i , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >=0)",
            "score": 99.37556457519531,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry , epsilon ) >=0) {",
            "score": 99.28373718261719,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( name ,0, epsilon ) >=0) {",
            "score": 99.41530247738487,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( name , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0) { minRatioPos = i ;",
            "score": 99.41175079345703,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.contains( entry ,0,0, epsilon ) ) {",
            "score": 99.39681846217105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . contains ( entry , 0 , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) <0)",
            "score": 99.37541198730469,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { if( entry <0) {",
            "score": 99.28126627604166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, col ) >=0) {",
            "score": 99.4151547080592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final Integer entry = tableau.getEntry( i , col ) ;",
            "score": 99.41072082519531,
            "correctness": "uncompilable",
            "tokenized_patch": "final Integer entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, true ) ) {",
            "score": 99.3967220908717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , true ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) <0)",
            "score": 99.39495849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry ,0, entry ) ) {",
            "score": 99.28067016601562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >= minRatio ) {",
            "score": 99.41483800551471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=0)",
            "score": 99.39662170410156,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry <0) {",
            "score": 99.27977498372395,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , minRatioPos ) <=0) {",
            "score": 99.41440301192434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio CaMeL Pos ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=6) {",
            "score": 99.40029727711396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >=2) {",
            "score": 99.40029727711396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , exp ) >=0) {",
            "score": 99.39639442845395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , exp ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0&&",
            "score": 99.39138454861111,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0 &&",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0) >=1) {",
            "score": 99.37454044117646,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( entry >=0) { if( entry ==0) {",
            "score": 99.2797607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( entry == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String entry = MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.41022692228618,
            "correctness": "uncompilable",
            "tokenized_patch": "String entry = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0) >=0.0) {",
            "score": 99.40839700137867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) ||( entry < minRatio ) ) {",
            "score": 99.39795600043402,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry >= 0 ) || ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( rhs ,0, epsilon ) >=0)",
            "score": 99.39420318603516,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=6) {",
            "score": 99.39366957720588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) >=2) {",
            "score": 99.39366957720588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >=6) {",
            "score": 99.37428193933823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >=2) {",
            "score": 99.37428193933823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry >0) {",
            "score": 99.27779134114583,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) <=0) {",
            "score": 99.41013055098684,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( tableau.getEntry( i , col ) >=0) {",
            "score": 99.39761173023896,
            "correctness": "plausible",
            "tokenized_patch": "if ( tableau . get CaMeL Entry ( i , col ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , i , epsilon ) >=0)",
            "score": 99.39226616753473,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , i , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) <=0)",
            "score": 99.3737564086914,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , i ) >0) {",
            "score": 99.41351639597039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , i ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) >= -1) {",
            "score": 99.39651150173611,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( Math.compareTo( entry ,0, epsilon ) ) {",
            "score": 99.39110610064338,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( Math . compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0< epsilon ) ) {",
            "score": 99.38969983552632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 < epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry >=0) ) {",
            "score": 99.38911437988281,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0,0) >=0) {",
            "score": 99.37362850413604,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry , entry ) >=0) {",
            "score": 99.27579752604167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,1) >=0)",
            "score": 99.39153374565973,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0) ) { {",
            "score": 99.38901095920139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { if( entry !=0) {",
            "score": 99.27539876302083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( entry != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ,0) <0) {",
            "score": 99.41338147615132,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col , epsilon ) ;",
            "score": 99.40903049045139,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ; }",
            "score": 99.39122178819444,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , TRUE ) >=0) {",
            "score": 99.38895456414474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , TRUE ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0) { if( entry >=0) {",
            "score": 99.27506510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != 0 ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compareTo( entry ,0, epsilon ) )",
            "score": 99.40721938189338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare CaMeL To ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.close( entry ,0, epsilon ) >=0) {",
            "score": 99.3905388327206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . close ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| Math.compare( entry ,0) >=0)",
            "score": 99.37320285373264,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || Math . compare ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >0) &&( entry >=0) ) {",
            "score": 99.27484130859375,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( entry > 0 ) && ( entry >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) <=0)",
            "score": 99.40833197699652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,1) >=0)",
            "score": 99.38988579644098,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry <0) ) {",
            "score": 99.38776397705078,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , <0) ) {",
            "score": 99.38688151041667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( start , entry ) >=0) {",
            "score": 99.37217610677084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( start , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , rhs , epsilon ) >=0) {",
            "score": 99.41245404411765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >=1) {",
            "score": 99.39369111902573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < rhs ; i ++ ) {",
            "score": 99.3898696899414,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < rhs ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(6, epsilon ) >=0) {",
            "score": 99.38753469366776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(2, epsilon ) >=0) {",
            "score": 99.38753469366776,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { if( entry <0) {",
            "score": 99.27349446614583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 ) { if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs / entry ) >=0) {",
            "score": 99.41221217105263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry , epsilon ) <=0) {",
            "score": 99.4066162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs , epsilon ) >=0) {",
            "score": 99.39309512867646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0, rhs ) ) {",
            "score": 99.3870785361842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ,0, epsilon ) >=0) {",
            "score": 99.37176872702206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . round ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry , epsilon ) ) {",
            "score": 99.27286202566964,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,0, epsilon ) >=0) {",
            "score": 99.39256940569196,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , >=0) ) {",
            "score": 99.38589816623264,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.0, epsilon ) ) {",
            "score": 99.3695427389706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) ) {",
            "score": 99.2720458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry , entry ) ) {",
            "score": 99.41167805989583,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , entry ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.min( entry ,0.0f ) >= epsilon ) {",
            "score": 99.4058837890625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 f ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=0)",
            "score": 99.40433502197266,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final String entry = tableau.getEntry( i , col ) ;",
            "score": 99.38806915283203,
            "correctness": "uncompilable",
            "tokenized_patch": "final String entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , double ) epsilon ) {",
            "score": 99.38539632161458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , double ) epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <0.1) ) {",
            "score": 99.38233706825658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 0 . 1 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <0) { {",
            "score": 99.36932373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0&& epsilon >0.0) {",
            "score": 99.27153778076172,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 . 0 && epsilon > 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0, rhs ) >=0) {",
            "score": 99.41164036800987,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >= -1) {",
            "score": 99.38526746961806,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( start , entry ) >=0) {",
            "score": 99.38230494449013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( start , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0/ epsilon ) >0) {",
            "score": 99.36928423713235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 / epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { if( entry >0) {",
            "score": 99.2689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { if ( entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , entry ) >=0) final",
            "score": 99.4107601768092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , entry ) >= 0 ) final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { minRatioPos = i ;",
            "score": 99.40404510498047,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( Math.compare( col ,0, epsilon ) >=0) {",
            "score": 99.38656795726104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( col , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , epsilon ) ) {",
            "score": 99.3863525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ||( entry >=0) ) {",
            "score": 99.38508605957031,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry - entry ) >=0) {",
            "score": 99.38141832853618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry - entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new double ) >=0) {",
            "score": 99.36882019042969,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new double ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0.0) ) {",
            "score": 99.26832682291666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 . 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , minRatioPos ) ==0) {",
            "score": 99.41067023026316,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio CaMeL Pos ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,( Integer ) epsilon ) >=0) {",
            "score": 99.38599989149306,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , ( Integer ) epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >= minRatio )",
            "score": 99.38557942708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ==0) ) {",
            "score": 99.38458658854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0,0) ) {",
            "score": 99.38130268297698,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.6) <0)",
            "score": 99.36815643310547,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.2) <0)",
            "score": 99.36815643310547,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . $NUMBER$ ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) ||( entry <0) ) {",
            "score": 99.26807403564453,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry >= 0 ) || ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.matches( entry ,0, epsilon ) >=0) {",
            "score": 99.4036929481908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . matches ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >= epsilon ) {",
            "score": 99.38531853170956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry <0, epsilon ) >=0)",
            "score": 99.38458930121527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry < 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) >=0) {",
            "score": 99.26731363932292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , i , epsilon ) <0) {",
            "score": 99.41009200246711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , i , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0, epsilon ) )",
            "score": 99.40361785888672,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) >=0) {",
            "score": 99.36617337740384,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry ,0, -0) >=0) {",
            "score": 99.38473171657986,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , - 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < entry ; i ++ ) {",
            "score": 99.38299560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < entry ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ) <=0) {",
            "score": 99.38261862362133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'AS IS') >=0)",
            "score": 99.36597442626953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, 'License') >=0)",
            "score": 99.36597442626953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , $STRING$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry , epsilon ) >=0) {",
            "score": 99.2662841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) >=0)",
            "score": 99.38390435112848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=0)",
            "score": 99.38275146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , f ) >=0) {",
            "score": 99.38231703814338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,1, epsilon ) ) {",
            "score": 99.38087565104166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 1 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry <0) ) {",
            "score": 99.37872992621527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) >0) {",
            "score": 99.36583658854167,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry.compareTo( entry ) >=0) {",
            "score": 99.2660888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math : compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.4033138877467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math : compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( Math.compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.38155788845486,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(1, entry ) >=0) {",
            "score": 99.36494954427083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 1 , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.equals( entry , epsilon ) ) {",
            "score": 99.26573768028847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon )",
            "score": 99.40321260340073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0) ) {",
            "score": 99.3820068359375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.delete( entry ,0, epsilon ) >=0) {",
            "score": 99.38147690716912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . delete ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ||( entry >= minRatio ) ) {",
            "score": 99.37993028428819,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry >= min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , start ) >=0) {",
            "score": 99.36490071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0) >=0) {",
            "score": 99.26555989583333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , i ) >=0) {",
            "score": 99.40831801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon + epsilon ;",
            "score": 99.40269068667763,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon + epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=0, epsilon ) {",
            "score": 99.37815228630515,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , value ) <0) {",
            "score": 99.3646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , value ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { if( entry <=0) {",
            "score": 99.26549479166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( entry <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) >= epsilon ) {",
            "score": 99.38261144301471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0) >=0) { {",
            "score": 99.38172743055556,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry !=0, entry ) >=0) {",
            "score": 99.37810920266544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry != 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, rhs ) >=0) {",
            "score": 99.37604723478618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1) >0) {",
            "score": 99.36441802978516,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry(0,0, epsilon ) >=0) {",
            "score": 99.26532389322917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( 0 , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.4080746299342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) { entry = tableau.getEntry( i , col ) ;",
            "score": 99.40227307771382,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false ) { entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isEmpty( entry ,0) ) {",
            "score": 99.40174057904412,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Empty ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0,0) >=0) {",
            "score": 99.3810173483456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0+ epsilon ) >=0)",
            "score": 99.36412811279297,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 + epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >0) &&( entry >0) ) {",
            "score": 99.26464080810547,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( entry > 0 ) && ( entry > 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math == Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.40777266652961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math == Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, start ) >=0) {",
            "score": 99.38088809742646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry.,0) >=0) {",
            "score": 99.38022189670139,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry . , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , tableau ) >=0) {",
            "score": 99.37757065716912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , tableau ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) ==0) {",
            "score": 99.36411946614584,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( rhs ,0, epsilon ) <0) {",
            "score": 99.40754250919117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) >=1) {",
            "score": 99.40105523003473,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( Math.compare( entry , epsilon ) >=0) {",
            "score": 99.38020324707031,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry +0, epsilon ) <0) {",
            "score": 99.37907140395221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry + 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs ) >0) {",
            "score": 99.37904268152573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0, epsilon ) >0) {",
            "score": 99.37736960018383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0) ) { {",
            "score": 99.37370469835069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6) <0) {",
            "score": 99.36396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2) <0) {",
            "score": 99.36396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ) <0) {",
            "score": 99.26299641927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils < compareTo( entry ,0, epsilon ) ) {",
            "score": 99.40751567639802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils < compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( true ) { entry = tableau.getEntry( i , col ) ;",
            "score": 99.4006411903783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( true ) { entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >= -0) {",
            "score": 99.37999131944444,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , tableau ) >=0)",
            "score": 99.37870279947917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , tableau ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.TRUE.compareTo( entry ) >0) {",
            "score": 99.3773193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . compare CaMeL To ( entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils >= compareTo( entry ,0, epsilon ) ) {",
            "score": 99.37352230674342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils >= compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=1) {",
            "score": 99.36393229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { if( entry >0) {",
            "score": 99.26149088541666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 ) { if ( entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( entry ,0, epsilon ) >=0) {",
            "score": 99.40055577895221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ceil ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) >0) {",
            "score": 99.39879692925348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >=0) { {",
            "score": 99.37990993923611,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , -1) <=0) {",
            "score": 99.37851291232639,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry <0, epsilon ) ) {",
            "score": 99.37769272748162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry < 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <=0.6) {",
            "score": 99.36390787760416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) <= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.abs( epsilon ) <=0.2) {",
            "score": 99.36390787760416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) <= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry !=0) { if( entry <0) {",
            "score": 99.26119791666666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != 0 ) { if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ) >0) {",
            "score": 99.40739171645221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) !=0) {",
            "score": 99.37890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, minRatio ) ) {",
            "score": 99.37614889705883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) <=0) {",
            "score": 99.36378580729166,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! MathUtils.compare( entry ,0, epsilon ) )",
            "score": 99.37827435661765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry -0, epsilon ) >=0) {",
            "score": 99.37482766544117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry - 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry !=0, epsilon ) >=0) {",
            "score": 99.37467687270221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry != 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) >=1) {",
            "score": 99.36368815104167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0.compareTo( entry ) ) {",
            "score": 99.25948893229166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 . compare CaMeL To ( entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , rhs , epsilon ) >=0) {",
            "score": 99.40714946546052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0) < epsilon ) {",
            "score": 99.400146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final float entry = tableau.getEntry( i , col ) ;",
            "score": 99.39736938476562,
            "correctness": "uncompilable",
            "tokenized_patch": "final float entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry >= minRatio ) ) {",
            "score": 99.37411159939236,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry >= min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,1) >=0) {",
            "score": 99.36217447916667,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) -0)",
            "score": 99.3759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) - 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ==0.0) ) {",
            "score": 99.37005936472039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == 0 . 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=6)",
            "score": 99.36198425292969,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=2)",
            "score": 99.36198425292969,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= $NUMBER$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0) { if( entry >0) {",
            "score": 99.258642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != 0 ) { if ( entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry / entry ) >=0) {",
            "score": 99.40683162913604,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) == -1) {",
            "score": 99.3994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) == - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.compare( entry , entry , epsilon ) ) {",
            "score": 99.37748209635417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare ( entry , entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ) >=0, epsilon ) {",
            "score": 99.37361414292279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'AS IS', epsilon ) >=0) {",
            "score": 99.36917917351974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( 'License', epsilon ) >=0) {",
            "score": 99.36917917351974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , 'AS IS') >=0) {",
            "score": 99.36188151041667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , 'License') >=0) {",
            "score": 99.36188151041667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& 'AS IS'.equals( entry ) ) {",
            "score": 99.25782877604166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && $STRING$ . equals ( entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& 'License'.equals( entry ) ) {",
            "score": 99.25782877604166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && $STRING$ . equals ( entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0f ) >= epsilon ) {",
            "score": 99.39933946397569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 f ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.( entry ,0, epsilon ) >=0) {",
            "score": 99.37577819824219,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) ==0) {",
            "score": 99.3617919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry(0, epsilon ) >=0) {",
            "score": 99.2578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ) >=0",
            "score": 99.39894732306985,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ) >= 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=6) {",
            "score": 99.37690286075367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >=2) {",
            "score": 99.37690286075367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) <=0)",
            "score": 99.3752212524414,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >1) {",
            "score": 99.37049775965073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(6, entry ) >=0) {",
            "score": 99.36883223684211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(2, entry ) >=0) {",
            "score": 99.36883223684211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS') >0) {",
            "score": 99.36103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License') >0) {",
            "score": 99.36103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry , col ) >=0) {",
            "score": 99.40653722426471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) )",
            "score": 99.37686157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < col ; i ++ ) {",
            "score": 99.37519836425781,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < col ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >6) {",
            "score": 99.36952119715073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >2) {",
            "score": 99.36952119715073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) ==0)",
            "score": 99.36063385009766,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry >=0) {",
            "score": 99.25621541341145,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry / entry ) >=0) {",
            "score": 99.406494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry / entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=0) { {",
            "score": 99.39732530381944,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs ) >=0)",
            "score": 99.37481689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >= minRatio ) ) {",
            "score": 99.3675472861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( new double [ ] { entry",
            "score": 99.36741727941177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( new double [ ] { entry",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ||( entry >0) ) {",
            "score": 99.36031341552734,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry > 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >= epsilon ) {",
            "score": 99.39680032169117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, entry ) <=0)",
            "score": 99.37434895833333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , entry ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.) <0) {",
            "score": 99.35990142822266,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math != compareTo( entry ,0, epsilon ) >=0) {",
            "score": 99.40639776932566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry <0, epsilon ) >=0) {",
            "score": 99.36611758961396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >0)",
            "score": 99.35935974121094,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >0) { final",
            "score": 99.38581678602431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 0 ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , new ) >0) {",
            "score": 99.358447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0, rhs ) >=0) {",
            "score": 99.40632067228618,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) {",
            "score": 99.39597574869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i ,0, epsilon ) ;",
            "score": 99.38534206814236,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) >0)",
            "score": 99.37382676866319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , start ) >=0) {",
            "score": 99.37311868106617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry < minRatio ) &&( entry <0) ) {",
            "score": 99.36509874131944,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < min CaMeL Ratio ) && ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0) >= -1) {",
            "score": 99.35823822021484,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0) {",
            "score": 99.23333129882812,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.38412655101104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , minRatio ) <0)",
            "score": 99.37353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , min CaMeL Ratio ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon , epsilon ) ) {",
            "score": 99.37251551011029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ==0, entry ) >=0) {",
            "score": 99.36226160386029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry == 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ) >0) {",
            "score": 99.3581298828125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( 0 , entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry( entry ,0, epsilon ) >=0) {",
            "score": 99.23264973958334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , col ) >=0) {",
            "score": 99.4057373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry , entry ) >=0.0) {",
            "score": 99.39593864889706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) >0)",
            "score": 99.37258572048611,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <1) ) {",
            "score": 99.3612060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < 1 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=6) {",
            "score": 99.35733736478366,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=2) {",
            "score": 99.35733736478366,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0) { if( epsilon >=0) {",
            "score": 99.2306884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.getEntry( entry ,0, epsilon ) >=0) {",
            "score": 99.40568462171052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . get CaMeL Entry ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.endsWith( entry ,0, epsilon ) ) {",
            "score": 99.3839470358456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ends CaMeL With ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,0) >0)",
            "score": 99.37189398871527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , true , epsilon ) >=0) {",
            "score": 99.37157485064338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , true , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1) <0) {",
            "score": 99.36254164751838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.Double( entry ,0, epsilon ) >=0) {",
            "score": 99.3613640280331,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Double ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , <=0) ) {",
            "score": 99.3602294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , <= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) <=0.0) {",
            "score": 99.3562744140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=0, rhs ) )",
            "score": 99.37160915798611,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 0 , rhs ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon ) >=0) {",
            "score": 99.36253446691177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, epsilon ) >=1) {",
            "score": 99.35602213541667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ) >0) {",
            "score": 99.2296630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry ,0, rhs ) >=0) ) {",
            "score": 99.40550472861842,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , 0 , rhs ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,0, epsilon ) >=0",
            "score": 99.39486873851104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 0 , epsilon ) >= 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils( entry ,0, epsilon ) >=0) {",
            "score": 99.38299919577206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) { else",
            "score": 99.37063937717014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) { else",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0.0) ) {",
            "score": 99.36042336856617,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 . 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=0, epsilon ) {",
            "score": 99.3603156594669,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) >=0) { {",
            "score": 99.35745578342014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0) { {",
            "score": 99.35532052176339,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! ! Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.40531198601974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ! Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.38153754340277,
            "correctness": "uncompilable",
            "tokenized_patch": "result = Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -0) <0) {",
            "score": 99.35525512695312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| entry <0) {",
            "score": 99.2240498860677,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.value( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.4046630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . value ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long entry = tableau.getEntry( i , col ) ;",
            "score": 99.38018391927083,
            "correctness": "uncompilable",
            "tokenized_patch": "long entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry == tableau.getEntry( i , col ) ) {",
            "score": 99.37100040211396,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == tableau . get CaMeL Entry ( i , col ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "} if( Math.compare( entry ,0,0) >=0) {",
            "score": 99.37051052517361,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( Math . compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < tableau.getHeight( ) -1) {",
            "score": 99.35763549804688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < tableau . get CaMeL Height ( ) - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( Math.ceil( entry ) >=0) {",
            "score": 99.3550274188702,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . ceil ( entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) < minRatio )",
            "score": 99.37095133463542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) < min CaMeL Ratio )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) >0)",
            "score": 99.35472869873047,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double MathUtils.compareTo( entry ,0, rhs ) ;",
            "score": 99.35158962673611,
            "correctness": "uncompilable",
            "tokenized_patch": "final double Math CaMeL Utils . compare CaMeL To ( entry , 0 , rhs ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= epsilon ) { if( entry >=0) {",
            "score": 99.22054850260416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= epsilon ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=1) { {",
            "score": 99.39411078559027,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 1 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , Double.) >0) {",
            "score": 99.35454559326172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Double . ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'AS IS'.compareTo( entry ) >=0) {",
            "score": 99.219970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'License'.compareTo( entry ) >=0) {",
            "score": 99.219970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , col ) ==0) {",
            "score": 99.40412340666118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , col ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatioPos = i ; }",
            "score": 99.37936580882354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio CaMeL Pos = i ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo(0, entry , epsilon ) >=0) {",
            "score": 99.3571418313419,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( 0 , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) <=0.6) {",
            "score": 99.35430501302083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) <= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( entry ) <=0.2) {",
            "score": 99.35430501302083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) <= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) &&( rhs < minRatio ) ) {",
            "score": 99.34754774305556,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( rhs < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >=0) -0) {",
            "score": 99.21412150065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) <=0) {",
            "score": 99.37887912326389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.isInstance( entry ,0, epsilon ) ) {",
            "score": 99.35658174402573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . is CaMeL Instance ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >0.0) {",
            "score": 99.3542724609375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.min( entry ,0, value ) >=0) {",
            "score": 99.39292997472427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry , entry , epsilon ) >=0) {",
            "score": 99.36749945746527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( epsilon ) >=0.0) {",
            "score": 99.35367024739584,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . ceil ( epsilon ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0) {",
            "score": 99.2091293334961,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=0) { {",
            "score": 99.392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1, epsilon ) <=0)",
            "score": 99.36918809678819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 , epsilon ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry ,0,0) ) {",
            "score": 99.36719468060662,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , 0 , 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) >=1) {",
            "score": 99.35572725183823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) >=1)",
            "score": 99.35359191894531,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) >= 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&&( entry >=0) ) {",
            "score": 99.20425851004464,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && ( entry >= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , null , epsilon ) <0) {",
            "score": 99.40296695106908,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , null , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <=0, epsilon ) )",
            "score": 99.36909315321181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry <= 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0,0) >=1) {",
            "score": 99.366943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "entry = MathUtils.compare( entry ,0, epsilon ) ;",
            "score": 99.35601806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "entry = Math CaMeL Utils . compare ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) <=0) {",
            "score": 99.35315755208333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0|| entry >0) {",
            "score": 99.2024637858073,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 || entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <= -1) {",
            "score": 99.39217800564236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs , epsilon ) >=0)",
            "score": 99.36903889973958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ,1) <=0) {",
            "score": 99.3556769875919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , 1 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( col , epsilon ) >=0) {",
            "score": 99.3552605124081,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( col , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , -1) >=0) {",
            "score": 99.35308837890625,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , - 1 ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry < -1) ) {",
            "score": 99.3443603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < - 1 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry <=0) {",
            "score": 99.20225016276042,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( tableau.getEntry( i , col ) != null ) {",
            "score": 99.40268123851104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( tableau . get CaMeL Entry ( i , col ) != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry , entry ,0) >=0) {",
            "score": 99.39194742838542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , null , epsilon ) >=0)",
            "score": 99.36888292100694,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , null , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) <=0) {",
            "score": 99.35284016927083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0.0&& entry < epsilon ) {",
            "score": 99.20059640066964,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 && entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) <0)",
            "score": 99.35240936279297,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&&( entry >0) ) {",
            "score": 99.19772774832589,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && ( entry > 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math : compareTo( entry ,0, epsilon ) >=0)",
            "score": 99.37514241536458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math : compare CaMeL To ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ,0) >=0)",
            "score": 99.36846923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) <=0.0) {",
            "score": 99.3523193359375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( ! MathUtils.compareTo( entry ==0) ) {",
            "score": 99.33795844184027,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . compare CaMeL To ( entry == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon <0) {",
            "score": 99.1956787109375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( Math.equals( entry ,0, epsilon ) ) ) {",
            "score": 99.40011776194854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . equals ( entry , 0 , epsilon ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < epsilon.length ; i ++ ) {",
            "score": 99.39028591579861,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < epsilon . length ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,6) >=0)",
            "score": 99.36836073133681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0,2) >=0)",
            "score": 99.36836073133681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.append( entry ,0, epsilon ) >=0) {",
            "score": 99.35320685891544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . append ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1) <=0) {",
            "score": 99.35213470458984,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ) >=0) { {",
            "score": 99.33498806423611,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon( entry , epsilon ) >=0) {",
            "score": 99.19154710036058,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >=0, epsilon )",
            "score": 99.36834716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) >= 0 , epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry , epsilon ) ) {",
            "score": 99.36274988511029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ,0) <0)",
            "score": 99.35196685791016,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry , 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double MathUtils.compareTo( entry ,0, entry ) ;",
            "score": 99.33463541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "final double Math CaMeL Utils . compare CaMeL To ( entry , 0 , entry ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| entry >=0) {",
            "score": 99.1914774576823,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 || entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , 'AS IS', epsilon ) >=0)",
            "score": 99.36825222439236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , 'License', epsilon ) >=0)",
            "score": 99.36825222439236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $STRING$ , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) <0) {",
            "score": 99.35291245404412,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=6) {",
            "score": 99.3528191061581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >=2) {",
            "score": 99.3528191061581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) ==0) {",
            "score": 99.35138346354167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "} return MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.33424207899306,
            "correctness": "uncompilable",
            "tokenized_patch": "} return Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& entry <0) {",
            "score": 99.18672688802083,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry ,0, rhs ) ) {",
            "score": 99.39944661458334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.0) <= epsilon ) {",
            "score": 99.38902372472427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . 0 ) <= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <= minRatio ) { minRatioPos = i ;",
            "score": 99.37242296006944,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= min CaMeL Ratio ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "9"
        },
        {
            "patch": "if( Math.compareTo( entry ,6, epsilon ) >0)",
            "score": 99.36804877387152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2, epsilon ) >0)",
            "score": 99.36804877387152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, epsilon ) ) {",
            "score": 99.3508544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo(0, entry ) >=0)",
            "score": 99.3323974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compare( entry ,0, epsilon ) ) {",
            "score": 99.18521822415866,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon.compareTo( entry ) >=0) {",
            "score": 99.34898274739584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry ,0) ) {",
            "score": 99.18281773158482,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < minRatio ; i ++ ) {",
            "score": 99.36739773220486,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < min CaMeL Ratio ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , epsilon ) >=1) {",
            "score": 99.34874674479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0, epsilon ) >=0) { {",
            "score": 99.33123779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compareTo( entry , entry ) ) {",
            "score": 99.18194580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,0, epsilon ) >",
            "score": 99.37142605251736,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) >",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ,0) >=0) {",
            "score": 99.34873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( epsilon , epsilon ) >=0)",
            "score": 99.33066813151042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , col ,0) >=0) {",
            "score": 99.39561552159927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) >= epsilon ) {",
            "score": 99.38760579427084,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=1) {",
            "score": 99.34864908854166,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo(0, epsilon ) >=0)",
            "score": 99.33034939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& entry >0) {",
            "score": 99.18100992838542,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! compareTo( entry ,0, epsilon ) >0) {",
            "score": 99.36859130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare CaMeL To ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry , epsilon ) <0)",
            "score": 99.36662462022569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.trim( entry ,0, entry ) >=0) {",
            "score": 99.35093778722427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . trim ( entry , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) >=1.0) {",
            "score": 99.34847819010416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0.0&& epsilon < epsilon ) {",
            "score": 99.17755998883929,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 && epsilon < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( ! entry ,0, epsilon ) >=0) {",
            "score": 99.39429389105902,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( ! entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=0)",
            "score": 99.34845842633929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , value ) >=0) {",
            "score": 99.34811580882354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&&( entry <0) ) {",
            "score": 99.17752511160714,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) <0) {",
            "score": 99.39409722222223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0L ) {",
            "score": 99.38534206814236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 L ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, rhs ) <0)",
            "score": 99.3660888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , rhs ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) ==0) {",
            "score": 99.34824782151442,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) &&( entry >0) ) {",
            "score": 99.34721374511719,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry > 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry , entry ) ) {",
            "score": 99.17530235877403,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry >=0, epsilon ) )",
            "score": 99.36596001519098,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry >= 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=1.0) {",
            "score": 99.34815266927083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( MathUtils.compare( entry ==0, entry ) ) {",
            "score": 99.34678739659927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry == 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon >0) {",
            "score": 99.17465209960938,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && epsilon > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,6) >=0)",
            "score": 99.36577690972223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,2) >=0)",
            "score": 99.36577690972223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry <0, epsilon ) ) {",
            "score": 99.34843175551471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry < 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry ==0) ) {",
            "score": 99.34370422363281,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry == 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) >=0) {",
            "score": 99.17209879557292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry /1) >=0) {",
            "score": 99.39211856617646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.6) >=0)",
            "score": 99.3465805053711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0.2) >=0)",
            "score": 99.3465805053711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 . $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry instanceof0) ) {",
            "score": 99.32561178768383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry instanceof 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry < epsilon ) {",
            "score": 99.16785685221355,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry instanceof Integer ) ) {",
            "score": 99.3639777688419,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry instanceof Integer ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,0, epsilon ) <=0) {",
            "score": 99.36155790441177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry ,1, epsilon ) >=0) {",
            "score": 99.34693818933823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) <0) {",
            "score": 99.34647623697917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <6) ) {",
            "score": 99.32271082261029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry <2) ) {",
            "score": 99.32271082261029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >0) >=0) {",
            "score": 99.16366577148438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry > 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, rhs ) >=0) {",
            "score": 99.39082845052083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0,0) >=0) {",
            "score": 99.38280531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.isEmpty( entry ,0, epsilon ) ) {",
            "score": 99.36320944393383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . is CaMeL Empty ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >1)",
            "score": 99.34620666503906,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) > 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) >0) {",
            "score": 99.16079711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) !=0) { {",
            "score": 99.38239881727431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) != 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.35410443474265,
            "correctness": "uncompilable",
            "tokenized_patch": "String Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) <0) {",
            "score": 99.34546712239583,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry !=1) ) {",
            "score": 99.32162655101104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != 1 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon <0) {",
            "score": 99.160400390625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( tableau.getEntry( i , col ) ==0) {",
            "score": 99.38953354779412,
            "correctness": "wrong",
            "tokenized_patch": "if ( tableau . get CaMeL Entry ( i , col ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.format( entry ,0, epsilon ) >=0) {",
            "score": 99.36191693474265,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . format ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( col , col ) ;",
            "score": 99.3505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( col , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) >=0)",
            "score": 99.34525844029018,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ||( entry ==0) ) {",
            "score": 99.33846282958984,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry == 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compareTo( entry instanceof double ) ) {",
            "score": 99.31967342601104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry instanceof double ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { return 0; } else {",
            "score": 99.15567452566964,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { return 0 ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( entry , rhs ) >=0) {",
            "score": 99.38896627987133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! MathUtils.contains( entry ,0, epsilon ) ) {",
            "score": 99.38214789496527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math CaMeL Utils . contains ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , -1) <0)",
            "score": 99.36113424862133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0, entry ) >=0) {",
            "score": 99.34630629595588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >=0)",
            "score": 99.34521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <=0) &&( entry >=0) ) {",
            "score": 99.33174133300781,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry <= 0 ) && ( entry >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0&& entry >=0) {",
            "score": 99.15564982096355,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon f ) >=0) {",
            "score": 99.38195122612848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0) <0) {",
            "score": 99.35985610064338,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,6, epsilon ) ) {",
            "score": 99.34534505208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , $NUMBER$ , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,2, epsilon ) ) {",
            "score": 99.34534505208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , $NUMBER$ , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( entry ) >=0.0) {",
            "score": 99.34457194010416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . ceil ( entry ) >= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if(( entry <=0) ||( entry >=0) ) {",
            "score": 99.32856750488281,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry <= 0 ) || ( entry >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( compareTo( entry ) >=0) {",
            "score": 99.15500112680289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry , entry ) >=0) ) {",
            "score": 99.38716394761029,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , entry ) >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.valueOf( entry , epsilon ) >=0) {",
            "score": 99.35022690716912,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . value CaMeL Of ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( i , epsilon ) >=0) {",
            "score": 99.34487735523896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( i , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatio = rhs / entry ;",
            "score": 99.34483337402344,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio = rhs / entry ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.max( entry ,0) >=1) {",
            "score": 99.34424641927083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( MathUtils.compareTo( entry == null ) ) {",
            "score": 99.30068790211396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry == null ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0&& entry <0) {",
            "score": 99.15169270833333,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry ) !=0) {",
            "score": 99.38712565104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,6) >0) {",
            "score": 99.34475528492646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,2) >0) {",
            "score": 99.34475528492646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , $NUMBER$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { minRatioPos = i ; }",
            "score": 99.34389361213235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { min CaMeL Ratio CaMeL Pos = i ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , null , epsilon ) >=0)",
            "score": 99.3438720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , null , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry < null ) ) {",
            "score": 99.30046530330883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry < null ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&&( entry <=0) ) {",
            "score": 99.14990234375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && ( entry <= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry ,0) ==0) {",
            "score": 99.380615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( Math.compare( entry ,0, epsilon ) >=0) {",
            "score": 99.34789321001838,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( Math . compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs , epsilon ) >=0) {",
            "score": 99.3439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <=1.0) {",
            "score": 99.34376627604166,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) <= 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compareTo( entry != null ) ) {",
            "score": 99.29828957950367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry != null ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& entry >0) {",
            "score": 99.14980061848958,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry != 0 && entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , col , epsilon ) <0) {",
            "score": 99.38616584329044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) >0)",
            "score": 99.34354400634766,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.FALSE.compareTo( entry ) >=0) {",
            "score": 99.34326889935662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . FALSE . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.equals( entry ,0) ) {",
            "score": 99.14921351841518,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . equals ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( entry , epsilon ) ) {",
            "score": 99.34671223958334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( entry , epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, entry ) ) {",
            "score": 99.34340006510416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs , entry ) >=0) {",
            "score": 99.34259440104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry ) <0) {",
            "score": 99.31612141927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( epsilon < epsilon ) ) {",
            "score": 99.29689025878906,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( epsilon < epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >0&& entry >0) {",
            "score": 99.1455586751302,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 && entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , entry , epsilon ) <0) {",
            "score": 99.37877699908088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0) >0) {",
            "score": 99.3543342141544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) < epsilon ) {",
            "score": 99.34644272748162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( col , entry ) >=0) {",
            "score": 99.34132295496323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( col , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( epsilon ==0) ) {",
            "score": 99.31493377685547,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( epsilon == 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0|| entry <0) {",
            "score": 99.14476521809895,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0{",
            "score": 99.34313201904297,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( rhs , entry ) >=0) {",
            "score": 99.3411865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry(0, entry ) >=0) {",
            "score": 99.14464393028847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( 0 , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , col , entry ) >=0) {",
            "score": 99.38156307444854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1) <0) {",
            "score": 99.35206514246323,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.0) >=0)",
            "score": 99.34310150146484,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,1) >0) {",
            "score": 99.34109317555146,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ||( entry <=0) ) {",
            "score": 99.31388092041016,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) || ( entry <= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( epsilon ) { if( entry >=0) {",
            "score": 99.14393967848558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , rhs ) <0) {",
            "score": 99.38108723958334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , rhs ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.contains( entry ,0, epsilon ) )",
            "score": 99.35160609654018,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . contains ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , -1) >=0)",
            "score": 99.34185384114583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , - 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int MathUtils.compareTo( entry ,0, epsilon ) ;",
            "score": 99.3385368795956,
            "correctness": "uncompilable",
            "tokenized_patch": "int Math CaMeL Utils . compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >= -0) {",
            "score": 99.31328582763672,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compare( entry , epsilon ) >=0) {",
            "score": 99.14114145132211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.! entry( entry ,0, epsilon ) ) {",
            "score": 99.3807373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ! entry ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ) >=0)",
            "score": 99.3510971069336,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) >1) {",
            "score": 99.33556410845588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry <=0) ) {",
            "score": 99.30904388427734,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry <= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( entry >=0) ) {",
            "score": 99.14024939903847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col ) ; }",
            "score": 99.35076545266544,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, epsilon ) ==0) {",
            "score": 99.3410400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry <0) ) {",
            "score": 99.30747884114584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry <0) ) {",
            "score": 99.2724365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon >0) {",
            "score": 99.13991292317708,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "synchronized( MathUtils.compareTo( entry , epsilon ) ) {",
            "score": 99.34455422794117,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( Math CaMeL Utils . compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >0.6) {",
            "score": 99.34070638020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) > 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( epsilon ) >0.2) {",
            "score": 99.34070638020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) > 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) &&( entry < epsilon ) ) {",
            "score": 99.26360321044922,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry < epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry ) < minRatio ) {",
            "score": 99.37994025735294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0, epsilon ) >=0)",
            "score": 99.34005737304688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <=0) ||( entry <0) ) {",
            "score": 99.30094146728516,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry <= 0 ) || ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry < minRatioPos && entry <0) {",
            "score": 99.2584457397461,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < min CaMeL Ratio CaMeL Pos && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "13"
        },
        {
            "patch": "if(( entry !=0) >=0) {",
            "score": 99.13734944661458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry != 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0L ) >=0) {",
            "score": 99.37743462456598,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 L ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,1) <0) {",
            "score": 99.34000651041667,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , 1 ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals(0, entry ,0, epsilon ) ) {",
            "score": 99.3337761374081,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( 0 , entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| entry <=0) {",
            "score": 99.13682047526042,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compareTo( entry , -1) >=0)",
            "score": 99.34529383042279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , - 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1, epsilon ) ==0)",
            "score": 99.33995056152344,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 , epsilon ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( Math.MAX_VALUE , entry ) ) {",
            "score": 99.33346737132354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( Math . MAX _ VALUE , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( epsilon !=0) ) {",
            "score": 99.29930877685547,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( epsilon != 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0) { */ } else {",
            "score": 99.13589242788461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { * / } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.entry( entry ,0, epsilon ) >=0) {",
            "score": 99.37965303308823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . entry ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0.epsilon ) >=0) {",
            "score": 99.3763068704044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( f , epsilon ) >=0) {",
            "score": 99.34333352481617,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( f , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0) { ) {",
            "score": 99.33971354166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 ) { ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( epsilon >=0) ) {",
            "score": 99.29901123046875,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) && ( epsilon >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry < minRatio ) >= minRatio ) {",
            "score": 99.24314880371094,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < min CaMeL Ratio ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ) { if( entry >=0) {",
            "score": 99.13529146634616,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ) { if ( entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ) >=1) {",
            "score": 99.33970540364584,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( 0 , entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "float entry = tableau.getEntry( i , col ) ;",
            "score": 99.33103841145834,
            "correctness": "uncompilable",
            "tokenized_patch": "float entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0.0) { } else {",
            "score": 99.13134765625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 0 ) { } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , rhs ) <=0) {",
            "score": 99.34422392003677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , rhs ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.) >=0)",
            "score": 99.33882649739583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0,0, epsilon ) {",
            "score": 99.13102213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0) >= epsilon ) {",
            "score": 99.3386474609375,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . max ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry < minRatio ) ) {",
            "score": 99.331298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& entry <0) {",
            "score": 99.13102213541667,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , epsilon , epsilon ) <0) {",
            "score": 99.37791532628677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) >0)",
            "score": 99.3437728881836,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=6) {",
            "score": 99.33844463641827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.abs( entry ) >=2) {",
            "score": 99.33844463641827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( entry ==0) { minRatioPos = i ;",
            "score": 99.32106018066406,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry ==0) >=0) {",
            "score": 99.13051350911458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry == 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0,0) ) {",
            "score": 99.34016418457031,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0, epsilon ) ) {",
            "score": 99.3382568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Double entry = tableau.getEntry( i , col ) ;",
            "score": 99.32019856770833,
            "correctness": "uncompilable",
            "tokenized_patch": "Double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry !=0) {",
            "score": 99.13027954101562,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && entry != 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( ! entry.compareTo(0) >=0) {",
            "score": 99.3728256225586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry . compare CaMeL To ( 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0, epsilon ;",
            "score": 99.34147135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 , epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=0.0) {",
            "score": 99.33957088694854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= 0 . 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1.0) <0)",
            "score": 99.33818817138672,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 . 0 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatioPos = entry ;",
            "score": 99.31959533691406,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio CaMeL Pos = entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon >= minRatio ) {",
            "score": 99.21257672991071,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry( entry , epsilon ) >=0) {",
            "score": 99.12978891225961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.6) >= epsilon ) {",
            "score": 99.37249396829044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . $NUMBER$ ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0.2) >= epsilon ) {",
            "score": 99.37249396829044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 . $NUMBER$ ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( f ,0, epsilon ) >=0) {",
            "score": 99.3392333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( f , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( start , epsilon ) >=0) {",
            "score": 99.33811848958334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( start , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) <=1) {",
            "score": 99.28507486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) <= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon < epsilon ) {",
            "score": 99.12742106119792,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && epsilon < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry , epsilon ) ==0) {",
            "score": 99.37135225183823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , epsilon ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) <0)",
            "score": 99.3408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( name ,0, epsilon ) >=0) {",
            "score": 99.3389533547794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( name , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) <0) {",
            "score": 99.33779672475961,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ==0) ) {",
            "score": 99.19729817708334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon( entry ,0, epsilon ) ) {",
            "score": 99.12646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.( entry ,0, epsilon ) >=0)",
            "score": 99.34039665670956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , start ) >=0) {",
            "score": 99.33891027113971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , start ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >1.0) {",
            "score": 99.33763020833334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) > 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "final Object entry = tableau.getEntry( i , col ) ;",
            "score": 99.31427001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "final Object entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& compare <0) {",
            "score": 99.12603759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && compare < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , minRatio ) <0) {",
            "score": 99.37534466911765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , min CaMeL Ratio ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(6, entry ) >=0) {",
            "score": 99.336962890625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max(2, entry ) >=0) {",
            "score": 99.336962890625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( $NUMBER$ , entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <0&& entry < minRatio ) {",
            "score": 99.19172014508929,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >0&& entry >=0) {",
            "score": 99.1259765625,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 && entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.floor( entry ) >0.0) {",
            "score": 99.3366455078125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( entry ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=0)",
            "score": 99.30748639787946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry >=0) ) {",
            "score": 99.18832194010416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& ! entry >0) {",
            "score": 99.1255352313702,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.equals( rhs ,0, epsilon ) ) {",
            "score": 99.33979348575367,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math CaMeL Utils . equals ( rhs , 0 , epsilon ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.compare( entry , value ) >0) {",
            "score": 99.33656412760416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , value ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, epsilon ) ) { {",
            "score": 99.31002807617188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , epsilon ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , epsilon ) ;",
            "score": 99.30491638183594,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry !=0) ) {",
            "score": 99.1822998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry != 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) !=0) {",
            "score": 99.12477620442708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0) final",
            "score": 99.373291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0 ) final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry , minRatioPos ) ) {",
            "score": 99.33887436810662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , min CaMeL Ratio CaMeL Pos ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=6) {",
            "score": 99.3364013671875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) >=2) {",
            "score": 99.3364013671875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "final double entry = tableau.getEntry(0, col ) ;",
            "score": 99.30419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( 0 , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry >0) {",
            "score": 99.12352498372395,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , null ) <0) {",
            "score": 99.33531087239584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , null ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! tableau.compareTo( entry ) >=0) {",
            "score": 99.30614471435547,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! tableau . compare CaMeL To ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.<( entry ,0, epsilon ) ) {",
            "score": 99.30257161458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . < ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compare( entry ,0,0) >=0) {",
            "score": 99.26941731770833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare ( entry , 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry < minRatio ) {",
            "score": 99.18083844866071,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry !=0&& entry >=0) {",
            "score": 99.12256876627605,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry != 0 && entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( tableau.getEntry( i , col ) == null ) {",
            "score": 99.37262321920956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( tableau . get CaMeL Entry ( i , col ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry != tableau.getEntry( i , col ) ) {",
            "score": 99.33744542738971,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != tableau . get CaMeL Entry ( i , col ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare(0, entry ) >=1) {",
            "score": 99.33472493489583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) -0) {",
            "score": 99.12203979492188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , f ) >=0) {",
            "score": 99.36929141773896,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,0, entry ) ) {",
            "score": 99.33395182291666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& ! entry <0) {",
            "score": 99.12091533954327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS', epsilon ) >=0) {",
            "score": 99.33380533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License', epsilon ) >=0) {",
            "score": 99.33380533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , col )",
            "score": 99.2991943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , col )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) >= minRatio ) {",
            "score": 99.1737060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& entry >0) {",
            "score": 99.1198018391927,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && entry > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.compare( rhs , entry ) >=0) {",
            "score": 99.33375459558823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( rhs , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) >0) {",
            "score": 99.33291015625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "for( int i =0; i < epsilon ; i ++ ) {",
            "score": 99.31539154052734,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < epsilon ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0) >=0) {",
            "score": 99.29737955729166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry !=0) ) {",
            "score": 99.26359049479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry != 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon < minRatio ) {",
            "score": 99.16177804129464,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >0) -0) {",
            "score": 99.1195576985677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry > 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare compare( entry ,0, epsilon ) >=0) {",
            "score": 99.37105984157986,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare compare ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0, epsilon ) <=0) {",
            "score": 99.36801326976104,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ) <0) {",
            "score": 99.33289388020833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( 0 , entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "final if( Math.compare( entry , epsilon ) >=0) {",
            "score": 99.314697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "final if ( Math . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.matches( entry ,0, epsilon ) >=0)",
            "score": 99.29830932617188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . matches ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0,0) >=0) {",
            "score": 99.26355794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < minRatio ) {",
            "score": 99.16085815429688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0&& ! entry <=0) {",
            "score": 99.1195068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! entry <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) &&( entry < minRatio ) )",
            "score": 99.3334099264706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) && ( entry < min CaMeL Ratio ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS') <=0) {",
            "score": 99.33243815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License') <=0) {",
            "score": 99.33243815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( Math.compare( entry ,0, epsilon ) ) {",
            "score": 99.31371256510417,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( Math . compare ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >= epsilon ) {",
            "score": 99.261767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry < minRatio ) >=0) {",
            "score": 99.16043526785714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < min CaMeL Ratio ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& ! entry >=0) {",
            "score": 99.11924391526442,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >=1) {",
            "score": 99.33194673978366,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( entry < tableau.getWidth( ) -1) {",
            "score": 99.28378295898438,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < tableau . get CaMeL Width ( ) - 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <0&& rhs < minRatio ) {",
            "score": 99.1575927734375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && rhs < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0&& entry <0) {",
            "score": 99.1191914876302,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.<( entry ,0, epsilon ) ) {",
            "score": 99.36862362132354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . < ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , i ) ;",
            "score": 99.29492950439453,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , i ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.contains( entry ,0) ) {",
            "score": 99.25823567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . contains ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0, epsilon ) >=0) {",
            "score": 99.15673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( entry , epsilon ) ) {",
            "score": 99.11915001502403,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getEntry( i , -1) ;",
            "score": 99.33308679917279,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) >=1) {",
            "score": 99.33133951822917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.contains( entry ,0, entry ) ) {",
            "score": 99.28050944010417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . contains ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon >= minRatio ) {",
            "score": 99.15300641741071,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( 'AS IS'.equals( entry ) >=0) {",
            "score": 99.1189716045673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'License'.equals( entry ) >=0) {",
            "score": 99.1189716045673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.Math.compare( entry , epsilon ) >=0) {",
            "score": 99.36531336167279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Math . compare ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <1.0) {",
            "score": 99.33037923177083,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) < 1 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "final Double entry = tableau.getEntry( i , col ) ;",
            "score": 99.29389953613281,
            "correctness": "uncompilable",
            "tokenized_patch": "final Double entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'AS IS'.compareTo( entry ) <0) {",
            "score": 99.25603841145833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . compare CaMeL To ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'License'.compareTo( entry ) <0) {",
            "score": 99.25603841145833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . compare CaMeL To ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry <0) ) {",
            "score": 99.15261606069711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { */ } else {",
            "score": 99.11881197415866,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { * / } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) <=0) {",
            "score": 99.33021647135416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( MathUtils.compare( entry , epsilon ) ) {",
            "score": 99.30660807291666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry <=0) ) {",
            "score": 99.2505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry <= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon >=0) {",
            "score": 99.1498311360677,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >= epsilon ) >=0) {",
            "score": 99.1187744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , epsilon ) >=1) {",
            "score": 99.33017578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >= -0) {",
            "score": 99.30305480957031,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { minRatio = rhs / entry ;",
            "score": 99.29277038574219,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 ) { min CaMeL Ratio = rhs / entry ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( epsilon ) >=0) {",
            "score": 99.27471516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >1) {",
            "score": 99.24761555989583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon < minRatio ) {",
            "score": 99.13812255859375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( entry >=0) -1) {",
            "score": 99.11598714192708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , rhs ,0) >=0) {",
            "score": 99.36766142003677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , rhs , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , value ) >=0) {",
            "score": 99.3642937155331,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, epsilon ) ) { final",
            "score": 99.29244232177734,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , epsilon ) ) { final",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=6) {",
            "score": 99.24713541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) >=2) {",
            "score": 99.24713541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <=0) >=0) {",
            "score": 99.11339314778645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry <= 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , col ) >=0) {",
            "score": 99.36693617876838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) ==0)",
            "score": 99.32979038783482,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0, epsilon ) <=0) {",
            "score": 99.32945341222427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) >= epsilon ) {",
            "score": 99.30099283854166,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "Object entry = tableau.getEntry( i , col ) ;",
            "score": 99.2917724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "Object entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=1) {",
            "score": 99.27017415364584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < minRatioPos ) {",
            "score": 99.13197835286458,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "13"
        },
        {
            "patch": "if( entry >=0&& epsilon >=0) {",
            "score": 99.11263020833333,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && epsilon >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare <( entry ,0, epsilon ) >=0) {",
            "score": 99.36652289496527,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare < ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=6) {",
            "score": 99.3634894875919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) <=2) {",
            "score": 99.3634894875919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) <= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >0) {",
            "score": 99.3296142578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "String rhs = tableau.getEntry( i , col ) ;",
            "score": 99.29147135416666,
            "correctness": "uncompilable",
            "tokenized_patch": "String rhs = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ==0) -0) {",
            "score": 99.11159261067708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry == 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { break ; } else {",
            "score": 99.11093374399039,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { break ; } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , Math.epsilon ) >=0) {",
            "score": 99.3627068014706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , Math . epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) >=1) {",
            "score": 99.32928059895833,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( rhs ,0) >=0)",
            "score": 99.32901000976562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >= epsilon ) {",
            "score": 99.29805501302083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { minRatio = rhs / entry ;",
            "score": 99.28936004638672,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 ) { min CaMeL Ratio = rhs / entry ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( rhs ) >=0) {",
            "score": 99.266455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry ==0) {",
            "score": 99.10951741536458,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils != entry ,0, epsilon ) {",
            "score": 99.10049002511161,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils != entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( Math.compare( entry , entry ) <0) ) {",
            "score": 99.36412856158088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( Math . compare ( entry , entry ) < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) >=0",
            "score": 99.36195475260416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) >= 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) >=6) {",
            "score": 99.32903645833333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.max(0, entry ) >=2) {",
            "score": 99.32903645833333,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "for( int i =0; i < i ; i ++ ) {",
            "score": 99.32721710205078,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < i ; i ++ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon <0) { minRatioPos = i ;",
            "score": 99.28787994384766,
            "correctness": "wrong",
            "tokenized_patch": "if ( epsilon < 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >=0) ==0) {",
            "score": 99.10791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon < epsilon ) {",
            "score": 99.08909098307292,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,1) ==0) {",
            "score": 99.32823079427084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compare( entry , entry ) >0)",
            "score": 99.28306579589844,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare ( entry , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon( entry ,0) >=0) {",
            "score": 99.10764723557692,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon < epsilon ) {",
            "score": 99.07411702473958,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.TRUE.equals( entry ,0, epsilon ) ) {",
            "score": 99.36297966452206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE . equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry , epsilon ) >= epsilon ) {",
            "score": 99.29405924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0) ) {",
            "score": 99.21117292131696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& ! entry !=0) {",
            "score": 99.10547814002403,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && ! entry != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ==0) {",
            "score": 99.06890869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >1) {",
            "score": 99.32744891826923,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=6) {",
            "score": 99.29400227864583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >=2) {",
            "score": 99.29400227864583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( col , entry ) >=0) {",
            "score": 99.25958658854167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( col , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry >=0) ) {",
            "score": 99.0648193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry >= 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0, epsilon ) {",
            "score": 99.32713216145834,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compare( entry ,0) >=0) {",
            "score": 99.19981971153847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) && < epsilon ) {",
            "score": 99.10256723257211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) && < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon >=0) {",
            "score": 99.06417846679688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.min( entry ,0, f ) >=0) {",
            "score": 99.36069623161765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry != tableau.getEntry( i , col ) )",
            "score": 99.31570434570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != tableau . get CaMeL Entry ( i , col ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) >= -1) {",
            "score": 99.29338073730469,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >=0) { minRatioPos = i ;",
            "score": 99.28120422363281,
            "correctness": "wrong",
            "tokenized_patch": "if ( epsilon >= 0 ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( entry >=0) { / *=0;",
            "score": 99.10251089242789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { / * = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0.epsilon ) <=0) {",
            "score": 99.3606316061581,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 . epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , exp ) >=0) {",
            "score": 99.325390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , exp ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < rhs ; i ++ )",
            "score": 99.31490071614583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < rhs ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.contains( entry , epsilon ) ) {",
            "score": 99.2926025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . contains ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.<=( entry ,0, epsilon ) ) {",
            "score": 99.28050130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . <= ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.matches( entry ,0, entry ) ) {",
            "score": 99.25267740885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . matches ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { entry =0;",
            "score": 99.1019795735677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { entry = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon >= epsilon ) {",
            "score": 99.05235799153645,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ) -1) {",
            "score": 99.36038028492646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ) - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) <0.0) {",
            "score": 99.3250244140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "for( int i =0; i < entry ; i ++ )",
            "score": 99.3138916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < entry ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon ==0) {",
            "score": 99.1859130859375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0&& entry <=0) {",
            "score": 99.10049438476562,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) >0) {",
            "score": 99.04892985026042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry , epsilon ) >0) {",
            "score": 99.35956887637867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) >0.0) {",
            "score": 99.3250244140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) > 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <=0) { minRatio = rhs / entry ;",
            "score": 99.2798843383789,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 ) { min CaMeL Ratio = rhs / entry ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry , epsilon , epsilon ) ) {",
            "score": 99.24940592447916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ==0) ) {",
            "score": 99.18397874098558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry == 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon !=0) {",
            "score": 99.100341796875,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && epsilon != 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry !=0) ) {",
            "score": 99.0479736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry != 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( entry ) <=0.0) {",
            "score": 99.32455240885416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( entry ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "final String rhs = tableau.getEntry( i , col ) ;",
            "score": 99.31171417236328,
            "correctness": "uncompilable",
            "tokenized_patch": "final String rhs = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry ) { minRatioPos = i ;",
            "score": 99.27781575520834,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( col ,0, epsilon ) ) {",
            "score": 99.24683430989583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( col , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& entry >=0) {",
            "score": 99.09998575846355,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0+ epsilon ) <=0) {",
            "score": 99.35764447380515,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 + epsilon ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ) >0) {",
            "score": 99.35693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=0) { {",
            "score": 99.32415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry , rhs ) >=0) {",
            "score": 99.35625861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( entry ) >=0) {",
            "score": 99.32386192908653,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . floor ( entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >0.0) {",
            "score": 99.09821166992188,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 . 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry <0) {",
            "score": 99.03834533691406,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0) >= ) {",
            "score": 99.32352120535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) >= ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , entry ) <=0)",
            "score": 99.309326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , entry ) <= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean entry = tableau.getEntry( i , col ) ;",
            "score": 99.27386881510417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs , epsilon ) <0) {",
            "score": 99.2422607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.contains( entry ,0) ) {",
            "score": 99.17320838341347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . contains ( entry , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& entry < epsilon ) {",
            "score": 99.0948994954427,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( !( entry ,0, epsilon ) ) {",
            "score": 99.03339092548077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry +1) >=0) {",
            "score": 99.35712747012867,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry + 1 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ) ==0) {",
            "score": 99.32285970052084,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( 0 , entry ) == 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) >0)",
            "score": 99.30921173095703,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ) >=0) {",
            "score": 99.1712176983173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& epsilon <0) {",
            "score": 99.09452311197917,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) <=0) {",
            "score": 99.35400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , 'AS IS') >=0) {",
            "score": 99.32242838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , 'License') >=0) {",
            "score": 99.32242838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , $STRING$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final long entry = tableau.getEntry( i , col ) ;",
            "score": 99.30628204345703,
            "correctness": "uncompilable",
            "tokenized_patch": "final long entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! epsilon ) { minRatioPos = i ;",
            "score": 99.26298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! epsilon ) { min CaMeL Ratio CaMeL Pos = i ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs , epsilon ) >0) {",
            "score": 99.23291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0|| entry <0) {",
            "score": 99.09381103515625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 || entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( entry < epsilon ) >=0) {",
            "score": 99.02718098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) ==0) {",
            "score": 99.35248879825367,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >=0, epsilon ) {",
            "score": 99.32169596354167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatio = i ;",
            "score": 99.25267682756696,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio = i ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "9"
        },
        {
            "patch": "if( Math.equals( entry ==0, epsilon ) ) {",
            "score": 99.23229166666667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry == 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( epsilon ) >=0) {",
            "score": 99.16783728966347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0,0, epsilon ) {",
            "score": 99.09372965494792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( entry < minRatio ) ) {",
            "score": 99.0254375751202,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( MathUtils.isEmpty( entry ) >=0) {",
            "score": 99.35584932215073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Empty ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6) >0) {",
            "score": 99.32140299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2) >0) {",
            "score": 99.32140299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry >=0) {",
            "score": 99.08995564778645,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <0, epsilon ) { {",
            "score": 99.0254239169034,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , epsilon ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , i ) <0) {",
            "score": 99.35197179457721,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , i ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , null ) >0) {",
            "score": 99.32132975260417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , null ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i <0; i ++ )",
            "score": 99.30181477864583,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < 0 ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "char entry = tableau.getEntry( i , col ) ;",
            "score": 99.24815266927084,
            "correctness": "uncompilable",
            "tokenized_patch": "char entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compare( entry , entry ) >=0) {",
            "score": 99.16136756310097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { / / =0;",
            "score": 99.08943997896634,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { / / = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , value ) >=0) {",
            "score": 99.3197021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , value ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = tableau.getData( i , col ) ;",
            "score": 99.3017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Data ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon <=0) {",
            "score": 99.08553059895833,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && epsilon <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) !=0) {",
            "score": 99.01253255208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) != 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=0) { {",
            "score": 99.35491943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon + entry ) >=0) {",
            "score": 99.31944986979167,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon + entry ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "for( int i =0; i < col ; i ++ )",
            "score": 99.2994873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < col ; i ++ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,0, epsilon ) >0) {",
            "score": 99.20277622767857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 , epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon <0) {",
            "score": 99.01071166992188,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) <0) {",
            "score": 99.31890462239583,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "final double entry = tableau.getEntry( i ,0) ;",
            "score": 99.29930877685547,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Entry ( i , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon ) { minRatio = rhs / entry ;",
            "score": 99.24338204520089,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { min CaMeL Ratio = rhs / entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ) { if( entry <0) {",
            "score": 99.0823505108173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ) { if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) -1) {",
            "score": 99.00819905598958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ,6) >=0) {",
            "score": 99.3187255859375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max( entry ,2) >=0) {",
            "score": 99.3187255859375,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( rhs ,0, epsilon ) >=0) {",
            "score": 99.20036969866071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( rhs , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( epsilon < epsilon ) >=0) {",
            "score": 99.00472005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( epsilon < epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) <=0) {",
            "score": 99.31832682291666,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, rhs ) >=0)",
            "score": 99.29851531982422,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , rhs ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String value = tableau.getEntry( i , col ) ;",
            "score": 99.24168294270834,
            "correctness": "uncompilable",
            "tokenized_patch": "String value = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,1, epsilon ) >=0) {",
            "score": 99.18911307198661,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 1 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon ==0) {",
            "score": 99.14188639322917,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0|| epsilon <0) {",
            "score": 99.08062744140625,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 || epsilon < 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry <0|| epsilon >= epsilon ) {",
            "score": 99.00033569335938,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.floor( epsilon ) >=0.6) {",
            "score": 99.31790364583334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.floor( epsilon ) >=0.2) {",
            "score": 99.31790364583334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( epsilon ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry == tableau.getEntry( i , col ) )",
            "score": 99.29730987548828,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == tableau . get CaMeL Entry ( i , col ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0) < epsilon ) {",
            "score": 99.26240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatio = rhs ;",
            "score": 99.24065290178571,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio = rhs ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0|| entry >= minRatio ) {",
            "score": 99.18429129464286,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry !=0|| entry <0) {",
            "score": 99.08029174804688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 || entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.value( entry ,0, epsilon ) <0) {",
            "score": 99.34726131663604,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . value ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, value ) >0) {",
            "score": 99.31651204427084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , value ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) ==0)",
            "score": 99.2968521118164,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return MathUtils.compare( entry ,0, epsilon ) ;",
            "score": 99.23946940104166,
            "correctness": "uncompilable",
            "tokenized_patch": "return Math CaMeL Utils . compare ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( rhs ,0) ) {",
            "score": 99.18195049579327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( rhs , 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry <=0) {",
            "score": 99.13983154296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >=0) >=1) {",
            "score": 99.0797119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) >= 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( entry <0) ) {",
            "score": 98.99579412286931,
            "correctness": "plausible",
            "tokenized_patch": "if ( ! ( entry < 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , epsilon , rhs ) >=0) {",
            "score": 99.34677303538604,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) <=0) {",
            "score": 99.3160888671875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,0) !=0)",
            "score": 99.2959976196289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 0 ) != 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry >= tableau.getHeight( ) ) {",
            "score": 99.2385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry >= tableau . get CaMeL Height ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry > minRatio ) {",
            "score": 99.17942592075893,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry > min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0|| entry ==0) {",
            "score": 99.13590494791667,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 || entry == 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0|| compare <0) {",
            "score": 99.07916259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 || compare < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compareTo( entry , col ) <=0) {",
            "score": 99.34651453354779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( entry ) >=0.6) {",
            "score": 99.31586100260417,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . ceil ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.ceil( entry ) >=0.2) {",
            "score": 99.31586100260417,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . ceil ( entry ) >= 0 . $NUMBER$ ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , epsilon ) < epsilon ) {",
            "score": 99.25570475260416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , epsilon ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { minRatio = i ;",
            "score": 99.23798479352679,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 ) { min CaMeL Ratio = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0|| entry < minRatio ) {",
            "score": 99.17642647879464,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || entry < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( epsilon ) <0) {",
            "score": 99.12928185096153,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon ) { if( entry <0) {",
            "score": 99.07888559194711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { if ( entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0, epsilon >=0) {",
            "score": 98.98471069335938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'AS IS', entry ) >=0) {",
            "score": 99.314892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( 'License', entry ) >=0) {",
            "score": 99.314892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( $STRING$ , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry ,0, epsilon ) {",
            "score": 99.23197798295455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math >0, entry ,0, epsilon ) {",
            "score": 99.17510114397321,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math > 0 , entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& entry ==0) {",
            "score": 99.12661743164062,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry( entry ) >=0) {",
            "score": 99.078857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0, rhs ) >=0) {",
            "score": 99.3462273092831,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 , rhs ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) >0) {",
            "score": 99.31455891927084,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <=0) { minRatio = i ;",
            "score": 99.22107805524554,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 ) { min CaMeL Ratio = i ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0|| entry ==0) {",
            "score": 99.12342325846355,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 || entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) >= entry ) {",
            "score": 98.97493489583333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) >= entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) <0) {",
            "score": 99.31443684895834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0) { minRatio = rhs ;",
            "score": 99.21755545479911,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 ) { min CaMeL Ratio = rhs ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry ,0, epsilon ) <0) {",
            "score": 99.16802106584821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& entry ==0) {",
            "score": 99.12319946289062,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0&& epsilon >0) {",
            "score": 99.07515462239583,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && epsilon > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.floor( epsilon ) <=0.0) {",
            "score": 99.31370442708334,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( epsilon ) <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "return compareTo( entry ,0, epsilon ) ;",
            "score": 99.21112530048077,
            "correctness": "uncompilable",
            "tokenized_patch": "return compare CaMeL To ( entry , 0 , epsilon ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < tableau.getHeight( ) ) {",
            "score": 99.1669921875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < tableau . get CaMeL Height ( ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >0&& entry <=0) {",
            "score": 99.07424926757812,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , col ) ==0) {",
            "score": 99.34268008961396,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , col ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, epsilon ) <=0) {",
            "score": 99.31361490885416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( 0 , epsilon ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry , epsilon ) <0)",
            "score": 99.29253387451172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , epsilon ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math !=0, entry ,0, epsilon ) {",
            "score": 99.16439383370536,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != 0 , entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( compareTo( epsilon ) >=0) {",
            "score": 99.11957256610577,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compare CaMeL To ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&&0< epsilon ) {",
            "score": 99.07372029622395,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && 0 < epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0&& epsilon >= epsilon ) {",
            "score": 98.96256510416667,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && epsilon >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math == compareTo( entry ,0, epsilon ) ) {",
            "score": 99.34186150045956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math == compare CaMeL To ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, epsilon ) )",
            "score": 99.331103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) <=0) {",
            "score": 99.31229654947917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "final double entry = tableau.getValue( i , col ) ;",
            "score": 99.2922592163086,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = tableau . get CaMeL Value ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.compare( entry , epsilon ) ) {",
            "score": 99.24813406808036,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0) { minRatio = rhs ;",
            "score": 99.20846993582589,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 ) { min CaMeL Ratio = rhs ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( rhs , epsilon ) ) {",
            "score": 99.1630108173077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( rhs , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ) <0) {",
            "score": 99.11890587439903,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0,0,0) {",
            "score": 98.96162923177083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , 0 , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , col , col ) >=0) {",
            "score": 99.3409423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col , col ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer entry = tableau.getEntry( i , col ) ;",
            "score": 99.28853352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer entry = tableau . get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >= epsilon ) {",
            "score": 99.247900390625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "final double entry = getEntry( i , col ) ;",
            "score": 99.20710100446429,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = get CaMeL Entry ( i , col ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,6, epsilon ) >=0) {",
            "score": 99.16246686662946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,2, epsilon ) >=0) {",
            "score": 99.16246686662946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , $NUMBER$ , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry , epsilon ) >=0) {",
            "score": 99.07163492838542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) >=0)",
            "score": 99.30538504464286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { minRatio = entry ;",
            "score": 99.20686558314732,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { min CaMeL Ratio = entry ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( entry <0&& entry < epsilon ) {",
            "score": 99.10814412434895,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <=0) -0) {",
            "score": 99.07135009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry <= 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >=0, epsilon >=0) {",
            "score": 98.9569600423177,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon >= 0 , epsilon >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry , entry ) >=0) {",
            "score": 99.32831217447917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( entry ) >0) {",
            "score": 99.30247145432692,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( entry ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( entry >=0&& entry < minRatio ) {",
            "score": 99.20123291015625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry < min CaMeL Ratio ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( entry <0, entry -1) {",
            "score": 99.14126586914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , entry - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& epsilon ==0) {",
            "score": 99.1044921875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry !=0&& entry <=0) {",
            "score": 99.07089233398438,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0&& epsilon >= entry ) {",
            "score": 98.95335896809895,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon >= entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry /6) >=0) {",
            "score": 99.3390754250919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry /2) >=0) {",
            "score": 99.3390754250919,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / $NUMBER$ ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0) < epsilon ) {",
            "score": 99.32491048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 ) < epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) <=0) {",
            "score": 99.3006591796875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compareTo( entry ,1) >=0)",
            "score": 99.28546905517578,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare CaMeL To ( entry , 1 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon < minRatio ) {",
            "score": 99.20061383928571,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && epsilon < min CaMeL Ratio ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.matches( entry , epsilon ) ) {",
            "score": 99.13050255408653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . matches ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry ==0) {",
            "score": 99.104248046875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0|| entry <0) {",
            "score": 99.07059733072917,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 || entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0, epsilon , epsilon ) {",
            "score": 98.9525655110677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , epsilon , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry , entry ) >=0) {",
            "score": 99.3388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry , entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( entry ) >0) {",
            "score": 99.29995492788461,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . ceil ( entry ) > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >0|| entry >0) {",
            "score": 99.0687255859375,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 || entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.max( entry , epsilon ) >=0)",
            "score": 99.29959542410714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0, epsilon ) {",
            "score": 99.12540283203126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0|| entry >0) {",
            "score": 99.06777954101562,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 || entry > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( entry < minRatio ) ) {",
            "score": 98.94778442382812,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < min CaMeL Ratio ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , i , epsilon ) <0) {",
            "score": 99.33840762867646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , i , epsilon ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,0L ) >=0) {",
            "score": 99.32147979736328,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 L ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >0) { {",
            "score": 99.29914202008929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) > 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! entry.equals(0, epsilon ) ) {",
            "score": 99.18352399553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! entry . equals ( 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry , -1>= minRatio ) {",
            "score": 99.12289663461539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , - 1 >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0.0) {",
            "score": 99.06646118164062,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0, minRatio ) {",
            "score": 98.94613647460938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry /1) <0) {",
            "score": 99.33831428079044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry / 1 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) <1) {",
            "score": 99.29417067307692,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) < 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >0)",
            "score": 99.18199811662946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0|| entry >=0) {",
            "score": 99.09767659505208,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry == 0 || entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( entry >=0) >= epsilon ) {",
            "score": 99.06634521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0, epsilon , epsilon ) {",
            "score": 98.94336954752605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , epsilon , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,0, epsilon ) >= minRatio ) {",
            "score": 99.33759307861328,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 , epsilon ) >= min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'AS IS') >=0)",
            "score": 99.29313441685268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , 'License') >=0)",
            "score": 99.29313441685268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $STRING$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.contains( rhs ,0, epsilon ) ) {",
            "score": 99.26966145833333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . contains ( rhs , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { minRatio = i ;",
            "score": 99.17905099051339,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 ) { min CaMeL Ratio = i ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "9"
        },
        {
            "patch": "if( Math.equals( epsilon , entry ) ) {",
            "score": 99.12148813100961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( epsilon , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& epsilon ==0) {",
            "score": 99.09077962239583,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0&& rhs <0) {",
            "score": 98.9385274251302,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && rhs < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , value ) >=0)",
            "score": 99.29273332868304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , value ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) { minRatio = rhs ;",
            "score": 99.17068045479911,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 ) { min CaMeL Ratio = rhs ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.< entry ,0, epsilon ) {",
            "score": 99.11327185997597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . < entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon !=0) {",
            "score": 99.08961995442708,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0|| entry !=0) {",
            "score": 99.06417846679688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || entry != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.round( entry ) >=6) {",
            "score": 99.28863994891827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.round( entry ) >=2) {",
            "score": 99.28863994891827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( entry <=0&& epsilon < minRatio ) {",
            "score": 99.17021833147321,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && epsilon < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ,0, epsilon ) {",
            "score": 99.11158447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0, entry >0) {",
            "score": 99.08367919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& entry !=0) {",
            "score": 99.06349690755208,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && entry != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.abs( entry ) <=1) {",
            "score": 99.2880389873798,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) <= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.equals( entry , minRatio ) ) {",
            "score": 99.26312662760417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , min CaMeL Ratio ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry <0) ) {",
            "score": 99.10594764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry < 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& epsilon == epsilon ) {",
            "score": 99.08345540364583,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && epsilon == epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0, entry >=0) {",
            "score": 99.06138102213542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , entry >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if((0, epsilon ) >=0) {",
            "score": 98.93477376302083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , col ) <0) {",
            "score": 99.32822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ,0) <= epsilon ) {",
            "score": 99.311572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 ) <= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( epsilon ) >=0) {",
            "score": 99.28717510516827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . ceil ( epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( !( entry >=0) ) {",
            "score": 99.15849165482955,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( entry >= 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( double ) entry ,0, epsilon ) {",
            "score": 99.10304612379808,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( double ) entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| entry < epsilon ) {",
            "score": 99.08135986328125,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0&& compare >0) {",
            "score": 99.05958048502605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && compare > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) != epsilon ) {",
            "score": 98.93359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) != epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! Math.min( entry ,0, epsilon ) ) {",
            "score": 99.31107330322266,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . min ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare(0, entry ) >0)",
            "score": 99.285888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( 0 , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if((( double ) entry ) >=0) {",
            "score": 99.10003192608173,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( ( double ) entry ) >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0) { / =0;",
            "score": 99.05770874023438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { / = 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry < epsilon ) >0) {",
            "score": 98.93328857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < epsilon ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.0f ) {",
            "score": 99.31051635742188,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . 0 f ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.max( epsilon , epsilon ) >=0)",
            "score": 99.2857666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.( entry ,0, epsilon ) >=0)",
            "score": 99.25267740885417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { if( epsilon ) {",
            "score": 99.14285043569711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { if ( epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) >= epsilon ) {",
            "score": 99.13973999023438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,6) ) {",
            "score": 99.09322415865384,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,2) ) {",
            "score": 99.09322415865384,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , $NUMBER$ ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&&0== epsilon ) {",
            "score": 99.07921346028645,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && 0 == epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( rhs , entry ) <0) {",
            "score": 99.31979166666666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , entry ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >=0) { {",
            "score": 99.28465053013393,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . round ( entry ) >= 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( epsilon , epsilon ) ) {",
            "score": 99.09205040564903,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( epsilon , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& entry >0) {",
            "score": 99.0573221842448,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && entry > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0&& rhs < epsilon ) {",
            "score": 98.9320780436198,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && rhs < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.set( entry ,0, epsilon ) ) {",
            "score": 99.319140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . set ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >= epsilon ) {",
            "score": 99.30962665264423,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.abs( entry ) !=0) {",
            "score": 99.28460223858173,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry < epsilon ) { if( epsilon ) {",
            "score": 99.12997671274039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < epsilon ) { if ( epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&& epsilon == epsilon ) {",
            "score": 99.07652791341145,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon == epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0) { } else {",
            "score": 99.0567626953125,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 ) { } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) ) { {",
            "score": 98.93109685724431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils <( entry ,0, epsilon ) ) {",
            "score": 99.31481170654297,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils < ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >= epsilon ) {",
            "score": 99.30922288161058,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.abs( epsilon ) >1) {",
            "score": 99.2840106670673,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( rhs ,0, epsilon ) )",
            "score": 99.24345179966518,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( rhs , 0 , epsilon ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry(0, epsilon ) >= epsilon ) {",
            "score": 99.12840857872597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( 0 , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.compareTo( entry ,",
            "score": 99.12412672776442,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . compare CaMeL To ( entry ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0|| entry <0) {",
            "score": 99.07544962565105,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 || entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >0&& epsilon <0) {",
            "score": 99.05598958333333,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry , new ) >=0)",
            "score": 99.28396170479911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , new ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,0) >=0) {",
            "score": 99.07825724283855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& entry >=0) {",
            "score": 99.07460530598958,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <=0&& entry <0) {",
            "score": 99.05592854817708,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && entry < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry <0) <=0) {",
            "score": 98.92767333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) >=0.0f ) {",
            "score": 99.30753326416016,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) >= 0 . 0 f ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( Math.compare( epsilon , entry ) >0)",
            "score": 99.27851213727679,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( epsilon , entry ) > 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0&&0== epsilon ) {",
            "score": 99.07323201497395,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && 0 == epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >0|| entry >=0) {",
            "score": 99.05410766601562,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 || entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.0) { {",
            "score": 99.3071060180664,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon , entry ) ) {",
            "score": 99.27835787259616,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < tableau.getHeight( ) -1)",
            "score": 99.23662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < tableau . get CaMeL Height ( ) - 1 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >= minRatio ) {",
            "score": 99.07557373046875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compare( entry ,0, entry ) ) {",
            "score": 99.30435180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) >=0)",
            "score": 99.2781982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( equals( entry ,0, epsilon ) ) {",
            "score": 99.11773212139423,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| epsilon >0) {",
            "score": 99.0530497233073,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || epsilon > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( epsilon <0) >=0) {",
            "score": 98.9197285970052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( epsilon < 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.isEmpty( entry ) ) {",
            "score": 99.30458170572916,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . is CaMeL Empty ( entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,1) <0)",
            "score": 99.27663748604911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 1 ) < 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs ,0) <0) {",
            "score": 99.22894694010417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0,0, epsilon ) {",
            "score": 99.06723022460938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry != 0 , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , f ) >=0) {",
            "score": 99.304248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , f ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >= entry ) {",
            "score": 99.27573805588942,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry ==0&& epsilon !=0) {",
            "score": 99.11240641276042,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && epsilon != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0|| entry >= epsilon ) {",
            "score": 99.06158447265625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( entry <0) == epsilon ) {",
            "score": 98.91839599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) == epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , i ) >=0) {",
            "score": 99.3009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , i ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min(0, entry ) >=0)",
            "score": 99.27285330636161,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( 0 , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry ,0, epsilon ) >=0)",
            "score": 99.20859938401442,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 , epsilon ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >0) >= epsilon ) {",
            "score": 99.10205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry > 0 ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( entry ==0) ) {",
            "score": 99.0887451171875,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( entry == 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0|| entry >= epsilon ) {",
            "score": 99.06093343098958,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 || entry >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( entry <0, epsilon ) ) {",
            "score": 99.06089274088542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0|| entry >0) {",
            "score": 99.04897054036458,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry == 0 || entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >= minRatioPos ) {",
            "score": 98.91693115234375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "13"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >= -1) {",
            "score": 99.29902648925781,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( epsilon ) >0) {",
            "score": 99.27195387620192,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry < epsilon ) >= epsilon ) {",
            "score": 99.09869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& entry ==0) {",
            "score": 99.05826822916667,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >=0) <=0) {",
            "score": 99.048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) <= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,6) >=0)",
            "score": 99.27010672433036,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry ,2) >=0)",
            "score": 99.27010672433036,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , $NUMBER$ ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& epsilon <0) {",
            "score": 99.08119710286458,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry !=0|| entry >=0) {",
            "score": 99.04874674479167,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 || entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math >0, entry ,0) {",
            "score": 99.04579671223958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math > 0 , entry , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) >= rhs ) {",
            "score": 98.91353352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) >= rhs ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.! entry( entry ,0, epsilon ) ) {",
            "score": 99.29705047607422,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! entry ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <=1) {",
            "score": 99.2662353515625,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) <= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <=0|| entry >=0) {",
            "score": 99.05523681640625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 || entry >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry ==0&& entry <=0) {",
            "score": 99.04868570963542,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math != entry ,0, epsilon ) {",
            "score": 99.04019165039062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) <0) {",
            "score": 98.912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry < 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils equals( entry ,0, epsilon ) ) {",
            "score": 99.2967300415039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils equals ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) > epsilon ) {",
            "score": 99.2650615985577,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry <=0) { return null ; }",
            "score": 99.06693522135417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry <= 0 ) { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0, entry , epsilon ) {",
            "score": 99.0482889811198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , entry , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0|| epsilon >=0) {",
            "score": 98.91161092122395,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 || epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , col ) >0) {",
            "score": 99.29248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , col ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) ==0) {",
            "score": 99.26296762319711,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry ,0, rhs ) )",
            "score": 99.17277308872768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , rhs ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >= epsilon ) >= epsilon ) {",
            "score": 99.07956949869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { return null ; }",
            "score": 99.06689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& epsilon >=0) {",
            "score": 99.0546366373698,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0&& epsilon <=0) {",
            "score": 99.04757690429688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 && epsilon <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0, entry >0) {",
            "score": 99.03190104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 , entry > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < minRatio ) { {",
            "score": 98.91083318536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < min CaMeL Ratio ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) <1) {",
            "score": 99.26194411057692,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) < 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.abs( entry ,0) >=0)",
            "score": 99.17116001674107,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) >= entry ) {",
            "score": 99.04740397135417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) >= entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon >= entry ) {",
            "score": 98.9097188313802,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon >= entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( entry ) <= epsilon ) {",
            "score": 99.29710975060097,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) <= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( rhs , entry ) >=0)",
            "score": 99.16999162946429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , entry ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry( epsilon ) >=0) {",
            "score": 99.07935680042614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0|| entry <=0) {",
            "score": 99.0525410970052,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 || entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0) { */ else {",
            "score": 99.04703776041667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { * / else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils < minRatio ) {",
            "score": 99.02835083007812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon < minRatioPos ) {",
            "score": 98.9080301920573,
            "correctness": "wrong",
            "tokenized_patch": "if ( epsilon < min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "13"
        },
        {
            "patch": "if( Math.abs( entry ) < epsilon ) {",
            "score": 99.25911771334134,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "for( int i =0; i < entry )",
            "score": 99.07889811197917,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < entry )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! compare( entry , epsilon ) ) {",
            "score": 99.051513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! compare ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& compare >=0) {",
            "score": 99.04652913411458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 && compare >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , rhs ) >0) {",
            "score": 99.28048502604166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , rhs ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( epsilon , entry ) ) {",
            "score": 99.25774676983173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . min ( epsilon , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry ,0, entry ) )",
            "score": 99.16382707868304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , 0 , entry ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry( epsilon ) >= epsilon ) {",
            "score": 99.07408558238636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( !( entry >0) ) {",
            "score": 99.06147904829545,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( entry > 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry ==0) >0) {",
            "score": 99.04566446940105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry == 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rhs < minRatio ) {",
            "score": 98.90474243164063,
            "correctness": "wrong",
            "tokenized_patch": "if ( rhs < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.round( entry ) >1) {",
            "score": 99.25748384915866,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) > 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( entry >0&& epsilon ==0) {",
            "score": 99.0725606282552,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > 0 && epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.TRUE < minRatio ) {",
            "score": 99.02015177408855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . TRUE < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( ! epsilon ) >=0) {",
            "score": 98.88451038707386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( ! epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon.equals( epsilon ) >=0) {",
            "score": 99.2538311298077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon . equals ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = rhs / entry / entry ;",
            "score": 99.14924760298295,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = rhs / entry / entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0|| epsilon ==0) {",
            "score": 99.06929524739583,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 || epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry >0) >0) {",
            "score": 99.04482014973958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry > 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( rhs , epsilon ) >=0) {",
            "score": 99.01963297526042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( rhs , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon < minRatio ) {",
            "score": 98.8756103515625,
            "correctness": "wrong",
            "tokenized_patch": "if ( epsilon < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.round( epsilon ) >=6) {",
            "score": 99.2529296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.round( epsilon ) >=2) {",
            "score": 99.2529296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( entry , epsilon ) >= epsilon ) {",
            "score": 99.06505330403645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0) { return 0;",
            "score": 99.0431795987216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0,0, epsilon ) {",
            "score": 99.01788330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0, epsilon ) { {",
            "score": 98.85955255681819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , epsilon ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry +1) >= epsilon ) {",
            "score": 99.29165852864584,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry + 1 ) >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( MathUtils.< entry ,0, epsilon ) {",
            "score": 99.26239420572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . < entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >= max ) {",
            "score": 99.24652569110577,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) >= max ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < entry ) {",
            "score": 99.14259690504808,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < entry ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& entry <=0) {",
            "score": 99.04086303710938,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( double ) entry >=0) {",
            "score": 98.84858842329545,
            "correctness": "plausible",
            "tokenized_patch": "if ( ( double ) entry >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=6) {",
            "score": 99.26142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >=2) {",
            "score": 99.26142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) >= $NUMBER$ ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( epsilon ) >= entry ) {",
            "score": 99.24508901742789,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( epsilon ) >= entry ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( entry , rhs ) ) {",
            "score": 99.13629619891827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| epsilon ==0) {",
            "score": 99.0585428873698,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( !( entry <=0) ) {",
            "score": 99.0470858487216,
            "correctness": "plausible",
            "tokenized_patch": "if ( ! ( entry <= 0 ) ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry <=0|| entry <=0) {",
            "score": 99.03952026367188,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 || entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math > minRatioPos ) {",
            "score": 99.00973510742188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math > min CaMeL Ratio CaMeL Pos ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry <0) ) {",
            "score": 98.84368286132812,
            "correctness": "wrong",
            "tokenized_patch": "if ( ( entry < 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math( entry ,0, epsilon ) >=0) {",
            "score": 99.260009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math ( entry , 0 , epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry !=0) >0) {",
            "score": 99.04049682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry != 0 ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math > minRatio ) {",
            "score": 99.0084716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math > min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry , entry ) >= epsilon ) {",
            "score": 99.28710123697917,
            "correctness": "plausible",
            "tokenized_patch": "if ( Math . min ( entry , entry ) >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.round( epsilon ) >=1) {",
            "score": 99.24215932992789,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( epsilon ) >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.equals( rhs , entry ) ) {",
            "score": 99.1148681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( rhs , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& epsilon <0) {",
            "score": 99.04027303059895,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && epsilon < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0&&0>= epsilon ) {",
            "score": 99.03794352213542,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && 0 >= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry > minRatio ) {",
            "score": 99.00665893554688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry > min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0) { {",
            "score": 98.83472357855902,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.1) {",
            "score": 99.28689778645834,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if(( entry > epsilon ) >= epsilon ) {",
            "score": 99.05232747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry > epsilon ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0&& epsilon >0) {",
            "score": 99.03969319661458,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 && epsilon > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry !=0|| entry ==0) {",
            "score": 99.03696695963542,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 || entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math < entry ,0, epsilon ) {",
            "score": 99.00521850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math < entry , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon >= minRatio ) {",
            "score": 98.8119873046875,
            "correctness": "wrong",
            "tokenized_patch": "if ( epsilon >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.abs( entry >=0.0) ) {",
            "score": 99.28584798177083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry >= 0 . 0 ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ,0,0, epsilon ) {",
            "score": 99.03837076822917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , 0 , 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& entry ==0) {",
            "score": 99.03643798828125,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math !=0, entry ,0) {",
            "score": 99.00426228841145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math != 0 , entry , 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( MathUtils.abs( entry ) >= epsilon ) {",
            "score": 99.2857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math CaMeL Utils . abs ( entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( rhs , entry ) >0) {",
            "score": 99.25274251302083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( rhs , entry ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.ceil( entry ) <0) {",
            "score": 99.2324688251202,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . ceil ( entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <=0|| entry >0) {",
            "score": 99.03635660807292,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 || entry > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >0&& epsilon >=0) {",
            "score": 99.03570556640625,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 && epsilon >= 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( Math.abs( entry ) >=0.epsilon ) {",
            "score": 99.28238932291667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . abs ( entry ) >= 0 . epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.compare( entry , entry ) <1) {",
            "score": 99.25230305989584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) < 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.round( entry ) ==0) {",
            "score": 99.2313701923077,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . round ( entry ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.compare( entry ,0, epsilon ;",
            "score": 99.0958721454327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , 0 , epsilon ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0&& epsilon >=0) {",
            "score": 99.03487141927083,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 && epsilon >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry !=0&& epsilon >0) {",
            "score": 99.0341084798177,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && epsilon > 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0, entry <0) {",
            "score": 99.03408813476562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , entry < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ,0, minRatio ) {",
            "score": 99.00076293945312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , 0 , min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) <= epsilon ) {",
            "score": 99.28006998697917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) <= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.!( entry ,0, epsilon ) ) {",
            "score": 99.25205891927084,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . ! ( entry , 0 , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( epsilon ) >=0) {",
            "score": 99.22999924879808,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( epsilon ) >= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0) { return null ; }",
            "score": 99.03465779622395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry >=0) <0) {",
            "score": 99.03334554036458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry >= 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0|| entry < epsilon ) {",
            "score": 99.03068033854167,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 || entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if(( rhs ,0) >=0) {",
            "score": 98.99922688802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( rhs , 0 ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.min( entry ,0) < epsilon ) {",
            "score": 99.27977701822917,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , 0 ) < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , i ) <0) {",
            "score": 99.2507080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , i ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { } else {",
            "score": 99.0415371981534,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry < 0 ) { } else {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0) { return 0; }",
            "score": 99.03285725911458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { return 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0, entry -1) {",
            "score": 98.99314371744792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , entry - 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( value < minRatio ) {",
            "score": 98.7593994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( value < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( epsilon ) >=0) {",
            "score": 99.22830904447116,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( epsilon ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry =0/ entry / entry ;",
            "score": 99.0524569424716,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = 0 / entry / entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( int i =0; i < epsilon )",
            "score": 99.03870646158855,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( int i = 0 ; i < epsilon )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0.0) {",
            "score": 99.0314208984375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <= minRatio ) {",
            "score": 98.75869140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.compare( entry , entry ) >1) {",
            "score": 99.24737141927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . compare ( entry , entry ) > 1 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.abs( entry ) >6) {",
            "score": 99.22788649338942,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( Math.abs( entry ) >2) {",
            "score": 99.22788649338942,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . abs ( entry ) > $NUMBER$ ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( entry ,0, epsilon >0) {",
            "score": 99.04358927408855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , 0 , epsilon > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( entry !=0) -0) {",
            "score": 99.0266621907552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry != 0 ) - 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry >=1) {",
            "score": 99.02566528320312,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry >= 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( !( entry !=0) ) {",
            "score": 98.9881258877841,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! ( entry != 0 ) ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0, epsilon ) {",
            "score": 98.75584106445312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.floor( entry ) <0) {",
            "score": 99.22321026141827,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . floor ( entry ) < 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry >=0&& entry >= epsilon ) {",
            "score": 99.02503458658855,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry >= 0 && entry >= epsilon ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( entry >=0) { ***/",
            "score": 99.02431233723958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry >= 0 ) { * * * /",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ,0, epsilon ) { {",
            "score": 98.97173517400569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry , 0 , epsilon ) { {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(0< minRatio ) {",
            "score": 98.69786376953125,
            "correctness": "wrong",
            "tokenized_patch": "if ( 0 < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( Math.contains( entry ,0, rhs ) ) {",
            "score": 99.2435791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . contains ( entry , 0 , rhs ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max(0, entry ) ) {",
            "score": 99.21873121995192,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( 0 , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry !=0&& epsilon ==0) {",
            "score": 99.03602091471355,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry != 0 && epsilon == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <=0|| entry ==0) {",
            "score": 99.02459716796875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 || entry == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0) { return 0;",
            "score": 99.02308238636364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0, epsilon ) {",
            "score": 98.95517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math < minRatio ) {",
            "score": 98.69293823242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math < min CaMeL Ratio ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.max( entry ) >=0) {",
            "score": 99.21749173677884,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . max ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0&& entry !=0) {",
            "score": 99.0233154296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 && entry != 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0) { } else {",
            "score": 99.0169677734375,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 ) { } else {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( entry >=0.1) {",
            "score": 99.01550903320313,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 . 1 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if(( entry ,0) <0) {",
            "score": 99.00238037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 ) < 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0, epsilon ) {",
            "score": 98.68446655273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry <= 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.NaN( entry ) >= epsilon ) {",
            "score": 99.2714111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . Na CaMeL N ( entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >=0&& entry <= epsilon ) {",
            "score": 99.0230000813802,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry >= 0 && entry <= epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry <0) { return 0; }",
            "score": 99.01475016276042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { return 0 ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final double entry = rhs + entry / entry ;",
            "score": 98.98534046519886,
            "correctness": "uncompilable",
            "tokenized_patch": "final double entry = rhs + entry / entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0.1) {",
            "score": 98.68146362304688,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < 0 . 1 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( Math.min( entry , epsilon ) ==0) {",
            "score": 99.26986490885416,
            "correctness": "wrong",
            "tokenized_patch": "if ( Math . min ( entry , epsilon ) == 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry ==0.0) {",
            "score": 99.01199951171876,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry == 0 . 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( entry( entry ) >= epsilon ) {",
            "score": 99.00942160866477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry ( entry ) >= epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon ) { if( epsilon ) {",
            "score": 99.00114302201705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ) { if ( epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( value <0, epsilon ) {",
            "score": 98.67451782226563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( value < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon( entry ) >=0) {",
            "score": 99.01094193892045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ( entry ) >= 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( epsilon( entry , epsilon ) ) {",
            "score": 98.99821333451705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( epsilon ( entry , epsilon ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < epsilon ) {",
            "score": 98.66899108886719,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry < epsilon ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "final double rhs = rhs / entry / entry ;",
            "score": 98.96628639914773,
            "correctness": "uncompilable",
            "tokenized_patch": "final double rhs = rhs / entry / entry ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( col < minRatio ) {",
            "score": 98.87747192382812,
            "correctness": "wrong",
            "tokenized_patch": "if ( col < min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( rhs >= minRatio ) {",
            "score": 98.66219482421874,
            "correctness": "wrong",
            "tokenized_patch": "if ( rhs >= min CaMeL Ratio ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        },
        {
            "patch": "if( ! Math.compare( entry , entry ) ) {",
            "score": 99.18332345145089,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Math . compare ( entry , entry ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0) {",
            "score": 99.00493621826172,
            "correctness": "plausible",
            "tokenized_patch": "if ( entry > 0 ) {",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if(( entry ,0) >=0)",
            "score": 98.96302379261364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( entry , 0 ) >= 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry >0, epsilon ) {",
            "score": 98.8774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry > 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( rhs <0, epsilon ) {",
            "score": 98.6601318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( rhs < 0 , epsilon ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Math.equals( entry , col ) ) {",
            "score": 99.15166766826923,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Math . equals ( entry , col ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry ==0) { return 0;",
            "score": 98.99022327769886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry == 0 ) { return 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <0) { case0:",
            "score": 98.96315696022727,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < 0 ) { case 0 :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry < minRatioPos )",
            "score": 98.93051979758523,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( entry < min CaMeL Ratio CaMeL Pos )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( entry <=0) {",
            "score": 98.64299011230469,
            "correctness": "wrong",
            "tokenized_patch": "if ( entry <= 0 ) {",
            "failed_triggering": "1/1",
            "failed_non_triggering": "12"
        }
    ]
}